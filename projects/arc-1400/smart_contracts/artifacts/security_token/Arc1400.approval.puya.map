{
  "version": 3,
  "sources": [
    "C:/Users/scholtz/source/repos/scholtz/arc-1400/projects/arc-1400/smart_contracts/security_token/arc1400.algo.ts",
    "C:/Users/scholtz/source/repos/scholtz/arc-1400/projects/arc-1400/smart_contracts/security_token/arc1410.algo.ts",
    "C:/Users/scholtz/source/repos/scholtz/arc-1400/projects/arc-1400/smart_contracts/security_token/arc1594.algo.ts",
    "C:/Users/scholtz/source/repos/scholtz/arc-1400/projects/arc-1400/smart_contracts/security_token/arc1643.algo.ts",
    "C:/Users/scholtz/source/repos/scholtz/arc-1400/projects/arc-1400/smart_contracts/security_token/arc1644.algo.ts",
    "C:/Users/scholtz/source/repos/scholtz/arc-1400/projects/arc-1400/smart_contracts/security_token/arc200.algo.ts",
    "C:/Users/scholtz/source/repos/scholtz/arc-1400/projects/arc-1400/smart_contracts/security_token/arc88.algo.ts"
  ],
  "mappingsiGG;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;ANxEH;;;AMwEG;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;ANpDH;;;AMoDG;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AN5CH;;;AM4CG;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;ANnCH;;;AMmCG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AD8IA;;AAAA;AAAA;AAAA;;AAAA;AL3KH;;;AAAA;;;AK2KG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AL/JH;;;AAAA;;;AK+JG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AL9IH;;;AAAA;;;AAAA;;;AK8IG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;ALrHH;;;AKqHG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AJqVA;;AAAA;AAAA;AAAA;;AAAA;ADjaH;;;AAAA;;;AAAA;;;AAAA;;;ACiaG;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;ADlZH;;;AAAA;;;AAAA;;;ACkZG;;;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;ADzXH;;;AAAA;;;AAAA;;;AAAA;;;ACyXG;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AD7WH;;;AAAA;;;AAAA;;;AC6WG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;ADjWH;;;AAAA;;;AAAA;;;AAAA;;;ACiWG;;;AAAA;;AAzLA;;AAAA;AAAA;AAAA;;AAAA;ADxKH;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;ACwKG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA9BA;;AAAA;AAAA;AAAA;;AAAA;AD1IH;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AC0IG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;ADjIH;;;AAAA;;;AAAA;;;ACiIG;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AD1HH;;;AAAA;;;AAAA;;;AC0HG;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AD5GH;;;AAAA;;;AAAA;;;AC4GG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;ADrGH;;;AAAA;;;ACqGG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;ADvFH;;;AAAA;;;AAAA;;;AAAA;;;ACuFG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;ADxEH;;;AAAA;;;ACwEG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AD/DH;;;AAAA;;;AC+DG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;ACiBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AFpEH;;;AAAA;;;AAAA;;;AAAA;;;AEoEG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AF5DH;;;AAAA;;;AAAA;;;AE4DG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AFjDH;;;AAAA;;;AEiDG;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AFtCH;;;AAAA;;;AAAA;;;AEsCG;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AF5BH;;;AAAA;;;AAAA;;;AE4BG;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AFrBH;;;AEqBG;;;AAAA;;ACsCA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AHhDH;;;AGgDG;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AH1CH;;;AG0CG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AH5BH;;;AAAA;;;AAAA;;;AG4BG;;;AAAA;;AC6HA;;AAAA;AAAA;AAAA;;AAAA;AJzJH;;;AAAA;;;AAAA;;;AIyJG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAnCA;;AAAA;AAAA;AAAA;;AAAA;AJtHH;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AIsHG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AJnGH;;;AImGG;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AJ7FH;;;AI6FG;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AJ/EH;;;AI+EG;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AJpEH;;;AIoEG;;;AAAA;;AJhDD;;AAAA;AAAA;AAAA;;AAAA;AApBF;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAoBE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAJF;;;AAAA;;;AAAA;;;AAAA;;;AAIE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIE;;;AACiC;;AAExB;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAOL;;AACA;AACA;;AATK;;;AAAP;AAaF;;;AAWa;;AAAkB;;AAAtB;AAAP;AACY;;AAAA;;;AAAO;AAAnB;AAAA;AAC6B;AAAtB;AAAP;AACc;;AAAA;;;AAAO;AAArB;AAAA;AAC+B;;AAAxB;AAAP;AKUgD;AAAA;ALTvB;AAAA;;AAAlB;AAAP;AAE4C;;AAA5C;;;AKL6C;;;ALO7C;;AAAA;AKH+C;;;ALI/C;;AAAA;AKIgD;ALHhD;;AAAA;AKD2C;;;ALE3C;;AAAA;AEnCsD;;AFqCxB;;AAA9B;AAE+B;;AKAwB;;AAAA;;AAAA;ALCvD;;AAAA;AACoD;;AAA/C;AAAA;AAAA;;AAAA;AAAL;;AAAA;AAAA;AAAA;AIxB2D;;AJ2B3D;;AAAA;AI1B0D;;AJ2B1D;;AAAA;AI1BkE;;AJ2BlE;;AAAA;AI1B0E;;AJ2B3B;;AAA/C;AI1B4E;;AJ2B5E;;AAAA;AAEQ;;AAAJ;;AAAA;AAAJ;;;AACE;;AAAA;;;AAGK;;AAAP;AIzBgD;;AAAzC;;;;AAAkD;AAAW;AAA7D;AAAP;;AAZ2D;AAAA;;AAgB5B;AAAA;;AAA/B;AAC4B;;AAjB+B;AAAA;;AAAA;AAAA;AAiBpD;AAAP;AAhB0D;AAAA;;AAiBzB;AAAA;;AAA1B;;;AAjBmD;AAAA;;AAAA;AAAA;;AAiBmB;AAAW;AAA3C;AAAtC;;;;AAAP;;;;;;AAGF;;;AAnBoE;AAAA;;AAoB5B;AAAA;;AAAlC;;;AApB8D;AAAA;;AAAA;AAAA;;AAoBwB;AAAW;AAAnD;AAA9C;;;AACmB;;AAAA;;;AAAO;AAA5B;;AAnB0E;AAAA;;AAyBjC;AAAA;;AAAzC;;;AAzB0E;AAAA;;AAAA;AAAA;AA0B3B;AAD/C;;;AA1BwE;AAAA;;AA6B7B;AAAA;;AAA3C;;;AA7BwE;AAAA;;AAAA;AAAA;AA8BZ;AA7Bc;AAAA;;AAAA;AAAA;AA8BV;AACtB;;AAAxB;AAA+B;AAC7B;;AAAA;AAAX;AAAP;AAEqE;;AAAxB;AAnCyB;;AAmCxE;AAAA;;AAKJ;;;;AAEE;;;AA7C2D;AAAA;;AA8CvB;AAAA;;AAAxB;;;AA9C+C;AAAA;;AAAA;AAAA;;;AAAA;;AA+C3D;;AAAA;AA9C0D;AAAA;;AA+C3B;AAAA;;AAA3B;;;AA/CsD;;AAgDtB;;AAAlC;AAEwB;;AAAA;;AAAA;AAA1B;;;;;;AAAA;AAAA;AAAA;;AAL+E;;;;;;AAQjF;;;AAEE;;;AAES;;;AAAA;AAAT;;;AAzD0D;;AA0DxD;;AAAA;;AA1DwD;AAAA;;AA6DzB;AAAA;;AAA3B;;;AA7DoD;AAAA;;AAAA;AAAA;;AA6DmB;AAAW;AAA3C;AAAvC;;;AA7DoD;;AA8DtD;;AAAA;;AAKN;;;AAEE;;;AApEkE;;AAqElE;;AAAA;;AAGF;;;AAEE;;;AAxE4E;;AAyE5E;;AAAA;;AA5E0D;AAAA;;AAmF9B;AAAA;;AAA1B;;;AAnFwD;AAAA;;AAAA;AAAA;;AAoFxB;AAAW;AAA3C;AADA;;;AApFyD;AAAA;;AAsFjC;AAAA;;AAFxB;;;AAIO;;;;;;;;;;AAAP;AAEK;;AAAP;AAGF;;;AAQE;;;AACA;;AAAA;;;AACA;;;AAEO;;AAAA;;AAAA;AAAP;AACM;;AAAU;;;AACT;AAAA;;AAAA;AAAP;AAE8C;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;ACvF2B;;AAAA;;AAAA;ADuFvD;AAAA;AACM;;AAAQ;;;AAC8B;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;ACzF6B;;AAAA;;AAAA;ADyFvD;AAAA;AAKqC;;AADnC;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAzHe;;;AAyHf;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAFF;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAY6B;;AAAtB;AAAP;AAGF;;;AAME;;;AACA;;AAAA;;;AACA;;;AACM;;AAAU;;;AACT;AAAA;;AAAA;AAAP;AAC8C;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;ACrH2B;;AAAA;;AAAA;ADqHvD;AAAA;ACvHgD;AAAA;AAAA;AAAA;ADwHL;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;ACxHuB;ADwHhD;AAAA;AAKqC;;AADnC;;AAAA;AAAA;;AAAA;AAtJe;;;AAsJf;AAAA;;;;AAAA;AAAA;;AAAA;AAFF;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAU6B;;AAAtB;AAAP;ADzJgD;;AAAzC;;;;AAAkD;AAAW;AAA7D;AAAP;;AAIF;;;AAEE;;;AACkB;;AAAA;AAAA;AAAlB;AACwF;;AAAxB;AAApD;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAZqE;;AAAA;;AAAA;AAajF;AAAA;;AAAA;AAAA;AAZoD;;AAa7B;AAAA;;AAAnB;;;AACyB;;AAAA;;AAAA;AAAA;;;AAduB;;AAclD;;AAdkD;;AAclD;AAAA;AAIsB;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAxB;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;AAlBoD;;AAgBF;AAAA;AAAO;;AAAA;;AAAA;AAAA;;;AAA7B;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAhBwB;;AAgBlD;;AAhBkD;;AAgBlD;AAAA;;;;AAKJ;;;AAtBmF;;AAAA;;AAAA;AAwBrD;AAAA;AAAA;;AAA5B;AAC4B;AAAA;AAA5B;AAGF;;;AAEE;;;AA9BiF;;AAAA;;AAAA;AA+BrD;AAAA;AAAA;;AAA5B;AACmC;AAAA;AAAA;AACd;AAAA;;AAGyD;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAiB;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAvE;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAxB;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;AAnCoD;;AA0C3B;AAAA;AAAzB;AD/CgD;;AAAzC;;;;AAAkD;AAAW;AAA7D;AAAP;;AAKF;;;AAEE;;;AAfsD;;AAgBtD;;AAAA;;AAIF;;;AAEE;;;AACO;;AAAgB;;AAAhB;AAAP;AAvBsD;AAAA;;AAwBzB;AAAA;;AAAtB;;;AAxB+C;AAAA;;AAAA;AAAA;;AAwBe;AAAW;AAAvC;AAAlC;;;;AAAP;AAEA;;AAAoC;AAApC;;AAAA;;AAAA;;;AACc;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAd;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;;;;;AAGF;;;;AAEsC;;AAA9B;AACC;;AAAA;AAAA;;;AAAmB;;AAAA;;;;AAA4B;AAAW;AAAvC;AAAnB;;;;AAAP;AACO;;AAAgB;;AAAhB;AAAP;AGKuD;;AAAA;;AAAA;AAAA;AAAA;;AHJ5B;AAAA;;AAApB;;;AAAkD;;AAAA;AAAA;AAApB;;AAAA;AAA9B;;;;AAAP;AACkE;;AAAA;AAAA;AAAA;AAApB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA5B;;AAAA;AAAA;AGCgD;AAAA;AAAA;AAAA;AHAL;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AGAuB;AHAhD;AAAA;AACe;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAf;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;AAGF;;;AAEoC;;AAA5B;AACC;;AAAgB;;AAAhB;AAAP;AGLuD;;AAAA;AAAA;AAAA;AHM5B;AAAA;;AAApB;;;AAAkD;;AAAA;AAAA;AAApB;;AAAA;AAA9B;;;;AAAP;AACkE;;AAAA;AAAA;AAAA;AAApB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA5B;;AAAA;AAAA;AGTgD;AAAA;AAAA;AAAA;AHUL;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AGVuB;AHUhD;AAAA;AACe;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAf;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAIF;;;AAGQ;;AAAA;;AAAM;;;AAEZ;AAGF;;;AAOQ;;AAAA;;AAAA;;AAAM;;;AACZ;AApEsD;AAAA;;AAAA;AAAA;AA0EtD;ADnBF;;;AAEc;;AAAA;;AAAA;AAd+D;;AAAA;AAAA;AAkB/C;AAAA;AAA5B;AAGF;;;AAGyB;;AACrB;AAFF;;AAIE;AAJF;;AAME;;AANF;;;AAQ2C;;AAApC;;AAAA;;AAAA;;;AAAP;AAKF;;;AAOsC;;AAEhC;;AAAA;;AAAoB;;;AACxB;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AACA;AAGF;;;AAEc;;AAAA;;AAAA;AAjDD;;AAAA;AAAA;AAAA;AAkD8B;AAAA;;AAArC;;;AAAoD;;AAAP;AAAA;AACN;;AAAA;AAAA;AAA3C;AAAA;AAGF;;;;;;AAEM;;AAAA;;AAAA;AAAJ;;;AAAgC;;AAAP;;AAAA;AACR;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAvDoD;;AAAA;AAAA;AAAA;AAAA;;AAwDxC;AAAA;;AAAzB;;;AAA4D;;AAAA;AAAA;AAAM;AAAW;AAA1C;AAAnC;;;AACK;;AAAP;;AAAA;AAEgB;;AAAyE;AAAzE;AA3DmD;;AAAA;AAAA;AAAA;AAAA;;AA4DvC;AAAA;;AAA1B;;;AAA8D;;AAAA;AAAA;AAAM;AAAW;AAA3C;AAApC;;;AACK;;AAAP;;AAAA;AAEK;;AAAP;;AAAA;AAGF;;;AAE8B;;AAArB;;AAAA;AAAP;AACY;;AAAA;;AAAA;AAAA;;AAAA;AArEyD;;AAAA;AAAA;AAsEzC;;AAA5B;;AAGF;;;AAE8B;;AAArB;;AAAA;AAAP;AACY;;AAAA;;AAAA;AAAA;;AAAA;AA5EyD;;AAAA;AAAA;AAAA;AA6E7C;AAAA;;AAAxB;;;AACsB;;AAAA;;;AAIxB;;;;AAQsC;;AAEnB;;AAFX;;AAEW;;AAAA;;;;AAAkD;AAAW;AAA7D;AAAb;;AAEA;;;AAEW;;AAAA;;AAAA;AAAA;;AAAA;AA/FiF;;AAAA;AAAA;AAAA;AAAA;;AAgGrD;AAAA;;AAAzC;;;AACyD;;AAAA;AAAA;AAAA;AAChD;AAAA;;AAAA;AAAP;AACa;AAAb;;AAG+D;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA7C;;;;;;;AAGJ;AACI;;AAAA;;AAAoB;;;AACxB;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AACA;;AAAA;AAGF;;;;;;;;AA6EyB;;AAAA;;AAAA;AAlMoD;;AAAA;AAAA;AAAA;AAkMgB;AAAA;;AArEvF;;;AACK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;;AAAA;AAOkF;;AAAA;AAAA;AAAlF;;AAAA;AADF;;;AAGS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;;AAAA;AAOE;;AAAO;AAAP;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;;AAAA;AAQI;;AAAkC;AAAlC;;AACF;;AAAA;AAAJ;;;AACmB;;AAAA;;AAAA;;AAAA;;;;AAAsD;AAAW;AAAjE;AAAb;AAAA;;;;;AACA;;;AACW;;AAAA;;AAAA;AAAA;;AAAA;AArJ+E;;AAAA;AAAA;AAAA;AAAA;;AAsJnD;AAAA;;;;;;AAAzC;;;AACyD;;AAAA;AAAA;AACnD;;AAAA;AAAJ;;;AACe;AAAb;;;;;;;;AAIF;;;AACK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;;AAAA;AAQA;;AAAA;;AAAoB;;;AAEjB;;;;;AAAA;AAAA;AAEG;;;;;;;;;;;AAFH;AAAP;;AAAA;AAYF;;;AAC0B;AACJ;;AAAA;;AAAA;AA5LuD;;AAAA;AAAA;AA4Le;AAAA;;AAA1F;;;;;;;AAGA;;AAAA;AAAA;AAgBF;;;;;;;;;;AA9MqF;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAgNrC;AAAA;;AAA1C;;;AACF;;AAFS;;AAET;AAEwD;;AAAA;AAAA;AAAA;;AAAA;AAC9C;AAAR;;AALO;;AAMF;;AAAwB;;AAAA;AAAA;AAAA;;AAAkB;;AAAA;AAAA;AAAA;;AAA1B;AAAzB;;;AACuB;;AAAA;;AAAA;AApNZ;;AAAA;AAAA;AAAA;AAAA;;AAwNyC;AAAA;;AAA9C;;;AACoD;;AAAA;;AAAA;AAAtD;;AAAA;AAAA;;AAAA;AAAA;AAGoE;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA1BxE;AAAA;AAAA;;;;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACM;;AAAA;AAAJ;;;AAAoB;AAyBpB;;;AACU;AAAR;;AAIA;;AAAA;;;AACmB;;AAAA;;AAAA;AAlOZ;;AAAA;AAAA;AAAA;AAAA;;AAsOwE;AAAA;AAAM;AAAA;AAApE;AACJ;AAAS;;AAApB;AAAJ;;;AAGoD;;AAAA;AAAA;AAAA;AADG;;;AAEnD;;AAAA;;AAAA;AAFmD;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAArD;;AAAA;;AAAA;;AAKqC;;AAAkB;AAAlB;AAAjB;AACpB;;AAAA;;AAAA;AACwB;;AAAA;AAAA;AAIiC;;AAAA;;AAAA;AApPlD;;AAAA;;AAAA;AAoPP;AAAA;;AAAA;AAAA;;AAjCkF;;AAAiB;AAAjB;AAAjB;AAAA;;;;;;;;;;;;;;AAd9D;AAuBD;;;AAsCR;;;;;AAQS;;AAAgB;;AAAhB;AAAP;AAEgB;;AAAA;;AAAA;AA/Q2D;;AAAA;AAAA;AAAA;AAgR7C;AAAA;;AAA1B;;;AACF;;AAAiC;AAAjC;AAE0E;;AAAA;AAAA;AAAA;AAAzB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAjC;AAKE;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAFF;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAYI;;AAAA;;AAAA;AAAJ;;;AACE;;AAAA;;AAAA;;;AAIY;;AAAA;;AAAA;AAvS6D;;AAAA;AAAA;AAAA;AAAA;;AAwS/C;AAAA;;AAAxB;;;AACF;;AAA+B;AAA/B;AAEsE;;AAAA;AAAA;AAAA;AAAvB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA/B;;AAGF;;;AAO8B;;AAArB;;AAAA;AAAP;AACY;;AAAA;;AAAA;AAAA;;AAAA;AAhToF;;AAAA;AAAA;AAiThG;;AAAA;;AAGF;;;;AAMM;;AAAA;;AAAA;AAAJ;;;AAAgC;;AAAP;AAAA;AACb;;AAAA;;AAAA;AAAA;;AAAA;AA3ToF;;AAAA;AAAA;AAAA;AAAA;;AA4TvD;AAAA;;AAArC;;;AAAoD;;AAAP;AAAA;AACQ;;AAAA;AAAA;AAAe;;AAAnD;AAAd;;AAAA;AAAA;;AAAA;AAAP;AAAA;AAGF;;;;;AAOkD;;AAAzC;;;;AAAkD;AAAW;AAA7D;AAAP;AACO;;AAAgB;;AAAhB;AAAP;AAEc;;AAAA;;AAAA;AAAA;AAhV6D;;AAAA;AAAA;AAAA;AAiV/C;AAAA;;AAAxB;;;AACF;;AAA+B;AAA/B;AACA;;AAAA;;AAAA;;;AAEsE;;AAAA;AAAA;AAAA;AAAvB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA/B;AIzVuD;;AAAA;;AAAA;AAAA;AAAA;;AJ2VhC;AAAA;;AAAnB;;;AACF;;AAA0B;AAA1B;AAE4D;;AAAA;AAAA;AAAA;AAAlB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA1B;AIhWgD;AAAA;AAAA;AAAA;AJiWL;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AIjWuB;AJiWhD;AAAA;AACc;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAd;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;AAGF;;;AAEoC;;AAC3B;;AAAgB;;AAAhB;AAAP;AACgB;AAAA;;AAAA;AAAA;AAAA;;AAnW2D;;AAAA;AAAA;AAoW3C;AAAA;AAAA;;AAAhC;AACgC;AAAA;AAAA;AAAzB;;AAAA;AAAP;AAC4E;AAAA;AAAA;AAAzB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAjC;AI1WuD;;AAAA;AAAA;AAAA;AJ4W5B;AAAA;;AAApB;;;AAAkD;;AAAA;AAAA;AAApB;;AAAA;AAA9B;;;;AAAP;AACkE;;AAAA;AAAA;AAAA;AAApB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA5B;AI/WgD;AAAA;AAAA;AAAA;AJgXL;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AIhXuB;AJgXhD;AAAA;AACe;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAf;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAGF;;;;;;AAOsC;;AAEnB;;AAFX;;AAEW;;AAAA;;;;AAAkD;AAAW;AAA7D;AAAb;;AACA;;;AACW;;AAAA;;AAAA;AAAA;;AAAA;AAnXiF;;AAAA;AAAA;AAAA;AAAA;;AAoXrD;AAAA;;AAAzC;;;AACyD;;AAAA;AAAA;AAAA;AAChD;AAAA;;AAAA;AAAP;AACa;AAAb;;AAC+D;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA7C;;;;;;;AAGJ;AAEgB;;AAAA;;AAAA;AAAA;AAAA;;AAnY2D;;AAAA;AAAA;AAoY3C;AAAA;AAAA;;AAAhC;AACgC;AAAA;AAAA;AAAzB;;AAAA;AAAP;AAC4E;AAAA;AAAA;AAAzB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAjC;AI1YuD;;AAAA;;AAAA;AAAA;AAAA;;AJ2Y5B;AAAA;;AAApB;;;AAAkD;;AAAA;AAAA;AAApB;;AAAA;AAA9B;;;;AAAP;AACkE;;AAAA;AAAA;AAAA;AAApB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA5B;AI9YgD;AAAA;AAAA;AAAA;AJ+YL;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AI/YuB;AJ+YhD;AAAA;AACe;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAf;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AI5Z6C;AAAA;;;AAAA;AAAA;AA6CF;;;AAApC;AAAA;AAAA;AAAA;AAAA;AAAP;AAzC+C;AAAA;;;AAAA;AAAA;AAmDH;;;AAArC;AAAA;AAAA;;AAAA;AAAA;AAAP;AA/C2C;AAAA;;;AAAA;AAAA;AAyD3C;AArDgD;AAAA;AAAA;AAAA;AA+DhD;AASF;;;AAES;;AAAA;;;AAAP;AAuBF;;;AAEkC;;AAC1B;;AAAA;;AAAoB;;;AACnB;AAAA;;AAAA;AAAP;AAC2C;;AAAA;AAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9B;;AAAA;;AAAA;;;;AACO;;AAAA;;AAAA;;AAAA;;;AAAP;AAUF;;;AAEgC;;AACvB;;AAAA;;AAAA;;;AAAP;AASF;;;AAES;;AAAA;;AAAA;;;AAAP;AAGF;;;AAjIyD;;AAAA;;AAAA;AAAA;AAkI7B;AAAA;;AAAtB;;;AAAqC;AAAP;AAAA;AACN;;AAAA;AAAA;AAA5B;AAAA;AAGF;;;AACQ;;AAAiB;;;AAAjB;AACA;;AAAoB;;;AAApB;AACC;;AAAA;AAAP;AAEI;;AAAA;;AAAA;AAAJ;;;AAE6C;;AAAA;;AAAA;AAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AA7IuB;;AAAA;;AAAA;AA6IrD;AAAA;AAC8C;;AAAA;;AAAA;AAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AA9IoB;;AAAA;;AAAA;AA8IrD;AAAA;AAEG;;AAAA;;AAAA;AAAA;;AAAA;AAAL;;AAAA;AAAA;AAAA;AACO;;AAAP;;AAAA;AAEF;;;AACuC;;AAAA;;AAAA;AAAV;AAApB;AAAA;AAAA;AAAA;AAAA;AAAP;AAGF;;;AACQ;;AAAA;;AAAM;;;AAtJ0D;;;AAAA;AAAA;AAAA;AAuJ7C;AAAA;;AAArB;;;AAAoC;AAAP;AAAA;AACN;;AAAA;AAAA;AAAM;;;AAAjC;AAAA;AAGF;;;AACQ;;AAAA;;AAAM;;;AACwB;;AAAA;;AAAA;AAAA;;AAAA;AA7JkC;;;AAAA;;AAAA;AAkKtE;AAAA;AACK;;AAAA;;AAAA;AAAA;;AAAA;AAAL;;;;;;AAAA;AAAA;AAAA;AACO;;AAAP;ACxMiD;AAAA;;AAQ3B;AAAA;;AAAlB;;;AAR6C;AAAA;;AAAA;AAAA;AAQQ;AAArD;;;AAV0C;AAAA;AAW5B;AAAA;;AAAZ;;;AAXwC;AAYC;;AAA3C;AAV6C;;AAYtB;;AAAzB;;AAMF;;;AApB8C;AAAA;AAAA;AAAA;AAqB9C;AAGF;;;AAEE;;;AA1B8C;AAAA;AA2B9B;AAAA;;AAAZ;;;AAA6B;;AAAP;AA3BoB;AAAA;AAAA;AAAA;AA4BrB;AAArB;AAAJ;;;AAAoD;;AAAP;AA5BC;AAAA;AAAA;AAAA;AA6BzB;;AAAA;AAAd;;AAAA;AAAA;;AAAA;AAAP;AAIF;;;AA/BmD;AAAA;;AAiCvB;AAAA;;AAAjB;;;AAjCwC;AAAA;;AAAA;AAAA;AAiCY;AAAW;AAAlC;AAA7B;;;;AAAF;AAAP;AACO;;AAAc;AAAd;AAAP;AApC8C;AAqC9C;;AAAA;AAnCiD;;AAoCxB;;AAAzB;;;;;;AAGF;;;AAEE;;;AAC4B;;AA5CkB;AAAA;AAAA;AAAA;AA4CvC;AAAP;AACO;;AAAc;AAAd;AAAP;AA7C8C;AAAA;AAAA;AAAA;AAAA;AA+C9C;;AAAA;AACK;;AAAA;AAAL;;AAAA;AAAA;AAAA;;AAKA;;;AAC4B;;AAtDkB;AAAA;AAAA;AAAA;AAsDvC;AAAP;AAtD8C;AAAA;AAAA;AAAA;AAAA;AAwD3B;AAAnB;AACA;;;;;;AAAA;AAAA;AAAA;;AAIF;;;AAEE;;;AAC4B;;AAhEkB;AAAA;AAAA;AAAA;AAgEvC;AAAP;AACO;;AAAY;AAAZ;AAAP;AAhEqD;AAAA;;AAiE/B;AAAA;;AAAlB;;;AAjEiD;AAAA;;AAAA;AAAA;AAiES;AAA5B;AAA9B;AAAA;AAjEiD;;AAoErD;;AAAA;AArE8C;AAAA;AAAA;AAAA;AAsEzC;;AAAA;AAAL;;;;;;AAAA;AAAA;AAAA;;AAKA;;;AA1EqD;AAAA;;AA2E5B;AAAA;;AAAzB;AACoC;;AA5EiB;AAAA;;AAAA;AAAA;AA6E9C;;AAAA;AAAP;AA9E8C;AAAA;AAAA;AAAA;AAAA;AAgF9C;;AAAA;AA/EqD;;AAgF3B;AAA1B;AACK;AAAA;AAAL;;;;;;AAAA;;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;;AAKA;;;AAC4B;;AAzFkB;AAAA;AAAA;AAAA;AAyFvC;AAAP;AAxFqD;;AAyF3B;AAA1B;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 32 2"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 0x0000000000000000000000000000000000000000000000000000000000000000 \"arc88_o\" \"t\" \"b\" \"arc1644_ctrlen\" 0x0002 0x80 \"arc1410_p\" \"arc1644_ctrl\" \"arc1643_docs\" \"arc88_po\" 0x00 \"arc88_oi\" 0x0000000000000000 \"arc1594_iss\" \"arc1644_mcai\" \"arc1410_opa\" \"arc1644_rjust\" \"arc1644_lcar\" 0x0000 \"arc1410_hp_a\" \"arc1410_op\" \"arc1643_doc\" 0x0042 0x01 0x0001 0x0062 0x7983c35c 0x0006 0xd7fc4a98 0x5c27b4fc 0x4355d2ad"
    },
    "281": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "283": {
      "op": "bz main_bare_routing@57",
      "stack_out": []
    },
    "286": {
      "op": "pushbytess 0x975382e2 0xa4e741ab 0x045472d0 0x7d7904a4 0xe6f4f861 0x2ebd2d34 0xee6f2d0e 0x1d5c7a17 0xe57a6e18 0x11cb36f5 0xb16d7a8c 0xa7cb3482 0xecb636c8 0x65b1682a 0x0130599b 0x142b5fcb 0xf8838eb9 0x31882bfa 0xa9cca16f 0x266597c0 0x35f8135f 0xda7025b9 0x3f256713 0x95b4f9e3 0x80cc49ab 0x07962165 0xe78961da 0xfd9480d7 0xb1b1d69a 0xc1bed789 0x3bfe1833 0x599cd1a5 0x6de94166 0x28f023d7 0x657d13ec 0xb6ae1a25 0x84ec13d5 0xec996041 0x82e573c4 0x4a968f8f 0xb5422125 0xbbb319f3 0x0702654e 0xd015724e 0x029fecc0 0x7349334e 0xdb7c82ef 0xfd2c2c6e 0x42a5f065 0xad4f68ea // method \"bootstrap(byte[],byte[],uint8,uint256)bool\", method \"bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool\", method \"arc1644_set_controller(address)void\", method \"arc1644_set_controllable(bool)void\", method \"arc1644_set_require_justification(bool)void\", method \"arc1644_set_min_action_interval(uint64)void\", method \"arc1644_is_controllable()uint64\", method \"arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64\", method \"arc1644_controller_redeem(address,uint256,byte[])uint64\", method \"arc1643_set_document(byte[],string,byte[])void\", method \"arc1643_get_document(byte[])(string,byte[],uint64)\", method \"arc1643_remove_document(byte[])void\", method \"arc1643_get_all_documents()byte[][]\", method \"arc1594_set_issuable(bool)void\", method \"arc1594_issue(address,uint256,byte[])void\", method \"arc1594_redeemFrom(address,uint256,byte[])void\", method \"arc1594_redeem(uint256,byte[])void\", method \"arc1594_transfer_with_data(address,uint256,byte[])bool\", method \"arc1594_transfer_from_with_data(address,address,uint256,byte[])bool\", method \"arc1594_is_issuable()bool\", method \"arc1410_balance_of_partition(address,address)uint256\", method \"arc200_transfer(address,uint256)bool\", method \"arc1410_transfer_by_partition(address,address,uint256,byte[])address\", method \"arc1410_partitions_of(address,uint64)address[]\", method \"arc1410_is_operator(address,address,address)bool\", method \"arc1410_authorize_operator(address,address,address)void\", method \"arc1410_revoke_operator(address,address,address)void\", method \"arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address\", method \"arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)\", method \"arc1410_authorize_operator_by_portion(address,address,address,uint256)void\", method \"arc1410_is_operator_by_portion(address,address,address)bool\", method \"arc1410_issue_by_partition(address,address,uint256,byte[])void\", method \"arc1410_redeem_by_partition(address,uint256,byte[])void\", method \"arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void\", method \"arc200_name()byte[32]\", method \"arc200_symbol()byte[8]\", method \"arc200_decimals()uint8\", method \"arc200_totalSupply()uint256\", method \"arc200_balanceOf(address)uint256\", method \"arc200_transferFrom(address,address,uint256)bool\", method \"arc200_approve(address,uint256)bool\", method \"arc200_allowance(address,address)uint256\", method \"arc88_owner()address\", method \"arc88_is_owner(address)bool\", method \"arc88_initialize_owner(address)void\", method \"arc88_transfer_ownership(address)void\", method \"arc88_renounce_ownership()void\", method \"arc88_transfer_ownership_request(address)void\", method \"arc88_accept_ownership()void\", method \"arc88_cancel_ownership_request()void\"",
      "defined_out": [
        "Method(arc1410_authorize_operator(address,address,address)void)",
        "Method(arc1410_authorize_operator_by_portion(address,address,address,uint256)void)",
        "Method(arc1410_balance_of_partition(address,address)uint256)",
        "Method(arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address))",
        "Method(arc1410_is_operator(address,address,address)bool)",
        "Method(arc1410_is_operator_by_portion(address,address,address)bool)",
        "Method(arc1410_issue_by_partition(address,address,uint256,byte[])void)",
        "Method(arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void)",
        "Method(arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address)",
        "Method(arc1410_partitions_of(address,uint64)address[])",
        "Method(arc1410_redeem_by_partition(address,uint256,byte[])void)",
        "Method(arc1410_revoke_operator(address,address,address)void)",
        "Method(arc1410_transfer_by_partition(address,address,uint256,byte[])address)",
        "Method(arc1594_is_issuable()bool)",
        "Method(arc1594_issue(address,uint256,byte[])void)",
        "Method(arc1594_redeem(uint256,byte[])void)",
        "Method(arc1594_redeemFrom(address,uint256,byte[])void)",
        "Method(arc1594_set_issuable(bool)void)",
        "Method(arc1594_transfer_from_with_data(address,address,uint256,byte[])bool)",
        "Method(arc1594_transfer_with_data(address,uint256,byte[])bool)",
        "Method(arc1643_get_all_documents()byte[][])",
        "Method(arc1643_get_document(byte[])(string,byte[],uint64))",
        "Method(arc1643_remove_document(byte[])void)",
        "Method(arc1643_set_document(byte[],string,byte[])void)",
        "Method(arc1644_controller_redeem(address,uint256,byte[])uint64)",
        "Method(arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64)",
        "Method(arc1644_is_controllable()uint64)",
        "Method(arc1644_set_controllable(bool)void)",
        "Method(arc1644_set_controller(address)void)",
        "Method(arc1644_set_min_action_interval(uint64)void)",
        "Method(arc1644_set_require_justification(bool)void)",
        "Method(arc200_allowance(address,address)uint256)",
        "Method(arc200_approve(address,uint256)bool)",
        "Method(arc200_balanceOf(address)uint256)",
        "Method(arc200_decimals()uint8)",
        "Method(arc200_name()byte[32])",
        "Method(arc200_symbol()byte[8])",
        "Method(arc200_totalSupply()uint256)",
        "Method(arc200_transfer(address,uint256)bool)",
        "Method(arc200_transferFrom(address,address,uint256)bool)",
        "Method(arc88_accept_ownership()void)",
        "Method(arc88_cancel_ownership_request()void)",
        "Method(arc88_initialize_owner(address)void)",
        "Method(arc88_is_owner(address)bool)",
        "Method(arc88_owner()address)",
        "Method(arc88_renounce_ownership()void)",
        "Method(arc88_transfer_ownership(address)void)",
        "Method(arc88_transfer_ownership_request(address)void)",
        "Method(bootstrap(byte[],byte[],uint8,uint256)bool)",
        "Method(bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool)"
      ],
      "stack_out": [
        "Method(bootstrap(byte[],byte[],uint8,uint256)bool)",
        "Method(bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool)",
        "Method(arc1644_set_controller(address)void)",
        "Method(arc1644_set_controllable(bool)void)",
        "Method(arc1644_set_require_justification(bool)void)",
        "Method(arc1644_set_min_action_interval(uint64)void)",
        "Method(arc1644_is_controllable()uint64)",
        "Method(arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64)",
        "Method(arc1644_controller_redeem(address,uint256,byte[])uint64)",
        "Method(arc1643_set_document(byte[],string,byte[])void)",
        "Method(arc1643_get_document(byte[])(string,byte[],uint64))",
        "Method(arc1643_remove_document(byte[])void)",
        "Method(arc1643_get_all_documents()byte[][])",
        "Method(arc1594_set_issuable(bool)void)",
        "Method(arc1594_issue(address,uint256,byte[])void)",
        "Method(arc1594_redeemFrom(address,uint256,byte[])void)",
        "Method(arc1594_redeem(uint256,byte[])void)",
        "Method(arc1594_transfer_with_data(address,uint256,byte[])bool)",
        "Method(arc1594_transfer_from_with_data(address,address,uint256,byte[])bool)",
        "Method(arc1594_is_issuable()bool)",
        "Method(arc1410_balance_of_partition(address,address)uint256)",
        "Method(arc200_transfer(address,uint256)bool)",
        "Method(arc1410_transfer_by_partition(address,address,uint256,byte[])address)",
        "Method(arc1410_partitions_of(address,uint64)address[])",
        "Method(arc1410_is_operator(address,address,address)bool)",
        "Method(arc1410_authorize_operator(address,address,address)void)",
        "Method(arc1410_revoke_operator(address,address,address)void)",
        "Method(arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address)",
        "Method(arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address))",
        "Method(arc1410_authorize_operator_by_portion(address,address,address,uint256)void)",
        "Method(arc1410_is_operator_by_portion(address,address,address)bool)",
        "Method(arc1410_issue_by_partition(address,address,uint256,byte[])void)",
        "Method(arc1410_redeem_by_partition(address,uint256,byte[])void)",
        "Method(arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void)",
        "Method(arc200_name()byte[32])",
        "Method(arc200_symbol()byte[8])",
        "Method(arc200_decimals()uint8)",
        "Method(arc200_totalSupply()uint256)",
        "Method(arc200_balanceOf(address)uint256)",
        "Method(arc200_transferFrom(address,address,uint256)bool)",
        "Method(arc200_approve(address,uint256)bool)",
        "Method(arc200_allowance(address,address)uint256)",
        "Method(arc88_owner()address)",
        "Method(arc88_is_owner(address)bool)",
        "Method(arc88_initialize_owner(address)void)",
        "Method(arc88_transfer_ownership(address)void)",
        "Method(arc88_renounce_ownership()void)",
        "Method(arc88_transfer_ownership_request(address)void)",
        "Method(arc88_accept_ownership()void)",
        "Method(arc88_cancel_ownership_request()void)"
      ]
    },
    "538": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(arc1410_authorize_operator(address,address,address)void)",
        "Method(arc1410_authorize_operator_by_portion(address,address,address,uint256)void)",
        "Method(arc1410_balance_of_partition(address,address)uint256)",
        "Method(arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address))",
        "Method(arc1410_is_operator(address,address,address)bool)",
        "Method(arc1410_is_operator_by_portion(address,address,address)bool)",
        "Method(arc1410_issue_by_partition(address,address,uint256,byte[])void)",
        "Method(arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void)",
        "Method(arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address)",
        "Method(arc1410_partitions_of(address,uint64)address[])",
        "Method(arc1410_redeem_by_partition(address,uint256,byte[])void)",
        "Method(arc1410_revoke_operator(address,address,address)void)",
        "Method(arc1410_transfer_by_partition(address,address,uint256,byte[])address)",
        "Method(arc1594_is_issuable()bool)",
        "Method(arc1594_issue(address,uint256,byte[])void)",
        "Method(arc1594_redeem(uint256,byte[])void)",
        "Method(arc1594_redeemFrom(address,uint256,byte[])void)",
        "Method(arc1594_set_issuable(bool)void)",
        "Method(arc1594_transfer_from_with_data(address,address,uint256,byte[])bool)",
        "Method(arc1594_transfer_with_data(address,uint256,byte[])bool)",
        "Method(arc1643_get_all_documents()byte[][])",
        "Method(arc1643_get_document(byte[])(string,byte[],uint64))",
        "Method(arc1643_remove_document(byte[])void)",
        "Method(arc1643_set_document(byte[],string,byte[])void)",
        "Method(arc1644_controller_redeem(address,uint256,byte[])uint64)",
        "Method(arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64)",
        "Method(arc1644_is_controllable()uint64)",
        "Method(arc1644_set_controllable(bool)void)",
        "Method(arc1644_set_controller(address)void)",
        "Method(arc1644_set_min_action_interval(uint64)void)",
        "Method(arc1644_set_require_justification(bool)void)",
        "Method(arc200_allowance(address,address)uint256)",
        "Method(arc200_approve(address,uint256)bool)",
        "Method(arc200_balanceOf(address)uint256)",
        "Method(arc200_decimals()uint8)",
        "Method(arc200_name()byte[32])",
        "Method(arc200_symbol()byte[8])",
        "Method(arc200_totalSupply()uint256)",
        "Method(arc200_transfer(address,uint256)bool)",
        "Method(arc200_transferFrom(address,address,uint256)bool)",
        "Method(arc88_accept_ownership()void)",
        "Method(arc88_cancel_ownership_request()void)",
        "Method(arc88_initialize_owner(address)void)",
        "Method(arc88_is_owner(address)bool)",
        "Method(arc88_owner()address)",
        "Method(arc88_renounce_ownership()void)",
        "Method(arc88_transfer_ownership(address)void)",
        "Method(arc88_transfer_ownership_request(address)void)",
        "Method(bootstrap(byte[],byte[],uint8,uint256)bool)",
        "Method(bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(bootstrap(byte[],byte[],uint8,uint256)bool)",
        "Method(bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool)",
        "Method(arc1644_set_controller(address)void)",
        "Method(arc1644_set_controllable(bool)void)",
        "Method(arc1644_set_require_justification(bool)void)",
        "Method(arc1644_set_min_action_interval(uint64)void)",
        "Method(arc1644_is_controllable()uint64)",
        "Method(arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64)",
        "Method(arc1644_controller_redeem(address,uint256,byte[])uint64)",
        "Method(arc1643_set_document(byte[],string,byte[])void)",
        "Method(arc1643_get_document(byte[])(string,byte[],uint64))",
        "Method(arc1643_remove_document(byte[])void)",
        "Method(arc1643_get_all_documents()byte[][])",
        "Method(arc1594_set_issuable(bool)void)",
        "Method(arc1594_issue(address,uint256,byte[])void)",
        "Method(arc1594_redeemFrom(address,uint256,byte[])void)",
        "Method(arc1594_redeem(uint256,byte[])void)",
        "Method(arc1594_transfer_with_data(address,uint256,byte[])bool)",
        "Method(arc1594_transfer_from_with_data(address,address,uint256,byte[])bool)",
        "Method(arc1594_is_issuable()bool)",
        "Method(arc1410_balance_of_partition(address,address)uint256)",
        "Method(arc200_transfer(address,uint256)bool)",
        "Method(arc1410_transfer_by_partition(address,address,uint256,byte[])address)",
        "Method(arc1410_partitions_of(address,uint64)address[])",
        "Method(arc1410_is_operator(address,address,address)bool)",
        "Method(arc1410_authorize_operator(address,address,address)void)",
        "Method(arc1410_revoke_operator(address,address,address)void)",
        "Method(arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address)",
        "Method(arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address))",
        "Method(arc1410_authorize_operator_by_portion(address,address,address,uint256)void)",
        "Method(arc1410_is_operator_by_portion(address,address,address)bool)",
        "Method(arc1410_issue_by_partition(address,address,uint256,byte[])void)",
        "Method(arc1410_redeem_by_partition(address,uint256,byte[])void)",
        "Method(arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void)",
        "Method(arc200_name()byte[32])",
        "Method(arc200_symbol()byte[8])",
        "Method(arc200_decimals()uint8)",
        "Method(arc200_totalSupply()uint256)",
        "Method(arc200_balanceOf(address)uint256)",
        "Method(arc200_transferFrom(address,address,uint256)bool)",
        "Method(arc200_approve(address,uint256)bool)",
        "Method(arc200_allowance(address,address)uint256)",
        "Method(arc88_owner()address)",
        "Method(arc88_is_owner(address)bool)",
        "Method(arc88_initialize_owner(address)void)",
        "Method(arc88_transfer_ownership(address)void)",
        "Method(arc88_renounce_ownership()void)",
        "Method(arc88_transfer_ownership_request(address)void)",
        "Method(arc88_accept_ownership()void)",
        "Method(arc88_cancel_ownership_request()void)",
        "tmp%2#0"
      ]
    },
    "541": {
      "op": "match main_bootstrap_route@5 main_bootstrap1400_route@6 main_arc1644_set_controller_route@7 main_arc1644_set_controllable_route@8 main_arc1644_set_require_justification_route@9 main_arc1644_set_min_action_interval_route@10 main_arc1644_is_controllable_route@11 main_arc1644_controller_transfer_route@12 main_arc1644_controller_redeem_route@13 main_arc1643_set_document_route@14 main_arc1643_get_document_route@15 main_arc1643_remove_document_route@16 main_arc1643_get_all_documents_route@17 main_arc1594_set_issuable_route@18 main_arc1594_issue_route@19 main_arc1594_redeemFrom_route@20 main_arc1594_redeem_route@21 main_arc1594_transfer_with_data_route@22 main_arc1594_transfer_from_with_data_route@23 main_arc1594_is_issuable_route@24 main_arc1410_balance_of_partition_route@25 main_arc200_transfer_route@26 main_arc1410_transfer_by_partition_route@27 main_arc1410_partitions_of_route@28 main_arc1410_is_operator_route@29 main_arc1410_authorize_operator_route@30 main_arc1410_revoke_operator_route@31 main_arc1410_operator_transfer_by_partition_route@32 main_arc1410_can_transfer_by_partition_route@33 main_arc1410_authorize_operator_by_portion_route@34 main_arc1410_is_operator_by_portion_route@35 main_arc1410_issue_by_partition_route@36 main_arc1410_redeem_by_partition_route@37 main_arc1410_operator_redeem_by_partition_route@38 main_arc200_name_route@39 main_arc200_symbol_route@40 main_arc200_decimals_route@41 main_arc200_totalSupply_route@42 main_arc200_balanceOf_route@43 main_arc200_transferFrom_route@44 main_arc200_approve_route@45 main_arc200_allowance_route@46 main_arc88_owner_route@47 main_arc88_is_owner_route@48 main_arc88_initialize_owner_route@49 main_arc88_transfer_ownership_route@50 main_arc88_renounce_ownership_route@51 main_arc88_transfer_ownership_request_route@52 main_arc88_accept_ownership_route@53 main_arc88_cancel_ownership_request_route@54",
      "stack_out": []
    },
    "643": {
      "block": "main_after_if_else@61",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "644": {
      "op": "return",
      "stack_out": []
    },
    "645": {
      "block": "main_arc88_cancel_ownership_request_route@54",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%278#0"
      ],
      "stack_out": [
        "tmp%278#0"
      ]
    },
    "647": {
      "op": "!",
      "defined_out": [
        "tmp%279#0"
      ],
      "stack_out": [
        "tmp%279#0"
      ]
    },
    "648": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "649": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%280#0"
      ],
      "stack_out": [
        "tmp%280#0"
      ]
    },
    "651": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "652": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_cancel_ownership_request",
      "op": "callsub arc88_cancel_ownership_request"
    },
    "655": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "656": {
      "op": "return",
      "stack_out": []
    },
    "657": {
      "block": "main_arc88_accept_ownership_route@53",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%274#0"
      ],
      "stack_out": [
        "tmp%274#0"
      ]
    },
    "659": {
      "op": "!",
      "defined_out": [
        "tmp%275#0"
      ],
      "stack_out": [
        "tmp%275#0"
      ]
    },
    "660": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "661": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%276#0"
      ],
      "stack_out": [
        "tmp%276#0"
      ]
    },
    "663": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "664": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_accept_ownership",
      "op": "callsub arc88_accept_ownership"
    },
    "667": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "668": {
      "op": "return",
      "stack_out": []
    },
    "669": {
      "block": "main_arc88_transfer_ownership_request_route@52",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%270#0"
      ],
      "stack_out": [
        "tmp%270#0"
      ]
    },
    "671": {
      "op": "!",
      "defined_out": [
        "tmp%271#0"
      ],
      "stack_out": [
        "tmp%271#0"
      ]
    },
    "672": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "673": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%272#0"
      ],
      "stack_out": [
        "tmp%272#0"
      ]
    },
    "675": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "676": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%71#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%71#0"
      ]
    },
    "679": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_transfer_ownership_request",
      "op": "callsub arc88_transfer_ownership_request",
      "stack_out": []
    },
    "682": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "683": {
      "op": "return",
      "stack_out": []
    },
    "684": {
      "block": "main_arc88_renounce_ownership_route@51",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%266#0"
      ],
      "stack_out": [
        "tmp%266#0"
      ]
    },
    "686": {
      "op": "!",
      "defined_out": [
        "tmp%267#0"
      ],
      "stack_out": [
        "tmp%267#0"
      ]
    },
    "687": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "688": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%268#0"
      ],
      "stack_out": [
        "tmp%268#0"
      ]
    },
    "690": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "691": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_renounce_ownership",
      "op": "callsub arc88_renounce_ownership"
    },
    "694": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "695": {
      "op": "return",
      "stack_out": []
    },
    "696": {
      "block": "main_arc88_transfer_ownership_route@50",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%262#0"
      ],
      "stack_out": [
        "tmp%262#0"
      ]
    },
    "698": {
      "op": "!",
      "defined_out": [
        "tmp%263#0"
      ],
      "stack_out": [
        "tmp%263#0"
      ]
    },
    "699": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "700": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%264#0"
      ],
      "stack_out": [
        "tmp%264#0"
      ]
    },
    "702": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "703": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%70#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%70#0"
      ]
    },
    "706": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_transfer_ownership",
      "op": "callsub arc88_transfer_ownership",
      "stack_out": []
    },
    "709": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "710": {
      "op": "return",
      "stack_out": []
    },
    "711": {
      "block": "main_arc88_initialize_owner_route@49",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%258#0"
      ],
      "stack_out": [
        "tmp%258#0"
      ]
    },
    "713": {
      "op": "!",
      "defined_out": [
        "tmp%259#0"
      ],
      "stack_out": [
        "tmp%259#0"
      ]
    },
    "714": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "715": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%260#0"
      ],
      "stack_out": [
        "tmp%260#0"
      ]
    },
    "717": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "718": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%69#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%69#0"
      ]
    },
    "721": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_initialize_owner",
      "op": "callsub arc88_initialize_owner",
      "stack_out": []
    },
    "724": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "725": {
      "op": "return",
      "stack_out": []
    },
    "726": {
      "block": "main_arc88_is_owner_route@48",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%252#0"
      ],
      "stack_out": [
        "tmp%252#0"
      ]
    },
    "728": {
      "op": "!",
      "defined_out": [
        "tmp%253#0"
      ],
      "stack_out": [
        "tmp%253#0"
      ]
    },
    "729": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "730": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%254#0"
      ],
      "stack_out": [
        "tmp%254#0"
      ]
    },
    "732": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "733": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%68#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%68#0"
      ]
    },
    "736": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_is_owner",
      "op": "callsub arc88_is_owner",
      "defined_out": [
        "tmp%256#0"
      ],
      "stack_out": [
        "tmp%256#0"
      ]
    },
    "739": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%256#0"
      ],
      "stack_out": [
        "tmp%256#0",
        "0x151f7c75"
      ]
    },
    "740": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%256#0"
      ]
    },
    "741": {
      "op": "concat",
      "defined_out": [
        "tmp%257#0"
      ],
      "stack_out": [
        "tmp%257#0"
      ]
    },
    "742": {
      "op": "log",
      "stack_out": []
    },
    "743": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "744": {
      "op": "return",
      "stack_out": []
    },
    "745": {
      "block": "main_arc88_owner_route@47",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%246#0"
      ],
      "stack_out": [
        "tmp%246#0"
      ]
    },
    "747": {
      "op": "!",
      "defined_out": [
        "tmp%247#0"
      ],
      "stack_out": [
        "tmp%247#0"
      ]
    },
    "748": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "749": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%248#0"
      ],
      "stack_out": [
        "tmp%248#0"
      ]
    },
    "751": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "752": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_owner",
      "op": "callsub arc88_owner",
      "defined_out": [
        "tmp%250#0"
      ],
      "stack_out": [
        "tmp%250#0"
      ]
    },
    "755": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%250#0"
      ],
      "stack_out": [
        "tmp%250#0",
        "0x151f7c75"
      ]
    },
    "756": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%250#0"
      ]
    },
    "757": {
      "op": "concat",
      "defined_out": [
        "tmp%251#0"
      ],
      "stack_out": [
        "tmp%251#0"
      ]
    },
    "758": {
      "op": "log",
      "stack_out": []
    },
    "759": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "760": {
      "op": "return",
      "stack_out": []
    },
    "761": {
      "block": "main_arc200_allowance_route@46",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%240#0"
      ],
      "stack_out": [
        "tmp%240#0"
      ]
    },
    "763": {
      "op": "!",
      "defined_out": [
        "tmp%241#0"
      ],
      "stack_out": [
        "tmp%241#0"
      ]
    },
    "764": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "765": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%242#0"
      ],
      "stack_out": [
        "tmp%242#0"
      ]
    },
    "767": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "768": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%66#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%66#0"
      ]
    },
    "771": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%66#0",
        "reinterpret_bytes[32]%67#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%66#0",
        "reinterpret_bytes[32]%67#0"
      ]
    },
    "774": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_allowance",
      "op": "callsub arc200_allowance",
      "defined_out": [
        "tmp%244#0"
      ],
      "stack_out": [
        "tmp%244#0"
      ]
    },
    "777": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%244#0"
      ],
      "stack_out": [
        "tmp%244#0",
        "0x151f7c75"
      ]
    },
    "778": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%244#0"
      ]
    },
    "779": {
      "op": "concat",
      "defined_out": [
        "tmp%245#0"
      ],
      "stack_out": [
        "tmp%245#0"
      ]
    },
    "780": {
      "op": "log",
      "stack_out": []
    },
    "781": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "782": {
      "op": "return",
      "stack_out": []
    },
    "783": {
      "block": "main_arc200_approve_route@45",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%234#0"
      ],
      "stack_out": [
        "tmp%234#0"
      ]
    },
    "785": {
      "op": "!",
      "defined_out": [
        "tmp%235#0"
      ],
      "stack_out": [
        "tmp%235#0"
      ]
    },
    "786": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "787": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%236#0"
      ],
      "stack_out": [
        "tmp%236#0"
      ]
    },
    "789": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "790": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%64#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%64#0"
      ]
    },
    "793": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%64#0",
        "reinterpret_bytes[32]%65#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%64#0",
        "reinterpret_bytes[32]%65#0"
      ]
    },
    "796": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_approve",
      "op": "callsub arc200_approve",
      "defined_out": [
        "tmp%238#0"
      ],
      "stack_out": [
        "tmp%238#0"
      ]
    },
    "799": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%238#0"
      ],
      "stack_out": [
        "tmp%238#0",
        "0x151f7c75"
      ]
    },
    "800": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%238#0"
      ]
    },
    "801": {
      "op": "concat",
      "defined_out": [
        "tmp%239#0"
      ],
      "stack_out": [
        "tmp%239#0"
      ]
    },
    "802": {
      "op": "log",
      "stack_out": []
    },
    "803": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "804": {
      "op": "return",
      "stack_out": []
    },
    "805": {
      "block": "main_arc200_transferFrom_route@44",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%228#0"
      ],
      "stack_out": [
        "tmp%228#0"
      ]
    },
    "807": {
      "op": "!",
      "defined_out": [
        "tmp%229#0"
      ],
      "stack_out": [
        "tmp%229#0"
      ]
    },
    "808": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "809": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%230#0"
      ],
      "stack_out": [
        "tmp%230#0"
      ]
    },
    "811": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "812": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%61#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%61#0"
      ]
    },
    "815": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%61#0",
        "reinterpret_bytes[32]%62#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%61#0",
        "reinterpret_bytes[32]%62#0"
      ]
    },
    "818": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%61#0",
        "reinterpret_bytes[32]%62#0",
        "reinterpret_bytes[32]%63#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%61#0",
        "reinterpret_bytes[32]%62#0",
        "reinterpret_bytes[32]%63#0"
      ]
    },
    "821": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_transferFrom",
      "op": "callsub arc200_transferFrom",
      "defined_out": [
        "tmp%232#0"
      ],
      "stack_out": [
        "tmp%232#0"
      ]
    },
    "824": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%232#0"
      ],
      "stack_out": [
        "tmp%232#0",
        "0x151f7c75"
      ]
    },
    "825": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%232#0"
      ]
    },
    "826": {
      "op": "concat",
      "defined_out": [
        "tmp%233#0"
      ],
      "stack_out": [
        "tmp%233#0"
      ]
    },
    "827": {
      "op": "log",
      "stack_out": []
    },
    "828": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "829": {
      "op": "return",
      "stack_out": []
    },
    "830": {
      "block": "main_arc200_balanceOf_route@43",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%222#0"
      ],
      "stack_out": [
        "tmp%222#0"
      ]
    },
    "832": {
      "op": "!",
      "defined_out": [
        "tmp%223#0"
      ],
      "stack_out": [
        "tmp%223#0"
      ]
    },
    "833": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "834": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%224#0"
      ],
      "stack_out": [
        "tmp%224#0"
      ]
    },
    "836": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "837": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%60#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%60#0"
      ]
    },
    "840": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_balanceOf",
      "op": "callsub arc200_balanceOf",
      "defined_out": [
        "tmp%226#0"
      ],
      "stack_out": [
        "tmp%226#0"
      ]
    },
    "843": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%226#0"
      ],
      "stack_out": [
        "tmp%226#0",
        "0x151f7c75"
      ]
    },
    "844": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%226#0"
      ]
    },
    "845": {
      "op": "concat",
      "defined_out": [
        "tmp%227#0"
      ],
      "stack_out": [
        "tmp%227#0"
      ]
    },
    "846": {
      "op": "log",
      "stack_out": []
    },
    "847": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "848": {
      "op": "return",
      "stack_out": []
    },
    "849": {
      "block": "main_arc200_totalSupply_route@42",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%216#0"
      ],
      "stack_out": [
        "tmp%216#0"
      ]
    },
    "851": {
      "op": "!",
      "defined_out": [
        "tmp%217#0"
      ],
      "stack_out": [
        "tmp%217#0"
      ]
    },
    "852": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "853": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%218#0"
      ],
      "stack_out": [
        "tmp%218#0"
      ]
    },
    "855": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "856": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_totalSupply",
      "op": "callsub arc200_totalSupply",
      "defined_out": [
        "tmp%220#0"
      ],
      "stack_out": [
        "tmp%220#0"
      ]
    },
    "859": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%220#0"
      ],
      "stack_out": [
        "tmp%220#0",
        "0x151f7c75"
      ]
    },
    "860": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%220#0"
      ]
    },
    "861": {
      "op": "concat",
      "defined_out": [
        "tmp%221#0"
      ],
      "stack_out": [
        "tmp%221#0"
      ]
    },
    "862": {
      "op": "log",
      "stack_out": []
    },
    "863": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "864": {
      "op": "return",
      "stack_out": []
    },
    "865": {
      "block": "main_arc200_decimals_route@41",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%210#0"
      ],
      "stack_out": [
        "tmp%210#0"
      ]
    },
    "867": {
      "op": "!",
      "defined_out": [
        "tmp%211#0"
      ],
      "stack_out": [
        "tmp%211#0"
      ]
    },
    "868": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "869": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%212#0"
      ],
      "stack_out": [
        "tmp%212#0"
      ]
    },
    "871": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "872": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_decimals",
      "op": "callsub arc200_decimals",
      "defined_out": [
        "tmp%214#0"
      ],
      "stack_out": [
        "tmp%214#0"
      ]
    },
    "875": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%214#0"
      ],
      "stack_out": [
        "tmp%214#0",
        "0x151f7c75"
      ]
    },
    "876": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%214#0"
      ]
    },
    "877": {
      "op": "concat",
      "defined_out": [
        "tmp%215#0"
      ],
      "stack_out": [
        "tmp%215#0"
      ]
    },
    "878": {
      "op": "log",
      "stack_out": []
    },
    "879": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "880": {
      "op": "return",
      "stack_out": []
    },
    "881": {
      "block": "main_arc200_symbol_route@40",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%204#0"
      ],
      "stack_out": [
        "tmp%204#0"
      ]
    },
    "883": {
      "op": "!",
      "defined_out": [
        "tmp%205#0"
      ],
      "stack_out": [
        "tmp%205#0"
      ]
    },
    "884": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "885": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%206#0"
      ],
      "stack_out": [
        "tmp%206#0"
      ]
    },
    "887": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "888": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_symbol",
      "op": "callsub arc200_symbol",
      "defined_out": [
        "tmp%208#0"
      ],
      "stack_out": [
        "tmp%208#0"
      ]
    },
    "891": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%208#0"
      ],
      "stack_out": [
        "tmp%208#0",
        "0x151f7c75"
      ]
    },
    "892": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%208#0"
      ]
    },
    "893": {
      "op": "concat",
      "defined_out": [
        "tmp%209#0"
      ],
      "stack_out": [
        "tmp%209#0"
      ]
    },
    "894": {
      "op": "log",
      "stack_out": []
    },
    "895": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "896": {
      "op": "return",
      "stack_out": []
    },
    "897": {
      "block": "main_arc200_name_route@39",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%198#0"
      ],
      "stack_out": [
        "tmp%198#0"
      ]
    },
    "899": {
      "op": "!",
      "defined_out": [
        "tmp%199#0"
      ],
      "stack_out": [
        "tmp%199#0"
      ]
    },
    "900": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "901": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%200#0"
      ],
      "stack_out": [
        "tmp%200#0"
      ]
    },
    "903": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "904": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_name",
      "op": "callsub arc200_name",
      "defined_out": [
        "tmp%202#0"
      ],
      "stack_out": [
        "tmp%202#0"
      ]
    },
    "907": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%202#0"
      ],
      "stack_out": [
        "tmp%202#0",
        "0x151f7c75"
      ]
    },
    "908": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%202#0"
      ]
    },
    "909": {
      "op": "concat",
      "defined_out": [
        "tmp%203#0"
      ],
      "stack_out": [
        "tmp%203#0"
      ]
    },
    "910": {
      "op": "log",
      "stack_out": []
    },
    "911": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "912": {
      "op": "return",
      "stack_out": []
    },
    "913": {
      "block": "main_arc1410_operator_redeem_by_partition_route@38",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%193#0"
      ],
      "stack_out": [
        "tmp%193#0"
      ]
    },
    "915": {
      "op": "!",
      "defined_out": [
        "tmp%194#0"
      ],
      "stack_out": [
        "tmp%194#0"
      ]
    },
    "916": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "917": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%195#0"
      ],
      "stack_out": [
        "tmp%195#0"
      ]
    },
    "919": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "920": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%57#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%57#0"
      ]
    },
    "923": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%57#0",
        "reinterpret_bytes[32]%58#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%57#0",
        "reinterpret_bytes[32]%58#0"
      ]
    },
    "926": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%57#0",
        "reinterpret_bytes[32]%58#0",
        "reinterpret_bytes[32]%59#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%57#0",
        "reinterpret_bytes[32]%58#0",
        "reinterpret_bytes[32]%59#0"
      ]
    },
    "929": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%57#0",
        "reinterpret_bytes[32]%58#0",
        "reinterpret_bytes[32]%59#0",
        "tmp%197#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%57#0",
        "reinterpret_bytes[32]%58#0",
        "reinterpret_bytes[32]%59#0",
        "tmp%197#0"
      ]
    },
    "932": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_operator_redeem_by_partition",
      "op": "callsub arc1410_operator_redeem_by_partition",
      "stack_out": []
    },
    "935": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "936": {
      "op": "return",
      "stack_out": []
    },
    "937": {
      "block": "main_arc1410_redeem_by_partition_route@37",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%188#0"
      ],
      "stack_out": [
        "tmp%188#0"
      ]
    },
    "939": {
      "op": "!",
      "defined_out": [
        "tmp%189#0"
      ],
      "stack_out": [
        "tmp%189#0"
      ]
    },
    "940": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "941": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%190#0"
      ],
      "stack_out": [
        "tmp%190#0"
      ]
    },
    "943": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "944": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%55#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%55#0"
      ]
    },
    "947": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%55#0",
        "reinterpret_bytes[32]%56#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%55#0",
        "reinterpret_bytes[32]%56#0"
      ]
    },
    "950": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%55#0",
        "reinterpret_bytes[32]%56#0",
        "tmp%192#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%55#0",
        "reinterpret_bytes[32]%56#0",
        "tmp%192#0"
      ]
    },
    "953": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_redeem_by_partition",
      "op": "callsub arc1410_redeem_by_partition",
      "stack_out": []
    },
    "956": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "957": {
      "op": "return",
      "stack_out": []
    },
    "958": {
      "block": "main_arc1410_issue_by_partition_route@36",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%183#0"
      ],
      "stack_out": [
        "tmp%183#0"
      ]
    },
    "960": {
      "op": "!",
      "defined_out": [
        "tmp%184#0"
      ],
      "stack_out": [
        "tmp%184#0"
      ]
    },
    "961": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "962": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%185#0"
      ],
      "stack_out": [
        "tmp%185#0"
      ]
    },
    "964": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "965": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%52#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%52#0"
      ]
    },
    "968": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%52#0",
        "reinterpret_bytes[32]%53#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%52#0",
        "reinterpret_bytes[32]%53#0"
      ]
    },
    "971": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%52#0",
        "reinterpret_bytes[32]%53#0",
        "reinterpret_bytes[32]%54#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%52#0",
        "reinterpret_bytes[32]%53#0",
        "reinterpret_bytes[32]%54#0"
      ]
    },
    "974": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%52#0",
        "reinterpret_bytes[32]%53#0",
        "reinterpret_bytes[32]%54#0",
        "tmp%187#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%52#0",
        "reinterpret_bytes[32]%53#0",
        "reinterpret_bytes[32]%54#0",
        "tmp%187#0"
      ]
    },
    "977": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_issue_by_partition",
      "op": "callsub arc1410_issue_by_partition",
      "stack_out": []
    },
    "980": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "981": {
      "op": "return",
      "stack_out": []
    },
    "982": {
      "block": "main_arc1410_is_operator_by_portion_route@35",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%177#0"
      ],
      "stack_out": [
        "tmp%177#0"
      ]
    },
    "984": {
      "op": "!",
      "defined_out": [
        "tmp%178#0"
      ],
      "stack_out": [
        "tmp%178#0"
      ]
    },
    "985": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "986": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%179#0"
      ],
      "stack_out": [
        "tmp%179#0"
      ]
    },
    "988": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "989": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%49#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%49#0"
      ]
    },
    "992": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%49#0",
        "reinterpret_bytes[32]%50#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%49#0",
        "reinterpret_bytes[32]%50#0"
      ]
    },
    "995": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%49#0",
        "reinterpret_bytes[32]%50#0",
        "reinterpret_bytes[32]%51#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%49#0",
        "reinterpret_bytes[32]%50#0",
        "reinterpret_bytes[32]%51#0"
      ]
    },
    "998": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator_by_portion",
      "op": "callsub arc1410_is_operator_by_portion",
      "defined_out": [
        "tmp%181#0"
      ],
      "stack_out": [
        "tmp%181#0"
      ]
    },
    "1001": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%181#0"
      ],
      "stack_out": [
        "tmp%181#0",
        "0x151f7c75"
      ]
    },
    "1002": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%181#0"
      ]
    },
    "1003": {
      "op": "concat",
      "defined_out": [
        "tmp%182#0"
      ],
      "stack_out": [
        "tmp%182#0"
      ]
    },
    "1004": {
      "op": "log",
      "stack_out": []
    },
    "1005": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1006": {
      "op": "return",
      "stack_out": []
    },
    "1007": {
      "block": "main_arc1410_authorize_operator_by_portion_route@34",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%173#0"
      ],
      "stack_out": [
        "tmp%173#0"
      ]
    },
    "1009": {
      "op": "!",
      "defined_out": [
        "tmp%174#0"
      ],
      "stack_out": [
        "tmp%174#0"
      ]
    },
    "1010": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1011": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0"
      ]
    },
    "1013": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1014": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%45#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%45#0"
      ]
    },
    "1017": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%45#0",
        "reinterpret_bytes[32]%46#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%45#0",
        "reinterpret_bytes[32]%46#0"
      ]
    },
    "1020": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%45#0",
        "reinterpret_bytes[32]%46#0",
        "reinterpret_bytes[32]%47#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%45#0",
        "reinterpret_bytes[32]%46#0",
        "reinterpret_bytes[32]%47#0"
      ]
    },
    "1023": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%45#0",
        "reinterpret_bytes[32]%46#0",
        "reinterpret_bytes[32]%47#0",
        "reinterpret_bytes[32]%48#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%45#0",
        "reinterpret_bytes[32]%46#0",
        "reinterpret_bytes[32]%47#0",
        "reinterpret_bytes[32]%48#0"
      ]
    },
    "1026": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_authorize_operator_by_portion",
      "op": "callsub arc1410_authorize_operator_by_portion",
      "stack_out": []
    },
    "1029": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1030": {
      "op": "return",
      "stack_out": []
    },
    "1031": {
      "block": "main_arc1410_can_transfer_by_partition_route@33",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%166#0"
      ]
    },
    "1033": {
      "op": "!",
      "defined_out": [
        "tmp%167#0"
      ],
      "stack_out": [
        "tmp%167#0"
      ]
    },
    "1034": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1035": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%168#0"
      ]
    },
    "1037": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1038": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%41#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%41#0"
      ]
    },
    "1041": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%41#0",
        "reinterpret_bytes[32]%42#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%41#0",
        "reinterpret_bytes[32]%42#0"
      ]
    },
    "1044": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%41#0",
        "reinterpret_bytes[32]%42#0",
        "reinterpret_bytes[32]%43#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%41#0",
        "reinterpret_bytes[32]%42#0",
        "reinterpret_bytes[32]%43#0"
      ]
    },
    "1047": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%41#0",
        "reinterpret_bytes[32]%42#0",
        "reinterpret_bytes[32]%43#0",
        "reinterpret_bytes[32]%44#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%41#0",
        "reinterpret_bytes[32]%42#0",
        "reinterpret_bytes[32]%43#0",
        "reinterpret_bytes[32]%44#0"
      ]
    },
    "1050": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[32]%41#0",
        "reinterpret_bytes[32]%42#0",
        "reinterpret_bytes[32]%43#0",
        "reinterpret_bytes[32]%44#0",
        "tmp%170#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%41#0",
        "reinterpret_bytes[32]%42#0",
        "reinterpret_bytes[32]%43#0",
        "reinterpret_bytes[32]%44#0",
        "tmp%170#0"
      ]
    },
    "1053": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_can_transfer_by_partition",
      "op": "callsub arc1410_can_transfer_by_partition",
      "defined_out": [
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%171#0"
      ]
    },
    "1056": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%171#0",
        "0x151f7c75"
      ]
    },
    "1057": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%171#0"
      ]
    },
    "1058": {
      "op": "concat",
      "defined_out": [
        "tmp%172#0"
      ],
      "stack_out": [
        "tmp%172#0"
      ]
    },
    "1059": {
      "op": "log",
      "stack_out": []
    },
    "1060": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1061": {
      "op": "return",
      "stack_out": []
    },
    "1062": {
      "block": "main_arc1410_operator_transfer_by_partition_route@32",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%159#0"
      ]
    },
    "1064": {
      "op": "!",
      "defined_out": [
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%160#0"
      ]
    },
    "1065": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1066": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0"
      ]
    },
    "1068": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1069": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%37#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%37#0"
      ]
    },
    "1072": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%37#0",
        "reinterpret_bytes[32]%38#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%37#0",
        "reinterpret_bytes[32]%38#0"
      ]
    },
    "1075": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%37#0",
        "reinterpret_bytes[32]%38#0",
        "reinterpret_bytes[32]%39#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%37#0",
        "reinterpret_bytes[32]%38#0",
        "reinterpret_bytes[32]%39#0"
      ]
    },
    "1078": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%37#0",
        "reinterpret_bytes[32]%38#0",
        "reinterpret_bytes[32]%39#0",
        "reinterpret_bytes[32]%40#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%37#0",
        "reinterpret_bytes[32]%38#0",
        "reinterpret_bytes[32]%39#0",
        "reinterpret_bytes[32]%40#0"
      ]
    },
    "1081": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[32]%37#0",
        "reinterpret_bytes[32]%38#0",
        "reinterpret_bytes[32]%39#0",
        "reinterpret_bytes[32]%40#0",
        "tmp%163#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%37#0",
        "reinterpret_bytes[32]%38#0",
        "reinterpret_bytes[32]%39#0",
        "reinterpret_bytes[32]%40#0",
        "tmp%163#0"
      ]
    },
    "1084": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_operator_transfer_by_partition",
      "op": "callsub arc1410_operator_transfer_by_partition",
      "defined_out": [
        "tmp%164#0"
      ],
      "stack_out": [
        "tmp%164#0"
      ]
    },
    "1087": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%164#0"
      ],
      "stack_out": [
        "tmp%164#0",
        "0x151f7c75"
      ]
    },
    "1088": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%164#0"
      ]
    },
    "1089": {
      "op": "concat",
      "defined_out": [
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%165#0"
      ]
    },
    "1090": {
      "op": "log",
      "stack_out": []
    },
    "1091": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1092": {
      "op": "return",
      "stack_out": []
    },
    "1093": {
      "block": "main_arc1410_revoke_operator_route@31",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%155#0"
      ],
      "stack_out": [
        "tmp%155#0"
      ]
    },
    "1095": {
      "op": "!",
      "defined_out": [
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%156#0"
      ]
    },
    "1096": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1097": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0"
      ]
    },
    "1099": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1100": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%34#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%34#0"
      ]
    },
    "1103": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%34#0",
        "reinterpret_bytes[32]%35#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%34#0",
        "reinterpret_bytes[32]%35#0"
      ]
    },
    "1106": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%34#0",
        "reinterpret_bytes[32]%35#0",
        "reinterpret_bytes[32]%36#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%34#0",
        "reinterpret_bytes[32]%35#0",
        "reinterpret_bytes[32]%36#0"
      ]
    },
    "1109": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_revoke_operator",
      "op": "callsub arc1410_revoke_operator",
      "stack_out": []
    },
    "1112": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1113": {
      "op": "return",
      "stack_out": []
    },
    "1114": {
      "block": "main_arc1410_authorize_operator_route@30",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%151#0"
      ]
    },
    "1116": {
      "op": "!",
      "defined_out": [
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%152#0"
      ]
    },
    "1117": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1118": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%153#0"
      ]
    },
    "1120": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1121": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%31#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%31#0"
      ]
    },
    "1124": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%31#0",
        "reinterpret_bytes[32]%32#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%31#0",
        "reinterpret_bytes[32]%32#0"
      ]
    },
    "1127": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%31#0",
        "reinterpret_bytes[32]%32#0",
        "reinterpret_bytes[32]%33#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%31#0",
        "reinterpret_bytes[32]%32#0",
        "reinterpret_bytes[32]%33#0"
      ]
    },
    "1130": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_authorize_operator",
      "op": "callsub arc1410_authorize_operator",
      "stack_out": []
    },
    "1133": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1134": {
      "op": "return",
      "stack_out": []
    },
    "1135": {
      "block": "main_arc1410_is_operator_route@29",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%145#0"
      ]
    },
    "1137": {
      "op": "!",
      "defined_out": [
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0"
      ]
    },
    "1138": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1139": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0"
      ]
    },
    "1141": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1142": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%28#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%28#0"
      ]
    },
    "1145": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%28#0",
        "reinterpret_bytes[32]%29#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%28#0",
        "reinterpret_bytes[32]%29#0"
      ]
    },
    "1148": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%28#0",
        "reinterpret_bytes[32]%29#0",
        "reinterpret_bytes[32]%30#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%28#0",
        "reinterpret_bytes[32]%29#0",
        "reinterpret_bytes[32]%30#0"
      ]
    },
    "1151": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator",
      "op": "callsub arc1410_is_operator",
      "defined_out": [
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%149#0"
      ]
    },
    "1154": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%149#0",
        "0x151f7c75"
      ]
    },
    "1155": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%149#0"
      ]
    },
    "1156": {
      "op": "concat",
      "defined_out": [
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%150#0"
      ]
    },
    "1157": {
      "op": "log",
      "stack_out": []
    },
    "1158": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1159": {
      "op": "return",
      "stack_out": []
    },
    "1160": {
      "block": "main_arc1410_partitions_of_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%139#0"
      ]
    },
    "1162": {
      "op": "!",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0"
      ]
    },
    "1163": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1164": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "1166": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1167": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%27#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%27#0"
      ]
    },
    "1170": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%27#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%27#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "1173": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_partitions_of",
      "op": "callsub arc1410_partitions_of",
      "defined_out": [
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0"
      ]
    },
    "1176": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0",
        "0x151f7c75"
      ]
    },
    "1177": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%143#0"
      ]
    },
    "1178": {
      "op": "concat",
      "defined_out": [
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0"
      ]
    },
    "1179": {
      "op": "log",
      "stack_out": []
    },
    "1180": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1181": {
      "op": "return",
      "stack_out": []
    },
    "1182": {
      "block": "main_arc1410_transfer_by_partition_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%132#0"
      ]
    },
    "1184": {
      "op": "!",
      "defined_out": [
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%133#0"
      ]
    },
    "1185": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1186": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "1188": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1189": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%24#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%24#0"
      ]
    },
    "1192": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%24#0",
        "reinterpret_bytes[32]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%24#0",
        "reinterpret_bytes[32]%25#0"
      ]
    },
    "1195": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%24#0",
        "reinterpret_bytes[32]%25#0",
        "reinterpret_bytes[32]%26#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%24#0",
        "reinterpret_bytes[32]%25#0",
        "reinterpret_bytes[32]%26#0"
      ]
    },
    "1198": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%24#0",
        "reinterpret_bytes[32]%25#0",
        "reinterpret_bytes[32]%26#0",
        "tmp%136#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%24#0",
        "reinterpret_bytes[32]%25#0",
        "reinterpret_bytes[32]%26#0",
        "tmp%136#0"
      ]
    },
    "1201": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_transfer_by_partition",
      "op": "callsub arc1410_transfer_by_partition",
      "defined_out": [
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0"
      ]
    },
    "1204": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0",
        "0x151f7c75"
      ]
    },
    "1205": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%137#0"
      ]
    },
    "1206": {
      "op": "concat",
      "defined_out": [
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%138#0"
      ]
    },
    "1207": {
      "op": "log",
      "stack_out": []
    },
    "1208": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1209": {
      "op": "return",
      "stack_out": []
    },
    "1210": {
      "block": "main_arc200_transfer_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "1212": {
      "op": "!",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "1213": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1214": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "1216": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1217": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%22#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%22#0"
      ]
    },
    "1220": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%22#0",
        "reinterpret_bytes[32]%23#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%22#0",
        "reinterpret_bytes[32]%23#0"
      ]
    },
    "1223": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc200_transfer",
      "op": "callsub arc200_transfer",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "1226": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0",
        "0x151f7c75"
      ]
    },
    "1227": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%130#0"
      ]
    },
    "1228": {
      "op": "concat",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "1229": {
      "op": "log",
      "stack_out": []
    },
    "1230": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1231": {
      "op": "return",
      "stack_out": []
    },
    "1232": {
      "block": "main_arc1410_balance_of_partition_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "1234": {
      "op": "!",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "1235": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1236": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "1238": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1239": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%20#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%20#0"
      ]
    },
    "1242": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%20#0",
        "reinterpret_bytes[32]%21#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%20#0",
        "reinterpret_bytes[32]%21#0"
      ]
    },
    "1245": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_balance_of_partition",
      "op": "callsub arc1410_balance_of_partition",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0"
      ]
    },
    "1248": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0",
        "0x151f7c75"
      ]
    },
    "1249": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%124#0"
      ]
    },
    "1250": {
      "op": "concat",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "1251": {
      "op": "log",
      "stack_out": []
    },
    "1252": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1253": {
      "op": "return",
      "stack_out": []
    },
    "1254": {
      "block": "main_arc1594_is_issuable_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "1256": {
      "op": "!",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "1257": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1258": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "1260": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1261": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_is_issuable",
      "op": "callsub arc1594_is_issuable",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "1264": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0",
        "0x151f7c75"
      ]
    },
    "1265": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%118#0"
      ]
    },
    "1266": {
      "op": "concat",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "1267": {
      "op": "log",
      "stack_out": []
    },
    "1268": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1269": {
      "op": "return",
      "stack_out": []
    },
    "1270": {
      "block": "main_arc1594_transfer_from_with_data_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "1272": {
      "op": "!",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "1273": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1274": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "1276": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1277": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%17#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%17#0"
      ]
    },
    "1280": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0"
      ]
    },
    "1283": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0",
        "reinterpret_bytes[32]%19#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0",
        "reinterpret_bytes[32]%19#0"
      ]
    },
    "1286": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0",
        "reinterpret_bytes[32]%19#0",
        "tmp%111#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0",
        "reinterpret_bytes[32]%19#0",
        "tmp%111#0"
      ]
    },
    "1289": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_transfer_from_with_data",
      "op": "callsub arc1594_transfer_from_with_data",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "1292": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0",
        "0x151f7c75"
      ]
    },
    "1293": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%112#0"
      ]
    },
    "1294": {
      "op": "concat",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "1295": {
      "op": "log",
      "stack_out": []
    },
    "1296": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1297": {
      "op": "return",
      "stack_out": []
    },
    "1298": {
      "block": "main_arc1594_transfer_with_data_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "1300": {
      "op": "!",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "1301": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1302": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "1304": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1305": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%15#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%15#0"
      ]
    },
    "1308": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%15#0",
        "reinterpret_bytes[32]%16#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%15#0",
        "reinterpret_bytes[32]%16#0"
      ]
    },
    "1311": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%15#0",
        "reinterpret_bytes[32]%16#0",
        "tmp%104#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%15#0",
        "reinterpret_bytes[32]%16#0",
        "tmp%104#0"
      ]
    },
    "1314": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_transfer_with_data",
      "op": "callsub arc1594_transfer_with_data",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "1317": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0",
        "0x151f7c75"
      ]
    },
    "1318": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%105#0"
      ]
    },
    "1319": {
      "op": "concat",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "1320": {
      "op": "log",
      "stack_out": []
    },
    "1321": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1322": {
      "op": "return",
      "stack_out": []
    },
    "1323": {
      "block": "main_arc1594_redeem_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "1325": {
      "op": "!",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "1326": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1327": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "1329": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1330": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%14#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%14#0"
      ]
    },
    "1333": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%14#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%14#0",
        "tmp%99#0"
      ]
    },
    "1336": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_redeem",
      "op": "callsub arc1594_redeem",
      "stack_out": []
    },
    "1339": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1340": {
      "op": "return",
      "stack_out": []
    },
    "1341": {
      "block": "main_arc1594_redeemFrom_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "1343": {
      "op": "!",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "1344": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1345": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "1347": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1348": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%12#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%12#0"
      ]
    },
    "1351": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%12#0",
        "reinterpret_bytes[32]%13#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%12#0",
        "reinterpret_bytes[32]%13#0"
      ]
    },
    "1354": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%12#0",
        "reinterpret_bytes[32]%13#0",
        "tmp%94#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%12#0",
        "reinterpret_bytes[32]%13#0",
        "tmp%94#0"
      ]
    },
    "1357": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_redeemFrom",
      "op": "callsub arc1594_redeemFrom",
      "stack_out": []
    },
    "1360": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1361": {
      "op": "return",
      "stack_out": []
    },
    "1362": {
      "block": "main_arc1594_issue_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "1364": {
      "op": "!",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "1365": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1366": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "1368": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1369": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%10#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%10#0"
      ]
    },
    "1372": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0"
      ]
    },
    "1375": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0",
        "tmp%89#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0",
        "tmp%89#0"
      ]
    },
    "1378": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_issue",
      "op": "callsub arc1594_issue",
      "stack_out": []
    },
    "1381": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1382": {
      "op": "return",
      "stack_out": []
    },
    "1383": {
      "block": "main_arc1594_set_issuable_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "1385": {
      "op": "!",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "1386": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1387": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "1389": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1390": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%6#0"
      ]
    },
    "1393": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_set_issuable",
      "op": "callsub arc1594_set_issuable",
      "stack_out": []
    },
    "1396": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1397": {
      "op": "return",
      "stack_out": []
    },
    "1398": {
      "block": "main_arc1643_get_all_documents_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "1400": {
      "op": "!",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "1401": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1402": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "1404": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1405": {
      "callsub": "smart_contracts/security_token/arc1643.algo.ts::Arc1643.arc1643_get_all_documents",
      "op": "callsub arc1643_get_all_documents",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "1408": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0",
        "0x151f7c75"
      ]
    },
    "1409": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%79#0"
      ]
    },
    "1410": {
      "op": "concat",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "1411": {
      "op": "log",
      "stack_out": []
    },
    "1412": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1413": {
      "op": "return",
      "stack_out": []
    },
    "1414": {
      "block": "main_arc1643_remove_document_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "1416": {
      "op": "!",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "1417": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1418": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "1420": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1421": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "1424": {
      "callsub": "smart_contracts/security_token/arc1643.algo.ts::Arc1643.arc1643_remove_document",
      "op": "callsub arc1643_remove_document",
      "stack_out": []
    },
    "1427": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1428": {
      "op": "return",
      "stack_out": []
    },
    "1429": {
      "block": "main_arc1643_get_document_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "1431": {
      "op": "!",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "1432": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1433": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "1435": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1436": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "1439": {
      "callsub": "smart_contracts/security_token/arc1643.algo.ts::Arc1643.arc1643_get_document",
      "op": "callsub arc1643_get_document",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "1442": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "0x151f7c75"
      ]
    },
    "1443": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%68#0"
      ]
    },
    "1444": {
      "op": "concat",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "1445": {
      "op": "log",
      "stack_out": []
    },
    "1446": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1447": {
      "op": "return",
      "stack_out": []
    },
    "1448": {
      "block": "main_arc1643_set_document_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "1450": {
      "op": "!",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "1451": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1452": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "1454": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1455": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "1458": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%60#0",
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "tmp%61#0"
      ]
    },
    "1461": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%60#0",
        "tmp%61#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "tmp%61#0",
        "tmp%62#0"
      ]
    },
    "1464": {
      "callsub": "smart_contracts/security_token/arc1643.algo.ts::Arc1643.arc1643_set_document",
      "op": "callsub arc1643_set_document",
      "stack_out": []
    },
    "1467": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1468": {
      "op": "return",
      "stack_out": []
    },
    "1469": {
      "block": "main_arc1644_controller_redeem_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "1471": {
      "op": "!",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "1472": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1473": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "1475": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1476": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%8#0"
      ]
    },
    "1479": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%8#0",
        "reinterpret_bytes[32]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%8#0",
        "reinterpret_bytes[32]%9#0"
      ]
    },
    "1482": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%8#0",
        "reinterpret_bytes[32]%9#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%8#0",
        "reinterpret_bytes[32]%9#0",
        "tmp%53#0"
      ]
    },
    "1485": {
      "callsub": "smart_contracts/security_token/arc1644.algo.ts::Arc1644.arc1644_controller_redeem",
      "op": "callsub arc1644_controller_redeem",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "1488": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "0x151f7c75"
      ]
    },
    "1489": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%54#0"
      ]
    },
    "1490": {
      "op": "concat",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "1491": {
      "op": "log",
      "stack_out": []
    },
    "1492": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1493": {
      "op": "return",
      "stack_out": []
    },
    "1494": {
      "block": "main_arc1644_controller_transfer_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "1496": {
      "op": "!",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "1497": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1498": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "1500": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1501": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%5#0"
      ]
    },
    "1504": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0"
      ]
    },
    "1507": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[32]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[32]%7#0"
      ]
    },
    "1510": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[32]%7#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[32]%7#0",
        "tmp%45#0"
      ]
    },
    "1513": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[32]%7#0",
        "tmp%45#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[32]%7#0",
        "tmp%45#0",
        "tmp%46#0"
      ]
    },
    "1516": {
      "callsub": "smart_contracts/security_token/arc1644.algo.ts::Arc1644.arc1644_controller_transfer",
      "op": "callsub arc1644_controller_transfer",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "1519": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "0x151f7c75"
      ]
    },
    "1520": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%47#0"
      ]
    },
    "1521": {
      "op": "concat",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "1522": {
      "op": "log",
      "stack_out": []
    },
    "1523": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1524": {
      "op": "return",
      "stack_out": []
    },
    "1525": {
      "block": "main_arc1644_is_controllable_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "1527": {
      "op": "!",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "1528": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1529": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "1531": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1532": {
      "callsub": "smart_contracts/security_token/arc1644.algo.ts::Arc1644.arc1644_is_controllable",
      "op": "callsub arc1644_is_controllable",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "1535": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "0x151f7c75"
      ]
    },
    "1536": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%39#0"
      ]
    },
    "1537": {
      "op": "concat",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "1538": {
      "op": "log",
      "stack_out": []
    },
    "1539": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1540": {
      "op": "return",
      "stack_out": []
    },
    "1541": {
      "block": "main_arc1644_set_min_action_interval_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "1543": {
      "op": "!",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "1544": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1545": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "1547": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1548": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "1551": {
      "callsub": "smart_contracts/security_token/arc1644.algo.ts::Arc1644.arc1644_set_min_action_interval",
      "op": "callsub arc1644_set_min_action_interval",
      "stack_out": []
    },
    "1554": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1555": {
      "op": "return",
      "stack_out": []
    },
    "1556": {
      "block": "main_arc1644_set_require_justification_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "1558": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "1559": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1560": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "1562": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1563": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%5#0"
      ]
    },
    "1566": {
      "callsub": "smart_contracts/security_token/arc1644.algo.ts::Arc1644.arc1644_set_require_justification",
      "op": "callsub arc1644_set_require_justification",
      "stack_out": []
    },
    "1569": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1570": {
      "op": "return",
      "stack_out": []
    },
    "1571": {
      "block": "main_arc1644_set_controllable_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "1573": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1574": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1575": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "1577": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1578": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "1581": {
      "callsub": "smart_contracts/security_token/arc1644.algo.ts::Arc1644.arc1644_set_controllable",
      "op": "callsub arc1644_set_controllable",
      "stack_out": []
    },
    "1584": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1585": {
      "op": "return",
      "stack_out": []
    },
    "1586": {
      "block": "main_arc1644_set_controller_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "1588": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1589": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1590": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "1592": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1593": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0"
      ]
    },
    "1596": {
      "callsub": "smart_contracts/security_token/arc1644.algo.ts::Arc1644.arc1644_set_controller",
      "op": "callsub arc1644_set_controller",
      "stack_out": []
    },
    "1599": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1600": {
      "op": "return",
      "stack_out": []
    },
    "1601": {
      "block": "main_bootstrap1400_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1603": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1604": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1605": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1607": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1608": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1611": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "1614": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "1617": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "reinterpret_bytes[32]%1#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "reinterpret_bytes[1]%1#0",
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "1620": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[32]%2#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "reinterpret_bytes[1]%1#0",
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "1623": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "reinterpret_bytes[1]%1#0",
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0"
      ]
    },
    "1626": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "reinterpret_bytes[1]%2#0",
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "reinterpret_bytes[1]%1#0",
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "1629": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "reinterpret_bytes[1]%2#0",
        "reinterpret_bytes[1]%3#0",
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "reinterpret_bytes[1]%1#0",
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[1]%2#0",
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "1632": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "reinterpret_bytes[1]%2#0",
        "reinterpret_bytes[1]%3#0",
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "reinterpret_bytes[1]%1#0",
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[1]%2#0",
        "reinterpret_bytes[1]%3#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "1635": {
      "callsub": "smart_contracts/security_token/arc1400.algo.ts::Arc1400.bootstrap1400",
      "op": "callsub bootstrap1400",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1638": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "0x151f7c75"
      ]
    },
    "1639": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%17#0"
      ]
    },
    "1640": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1641": {
      "op": "log",
      "stack_out": []
    },
    "1642": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1643": {
      "op": "return",
      "stack_out": []
    },
    "1644": {
      "block": "main_bootstrap_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1646": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1647": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1648": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1650": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1651": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1654": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "1657": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "1660": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1663": {
      "callsub": "smart_contracts/security_token/arc1400.algo.ts::Arc1400.bootstrap",
      "op": "callsub bootstrap",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1666": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "1667": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%9#0"
      ]
    },
    "1668": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1669": {
      "op": "log",
      "stack_out": []
    },
    "1670": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1671": {
      "op": "return",
      "stack_out": []
    },
    "1672": {
      "block": "main_bare_routing@57",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%282#0"
      ],
      "stack_out": [
        "tmp%282#0"
      ]
    },
    "1674": {
      "op": "bnz main_after_if_else@61",
      "stack_out": []
    },
    "1677": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%283#0"
      ],
      "stack_out": [
        "tmp%283#0"
      ]
    },
    "1679": {
      "op": "!",
      "defined_out": [
        "tmp%284#0"
      ],
      "stack_out": [
        "tmp%284#0"
      ]
    },
    "1680": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1681": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1682": {
      "op": "return",
      "stack_out": []
    },
    "1683": {
      "subroutine": "_puya_lib.arc4.dynamic_array_concat_byte_length_head",
      "params": {
        "array#0": "bytes",
        "new_items_bytes#0": "bytes",
        "new_items_count#0": "uint64"
      },
      "block": "dynamic_array_concat_byte_length_head",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1686": {
      "op": "frame_dig -3",
      "defined_out": [
        "array#0 (copy)"
      ],
      "stack_out": [
        "array#0 (copy)"
      ]
    },
    "1688": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array#0 (copy)"
      ],
      "stack_out": [
        "array#0 (copy)",
        "0"
      ]
    },
    "1689": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length#0"
      ],
      "stack_out": [
        "array_length#0"
      ]
    },
    "1690": {
      "op": "dup",
      "defined_out": [
        "array_length#0",
        "array_length#0 (copy)"
      ],
      "stack_out": [
        "array_length#0",
        "array_length#0 (copy)"
      ]
    },
    "1691": {
      "op": "frame_dig -1",
      "defined_out": [
        "array_length#0",
        "array_length#0 (copy)",
        "new_items_count#0 (copy)"
      ],
      "stack_out": [
        "array_length#0",
        "array_length#0 (copy)",
        "new_items_count#0 (copy)"
      ]
    },
    "1693": {
      "op": "+",
      "defined_out": [
        "array_length#0",
        "new_length#0"
      ],
      "stack_out": [
        "array_length#0",
        "new_length#0"
      ]
    },
    "1694": {
      "op": "swap",
      "stack_out": [
        "new_length#0",
        "array_length#0"
      ]
    },
    "1695": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "array_length#0",
        "new_length#0"
      ],
      "stack_out": [
        "new_length#0",
        "array_length#0",
        "2"
      ]
    },
    "1696": {
      "op": "*",
      "defined_out": [
        "new_length#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "new_length#0",
        "tmp%0#0"
      ]
    },
    "1697": {
      "op": "intc_3 // 2",
      "stack_out": [
        "new_length#0",
        "tmp%0#0",
        "2"
      ]
    },
    "1698": {
      "op": "+",
      "defined_out": [
        "header_end#0",
        "new_length#0"
      ],
      "stack_out": [
        "new_length#0",
        "header_end#0"
      ]
    },
    "1699": {
      "op": "dig 1",
      "defined_out": [
        "header_end#0",
        "new_length#0",
        "new_length#0 (copy)"
      ],
      "stack_out": [
        "new_length#0",
        "header_end#0",
        "new_length#0 (copy)"
      ]
    },
    "1701": {
      "op": "itob",
      "defined_out": [
        "header_end#0",
        "new_length#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "new_length#0",
        "header_end#0",
        "tmp%1#0"
      ]
    },
    "1702": {
      "op": "extract 6 2",
      "defined_out": [
        "header_end#0",
        "new_length#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "new_length#0",
        "header_end#0",
        "tmp%2#0"
      ]
    },
    "1705": {
      "op": "cover 2",
      "defined_out": [
        "header_end#0",
        "new_length#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0"
      ]
    },
    "1707": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "array#0 (copy)"
      ]
    },
    "1709": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "array#0 (copy)",
        "2"
      ]
    },
    "1710": {
      "op": "dig 2",
      "defined_out": [
        "2",
        "array#0 (copy)",
        "header_end#0",
        "header_end#0 (copy)",
        "new_length#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "array#0 (copy)",
        "2",
        "header_end#0 (copy)"
      ]
    },
    "1712": {
      "op": "substring3",
      "defined_out": [
        "header_end#0",
        "new_length#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "tmp%3#0"
      ]
    },
    "1713": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "tmp%3#0",
        "new_items_count#0 (copy)"
      ]
    },
    "1715": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "tmp%3#0",
        "new_items_count#0 (copy)",
        "2"
      ]
    },
    "1716": {
      "op": "*",
      "defined_out": [
        "header_end#0",
        "new_length#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1717": {
      "op": "bzero",
      "defined_out": [
        "header_end#0",
        "new_length#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "1718": {
      "op": "concat",
      "defined_out": [
        "header_end#0",
        "new_length#0",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "tmp%6#0"
      ]
    },
    "1719": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "tmp%6#0",
        "array#0 (copy)"
      ]
    },
    "1721": {
      "op": "len",
      "defined_out": [
        "header_end#0",
        "new_length#0",
        "tmp%2#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "1722": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "tmp%6#0",
        "tmp%7#0",
        "array#0 (copy)"
      ]
    },
    "1724": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "tmp%6#0",
        "tmp%7#0",
        "array#0 (copy)",
        "header_end#0"
      ]
    },
    "1726": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "tmp%6#0",
        "array#0 (copy)",
        "header_end#0",
        "tmp%7#0"
      ]
    },
    "1728": {
      "op": "substring3",
      "defined_out": [
        "new_length#0",
        "tmp%2#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "1729": {
      "op": "concat",
      "defined_out": [
        "new_length#0",
        "tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "tmp%9#0"
      ]
    },
    "1730": {
      "op": "frame_dig -2",
      "defined_out": [
        "new_items_bytes#0 (copy)",
        "new_length#0",
        "tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "tmp%9#0",
        "new_items_bytes#0 (copy)"
      ]
    },
    "1732": {
      "op": "concat",
      "defined_out": [
        "array_head_and_tail#0",
        "new_length#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "array_head_and_tail#0"
      ]
    },
    "1733": {
      "op": "swap",
      "defined_out": [
        "array_head_and_tail#0",
        "new_length#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "new_length#0"
      ]
    },
    "1734": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "new_length#0",
        "2"
      ]
    },
    "1735": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail#0",
        "tail_offset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0"
      ]
    },
    "1736": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail#0",
        "tail_offset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "tail_offset#0"
      ]
    },
    "1737": {
      "op": "intc_0 // 0",
      "defined_out": [
        "array_head_and_tail#0",
        "head_offset#0",
        "tail_offset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "tail_offset#0",
        "head_offset#0"
      ]
    },
    "1738": {
      "op": "swap",
      "defined_out": [
        "array_head_and_tail#0",
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1"
      ]
    },
    "1739": {
      "block": "dynamic_array_concat_byte_length_head_for_header@2",
      "stack_in": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0"
      ]
    },
    "1741": {
      "op": "frame_dig 2",
      "defined_out": [
        "head_offset#0",
        "tail_offset#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#0"
      ]
    },
    "1743": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "head_offset#0",
        "tail_offset#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "continue_looping%0#0"
      ]
    },
    "1744": {
      "op": "bz dynamic_array_concat_byte_length_head_after_for@5",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1"
      ]
    },
    "1747": {
      "op": "frame_dig 4",
      "defined_out": [
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tail_offset#1"
      ]
    },
    "1749": {
      "op": "dup",
      "defined_out": [
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1",
        "tail_offset#1 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tail_offset#1",
        "tail_offset#1 (copy)"
      ]
    },
    "1750": {
      "op": "itob",
      "defined_out": [
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tail_offset#1",
        "tmp%5#0"
      ]
    },
    "1751": {
      "op": "extract 6 2",
      "defined_out": [
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1",
        "tail_offset_bytes#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tail_offset#1",
        "tail_offset_bytes#0"
      ]
    },
    "1754": {
      "op": "frame_dig 1",
      "defined_out": [
        "array_head_and_tail#0",
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1",
        "tail_offset_bytes#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tail_offset#1",
        "tail_offset_bytes#0",
        "array_head_and_tail#0"
      ]
    },
    "1756": {
      "op": "frame_dig 3",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tail_offset#1",
        "tail_offset_bytes#0",
        "array_head_and_tail#0",
        "head_offset#0"
      ]
    },
    "1758": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail#0",
        "head_offset#0",
        "head_offset#0 (copy)",
        "tail_offset#0",
        "tail_offset#1",
        "tail_offset_bytes#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tail_offset#1",
        "tail_offset_bytes#0",
        "array_head_and_tail#0",
        "head_offset#0 (copy)",
        "head_offset#0 (copy)"
      ]
    },
    "1759": {
      "op": "cover 4",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1",
        "tail_offset_bytes#0",
        "array_head_and_tail#0",
        "head_offset#0 (copy)"
      ]
    },
    "1761": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1",
        "array_head_and_tail#0",
        "head_offset#0 (copy)",
        "tail_offset_bytes#0"
      ]
    },
    "1763": {
      "op": "replace3",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1",
        "array_head_and_tail#0"
      ]
    },
    "1764": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1",
        "array_head_and_tail#0",
        "array_head_and_tail#0"
      ]
    },
    "1765": {
      "op": "frame_bury 1",
      "defined_out": [
        "array_head_and_tail#0",
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1",
        "array_head_and_tail#0"
      ]
    },
    "1767": {
      "op": "dig 1",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1",
        "array_head_and_tail#0",
        "tail_offset#1 (copy)"
      ]
    },
    "1769": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail#0",
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1",
        "tmp%6#1"
      ]
    },
    "1770": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "array_head_and_tail#0",
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1",
        "tmp%6#1",
        "2"
      ]
    },
    "1771": {
      "op": "+",
      "defined_out": [
        "array_head_and_tail#0",
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1",
        "tmp%7#0"
      ]
    },
    "1772": {
      "op": "+",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1"
      ]
    },
    "1773": {
      "op": "frame_bury 4",
      "defined_out": [
        "array_head_and_tail#0",
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0"
      ]
    },
    "1775": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "2"
      ]
    },
    "1776": {
      "op": "+",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0"
      ]
    },
    "1777": {
      "op": "frame_bury 3",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1"
      ]
    },
    "1779": {
      "op": "b dynamic_array_concat_byte_length_head_for_header@2"
    },
    "1782": {
      "block": "dynamic_array_concat_byte_length_head_after_for@5",
      "stack_in": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tmp%2#0"
      ]
    },
    "1784": {
      "op": "frame_dig 1",
      "defined_out": [
        "array_head_and_tail#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tmp%2#0",
        "array_head_and_tail#0"
      ]
    },
    "1786": {
      "op": "concat",
      "defined_out": [
        "array_head_and_tail#0",
        "tmp%12#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tmp%12#0"
      ]
    },
    "1787": {
      "op": "frame_bury 0"
    },
    "1789": {
      "retsub": true,
      "op": "retsub"
    },
    "1790": {
      "subroutine": "smart_contracts/security_token/arc1400.algo.ts::Arc1400.bootstrap",
      "params": {
        "name#0": "bytes",
        "symbol#0": "bytes",
        "decimals#0": "bytes",
        "totalSupply#0": "bytes"
      },
      "block": "bootstrap",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "1793": {
      "op": "txn Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "1795": {
      "op": "frame_dig -4",
      "defined_out": [
        "name#0 (copy)",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "name#0 (copy)"
      ]
    },
    "1797": {
      "op": "frame_dig -3",
      "defined_out": [
        "name#0 (copy)",
        "sender#0",
        "symbol#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "name#0 (copy)",
        "symbol#0 (copy)"
      ]
    },
    "1799": {
      "op": "frame_dig -2",
      "defined_out": [
        "decimals#0 (copy)",
        "name#0 (copy)",
        "sender#0",
        "symbol#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "name#0 (copy)",
        "symbol#0 (copy)",
        "decimals#0 (copy)"
      ]
    },
    "1801": {
      "op": "frame_dig -1",
      "defined_out": [
        "decimals#0 (copy)",
        "name#0 (copy)",
        "sender#0",
        "symbol#0 (copy)",
        "totalSupply#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "name#0 (copy)",
        "symbol#0 (copy)",
        "decimals#0 (copy)",
        "totalSupply#0 (copy)"
      ]
    },
    "1803": {
      "op": "dig 4",
      "defined_out": [
        "decimals#0 (copy)",
        "name#0 (copy)",
        "sender#0",
        "sender#0 (copy)",
        "symbol#0 (copy)",
        "totalSupply#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "name#0 (copy)",
        "symbol#0 (copy)",
        "decimals#0 (copy)",
        "totalSupply#0 (copy)",
        "sender#0 (copy)"
      ]
    },
    "1805": {
      "op": "uncover 5",
      "stack_out": [
        "name#0 (copy)",
        "symbol#0 (copy)",
        "decimals#0 (copy)",
        "totalSupply#0 (copy)",
        "sender#0 (copy)",
        "sender#0"
      ]
    },
    "1807": {
      "op": "bytec 7 // 0x80",
      "defined_out": [
        "0x80",
        "decimals#0 (copy)",
        "name#0 (copy)",
        "sender#0",
        "sender#0 (copy)",
        "symbol#0 (copy)",
        "totalSupply#0 (copy)"
      ],
      "stack_out": [
        "name#0 (copy)",
        "symbol#0 (copy)",
        "decimals#0 (copy)",
        "totalSupply#0 (copy)",
        "sender#0 (copy)",
        "sender#0",
        "0x80"
      ]
    },
    "1809": {
      "op": "dup",
      "stack_out": [
        "name#0 (copy)",
        "symbol#0 (copy)",
        "decimals#0 (copy)",
        "totalSupply#0 (copy)",
        "sender#0 (copy)",
        "sender#0",
        "0x80",
        "0x80"
      ]
    },
    "1810": {
      "op": "bytec 14 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "0x80",
        "decimals#0 (copy)",
        "name#0 (copy)",
        "sender#0",
        "sender#0 (copy)",
        "symbol#0 (copy)",
        "totalSupply#0 (copy)"
      ],
      "stack_out": [
        "name#0 (copy)",
        "symbol#0 (copy)",
        "decimals#0 (copy)",
        "totalSupply#0 (copy)",
        "sender#0 (copy)",
        "sender#0",
        "0x80",
        "0x80",
        "0x0000000000000000"
      ]
    },
    "1812": {
      "callsub": "smart_contracts/security_token/arc1400.algo.ts::Arc1400.bootstrap1400",
      "op": "callsub bootstrap1400",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1815": {
      "retsub": true,
      "op": "retsub"
    },
    "1816": {
      "subroutine": "smart_contracts/security_token/arc1400.algo.ts::Arc1400.bootstrap1400",
      "params": {
        "name#0": "bytes",
        "symbol#0": "bytes",
        "decimals#0": "bytes",
        "totalSupply#0": "bytes",
        "owner#0": "bytes",
        "controller#0": "bytes",
        "controllable#0": "bytes",
        "requireJustification#0": "bytes",
        "minControllerActionInterval#0": "bytes"
      },
      "block": "bootstrap1400",
      "stack_in": [],
      "op": "proto 9 1"
    },
    "1819": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1821": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1823": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1824": {
      "error": "Only deployer of this smart contract can call bootstrap method",
      "op": "assert // Only deployer of this smart contract can call bootstrap method",
      "stack_out": []
    },
    "1825": {
      "op": "frame_dig -9",
      "defined_out": [
        "name#0 (copy)"
      ],
      "stack_out": [
        "name#0 (copy)"
      ]
    },
    "1827": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1830": {
      "op": "len",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1831": {
      "op": "dup",
      "defined_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "1832": {
      "error": "Name of the asset must be longer or equal to 1 character",
      "op": "assert // Name of the asset must be longer or equal to 1 character",
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1833": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "32"
      ]
    },
    "1834": {
      "op": "<=",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1835": {
      "error": "Name of the asset must be shorter or equal to 32 characters",
      "op": "assert // Name of the asset must be shorter or equal to 32 characters",
      "stack_out": []
    },
    "1836": {
      "op": "frame_dig -8",
      "defined_out": [
        "symbol#0 (copy)"
      ],
      "stack_out": [
        "symbol#0 (copy)"
      ]
    },
    "1838": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1841": {
      "op": "len",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1842": {
      "op": "dup",
      "defined_out": [
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "1843": {
      "error": "Symbol of the asset must be longer or equal to 1 character",
      "op": "assert // Symbol of the asset must be longer or equal to 1 character",
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1844": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "8"
      ]
    },
    "1846": {
      "op": "<=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1847": {
      "error": "Symbol of the asset must be shorter or equal to 8 characters",
      "op": "assert // Symbol of the asset must be shorter or equal to 8 characters",
      "stack_out": []
    },
    "1848": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1849": {
      "op": "bytec_3 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"t\""
      ]
    },
    "1850": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1851": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1853": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1854": {
      "error": "This method can be called only once",
      "op": "assert // This method can be called only once",
      "stack_out": []
    },
    "1855": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1857": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_initialize_owner",
      "op": "callsub arc88_initialize_owner",
      "stack_out": []
    },
    "1860": {
      "op": "pushbytes \"n\"",
      "defined_out": [
        "\"n\""
      ],
      "stack_out": [
        "\"n\""
      ]
    },
    "1863": {
      "op": "frame_dig -9",
      "stack_out": [
        "\"n\"",
        "name#0 (copy)"
      ]
    },
    "1865": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1866": {
      "op": "pushbytes \"s\"",
      "defined_out": [
        "\"s\""
      ],
      "stack_out": [
        "\"s\""
      ]
    },
    "1869": {
      "op": "frame_dig -8",
      "stack_out": [
        "\"s\"",
        "symbol#0 (copy)"
      ]
    },
    "1871": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1872": {
      "op": "bytec_3 // \"t\"",
      "stack_out": [
        "\"t\""
      ]
    },
    "1873": {
      "op": "frame_dig -6",
      "defined_out": [
        "\"t\"",
        "totalSupply#0 (copy)"
      ],
      "stack_out": [
        "\"t\"",
        "totalSupply#0 (copy)"
      ]
    },
    "1875": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1876": {
      "op": "pushbytes \"d\"",
      "defined_out": [
        "\"d\""
      ],
      "stack_out": [
        "\"d\""
      ]
    },
    "1879": {
      "op": "frame_dig -7",
      "defined_out": [
        "\"d\"",
        "decimals#0 (copy)"
      ],
      "stack_out": [
        "\"d\"",
        "decimals#0 (copy)"
      ]
    },
    "1881": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1882": {
      "op": "bytec 15 // \"arc1594_iss\"",
      "defined_out": [
        "\"arc1594_iss\""
      ],
      "stack_out": [
        "\"arc1594_iss\""
      ]
    },
    "1884": {
      "op": "bytec 7 // 0x80",
      "defined_out": [
        "\"arc1594_iss\"",
        "0x80"
      ],
      "stack_out": [
        "\"arc1594_iss\"",
        "0x80"
      ]
    },
    "1886": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1887": {
      "op": "txn Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "1889": {
      "op": "bytec 4 // \"b\"",
      "defined_out": [
        "\"b\"",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "\"b\""
      ]
    },
    "1891": {
      "op": "dig 1",
      "defined_out": [
        "\"b\"",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "\"b\"",
        "sender#0 (copy)"
      ]
    },
    "1893": {
      "op": "concat",
      "defined_out": [
        "sender#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%17#0"
      ]
    },
    "1894": {
      "op": "frame_dig -6",
      "stack_out": [
        "sender#0",
        "tmp%17#0",
        "totalSupply#0 (copy)"
      ]
    },
    "1896": {
      "op": "box_put",
      "stack_out": [
        "sender#0"
      ]
    },
    "1897": {
      "op": "global ZeroAddress",
      "defined_out": [
        "sender#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%18#0"
      ]
    },
    "1899": {
      "op": "swap",
      "stack_out": [
        "tmp%18#0",
        "sender#0"
      ]
    },
    "1900": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1901": {
      "op": "frame_dig -6",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "totalSupply#0 (copy)"
      ]
    },
    "1903": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1904": {
      "op": "bytec 28 // method \"arc200_Transfer(address,address,uint256)\"",
      "defined_out": [
        "Method(arc200_Transfer(address,address,uint256))",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "Method(arc200_Transfer(address,address,uint256))"
      ]
    },
    "1906": {
      "op": "swap",
      "stack_out": [
        "Method(arc200_Transfer(address,address,uint256))",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1907": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "1908": {
      "op": "log",
      "stack_out": []
    },
    "1909": {
      "op": "bytec 9 // \"arc1644_ctrl\"",
      "defined_out": [
        "\"arc1644_ctrl\""
      ],
      "stack_out": [
        "\"arc1644_ctrl\""
      ]
    },
    "1911": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"arc1644_ctrl\"",
        "controller#0 (copy)"
      ],
      "stack_out": [
        "\"arc1644_ctrl\"",
        "controller#0 (copy)"
      ]
    },
    "1913": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1914": {
      "op": "bytec 5 // \"arc1644_ctrlen\"",
      "defined_out": [
        "\"arc1644_ctrlen\""
      ],
      "stack_out": [
        "\"arc1644_ctrlen\""
      ]
    },
    "1916": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"arc1644_ctrlen\"",
        "controllable#0 (copy)"
      ],
      "stack_out": [
        "\"arc1644_ctrlen\"",
        "controllable#0 (copy)"
      ]
    },
    "1918": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1919": {
      "op": "bytec 18 // \"arc1644_rjust\"",
      "defined_out": [
        "\"arc1644_rjust\""
      ],
      "stack_out": [
        "\"arc1644_rjust\""
      ]
    },
    "1921": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"arc1644_rjust\"",
        "requireJustification#0 (copy)"
      ],
      "stack_out": [
        "\"arc1644_rjust\"",
        "requireJustification#0 (copy)"
      ]
    },
    "1923": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1924": {
      "op": "bytec 19 // \"arc1644_lcar\"",
      "defined_out": [
        "\"arc1644_lcar\""
      ],
      "stack_out": [
        "\"arc1644_lcar\""
      ]
    },
    "1926": {
      "op": "bytec 14 // 0x0000000000000000",
      "defined_out": [
        "\"arc1644_lcar\"",
        "0x0000000000000000"
      ],
      "stack_out": [
        "\"arc1644_lcar\"",
        "0x0000000000000000"
      ]
    },
    "1928": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1929": {
      "op": "bytec 16 // \"arc1644_mcai\"",
      "defined_out": [
        "\"arc1644_mcai\""
      ],
      "stack_out": [
        "\"arc1644_mcai\""
      ]
    },
    "1931": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"arc1644_mcai\"",
        "minControllerActionInterval#0 (copy)"
      ],
      "stack_out": [
        "\"arc1644_mcai\"",
        "minControllerActionInterval#0 (copy)"
      ]
    },
    "1933": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1934": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "1936": {
      "op": "frame_dig -5",
      "defined_out": [
        "owner#0 (copy)",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "owner#0 (copy)"
      ]
    },
    "1938": {
      "op": "!=",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1939": {
      "op": "bz bootstrap1400_after_if_else@2",
      "stack_out": []
    },
    "1942": {
      "op": "frame_dig -5",
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "1944": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_transfer_ownership",
      "op": "callsub arc88_transfer_ownership",
      "stack_out": []
    },
    "1947": {
      "block": "bootstrap1400_after_if_else@2",
      "stack_in": [],
      "op": "bytec 7 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "0x80"
      ]
    },
    "1949": {
      "retsub": true,
      "op": "retsub"
    },
    "1950": {
      "subroutine": "smart_contracts/security_token/arc1644.algo.ts::Arc1644._onlyOwner",
      "params": {},
      "block": "_onlyOwner",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1952": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_is_owner",
      "op": "callsub arc88_is_owner",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1955": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "1956": {
      "op": "getbit",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1957": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "1"
      ]
    },
    "1958": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1959": {
      "error": "only_owner",
      "op": "assert // only_owner",
      "stack_out": []
    },
    "1960": {
      "retsub": true,
      "op": "retsub"
    },
    "1961": {
      "subroutine": "smart_contracts/security_token/arc1644.algo.ts::Arc1644._onlyController",
      "params": {},
      "block": "_onlyController",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1962": {
      "op": "bytec 9 // \"arc1644_ctrl\"",
      "defined_out": [
        "\"arc1644_ctrl\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc1644_ctrl\""
      ]
    },
    "1964": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1965": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1967": {
      "error": "no_controller",
      "op": "assert // no_controller",
      "stack_out": []
    },
    "1968": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1970": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1971": {
      "op": "bytec 9 // \"arc1644_ctrl\"",
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arc1644_ctrl\""
      ]
    },
    "1973": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1974": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "1975": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1976": {
      "error": "not_controller",
      "op": "assert // not_controller",
      "stack_out": []
    },
    "1977": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1978": {
      "op": "bytec 5 // \"arc1644_ctrlen\"",
      "defined_out": [
        "\"arc1644_ctrlen\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc1644_ctrlen\""
      ]
    },
    "1980": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1981": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%2#0"
      ]
    },
    "1983": {
      "op": "bz _onlyController_bool_false@3",
      "stack_out": []
    },
    "1986": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1987": {
      "op": "bytec 5 // \"arc1644_ctrlen\"",
      "stack_out": [
        "0",
        "\"arc1644_ctrlen\""
      ]
    },
    "1989": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1990": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "1991": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%3#0",
        "0"
      ]
    },
    "1992": {
      "op": "getbit",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1993": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "1"
      ]
    },
    "1994": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1995": {
      "op": "bz _onlyController_bool_false@3",
      "stack_out": []
    },
    "1998": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1999": {
      "block": "_onlyController_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "controller_disabled",
      "op": "assert // controller_disabled",
      "defined_out": [],
      "stack_out": []
    },
    "2000": {
      "retsub": true,
      "op": "retsub"
    },
    "2001": {
      "block": "_onlyController_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2002": {
      "op": "b _onlyController_bool_merge@4"
    },
    "2005": {
      "subroutine": "smart_contracts/security_token/arc1644.algo.ts::Arc1644._checkJustification",
      "params": {
        "operator_data#0": "bytes"
      },
      "block": "_checkJustification",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2008": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2009": {
      "op": "bytec 18 // \"arc1644_rjust\"",
      "defined_out": [
        "\"arc1644_rjust\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc1644_rjust\""
      ]
    },
    "2011": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2012": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "2014": {
      "op": "bz _checkJustification_after_if_else@3",
      "stack_out": []
    },
    "2017": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2018": {
      "op": "bytec 18 // \"arc1644_rjust\"",
      "stack_out": [
        "0",
        "\"arc1644_rjust\""
      ]
    },
    "2020": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2021": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2022": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "2023": {
      "op": "getbit",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2024": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "2025": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2026": {
      "op": "bz _checkJustification_after_if_else@3",
      "stack_out": []
    },
    "2029": {
      "op": "frame_dig -1",
      "defined_out": [
        "operator_data#0 (copy)"
      ],
      "stack_out": [
        "operator_data#0 (copy)"
      ]
    },
    "2031": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2034": {
      "op": "len",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2035": {
      "error": "justification_required",
      "op": "assert // justification_required",
      "stack_out": []
    },
    "2036": {
      "block": "_checkJustification_after_if_else@3",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "2037": {
      "subroutine": "smart_contracts/security_token/arc1644.algo.ts::Arc1644._rateLimit",
      "params": {},
      "block": "_rateLimit",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2038": {
      "op": "bytec 16 // \"arc1644_mcai\"",
      "defined_out": [
        "\"arc1644_mcai\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc1644_mcai\""
      ]
    },
    "2040": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2041": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "2043": {
      "op": "bz _rateLimit_after_if_else@5",
      "stack_out": []
    },
    "2046": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2047": {
      "op": "bytec 16 // \"arc1644_mcai\"",
      "stack_out": [
        "0",
        "\"arc1644_mcai\""
      ]
    },
    "2049": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2050": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2051": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2052": {
      "op": "bz _rateLimit_after_if_else@5",
      "stack_out": []
    },
    "2055": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2056": {
      "op": "bytec 19 // \"arc1644_lcar\"",
      "defined_out": [
        "\"arc1644_lcar\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc1644_lcar\""
      ]
    },
    "2058": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2059": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%2#0"
      ]
    },
    "2061": {
      "op": "bz _rateLimit_after_if_else@4",
      "stack_out": []
    },
    "2064": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2065": {
      "op": "bytec 19 // \"arc1644_lcar\"",
      "stack_out": [
        "0",
        "\"arc1644_lcar\""
      ]
    },
    "2067": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2068": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "2069": {
      "op": "btoi",
      "defined_out": [
        "last#0"
      ],
      "stack_out": [
        "last#0"
      ]
    },
    "2070": {
      "op": "intc_0 // 0",
      "stack_out": [
        "last#0",
        "0"
      ]
    },
    "2071": {
      "op": "bytec 16 // \"arc1644_mcai\"",
      "stack_out": [
        "last#0",
        "0",
        "\"arc1644_mcai\""
      ]
    },
    "2073": {
      "op": "app_global_get_ex",
      "defined_out": [
        "last#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "last#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2074": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "last#0",
        "maybe_value%4#0"
      ]
    },
    "2075": {
      "op": "btoi",
      "defined_out": [
        "last#0",
        "minGap#0"
      ],
      "stack_out": [
        "last#0",
        "minGap#0"
      ]
    },
    "2076": {
      "op": "global Round",
      "defined_out": [
        "last#0",
        "minGap#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "last#0",
        "minGap#0",
        "to_encode%0#0"
      ]
    },
    "2078": {
      "op": "itob",
      "defined_out": [
        "last#0",
        "minGap#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "last#0",
        "minGap#0",
        "val_as_bytes%0#0"
      ]
    },
    "2079": {
      "op": "btoi",
      "defined_out": [
        "current#0",
        "last#0",
        "minGap#0"
      ],
      "stack_out": [
        "last#0",
        "minGap#0",
        "current#0"
      ]
    },
    "2080": {
      "op": "cover 2",
      "stack_out": [
        "current#0",
        "last#0",
        "minGap#0"
      ]
    },
    "2082": {
      "op": "+",
      "defined_out": [
        "current#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "current#0",
        "tmp%2#0"
      ]
    },
    "2083": {
      "op": ">=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2084": {
      "error": "rate_limited",
      "op": "assert // rate_limited",
      "stack_out": []
    },
    "2085": {
      "block": "_rateLimit_after_if_else@4",
      "stack_in": [],
      "op": "global Round",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "2087": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "2088": {
      "op": "bytec 19 // \"arc1644_lcar\"",
      "defined_out": [
        "\"arc1644_lcar\"",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "\"arc1644_lcar\""
      ]
    },
    "2090": {
      "op": "swap",
      "stack_out": [
        "\"arc1644_lcar\"",
        "val_as_bytes%1#0"
      ]
    },
    "2091": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2092": {
      "block": "_rateLimit_after_if_else@5",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "2093": {
      "subroutine": "smart_contracts/security_token/arc1644.algo.ts::Arc1644.arc1644_set_controller",
      "params": {
        "new_controller#0": "bytes"
      },
      "block": "arc1644_set_controller",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2096": {
      "op": "intc_0 // 0",
      "stack_out": [
        "old#0"
      ]
    },
    "2097": {
      "callsub": "smart_contracts/security_token/arc1644.algo.ts::Arc1644._onlyOwner",
      "op": "callsub _onlyOwner"
    },
    "2100": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "old#0",
        "0"
      ]
    },
    "2101": {
      "op": "bytec 9 // \"arc1644_ctrl\"",
      "defined_out": [
        "\"arc1644_ctrl\"",
        "0"
      ],
      "stack_out": [
        "old#0",
        "0",
        "\"arc1644_ctrl\""
      ]
    },
    "2103": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "old#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2104": {
      "op": "bury 1",
      "stack_out": [
        "old#0",
        "maybe_exists%0#0"
      ]
    },
    "2106": {
      "op": "bz arc1644_set_controller_ternary_false@2",
      "stack_out": [
        "old#0"
      ]
    },
    "2109": {
      "op": "intc_0 // 0",
      "stack_out": [
        "old#0",
        "0"
      ]
    },
    "2110": {
      "op": "bytec 9 // \"arc1644_ctrl\"",
      "stack_out": [
        "old#0",
        "0",
        "\"arc1644_ctrl\""
      ]
    },
    "2112": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "old#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2113": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "defined_out": [
        "old#0"
      ],
      "stack_out": [
        "old#0",
        "old#0"
      ]
    },
    "2114": {
      "op": "frame_bury 0",
      "defined_out": [
        "old#0"
      ],
      "stack_out": [
        "old#0"
      ]
    },
    "2116": {
      "block": "arc1644_set_controller_ternary_merge@3",
      "stack_in": [
        "old#0"
      ],
      "op": "bytec 9 // \"arc1644_ctrl\"",
      "defined_out": [
        "\"arc1644_ctrl\""
      ],
      "stack_out": [
        "old#0",
        "\"arc1644_ctrl\""
      ]
    },
    "2118": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"arc1644_ctrl\"",
        "new_controller#0 (copy)"
      ],
      "stack_out": [
        "old#0",
        "\"arc1644_ctrl\"",
        "new_controller#0 (copy)"
      ]
    },
    "2120": {
      "op": "app_global_put",
      "stack_out": [
        "old#0"
      ]
    },
    "2121": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "old#0",
        "0"
      ]
    },
    "2122": {
      "op": "bytec 5 // \"arc1644_ctrlen\"",
      "defined_out": [
        "\"arc1644_ctrlen\"",
        "0"
      ],
      "stack_out": [
        "old#0",
        "0",
        "\"arc1644_ctrlen\""
      ]
    },
    "2124": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "old#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2125": {
      "op": "bury 1",
      "stack_out": [
        "old#0",
        "maybe_exists%2#0"
      ]
    },
    "2127": {
      "op": "bnz arc1644_set_controller_after_if_else@5",
      "stack_out": [
        "old#0"
      ]
    },
    "2130": {
      "op": "bytec 5 // \"arc1644_ctrlen\"",
      "stack_out": [
        "old#0",
        "\"arc1644_ctrlen\""
      ]
    },
    "2132": {
      "op": "bytec 7 // 0x80",
      "defined_out": [
        "\"arc1644_ctrlen\"",
        "0x80"
      ],
      "stack_out": [
        "old#0",
        "\"arc1644_ctrlen\"",
        "0x80"
      ]
    },
    "2134": {
      "op": "app_global_put",
      "stack_out": [
        "old#0"
      ]
    },
    "2135": {
      "block": "arc1644_set_controller_after_if_else@5",
      "stack_in": [
        "old#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "old#0"
      ],
      "stack_out": [
        "old#0",
        "old#0"
      ]
    },
    "2137": {
      "op": "frame_dig -1",
      "defined_out": [
        "new_controller#0 (copy)",
        "old#0"
      ],
      "stack_out": [
        "old#0",
        "old#0",
        "new_controller#0 (copy)"
      ]
    },
    "2139": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "old#0"
      ],
      "stack_out": [
        "old#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2140": {
      "op": "pushbytes 0x409cc570 // method \"ControllerChanged((address,address))\"",
      "defined_out": [
        "Method(ControllerChanged((address,address)))",
        "encoded_tuple_buffer%2#0",
        "old#0"
      ],
      "stack_out": [
        "old#0",
        "encoded_tuple_buffer%2#0",
        "Method(ControllerChanged((address,address)))"
      ]
    },
    "2146": {
      "op": "swap",
      "stack_out": [
        "old#0",
        "Method(ControllerChanged((address,address)))",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2147": {
      "op": "concat",
      "defined_out": [
        "event%0#0",
        "old#0"
      ],
      "stack_out": [
        "old#0",
        "event%0#0"
      ]
    },
    "2148": {
      "op": "log",
      "stack_out": [
        "old#0"
      ]
    },
    "2149": {
      "retsub": true,
      "op": "retsub"
    },
    "2150": {
      "block": "arc1644_set_controller_ternary_false@2",
      "stack_in": [
        "old#0"
      ],
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "old#0"
      ],
      "stack_out": [
        "old#0",
        "old#0"
      ]
    },
    "2151": {
      "op": "frame_bury 0",
      "defined_out": [
        "old#0"
      ],
      "stack_out": [
        "old#0"
      ]
    },
    "2153": {
      "op": "b arc1644_set_controller_ternary_merge@3"
    },
    "2156": {
      "subroutine": "smart_contracts/security_token/arc1644.algo.ts::Arc1644.arc1644_set_controllable",
      "params": {
        "flag#0": "bytes"
      },
      "block": "arc1644_set_controllable",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2159": {
      "callsub": "smart_contracts/security_token/arc1644.algo.ts::Arc1644._onlyOwner",
      "op": "callsub _onlyOwner"
    },
    "2162": {
      "op": "frame_dig -1",
      "defined_out": [
        "flag#0 (copy)"
      ],
      "stack_out": [
        "flag#0 (copy)"
      ]
    },
    "2164": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "flag#0 (copy)"
      ],
      "stack_out": [
        "flag#0 (copy)",
        "0"
      ]
    },
    "2165": {
      "op": "getbit",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2166": {
      "op": "bnz arc1644_set_controllable_else_body@2",
      "stack_out": []
    },
    "2169": {
      "op": "bytec 5 // \"arc1644_ctrlen\"",
      "defined_out": [
        "\"arc1644_ctrlen\""
      ],
      "stack_out": [
        "\"arc1644_ctrlen\""
      ]
    },
    "2171": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"arc1644_ctrlen\"",
        "flag#0 (copy)"
      ]
    },
    "2173": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2174": {
      "block": "arc1644_set_controllable_after_if_else@6",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "2175": {
      "block": "arc1644_set_controllable_else_body@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2176": {
      "op": "bytec 5 // \"arc1644_ctrlen\"",
      "defined_out": [
        "\"arc1644_ctrlen\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc1644_ctrlen\""
      ]
    },
    "2178": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2179": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "2181": {
      "op": "bz arc1644_set_controllable_if_body@4",
      "stack_out": []
    },
    "2184": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2185": {
      "op": "bytec 5 // \"arc1644_ctrlen\"",
      "stack_out": [
        "0",
        "\"arc1644_ctrlen\""
      ]
    },
    "2187": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2188": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2189": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "2190": {
      "op": "getbit",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2191": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "1"
      ]
    },
    "2192": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2193": {
      "op": "bz arc1644_set_controllable_after_if_else@6",
      "stack_out": []
    },
    "2196": {
      "block": "arc1644_set_controllable_if_body@4",
      "stack_in": [],
      "op": "bytec 5 // \"arc1644_ctrlen\"",
      "defined_out": [
        "\"arc1644_ctrlen\""
      ],
      "stack_out": [
        "\"arc1644_ctrlen\""
      ]
    },
    "2198": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"arc1644_ctrlen\"",
        "flag#0 (copy)"
      ],
      "stack_out": [
        "\"arc1644_ctrlen\"",
        "flag#0 (copy)"
      ]
    },
    "2200": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2201": {
      "retsub": true,
      "op": "retsub"
    },
    "2202": {
      "subroutine": "smart_contracts/security_token/arc1644.algo.ts::Arc1644.arc1644_set_require_justification",
      "params": {
        "flag#0": "bytes"
      },
      "block": "arc1644_set_require_justification",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2205": {
      "callsub": "smart_contracts/security_token/arc1644.algo.ts::Arc1644._onlyOwner",
      "op": "callsub _onlyOwner"
    },
    "2208": {
      "op": "bytec 18 // \"arc1644_rjust\"",
      "defined_out": [
        "\"arc1644_rjust\""
      ],
      "stack_out": [
        "\"arc1644_rjust\""
      ]
    },
    "2210": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"arc1644_rjust\"",
        "flag#0 (copy)"
      ],
      "stack_out": [
        "\"arc1644_rjust\"",
        "flag#0 (copy)"
      ]
    },
    "2212": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2213": {
      "retsub": true,
      "op": "retsub"
    },
    "2214": {
      "subroutine": "smart_contracts/security_token/arc1644.algo.ts::Arc1644.arc1644_set_min_action_interval",
      "params": {
        "interval#0": "bytes"
      },
      "block": "arc1644_set_min_action_interval",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2217": {
      "callsub": "smart_contracts/security_token/arc1644.algo.ts::Arc1644._onlyOwner",
      "op": "callsub _onlyOwner"
    },
    "2220": {
      "op": "bytec 16 // \"arc1644_mcai\"",
      "defined_out": [
        "\"arc1644_mcai\""
      ],
      "stack_out": [
        "\"arc1644_mcai\""
      ]
    },
    "2222": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"arc1644_mcai\"",
        "interval#0 (copy)"
      ],
      "stack_out": [
        "\"arc1644_mcai\"",
        "interval#0 (copy)"
      ]
    },
    "2224": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2225": {
      "retsub": true,
      "op": "retsub"
    },
    "2226": {
      "subroutine": "smart_contracts/security_token/arc1644.algo.ts::Arc1644.arc1644_is_controllable",
      "params": {},
      "block": "arc1644_is_controllable",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2227": {
      "op": "bytec 5 // \"arc1644_ctrlen\"",
      "defined_out": [
        "\"arc1644_ctrlen\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc1644_ctrlen\""
      ]
    },
    "2229": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2230": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "2232": {
      "op": "bz arc1644_is_controllable_after_if_else@4",
      "stack_out": []
    },
    "2235": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2236": {
      "op": "bytec 5 // \"arc1644_ctrlen\"",
      "stack_out": [
        "0",
        "\"arc1644_ctrlen\""
      ]
    },
    "2238": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2239": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2240": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "2241": {
      "op": "getbit",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2242": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "2243": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2244": {
      "op": "bz arc1644_is_controllable_after_if_else@4",
      "stack_out": []
    },
    "2247": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2248": {
      "op": "bytec 9 // \"arc1644_ctrl\"",
      "defined_out": [
        "\"arc1644_ctrl\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc1644_ctrl\""
      ]
    },
    "2250": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2251": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%2#0"
      ]
    },
    "2253": {
      "op": "bz arc1644_is_controllable_after_if_else@4",
      "stack_out": []
    },
    "2256": {
      "op": "pushbytes 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "0x0000000000000001"
      ]
    },
    "2266": {
      "retsub": true,
      "op": "retsub"
    },
    "2267": {
      "block": "arc1644_is_controllable_after_if_else@4",
      "stack_in": [],
      "op": "bytec 14 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000"
      ],
      "stack_out": [
        "0x0000000000000000"
      ]
    },
    "2269": {
      "retsub": true,
      "op": "retsub"
    },
    "2270": {
      "subroutine": "smart_contracts/security_token/arc1644.algo.ts::Arc1644.arc1644_controller_transfer",
      "params": {
        "from#0": "bytes",
        "to#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes",
        "operator_data#0": "bytes"
      },
      "block": "arc1644_controller_transfer",
      "stack_in": [],
      "op": "proto 5 1"
    },
    "2273": {
      "callsub": "smart_contracts/security_token/arc1644.algo.ts::Arc1644._onlyController",
      "op": "callsub _onlyController"
    },
    "2276": {
      "op": "frame_dig -1",
      "defined_out": [
        "operator_data#0 (copy)"
      ],
      "stack_out": [
        "operator_data#0 (copy)"
      ]
    },
    "2278": {
      "callsub": "smart_contracts/security_token/arc1644.algo.ts::Arc1644._checkJustification",
      "op": "callsub _checkJustification",
      "stack_out": []
    },
    "2281": {
      "callsub": "smart_contracts/security_token/arc1644.algo.ts::Arc1644._rateLimit",
      "op": "callsub _rateLimit"
    },
    "2284": {
      "op": "frame_dig -5",
      "defined_out": [
        "from#0 (copy)"
      ],
      "stack_out": [
        "from#0 (copy)"
      ]
    },
    "2286": {
      "op": "frame_dig -4",
      "defined_out": [
        "from#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "from#0 (copy)",
        "to#0 (copy)"
      ]
    },
    "2288": {
      "op": "!=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2289": {
      "error": "same_addr",
      "op": "assert // same_addr",
      "stack_out": []
    },
    "2290": {
      "op": "frame_dig -5",
      "stack_out": [
        "from#0 (copy)"
      ]
    },
    "2292": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "op": "callsub _balanceOf",
      "defined_out": [
        "fromBal#0"
      ],
      "stack_out": [
        "fromBal#0"
      ]
    },
    "2295": {
      "op": "dup",
      "defined_out": [
        "fromBal#0",
        "fromBal#0 (copy)"
      ],
      "stack_out": [
        "fromBal#0",
        "fromBal#0 (copy)"
      ]
    },
    "2296": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "fromBal#0",
        "fromBal#0 (copy)"
      ],
      "stack_out": [
        "fromBal#0",
        "fromBal#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "2298": {
      "op": "b>=",
      "defined_out": [
        "fromBal#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "fromBal#0",
        "tmp%1#0"
      ]
    },
    "2299": {
      "error": "insufficient",
      "op": "assert // insufficient",
      "stack_out": [
        "fromBal#0"
      ]
    },
    "2300": {
      "op": "frame_dig -3",
      "stack_out": [
        "fromBal#0",
        "amount#0 (copy)"
      ]
    },
    "2302": {
      "op": "b-",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2303": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "2304": {
      "op": "len",
      "defined_out": [
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "2305": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "2306": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "2307": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2308": {
      "op": "intc_2 // 32",
      "stack_out": [
        "to_encode%0#0",
        "32"
      ]
    },
    "2309": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "2310": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "to_encode%0#0"
      ]
    },
    "2311": {
      "op": "dig 1",
      "defined_out": [
        "bzero%0#0",
        "bzero%0#0 (copy)",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "to_encode%0#0",
        "bzero%0#0 (copy)"
      ]
    },
    "2313": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "arc4_encoded%0#0"
      ]
    },
    "2314": {
      "op": "bytec 4 // \"b\"",
      "defined_out": [
        "\"b\"",
        "arc4_encoded%0#0",
        "bzero%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "arc4_encoded%0#0",
        "\"b\""
      ]
    },
    "2316": {
      "op": "frame_dig -5",
      "stack_out": [
        "bzero%0#0",
        "arc4_encoded%0#0",
        "\"b\"",
        "from#0 (copy)"
      ]
    },
    "2318": {
      "op": "concat",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "arc4_encoded%0#0",
        "tmp%2#0"
      ]
    },
    "2319": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%2#0",
        "arc4_encoded%0#0"
      ]
    },
    "2320": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0"
      ]
    },
    "2321": {
      "op": "frame_dig -4",
      "stack_out": [
        "bzero%0#0",
        "to#0 (copy)"
      ]
    },
    "2323": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "op": "callsub _balanceOf",
      "defined_out": [
        "bzero%0#0",
        "toBal#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "toBal#0"
      ]
    },
    "2326": {
      "op": "frame_dig -3",
      "stack_out": [
        "bzero%0#0",
        "toBal#0",
        "amount#0 (copy)"
      ]
    },
    "2328": {
      "op": "b+",
      "defined_out": [
        "bzero%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "to_encode%1#0"
      ]
    },
    "2329": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "2330": {
      "op": "len",
      "defined_out": [
        "bzero%0#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "2331": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%0#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "2332": {
      "op": "<=",
      "defined_out": [
        "bzero%0#0",
        "len_ok%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "2333": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "to_encode%1#0"
      ]
    },
    "2334": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0"
      ],
      "stack_out": [
        "arc4_encoded%1#0"
      ]
    },
    "2335": {
      "op": "bytec 4 // \"b\"",
      "stack_out": [
        "arc4_encoded%1#0",
        "\"b\""
      ]
    },
    "2337": {
      "op": "frame_dig -4",
      "stack_out": [
        "arc4_encoded%1#0",
        "\"b\"",
        "to#0 (copy)"
      ]
    },
    "2339": {
      "op": "concat",
      "defined_out": [
        "arc4_encoded%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "arc4_encoded%1#0",
        "tmp%3#0"
      ]
    },
    "2340": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "arc4_encoded%1#0"
      ]
    },
    "2341": {
      "op": "box_put",
      "stack_out": []
    },
    "2342": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2344": {
      "op": "frame_dig -5",
      "stack_out": [
        "tmp%4#0",
        "from#0 (copy)"
      ]
    },
    "2346": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2347": {
      "op": "frame_dig -4",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "to#0 (copy)"
      ]
    },
    "2349": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2350": {
      "op": "frame_dig -3",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "amount#0 (copy)"
      ]
    },
    "2352": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2353": {
      "op": "pushbytes 0x51",
      "defined_out": [
        "0x51",
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "0x51"
      ]
    },
    "2356": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2357": {
      "op": "pushbytes 0x0085",
      "defined_out": [
        "0x0085",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "0x0085"
      ]
    },
    "2361": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2362": {
      "op": "frame_dig -2",
      "defined_out": [
        "data#0 (copy)",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "data#0 (copy)"
      ]
    },
    "2364": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "data_length%0#0"
      ]
    },
    "2365": {
      "op": "pushint 133 // 133",
      "defined_out": [
        "133",
        "data_length%0#0",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "data_length%0#0",
        "133"
      ]
    },
    "2368": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "current_tail_offset%1#0"
      ]
    },
    "2369": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "as_bytes%1#0"
      ]
    },
    "2370": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "offset_as_uint16%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "offset_as_uint16%1#0"
      ]
    },
    "2373": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0"
      ]
    },
    "2374": {
      "op": "frame_dig -2",
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "data#0 (copy)"
      ]
    },
    "2376": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%8#0"
      ]
    },
    "2377": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_tuple_buffer%8#0",
        "operator_data#0 (copy)"
      ]
    },
    "2379": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0"
      ]
    },
    "2380": {
      "op": "bytec 6 // 0x0002",
      "defined_out": [
        "0x0002",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "0x0002"
      ]
    },
    "2382": {
      "op": "swap",
      "stack_out": [
        "0x0002",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "2383": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%12#0"
      ]
    },
    "2384": {
      "op": "pushbytes 0x346ea795 // method \"ControllerTransfer((address,address,address,uint256,byte,byte[],byte[]))\"",
      "defined_out": [
        "Method(ControllerTransfer((address,address,address,uint256,byte,byte[],byte[])))",
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%12#0",
        "Method(ControllerTransfer((address,address,address,uint256,byte,byte[],byte[])))"
      ]
    },
    "2390": {
      "op": "swap",
      "stack_out": [
        "Method(ControllerTransfer((address,address,address,uint256,byte,byte[],byte[])))",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "2391": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "2392": {
      "op": "log",
      "stack_out": []
    },
    "2393": {
      "op": "pushint 81 // 81",
      "defined_out": [
        "81"
      ],
      "stack_out": [
        "81"
      ]
    },
    "2395": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2396": {
      "retsub": true,
      "op": "retsub"
    },
    "2397": {
      "subroutine": "smart_contracts/security_token/arc1644.algo.ts::Arc1644.arc1644_controller_redeem",
      "params": {
        "from#0": "bytes",
        "amount#0": "bytes",
        "operator_data#0": "bytes"
      },
      "block": "arc1644_controller_redeem",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "2400": {
      "callsub": "smart_contracts/security_token/arc1644.algo.ts::Arc1644._onlyController",
      "op": "callsub _onlyController"
    },
    "2403": {
      "op": "frame_dig -1",
      "defined_out": [
        "operator_data#0 (copy)"
      ],
      "stack_out": [
        "operator_data#0 (copy)"
      ]
    },
    "2405": {
      "callsub": "smart_contracts/security_token/arc1644.algo.ts::Arc1644._checkJustification",
      "op": "callsub _checkJustification",
      "stack_out": []
    },
    "2408": {
      "callsub": "smart_contracts/security_token/arc1644.algo.ts::Arc1644._rateLimit",
      "op": "callsub _rateLimit"
    },
    "2411": {
      "op": "frame_dig -3",
      "defined_out": [
        "from#0 (copy)"
      ],
      "stack_out": [
        "from#0 (copy)"
      ]
    },
    "2413": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "op": "callsub _balanceOf",
      "defined_out": [
        "fromBal#0"
      ],
      "stack_out": [
        "fromBal#0"
      ]
    },
    "2416": {
      "op": "dup",
      "defined_out": [
        "fromBal#0",
        "fromBal#0 (copy)"
      ],
      "stack_out": [
        "fromBal#0",
        "fromBal#0 (copy)"
      ]
    },
    "2417": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "fromBal#0",
        "fromBal#0 (copy)"
      ],
      "stack_out": [
        "fromBal#0",
        "fromBal#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "2419": {
      "op": "b>=",
      "defined_out": [
        "fromBal#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "fromBal#0",
        "tmp%0#0"
      ]
    },
    "2420": {
      "error": "insufficient",
      "op": "assert // insufficient",
      "stack_out": [
        "fromBal#0"
      ]
    },
    "2421": {
      "op": "frame_dig -2",
      "stack_out": [
        "fromBal#0",
        "amount#0 (copy)"
      ]
    },
    "2423": {
      "op": "b-",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2424": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "2425": {
      "op": "len",
      "defined_out": [
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "2426": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "2427": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "2428": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2429": {
      "op": "intc_2 // 32",
      "stack_out": [
        "to_encode%0#0",
        "32"
      ]
    },
    "2430": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "2431": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "to_encode%0#0"
      ]
    },
    "2432": {
      "op": "dig 1",
      "defined_out": [
        "bzero%0#0",
        "bzero%0#0 (copy)",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "to_encode%0#0",
        "bzero%0#0 (copy)"
      ]
    },
    "2434": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "arc4_encoded%0#0"
      ]
    },
    "2435": {
      "op": "bytec 4 // \"b\"",
      "defined_out": [
        "\"b\"",
        "arc4_encoded%0#0",
        "bzero%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "arc4_encoded%0#0",
        "\"b\""
      ]
    },
    "2437": {
      "op": "frame_dig -3",
      "stack_out": [
        "bzero%0#0",
        "arc4_encoded%0#0",
        "\"b\"",
        "from#0 (copy)"
      ]
    },
    "2439": {
      "op": "concat",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "arc4_encoded%0#0",
        "tmp%1#0"
      ]
    },
    "2440": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%1#0",
        "arc4_encoded%0#0"
      ]
    },
    "2441": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0"
      ]
    },
    "2442": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "bzero%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "0"
      ]
    },
    "2443": {
      "op": "bytec_3 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0",
        "bzero%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "0",
        "\"t\""
      ]
    },
    "2444": {
      "op": "app_global_get_ex",
      "defined_out": [
        "bzero%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2445": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "bzero%0#0",
        "maybe_value%0#0"
      ]
    },
    "2446": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%0#0",
        "maybe_value%0#0",
        "amount#0 (copy)"
      ]
    },
    "2448": {
      "op": "b-",
      "defined_out": [
        "bzero%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "to_encode%1#0"
      ]
    },
    "2449": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "2450": {
      "op": "len",
      "defined_out": [
        "bzero%0#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "2451": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%0#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "2452": {
      "op": "<=",
      "defined_out": [
        "bzero%0#0",
        "len_ok%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "2453": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "to_encode%1#0"
      ]
    },
    "2454": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0"
      ],
      "stack_out": [
        "arc4_encoded%1#0"
      ]
    },
    "2455": {
      "op": "bytec_3 // \"t\"",
      "stack_out": [
        "arc4_encoded%1#0",
        "\"t\""
      ]
    },
    "2456": {
      "op": "swap",
      "stack_out": [
        "\"t\"",
        "arc4_encoded%1#0"
      ]
    },
    "2457": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2458": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2460": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%2#0",
        "from#0 (copy)"
      ]
    },
    "2462": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2463": {
      "op": "frame_dig -2",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "amount#0 (copy)"
      ]
    },
    "2465": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2466": {
      "op": "pushbytes 0x51",
      "defined_out": [
        "0x51",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "0x51"
      ]
    },
    "2469": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2470": {
      "op": "pushbytes 0x0063",
      "defined_out": [
        "0x0063",
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "0x0063"
      ]
    },
    "2474": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2475": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "operator_data#0 (copy)"
      ]
    },
    "2477": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2478": {
      "op": "bytec 6 // 0x0002",
      "defined_out": [
        "0x0002",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "0x0002"
      ]
    },
    "2480": {
      "op": "swap",
      "stack_out": [
        "0x0002",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2481": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0"
      ]
    },
    "2482": {
      "op": "pushbytes 0x0dee14f5 // method \"ControllerRedeem((address,address,uint256,byte,byte[]))\"",
      "defined_out": [
        "Method(ControllerRedeem((address,address,uint256,byte,byte[])))",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "Method(ControllerRedeem((address,address,uint256,byte,byte[])))"
      ]
    },
    "2488": {
      "op": "swap",
      "stack_out": [
        "Method(ControllerRedeem((address,address,uint256,byte,byte[])))",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "2489": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "2490": {
      "op": "log",
      "stack_out": []
    },
    "2491": {
      "op": "pushint 81 // 81",
      "defined_out": [
        "81"
      ],
      "stack_out": [
        "81"
      ]
    },
    "2493": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2494": {
      "retsub": true,
      "op": "retsub"
    },
    "2495": {
      "subroutine": "smart_contracts/security_token/arc1643.algo.ts::Arc1643._onlyOwner",
      "params": {},
      "block": "smart_contracts/security_token/arc1643.algo.ts::Arc1643._onlyOwner",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2497": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_is_owner",
      "op": "callsub arc88_is_owner",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2500": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "2501": {
      "op": "getbit",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2502": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "1"
      ]
    },
    "2503": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2504": {
      "error": "only_owner",
      "op": "assert // only_owner",
      "stack_out": []
    },
    "2505": {
      "retsub": true,
      "op": "retsub"
    },
    "2506": {
      "subroutine": "smart_contracts/security_token/arc1643.algo.ts::Arc1643.arc1643_set_document",
      "params": {
        "name#0": "bytes",
        "uri#0": "bytes",
        "hash#0": "bytes"
      },
      "block": "arc1643_set_document",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "2509": {
      "callsub": "smart_contracts/security_token/arc1643.algo.ts::Arc1643._onlyOwner",
      "op": "callsub smart_contracts/security_token/arc1643.algo.ts::Arc1643._onlyOwner"
    },
    "2512": {
      "op": "frame_dig -3",
      "defined_out": [
        "name#0 (copy)"
      ],
      "stack_out": [
        "name#0 (copy)"
      ]
    },
    "2514": {
      "op": "len",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2515": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2516": {
      "error": "empty_name",
      "op": "assert // empty_name",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2517": {
      "op": "global Round",
      "defined_out": [
        "tmp%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "to_encode%0#0"
      ]
    },
    "2519": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "2520": {
      "op": "frame_dig -2",
      "defined_out": [
        "tmp%0#0",
        "uri#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "uri#0 (copy)"
      ]
    },
    "2522": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "data_length%0#0"
      ]
    },
    "2523": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "data_length%0#0",
        "data_length%0#0"
      ]
    },
    "2524": {
      "op": "cover 2",
      "defined_out": [
        "data_length%0#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "val_as_bytes%0#0",
        "data_length%0#0"
      ]
    },
    "2526": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "data_length%0#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "val_as_bytes%0#0",
        "data_length%0#0",
        "12"
      ]
    },
    "2528": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "data_length%0#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "val_as_bytes%0#0",
        "current_tail_offset%1#0"
      ]
    },
    "2529": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "data_length%0#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "val_as_bytes%0#0",
        "as_bytes%1#0"
      ]
    },
    "2530": {
      "op": "extract 6 2",
      "defined_out": [
        "data_length%0#0",
        "offset_as_uint16%1#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "val_as_bytes%0#0",
        "offset_as_uint16%1#0"
      ]
    },
    "2533": {
      "op": "pushbytes 0x000c",
      "defined_out": [
        "0x000c",
        "data_length%0#0",
        "offset_as_uint16%1#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "val_as_bytes%0#0",
        "offset_as_uint16%1#0",
        "0x000c"
      ]
    },
    "2537": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "val_as_bytes%0#0",
        "0x000c",
        "offset_as_uint16%1#0"
      ]
    },
    "2538": {
      "op": "concat",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%2#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2539": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "2540": {
      "op": "concat",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2541": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%3#0",
        "uri#0 (copy)"
      ]
    },
    "2543": {
      "op": "concat",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2544": {
      "op": "frame_dig -1",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%4#0",
        "hash#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%4#0",
        "hash#0 (copy)"
      ]
    },
    "2546": {
      "op": "concat",
      "defined_out": [
        "data_length%0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "rec#0"
      ]
    },
    "2547": {
      "op": "bytec 23 // \"arc1643_doc\"",
      "defined_out": [
        "\"arc1643_doc\"",
        "data_length%0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "rec#0",
        "\"arc1643_doc\""
      ]
    },
    "2549": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "rec#0",
        "\"arc1643_doc\"",
        "name#0 (copy)"
      ]
    },
    "2551": {
      "op": "concat",
      "defined_out": [
        "data_length%0#0",
        "rec#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "rec#0",
        "tmp%2#0"
      ]
    },
    "2552": {
      "op": "dup",
      "defined_out": [
        "data_length%0#0",
        "rec#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "rec#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "2553": {
      "op": "box_del",
      "defined_out": [
        "data_length%0#0",
        "rec#0",
        "tmp%0#0",
        "tmp%2#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "rec#0",
        "tmp%2#0",
        "{box_del}"
      ]
    },
    "2554": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "rec#0",
        "tmp%2#0"
      ]
    },
    "2555": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "tmp%2#0",
        "rec#0"
      ]
    },
    "2556": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0"
      ]
    },
    "2557": {
      "op": "bytec 10 // \"arc1643_docs\"",
      "defined_out": [
        "\"arc1643_docs\"",
        "data_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "\"arc1643_docs\""
      ]
    },
    "2559": {
      "op": "box_len",
      "defined_out": [
        "data_length%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2560": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2562": {
      "op": "bnz arc1643_set_document_else_body@2",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0"
      ]
    },
    "2565": {
      "op": "bytec 20 // 0x0000",
      "defined_out": [
        "0x0000",
        "data_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "0x0000"
      ]
    },
    "2567": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "0x0000",
        "name#0 (copy)"
      ]
    },
    "2569": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0x0000",
        "1",
        "data_length%0#0",
        "name#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "0x0000",
        "name#0 (copy)",
        "1"
      ]
    },
    "2570": {
      "callsub": "_puya_lib.arc4.dynamic_array_concat_byte_length_head",
      "op": "callsub dynamic_array_concat_byte_length_head",
      "defined_out": [
        "concat_result%0#0",
        "data_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "concat_result%0#0"
      ]
    },
    "2573": {
      "op": "bytec 10 // \"arc1643_docs\"",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "concat_result%0#0",
        "\"arc1643_docs\""
      ]
    },
    "2575": {
      "op": "box_del",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "concat_result%0#0",
        "{box_del}"
      ]
    },
    "2576": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "concat_result%0#0"
      ]
    },
    "2577": {
      "op": "bytec 10 // \"arc1643_docs\"",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "concat_result%0#0",
        "\"arc1643_docs\""
      ]
    },
    "2579": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "\"arc1643_docs\"",
        "concat_result%0#0"
      ]
    },
    "2580": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0"
      ]
    },
    "2581": {
      "block": "arc1643_set_document_after_if_else@3",
      "stack_in": [
        "tmp%0#0",
        "data_length%0#0"
      ],
      "op": "pushint 6 // 6",
      "defined_out": [
        "6"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "6"
      ]
    },
    "2583": {
      "op": "frame_dig 0",
      "defined_out": [
        "6",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "6",
        "tmp%0#0"
      ]
    },
    "2585": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "current_tail_offset%4#0"
      ]
    },
    "2586": {
      "op": "dup",
      "defined_out": [
        "current_tail_offset%4#0",
        "current_tail_offset%4#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "current_tail_offset%4#0",
        "current_tail_offset%4#0 (copy)"
      ]
    },
    "2587": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "current_tail_offset%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "current_tail_offset%4#0",
        "as_bytes%3#0"
      ]
    },
    "2588": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%4#0",
        "offset_as_uint16%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "current_tail_offset%4#0",
        "offset_as_uint16%3#0"
      ]
    },
    "2591": {
      "op": "bytec 29 // 0x0006",
      "defined_out": [
        "0x0006",
        "current_tail_offset%4#0",
        "offset_as_uint16%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "current_tail_offset%4#0",
        "offset_as_uint16%3#0",
        "0x0006"
      ]
    },
    "2593": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "current_tail_offset%4#0",
        "0x0006",
        "offset_as_uint16%3#0"
      ]
    },
    "2594": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%4#0",
        "encoded_tuple_buffer%8#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "current_tail_offset%4#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "2595": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%8#0",
        "current_tail_offset%4#0"
      ]
    },
    "2596": {
      "op": "frame_dig 1",
      "defined_out": [
        "current_tail_offset%4#0",
        "data_length%0#0",
        "encoded_tuple_buffer%8#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%8#0",
        "current_tail_offset%4#0",
        "data_length%0#0"
      ]
    },
    "2598": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%5#0",
        "data_length%0#0",
        "encoded_tuple_buffer%8#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%8#0",
        "current_tail_offset%5#0"
      ]
    },
    "2599": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "data_length%0#0",
        "encoded_tuple_buffer%8#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%8#0",
        "as_bytes%4#0"
      ]
    },
    "2600": {
      "op": "extract 6 2",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%8#0",
        "offset_as_uint16%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%8#0",
        "offset_as_uint16%4#0"
      ]
    },
    "2603": {
      "op": "concat",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%9#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "2604": {
      "op": "frame_dig -3",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%9#0",
        "name#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%9#0",
        "name#0 (copy)"
      ]
    },
    "2606": {
      "op": "concat",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%10#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "2607": {
      "op": "frame_dig -2",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%10#0",
        "tmp%0#0",
        "uri#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%10#0",
        "uri#0 (copy)"
      ]
    },
    "2609": {
      "op": "concat",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%11#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "2610": {
      "op": "frame_dig -1",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%11#0",
        "hash#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%11#0",
        "hash#0 (copy)"
      ]
    },
    "2612": {
      "op": "concat",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%12#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "2613": {
      "op": "bytec 6 // 0x0002",
      "defined_out": [
        "0x0002",
        "data_length%0#0",
        "encoded_tuple_buffer%12#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%12#0",
        "0x0002"
      ]
    },
    "2615": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "0x0002",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "2616": {
      "op": "concat",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%15#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "2617": {
      "op": "pushbytes 0x2dc03c36 // method \"DocumentUpdated((byte[],string,byte[]))\"",
      "defined_out": [
        "Method(DocumentUpdated((byte[],string,byte[])))",
        "data_length%0#0",
        "encoded_tuple_buffer%15#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%15#0",
        "Method(DocumentUpdated((byte[],string,byte[])))"
      ]
    },
    "2623": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "Method(DocumentUpdated((byte[],string,byte[])))",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "2624": {
      "op": "concat",
      "defined_out": [
        "data_length%0#0",
        "event%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "event%0#0"
      ]
    },
    "2625": {
      "op": "log",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0"
      ]
    },
    "2626": {
      "retsub": true,
      "op": "retsub"
    },
    "2627": {
      "block": "arc1643_set_document_else_body@2",
      "stack_in": [
        "tmp%0#0",
        "data_length%0#0"
      ],
      "op": "bytec 10 // \"arc1643_docs\"",
      "defined_out": [
        "\"arc1643_docs\""
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "\"arc1643_docs\""
      ]
    },
    "2629": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2630": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0"
      ]
    },
    "2631": {
      "op": "bytec 20 // 0x0000",
      "defined_out": [
        "0x0000",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "0x0000"
      ]
    },
    "2633": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x0000",
        "maybe_value%1#0",
        "name#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "0x0000",
        "name#0 (copy)"
      ]
    },
    "2635": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0x0000",
        "1",
        "maybe_value%1#0",
        "name#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "0x0000",
        "name#0 (copy)",
        "1"
      ]
    },
    "2636": {
      "callsub": "_puya_lib.arc4.dynamic_array_concat_byte_length_head",
      "op": "callsub dynamic_array_concat_byte_length_head",
      "defined_out": [
        "concat_result%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "concat_result%1#0"
      ]
    },
    "2639": {
      "op": "dup",
      "defined_out": [
        "concat_result%1#0",
        "concat_result%1#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "concat_result%1#0",
        "concat_result%1#0 (copy)"
      ]
    },
    "2640": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "concat_result%1#0",
        "concat_result%1#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "concat_result%1#0",
        "concat_result%1#0 (copy)",
        "0"
      ]
    },
    "2641": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length%0#0",
        "concat_result%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "concat_result%1#0",
        "array_length%0#0"
      ]
    },
    "2642": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "array_length%0#0",
        "concat_result%1#0"
      ]
    },
    "2643": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "array_length%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "2646": {
      "op": "dig 1",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "array_length%0#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "array_length%0#0",
        "array_head_and_tail%0#0",
        "array_length%0#0 (copy)"
      ]
    },
    "2648": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "array_length%0#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "array_length%0#0",
        "array_head_and_tail%0#0",
        "array_length%0#0 (copy)",
        "2"
      ]
    },
    "2649": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "maybe_value%1#0",
        "start_of_tail%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "array_length%0#0",
        "array_head_and_tail%0#0",
        "start_of_tail%0#0"
      ]
    },
    "2650": {
      "op": "dig 1",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "array_length%0#0",
        "maybe_value%1#0",
        "start_of_tail%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "array_length%0#0",
        "array_head_and_tail%0#0",
        "start_of_tail%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "2652": {
      "op": "len",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "maybe_value%1#0",
        "start_of_tail%0#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "array_length%0#0",
        "array_head_and_tail%0#0",
        "start_of_tail%0#0",
        "total_length%0#0"
      ]
    },
    "2653": {
      "op": "substring3",
      "defined_out": [
        "array_length%0#0",
        "data%2#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "array_length%0#0",
        "data%2#0"
      ]
    },
    "2654": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "data%2#0",
        "array_length%0#0"
      ]
    },
    "2655": {
      "callsub": "_puya_lib.arc4.dynamic_array_concat_byte_length_head",
      "op": "callsub dynamic_array_concat_byte_length_head",
      "defined_out": [
        "concat_result%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "concat_result%2#0"
      ]
    },
    "2658": {
      "op": "bytec 10 // \"arc1643_docs\"",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "concat_result%2#0",
        "\"arc1643_docs\""
      ]
    },
    "2660": {
      "op": "box_del",
      "defined_out": [
        "concat_result%2#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "concat_result%2#0",
        "{box_del}"
      ]
    },
    "2661": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "concat_result%2#0"
      ]
    },
    "2662": {
      "op": "bytec 10 // \"arc1643_docs\"",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "concat_result%2#0",
        "\"arc1643_docs\""
      ]
    },
    "2664": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "\"arc1643_docs\"",
        "concat_result%2#0"
      ]
    },
    "2665": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0"
      ]
    },
    "2666": {
      "op": "b arc1643_set_document_after_if_else@3"
    },
    "2669": {
      "subroutine": "smart_contracts/security_token/arc1643.algo.ts::Arc1643.arc1643_get_document",
      "params": {
        "name#0": "bytes"
      },
      "block": "arc1643_get_document",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2672": {
      "op": "bytec 23 // \"arc1643_doc\"",
      "defined_out": [
        "\"arc1643_doc\""
      ],
      "stack_out": [
        "\"arc1643_doc\""
      ]
    },
    "2674": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"arc1643_doc\"",
        "name#0 (copy)"
      ],
      "stack_out": [
        "\"arc1643_doc\"",
        "name#0 (copy)"
      ]
    },
    "2676": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2677": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2678": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2679": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2681": {
      "error": "not_found",
      "op": "assert // not_found",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2682": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2683": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2684": {
      "retsub": true,
      "op": "retsub"
    },
    "2685": {
      "subroutine": "smart_contracts/security_token/arc1643.algo.ts::Arc1643.arc1643_remove_document",
      "params": {
        "name#0": "bytes"
      },
      "block": "arc1643_remove_document",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2688": {
      "callsub": "smart_contracts/security_token/arc1643.algo.ts::Arc1643._onlyOwner",
      "op": "callsub smart_contracts/security_token/arc1643.algo.ts::Arc1643._onlyOwner"
    },
    "2691": {
      "op": "bytec 23 // \"arc1643_doc\"",
      "defined_out": [
        "\"arc1643_doc\""
      ],
      "stack_out": [
        "\"arc1643_doc\""
      ]
    },
    "2693": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"arc1643_doc\"",
        "name#0 (copy)"
      ],
      "stack_out": [
        "\"arc1643_doc\"",
        "name#0 (copy)"
      ]
    },
    "2695": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2696": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2697": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2698": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2700": {
      "error": "not_found",
      "op": "assert // not_found",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2701": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2702": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "prior#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "prior#0",
        "maybe_exists%1#0"
      ]
    },
    "2703": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "prior#0"
      ]
    },
    "2704": {
      "op": "swap",
      "stack_out": [
        "prior#0",
        "tmp%0#0"
      ]
    },
    "2705": {
      "op": "box_del",
      "defined_out": [
        "prior#0",
        "{box_del}"
      ],
      "stack_out": [
        "prior#0",
        "{box_del}"
      ]
    },
    "2706": {
      "op": "pop",
      "stack_out": [
        "prior#0"
      ]
    },
    "2707": {
      "op": "dup",
      "defined_out": [
        "prior#0",
        "prior#0 (copy)"
      ],
      "stack_out": [
        "prior#0",
        "prior#0 (copy)"
      ]
    },
    "2708": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "prior#0",
        "prior#0 (copy)"
      ],
      "stack_out": [
        "prior#0",
        "prior#0 (copy)",
        "0"
      ]
    },
    "2709": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "prior#0"
      ],
      "stack_out": [
        "prior#0",
        "item_start_offset%0#0"
      ]
    },
    "2710": {
      "op": "dig 1",
      "stack_out": [
        "prior#0",
        "item_start_offset%0#0",
        "prior#0 (copy)"
      ]
    },
    "2712": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "item_start_offset%0#0",
        "prior#0",
        "prior#0 (copy)"
      ],
      "stack_out": [
        "prior#0",
        "item_start_offset%0#0",
        "prior#0 (copy)",
        "2"
      ]
    },
    "2713": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "prior#0"
      ],
      "stack_out": [
        "prior#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "2714": {
      "op": "dig 2",
      "stack_out": [
        "prior#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "prior#0 (copy)"
      ]
    },
    "2716": {
      "op": "uncover 2",
      "stack_out": [
        "prior#0",
        "item_end_offset%0#0",
        "prior#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "2718": {
      "op": "dig 2",
      "defined_out": [
        "item_end_offset%0#0",
        "item_end_offset%0#0 (copy)",
        "item_start_offset%0#0",
        "prior#0",
        "prior#0 (copy)"
      ],
      "stack_out": [
        "prior#0",
        "item_end_offset%0#0",
        "prior#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0 (copy)"
      ]
    },
    "2720": {
      "op": "substring3",
      "defined_out": [
        "item_end_offset%0#0",
        "prior#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "prior#0",
        "item_end_offset%0#0",
        "tmp%3#0"
      ]
    },
    "2721": {
      "op": "dig 2",
      "stack_out": [
        "prior#0",
        "item_end_offset%0#0",
        "tmp%3#0",
        "prior#0 (copy)"
      ]
    },
    "2723": {
      "op": "len",
      "defined_out": [
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "prior#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "prior#0",
        "item_end_offset%0#0",
        "tmp%3#0",
        "item_end_offset%1#0"
      ]
    },
    "2724": {
      "op": "uncover 3",
      "stack_out": [
        "item_end_offset%0#0",
        "tmp%3#0",
        "item_end_offset%1#0",
        "prior#0"
      ]
    },
    "2726": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%3#0",
        "item_end_offset%1#0",
        "prior#0",
        "item_end_offset%0#0"
      ]
    },
    "2728": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "prior#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0"
      ]
    },
    "2730": {
      "op": "substring3",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "2731": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "name#0 (copy)"
      ]
    },
    "2733": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "data_length%0#0"
      ]
    },
    "2734": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "data_length%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "data_length%0#0",
        "6"
      ]
    },
    "2736": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "current_tail_offset%1#0"
      ]
    },
    "2737": {
      "op": "dup",
      "defined_out": [
        "current_tail_offset%1#0",
        "current_tail_offset%1#0 (copy)",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "current_tail_offset%1#0",
        "current_tail_offset%1#0 (copy)"
      ]
    },
    "2738": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "current_tail_offset%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "current_tail_offset%1#0",
        "as_bytes%1#0"
      ]
    },
    "2739": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%1#0",
        "offset_as_uint16%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "current_tail_offset%1#0",
        "offset_as_uint16%1#0"
      ]
    },
    "2742": {
      "op": "bytec 29 // 0x0006",
      "defined_out": [
        "0x0006",
        "current_tail_offset%1#0",
        "offset_as_uint16%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "current_tail_offset%1#0",
        "offset_as_uint16%1#0",
        "0x0006"
      ]
    },
    "2744": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "current_tail_offset%1#0",
        "0x0006",
        "offset_as_uint16%1#0"
      ]
    },
    "2745": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2746": {
      "op": "dig 3",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "tmp%3#0 (copy)"
      ]
    },
    "2748": {
      "op": "len",
      "defined_out": [
        "current_tail_offset%1#0",
        "data_length%1#0",
        "encoded_tuple_buffer%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "data_length%1#0"
      ]
    },
    "2749": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "encoded_tuple_buffer%2#0",
        "data_length%1#0",
        "current_tail_offset%1#0"
      ]
    },
    "2751": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%2#0"
      ]
    },
    "2752": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "encoded_tuple_buffer%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "encoded_tuple_buffer%2#0",
        "as_bytes%2#0"
      ]
    },
    "2753": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "offset_as_uint16%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "encoded_tuple_buffer%2#0",
        "offset_as_uint16%2#0"
      ]
    },
    "2756": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2757": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "encoded_tuple_buffer%3#0",
        "name#0 (copy)"
      ]
    },
    "2759": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2760": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "encoded_tuple_buffer%4#0",
        "tmp%3#0"
      ]
    },
    "2762": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2763": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%4#0"
      ]
    },
    "2764": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2765": {
      "op": "bytec 6 // 0x0002",
      "defined_out": [
        "0x0002",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "0x0002"
      ]
    },
    "2767": {
      "op": "swap",
      "stack_out": [
        "0x0002",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2768": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0"
      ]
    },
    "2769": {
      "op": "pushbytes 0xae7a4fa0 // method \"DocumentRemoved((byte[],string,byte[]))\"",
      "defined_out": [
        "Method(DocumentRemoved((byte[],string,byte[])))",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "Method(DocumentRemoved((byte[],string,byte[])))"
      ]
    },
    "2775": {
      "op": "swap",
      "stack_out": [
        "Method(DocumentRemoved((byte[],string,byte[])))",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "2776": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "2777": {
      "op": "log",
      "stack_out": []
    },
    "2778": {
      "retsub": true,
      "op": "retsub"
    },
    "2779": {
      "subroutine": "smart_contracts/security_token/arc1643.algo.ts::Arc1643.arc1643_get_all_documents",
      "params": {},
      "block": "arc1643_get_all_documents",
      "stack_in": [],
      "op": "bytec 10 // \"arc1643_docs\"",
      "defined_out": [
        "\"arc1643_docs\""
      ],
      "stack_out": [
        "\"arc1643_docs\""
      ]
    },
    "2781": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2782": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2783": {
      "retsub": true,
      "op": "retsub"
    },
    "2784": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594._onlyOwner",
      "params": {},
      "block": "smart_contracts/security_token/arc1594.algo.ts::Arc1594._onlyOwner",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2786": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_is_owner",
      "op": "callsub arc88_is_owner",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2789": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "2790": {
      "op": "getbit",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2791": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "1"
      ]
    },
    "2792": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2793": {
      "error": "only_owner",
      "op": "assert // only_owner",
      "stack_out": []
    },
    "2794": {
      "retsub": true,
      "op": "retsub"
    },
    "2795": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_set_issuable",
      "params": {
        "flag#0": "bytes"
      },
      "block": "arc1594_set_issuable",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2798": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594._onlyOwner",
      "op": "callsub smart_contracts/security_token/arc1594.algo.ts::Arc1594._onlyOwner"
    },
    "2801": {
      "op": "bytec 15 // \"arc1594_iss\"",
      "defined_out": [
        "\"arc1594_iss\""
      ],
      "stack_out": [
        "\"arc1594_iss\""
      ]
    },
    "2803": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"arc1594_iss\"",
        "flag#0 (copy)"
      ],
      "stack_out": [
        "\"arc1594_iss\"",
        "flag#0 (copy)"
      ]
    },
    "2805": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2806": {
      "retsub": true,
      "op": "retsub"
    },
    "2807": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_issue",
      "params": {
        "to#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1594_issue",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "2810": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594._onlyOwner",
      "op": "callsub smart_contracts/security_token/arc1594.algo.ts::Arc1594._onlyOwner"
    },
    "2813": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "2815": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)",
        "0x"
      ]
    },
    "2817": {
      "op": "b>",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2818": {
      "error": "invalid_amount",
      "op": "assert // invalid_amount",
      "stack_out": []
    },
    "2819": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2820": {
      "op": "bytec 15 // \"arc1594_iss\"",
      "defined_out": [
        "\"arc1594_iss\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc1594_iss\""
      ]
    },
    "2822": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2823": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "2825": {
      "op": "bz arc1594_issue_bool_false@3",
      "stack_out": []
    },
    "2828": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2829": {
      "op": "bytec 15 // \"arc1594_iss\"",
      "stack_out": [
        "0",
        "\"arc1594_iss\""
      ]
    },
    "2831": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2832": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2833": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "2834": {
      "op": "getbit",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2835": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "1"
      ]
    },
    "2836": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2837": {
      "op": "bz arc1594_issue_bool_false@3",
      "stack_out": []
    },
    "2840": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2841": {
      "block": "arc1594_issue_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "issuance_disabled",
      "op": "assert // issuance_disabled",
      "defined_out": [],
      "stack_out": []
    },
    "2842": {
      "op": "frame_dig -3",
      "defined_out": [
        "to#0 (copy)"
      ],
      "stack_out": [
        "to#0 (copy)"
      ]
    },
    "2844": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "2845": {
      "op": "frame_dig -2",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "amount#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "amount#0 (copy)"
      ]
    },
    "2847": {
      "op": "frame_dig -1",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "amount#0 (copy)",
        "data#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "amount#0 (copy)",
        "data#0 (copy)"
      ]
    },
    "2849": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_issue_by_partition",
      "op": "callsub arc1410_issue_by_partition",
      "stack_out": []
    },
    "2852": {
      "op": "frame_dig -3",
      "stack_out": [
        "to#0 (copy)"
      ]
    },
    "2854": {
      "op": "frame_dig -2",
      "stack_out": [
        "to#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "2856": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2857": {
      "op": "bytec 24 // 0x0042",
      "defined_out": [
        "0x0042",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "0x0042"
      ]
    },
    "2859": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2860": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "data#0 (copy)"
      ]
    },
    "2862": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2863": {
      "op": "bytec 6 // 0x0002",
      "defined_out": [
        "0x0002",
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "0x0002"
      ]
    },
    "2865": {
      "op": "swap",
      "stack_out": [
        "0x0002",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2866": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0"
      ]
    },
    "2867": {
      "op": "pushbytes 0xf2e998af // method \"Issue((address,uint256,byte[]))\"",
      "defined_out": [
        "Method(Issue((address,uint256,byte[])))",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "Method(Issue((address,uint256,byte[])))"
      ]
    },
    "2873": {
      "op": "swap",
      "stack_out": [
        "Method(Issue((address,uint256,byte[])))",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "2874": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "2875": {
      "op": "log",
      "stack_out": []
    },
    "2876": {
      "retsub": true,
      "op": "retsub"
    },
    "2877": {
      "block": "arc1594_issue_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2878": {
      "op": "b arc1594_issue_bool_merge@4"
    },
    "2881": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_redeemFrom",
      "params": {
        "from#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1594_redeemFrom",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "2884": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2885": {
      "op": "txn Sender"
    },
    "2887": {
      "op": "dup"
    },
    "2888": {
      "op": "frame_dig -3",
      "defined_out": [
        "from#0 (copy)",
        "sender#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "sender#0",
        "from#0 (copy)"
      ]
    },
    "2890": {
      "op": "==",
      "defined_out": [
        "sender#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "tmp%0#0"
      ]
    },
    "2891": {
      "op": "bnz arc1594_redeemFrom_bool_true@2",
      "stack_out": [
        "tmp%5#0",
        "sender#0"
      ]
    },
    "2894": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "sender#0"
      ]
    },
    "2896": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_is_owner",
      "op": "callsub arc88_is_owner",
      "defined_out": [
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "tmp%1#0"
      ]
    },
    "2899": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "tmp%1#0",
        "0"
      ]
    },
    "2900": {
      "op": "getbit",
      "defined_out": [
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "tmp%2#0"
      ]
    },
    "2901": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "tmp%2#0",
        "1"
      ]
    },
    "2902": {
      "op": "==",
      "defined_out": [
        "sender#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "tmp%3#0"
      ]
    },
    "2903": {
      "op": "bz arc1594_redeemFrom_bool_false@3",
      "stack_out": [
        "tmp%5#0",
        "sender#0"
      ]
    },
    "2906": {
      "block": "arc1594_redeemFrom_bool_true@2",
      "stack_in": [
        "tmp%5#0",
        "sender#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "or_result%0#0"
      ]
    },
    "2907": {
      "block": "arc1594_redeemFrom_bool_merge@4",
      "stack_in": [
        "tmp%5#0",
        "sender#0",
        "or_result%0#0"
      ],
      "error": "not_auth",
      "op": "assert // not_auth",
      "defined_out": [],
      "stack_out": [
        "tmp%5#0",
        "sender#0"
      ]
    },
    "2908": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "amount#0 (copy)"
      ]
    },
    "2910": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "amount#0 (copy)",
        "0x"
      ]
    },
    "2912": {
      "op": "b>",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "tmp%4#0"
      ]
    },
    "2913": {
      "error": "invalid_amount",
      "op": "assert // invalid_amount",
      "stack_out": [
        "tmp%5#0",
        "sender#0"
      ]
    },
    "2914": {
      "op": "bytec 4 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "\"b\""
      ]
    },
    "2916": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"b\"",
        "from#0 (copy)"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "\"b\"",
        "from#0 (copy)"
      ]
    },
    "2918": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "tmp%5#0"
      ]
    },
    "2919": {
      "op": "dup",
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "2920": {
      "op": "frame_bury 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "tmp%5#0"
      ]
    },
    "2922": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2923": {
      "op": "bury 1",
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "maybe_exists%0#0"
      ]
    },
    "2925": {
      "op": "bz arc1594_redeemFrom_bool_false@7",
      "stack_out": [
        "tmp%5#0",
        "sender#0"
      ]
    },
    "2928": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "tmp%5#0"
      ]
    },
    "2930": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2931": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "maybe_value%1#0"
      ]
    },
    "2932": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "2934": {
      "op": "b>=",
      "defined_out": [
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "tmp%7#0"
      ]
    },
    "2935": {
      "op": "bz arc1594_redeemFrom_bool_false@7",
      "stack_out": [
        "tmp%5#0",
        "sender#0"
      ]
    },
    "2938": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "and_result%0#0"
      ]
    },
    "2939": {
      "block": "arc1594_redeemFrom_bool_merge@8",
      "stack_in": [
        "tmp%5#0",
        "sender#0",
        "and_result%0#0"
      ],
      "error": "insufficient_balance",
      "op": "assert // insufficient_balance",
      "defined_out": [],
      "stack_out": [
        "tmp%5#0",
        "sender#0"
      ]
    },
    "2940": {
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "tmp%5#0"
      ]
    },
    "2942": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "2943": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2944": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "maybe_value%2#0"
      ]
    },
    "2945": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "maybe_value%2#0",
        "amount#0 (copy)"
      ]
    },
    "2947": {
      "op": "b-",
      "defined_out": [
        "tmp%5#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "to_encode%0#0"
      ]
    },
    "2948": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "2949": {
      "op": "len",
      "defined_out": [
        "tmp%5#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "2950": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%5#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "2951": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "tmp%5#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "2952": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "to_encode%0#0"
      ]
    },
    "2953": {
      "op": "intc_2 // 32",
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "2954": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "tmp%5#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "2955": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "bzero%0#0",
        "to_encode%0#0"
      ]
    },
    "2956": {
      "op": "dig 1",
      "defined_out": [
        "bzero%0#0",
        "bzero%0#0 (copy)",
        "tmp%5#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "bzero%0#0",
        "to_encode%0#0",
        "bzero%0#0 (copy)"
      ]
    },
    "2958": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "bzero%0#0",
        "arc4_encoded%0#0"
      ]
    },
    "2959": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "arc4_encoded%0#0",
        "tmp%5#0"
      ]
    },
    "2961": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "tmp%5#0",
        "arc4_encoded%0#0"
      ]
    },
    "2962": {
      "op": "box_put",
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "bzero%0#0"
      ]
    },
    "2963": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "bzero%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "0"
      ]
    },
    "2964": {
      "op": "bytec_3 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0",
        "bzero%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "0",
        "\"t\""
      ]
    },
    "2965": {
      "op": "app_global_get_ex",
      "defined_out": [
        "bzero%0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2966": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "maybe_value%3#0"
      ]
    },
    "2967": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "maybe_value%3#0",
        "amount#0 (copy)"
      ]
    },
    "2969": {
      "op": "b-",
      "defined_out": [
        "bzero%0#0",
        "tmp%5#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "to_encode%1#0"
      ]
    },
    "2970": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "tmp%5#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "2971": {
      "op": "len",
      "defined_out": [
        "bzero%0#0",
        "tmp%5#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "2972": {
      "op": "intc_2 // 32",
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "2973": {
      "op": "<=",
      "defined_out": [
        "bzero%0#0",
        "len_ok%1#0",
        "tmp%5#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "2974": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "to_encode%1#0"
      ]
    },
    "2975": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "arc4_encoded%1#0"
      ]
    },
    "2976": {
      "op": "bytec_3 // \"t\"",
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "arc4_encoded%1#0",
        "\"t\""
      ]
    },
    "2977": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "\"t\"",
        "arc4_encoded%1#0"
      ]
    },
    "2978": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%5#0",
        "sender#0"
      ]
    },
    "2979": {
      "op": "frame_dig -3",
      "defined_out": [
        "from#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "from#0 (copy)"
      ]
    },
    "2981": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "from#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "2983": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2984": {
      "op": "bytec 24 // 0x0042",
      "defined_out": [
        "0x0042",
        "encoded_tuple_buffer%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "encoded_tuple_buffer%2#0",
        "0x0042"
      ]
    },
    "2986": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2987": {
      "op": "frame_dig -1",
      "defined_out": [
        "data#0 (copy)",
        "encoded_tuple_buffer%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "encoded_tuple_buffer%3#0",
        "data#0 (copy)"
      ]
    },
    "2989": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2990": {
      "op": "bytec 6 // 0x0002",
      "defined_out": [
        "0x0002",
        "encoded_tuple_buffer%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "encoded_tuple_buffer%4#0",
        "0x0002"
      ]
    },
    "2992": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "0x0002",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2993": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "2994": {
      "op": "bytec 30 // method \"Redeem((address,uint256,byte[]))\"",
      "defined_out": [
        "Method(Redeem((address,uint256,byte[])))",
        "encoded_tuple_buffer%7#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "encoded_tuple_buffer%7#0",
        "Method(Redeem((address,uint256,byte[])))"
      ]
    },
    "2996": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "Method(Redeem((address,uint256,byte[])))",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "2997": {
      "op": "concat",
      "defined_out": [
        "event%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "event%0#0"
      ]
    },
    "2998": {
      "op": "log",
      "stack_out": [
        "tmp%5#0",
        "sender#0"
      ]
    },
    "2999": {
      "retsub": true,
      "op": "retsub"
    },
    "3000": {
      "block": "arc1594_redeemFrom_bool_false@7",
      "stack_in": [
        "tmp%5#0",
        "sender#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "and_result%0#0"
      ]
    },
    "3001": {
      "op": "b arc1594_redeemFrom_bool_merge@8"
    },
    "3004": {
      "block": "arc1594_redeemFrom_bool_false@3",
      "stack_in": [
        "tmp%5#0",
        "sender#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "sender#0",
        "or_result%0#0"
      ]
    },
    "3005": {
      "op": "b arc1594_redeemFrom_bool_merge@4"
    },
    "3008": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_redeem",
      "params": {
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1594_redeem",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "3011": {
      "op": "txn Sender"
    },
    "3013": {
      "op": "dup"
    },
    "3014": {
      "op": "frame_dig -2"
    },
    "3016": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "amount#0 (copy)",
        "from#0"
      ],
      "stack_out": [
        "from#0",
        "from#0",
        "amount#0 (copy)",
        "0x"
      ]
    },
    "3018": {
      "op": "b>",
      "defined_out": [
        "from#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "from#0",
        "from#0",
        "tmp%0#0"
      ]
    },
    "3019": {
      "error": "invalid_amount",
      "op": "assert // invalid_amount",
      "stack_out": [
        "from#0",
        "from#0"
      ]
    },
    "3020": {
      "op": "bytec 4 // \"b\"",
      "defined_out": [
        "\"b\"",
        "from#0"
      ],
      "stack_out": [
        "from#0",
        "from#0",
        "\"b\""
      ]
    },
    "3022": {
      "op": "swap",
      "stack_out": [
        "from#0",
        "\"b\"",
        "from#0"
      ]
    },
    "3023": {
      "op": "concat",
      "defined_out": [
        "from#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0"
      ]
    },
    "3024": {
      "op": "dup",
      "defined_out": [
        "from#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "3025": {
      "op": "box_len",
      "defined_out": [
        "from#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3026": {
      "op": "bury 1",
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "3028": {
      "op": "bz arc1594_redeem_bool_false@3",
      "stack_out": [
        "from#0",
        "tmp%1#0"
      ]
    },
    "3031": {
      "op": "frame_dig 1",
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "3033": {
      "op": "box_get",
      "defined_out": [
        "from#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3034": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "3035": {
      "op": "frame_dig -2",
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "3037": {
      "op": "b>=",
      "defined_out": [
        "from#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "3038": {
      "op": "bz arc1594_redeem_bool_false@3",
      "stack_out": [
        "from#0",
        "tmp%1#0"
      ]
    },
    "3041": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "from#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "and_result%0#0"
      ]
    },
    "3042": {
      "block": "arc1594_redeem_bool_merge@4",
      "stack_in": [
        "from#0",
        "tmp%1#0",
        "and_result%0#0"
      ],
      "error": "insufficient_balance",
      "op": "assert // insufficient_balance",
      "defined_out": [],
      "stack_out": [
        "from#0",
        "tmp%1#0"
      ]
    },
    "3043": {
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "3045": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "3046": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3047": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%2#0"
      ]
    },
    "3048": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%2#0",
        "amount#0 (copy)"
      ]
    },
    "3050": {
      "op": "b-",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "3051": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "3052": {
      "op": "len",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "3053": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "3054": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "3055": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "3056": {
      "op": "intc_2 // 32",
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "3057": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "3058": {
      "op": "swap",
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "bzero%0#0",
        "to_encode%0#0"
      ]
    },
    "3059": {
      "op": "dig 1",
      "defined_out": [
        "bzero%0#0",
        "bzero%0#0 (copy)",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "bzero%0#0",
        "to_encode%0#0",
        "bzero%0#0 (copy)"
      ]
    },
    "3061": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "bzero%0#0",
        "arc4_encoded%0#0"
      ]
    },
    "3062": {
      "op": "uncover 2",
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "bzero%0#0",
        "arc4_encoded%0#0",
        "tmp%1#0"
      ]
    },
    "3064": {
      "op": "swap",
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "bzero%0#0",
        "tmp%1#0",
        "arc4_encoded%0#0"
      ]
    },
    "3065": {
      "op": "box_put",
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "bzero%0#0"
      ]
    },
    "3066": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "bzero%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "bzero%0#0",
        "0"
      ]
    },
    "3067": {
      "op": "bytec_3 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0",
        "bzero%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "bzero%0#0",
        "0",
        "\"t\""
      ]
    },
    "3068": {
      "op": "app_global_get_ex",
      "defined_out": [
        "bzero%0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "bzero%0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3069": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "bzero%0#0",
        "maybe_value%3#0"
      ]
    },
    "3070": {
      "op": "frame_dig -2",
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "bzero%0#0",
        "maybe_value%3#0",
        "amount#0 (copy)"
      ]
    },
    "3072": {
      "op": "b-",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "bzero%0#0",
        "to_encode%1#0"
      ]
    },
    "3073": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "bzero%0#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "3074": {
      "op": "len",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "bzero%0#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "3075": {
      "op": "intc_2 // 32",
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "bzero%0#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "3076": {
      "op": "<=",
      "defined_out": [
        "bzero%0#0",
        "len_ok%1#0",
        "tmp%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "bzero%0#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "3077": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "bzero%0#0",
        "to_encode%1#0"
      ]
    },
    "3078": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "arc4_encoded%1#0"
      ]
    },
    "3079": {
      "op": "bytec_3 // \"t\"",
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "arc4_encoded%1#0",
        "\"t\""
      ]
    },
    "3080": {
      "op": "swap",
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "\"t\"",
        "arc4_encoded%1#0"
      ]
    },
    "3081": {
      "op": "app_global_put",
      "stack_out": [
        "from#0",
        "tmp%1#0"
      ]
    },
    "3082": {
      "op": "frame_dig 0",
      "defined_out": [
        "from#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "from#0"
      ]
    },
    "3084": {
      "op": "frame_dig -2",
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "from#0",
        "amount#0 (copy)"
      ]
    },
    "3086": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "from#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3087": {
      "op": "bytec 24 // 0x0042",
      "defined_out": [
        "0x0042",
        "encoded_tuple_buffer%2#0",
        "from#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "encoded_tuple_buffer%2#0",
        "0x0042"
      ]
    },
    "3089": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "from#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3090": {
      "op": "frame_dig -1",
      "defined_out": [
        "data#0 (copy)",
        "encoded_tuple_buffer%3#0",
        "from#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "encoded_tuple_buffer%3#0",
        "data#0 (copy)"
      ]
    },
    "3092": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "from#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "3093": {
      "op": "bytec 6 // 0x0002",
      "defined_out": [
        "0x0002",
        "encoded_tuple_buffer%4#0",
        "from#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "encoded_tuple_buffer%4#0",
        "0x0002"
      ]
    },
    "3095": {
      "op": "swap",
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "0x0002",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "3096": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "from#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3097": {
      "op": "bytec 30 // method \"Redeem((address,uint256,byte[]))\"",
      "defined_out": [
        "Method(Redeem((address,uint256,byte[])))",
        "encoded_tuple_buffer%7#0",
        "from#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "encoded_tuple_buffer%7#0",
        "Method(Redeem((address,uint256,byte[])))"
      ]
    },
    "3099": {
      "op": "swap",
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "Method(Redeem((address,uint256,byte[])))",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3100": {
      "op": "concat",
      "defined_out": [
        "event%0#0",
        "from#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "event%0#0"
      ]
    },
    "3101": {
      "op": "log",
      "stack_out": [
        "from#0",
        "tmp%1#0"
      ]
    },
    "3102": {
      "retsub": true,
      "op": "retsub"
    },
    "3103": {
      "block": "arc1594_redeem_bool_false@3",
      "stack_in": [
        "from#0",
        "tmp%1#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%1#0",
        "and_result%0#0"
      ]
    },
    "3104": {
      "op": "b arc1594_redeem_bool_merge@4"
    },
    "3107": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_transfer_with_data",
      "params": {
        "to#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1594_transfer_with_data",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "3110": {
      "op": "frame_dig -3",
      "defined_out": [
        "to#0 (copy)"
      ],
      "stack_out": [
        "to#0 (copy)"
      ]
    },
    "3112": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "to#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "3114": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc200_transfer",
      "op": "callsub arc200_transfer",
      "defined_out": [
        "res#0"
      ],
      "stack_out": [
        "res#0"
      ]
    },
    "3117": {
      "retsub": true,
      "op": "retsub"
    },
    "3118": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_transfer_from_with_data",
      "params": {
        "from#0": "bytes",
        "to#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1594_transfer_from_with_data",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "3121": {
      "op": "frame_dig -4",
      "defined_out": [
        "from#0 (copy)"
      ],
      "stack_out": [
        "from#0 (copy)"
      ]
    },
    "3123": {
      "op": "frame_dig -3",
      "defined_out": [
        "from#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "from#0 (copy)",
        "to#0 (copy)"
      ]
    },
    "3125": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "from#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "from#0 (copy)",
        "to#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "3127": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_transferFrom",
      "op": "callsub arc200_transferFrom",
      "defined_out": [
        "res#0"
      ],
      "stack_out": [
        "res#0"
      ]
    },
    "3130": {
      "retsub": true,
      "op": "retsub"
    },
    "3131": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_is_issuable",
      "params": {},
      "block": "arc1594_is_issuable",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3132": {
      "op": "bytec 15 // \"arc1594_iss\"",
      "defined_out": [
        "\"arc1594_iss\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc1594_iss\""
      ]
    },
    "3134": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3135": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3136": {
      "retsub": true,
      "op": "retsub"
    },
    "3137": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_balance_of_partition",
      "params": {
        "holder#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "arc1410_balance_of_partition",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "3140": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)"
      ]
    },
    "3142": {
      "op": "frame_dig -1",
      "defined_out": [
        "holder#0 (copy)",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "3144": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "3145": {
      "op": "bytec 8 // \"arc1410_p\"",
      "defined_out": [
        "\"arc1410_p\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"arc1410_p\""
      ]
    },
    "3147": {
      "op": "swap",
      "stack_out": [
        "\"arc1410_p\"",
        "key#0"
      ]
    },
    "3148": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3149": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3150": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3151": {
      "retsub": true,
      "op": "retsub"
    },
    "3152": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc200_transfer",
      "params": {
        "to#0": "bytes",
        "value#0": "bytes"
      },
      "block": "arc200_transfer",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "3155": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3157": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "3158": {
      "op": "frame_dig -2",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "tmp%0#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "to#0 (copy)"
      ]
    },
    "3160": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "stack_out": [
        "tmp%0#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "3161": {
      "op": "frame_dig -1",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "tmp%0#0",
        "to#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "value#0 (copy)"
      ]
    },
    "3163": {
      "op": "bytec 20 // 0x0000",
      "defined_out": [
        "0x0000",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "tmp%0#0",
        "to#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "value#0 (copy)",
        "0x0000"
      ]
    },
    "3165": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._transfer_partition",
      "op": "callsub _transfer_partition",
      "stack_out": []
    },
    "3168": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3170": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%1#0",
        "to#0 (copy)"
      ]
    },
    "3172": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "to#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "3174": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._transfer",
      "op": "callsub _transfer",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3177": {
      "retsub": true,
      "op": "retsub"
    },
    "3178": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_transfer_by_partition",
      "params": {
        "partition#0": "bytes",
        "to#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1410_transfer_by_partition",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "3181": {
      "op": "txn Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "3183": {
      "op": "frame_dig -3",
      "defined_out": [
        "sender#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "to#0 (copy)"
      ]
    },
    "3185": {
      "op": "frame_dig -4",
      "defined_out": [
        "partition#0 (copy)",
        "sender#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "to#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "3187": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._receiverPartition",
      "op": "callsub _receiverPartition",
      "defined_out": [
        "receiverPartition#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "receiverPartition#0"
      ]
    },
    "3190": {
      "op": "swap",
      "stack_out": [
        "receiverPartition#0",
        "sender#0"
      ]
    },
    "3191": {
      "op": "frame_dig -4",
      "stack_out": [
        "receiverPartition#0",
        "sender#0",
        "partition#0 (copy)"
      ]
    },
    "3193": {
      "op": "frame_dig -3",
      "stack_out": [
        "receiverPartition#0",
        "sender#0",
        "partition#0 (copy)",
        "to#0 (copy)"
      ]
    },
    "3195": {
      "op": "dig 3",
      "defined_out": [
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "sender#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "receiverPartition#0",
        "sender#0",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)"
      ]
    },
    "3197": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "sender#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "receiverPartition#0",
        "sender#0",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "3199": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "data#0 (copy)",
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "sender#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "receiverPartition#0",
        "sender#0",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)",
        "amount#0 (copy)",
        "data#0 (copy)"
      ]
    },
    "3201": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._transfer_partition",
      "op": "callsub _transfer_partition",
      "stack_out": [
        "receiverPartition#0"
      ]
    },
    "3204": {
      "retsub": true,
      "op": "retsub"
    },
    "3205": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_partitions_of",
      "params": {
        "holder#0": "bytes",
        "page#0": "bytes"
      },
      "block": "arc1410_partitions_of",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "3208": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)"
      ]
    },
    "3210": {
      "op": "frame_dig -1",
      "defined_out": [
        "holder#0 (copy)",
        "page#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)",
        "page#0 (copy)"
      ]
    },
    "3212": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "3213": {
      "op": "bytec 21 // \"arc1410_hp_a\"",
      "defined_out": [
        "\"arc1410_hp_a\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"arc1410_hp_a\""
      ]
    },
    "3215": {
      "op": "swap",
      "stack_out": [
        "\"arc1410_hp_a\"",
        "key#0"
      ]
    },
    "3216": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3217": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3218": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3219": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3221": {
      "op": "bnz arc1410_partitions_of_after_if_else@2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3224": {
      "op": "bytec 20 // 0x0000",
      "defined_out": [
        "0x0000",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x0000"
      ]
    },
    "3226": {
      "op": "swap"
    },
    "3227": {
      "retsub": true,
      "op": "retsub"
    },
    "3228": {
      "block": "arc1410_partitions_of_after_if_else@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3230": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3231": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "3232": {
      "op": "swap"
    },
    "3233": {
      "retsub": true,
      "op": "retsub"
    },
    "3234": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator",
      "params": {
        "holder#0": "bytes",
        "operator#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "arc1410_is_operator",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "3237": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3238": {
      "op": "dupn 2",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "3240": {
      "op": "frame_dig -2",
      "defined_out": [
        "operator#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "operator#0 (copy)"
      ]
    },
    "3242": {
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "operator#0 (copy)",
        "holder#0 (copy)"
      ]
    },
    "3244": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%0#0"
      ]
    },
    "3245": {
      "op": "bz arc1410_is_operator_after_if_else@2",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "3248": {
      "op": "bytec 7 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "0x80"
      ]
    },
    "3250": {
      "op": "frame_bury 0"
    },
    "3252": {
      "retsub": true,
      "op": "retsub"
    },
    "3253": {
      "block": "arc1410_is_operator_after_if_else@2",
      "stack_in": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "holder#0 (copy)"
      ]
    },
    "3255": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "holder#0 (copy)",
        "operator#0 (copy)"
      ]
    },
    "3257": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3258": {
      "op": "dup",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3259": {
      "op": "frame_bury 0",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3261": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "3263": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "specific#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "specific#0"
      ]
    },
    "3264": {
      "op": "bytec 22 // \"arc1410_op\"",
      "defined_out": [
        "\"arc1410_op\"",
        "encoded_tuple_buffer%2#0",
        "specific#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "specific#0",
        "\"arc1410_op\""
      ]
    },
    "3266": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "\"arc1410_op\"",
        "specific#0"
      ]
    },
    "3267": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%1#0"
      ]
    },
    "3268": {
      "op": "dup",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "3269": {
      "op": "frame_bury 1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%1#0"
      ]
    },
    "3271": {
      "op": "box_len",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3272": {
      "op": "bury 1",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_exists%0#0"
      ]
    },
    "3274": {
      "op": "bz arc1410_is_operator_after_if_else@5",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "3277": {
      "op": "frame_dig 1",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%1#0"
      ]
    },
    "3279": {
      "op": "box_get",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3280": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%1#0"
      ]
    },
    "3281": {
      "op": "btoi",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%3#0"
      ]
    },
    "3282": {
      "op": "intc_1 // 1",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%3#0",
        "1"
      ]
    },
    "3283": {
      "op": "==",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%4#0"
      ]
    },
    "3284": {
      "op": "bz arc1410_is_operator_after_if_else@5",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "3287": {
      "op": "bytec 7 // 0x80",
      "defined_out": [
        "0x80",
        "encoded_tuple_buffer%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "0x80"
      ]
    },
    "3289": {
      "op": "frame_bury 0"
    },
    "3291": {
      "retsub": true,
      "op": "retsub"
    },
    "3292": {
      "block": "arc1410_is_operator_after_if_else@5",
      "stack_in": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3294": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "3295": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "globalKey#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "globalKey#0"
      ]
    },
    "3296": {
      "op": "bytec 22 // \"arc1410_op\"",
      "defined_out": [
        "\"arc1410_op\"",
        "encoded_tuple_buffer%2#0",
        "globalKey#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "globalKey#0",
        "\"arc1410_op\""
      ]
    },
    "3298": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "\"arc1410_op\"",
        "globalKey#0"
      ]
    },
    "3299": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "3300": {
      "op": "dup",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "3301": {
      "op": "frame_bury 2",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "3303": {
      "op": "box_len",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3304": {
      "op": "bury 1",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_exists%2#0"
      ]
    },
    "3306": {
      "op": "bz arc1410_is_operator_after_if_else@8",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "3309": {
      "op": "frame_dig 2",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "3311": {
      "op": "box_get",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3312": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%3#0"
      ]
    },
    "3313": {
      "op": "btoi",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "3314": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "encoded_tuple_buffer%2#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%7#0",
        "1"
      ]
    },
    "3315": {
      "op": "==",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%8#0"
      ]
    },
    "3316": {
      "op": "bz arc1410_is_operator_after_if_else@8",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "3319": {
      "op": "bytec 7 // 0x80",
      "defined_out": [
        "0x80",
        "encoded_tuple_buffer%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "0x80"
      ]
    },
    "3321": {
      "op": "frame_bury 0"
    },
    "3323": {
      "retsub": true,
      "op": "retsub"
    },
    "3324": {
      "block": "arc1410_is_operator_after_if_else@8",
      "stack_in": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "op": "bytec 12 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "0x00"
      ]
    },
    "3326": {
      "op": "frame_bury 0"
    },
    "3328": {
      "retsub": true,
      "op": "retsub"
    },
    "3329": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_authorize_operator",
      "params": {
        "holder#0": "bytes",
        "operator#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "arc1410_authorize_operator",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "3332": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3334": {
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "holder#0 (copy)"
      ]
    },
    "3336": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3337": {
      "error": "Only holder can authorize",
      "op": "assert // Only holder can authorize",
      "stack_out": []
    },
    "3338": {
      "op": "frame_dig -3",
      "stack_out": [
        "holder#0 (copy)"
      ]
    },
    "3340": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ]
    },
    "3342": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3343": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "3345": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "3346": {
      "op": "bytec 22 // \"arc1410_op\"",
      "defined_out": [
        "\"arc1410_op\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"arc1410_op\""
      ]
    },
    "3348": {
      "op": "swap",
      "stack_out": [
        "\"arc1410_op\"",
        "key#0"
      ]
    },
    "3349": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3350": {
      "op": "bytec 25 // 0x01",
      "defined_out": [
        "0x01",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x01"
      ]
    },
    "3352": {
      "op": "box_put",
      "stack_out": []
    },
    "3353": {
      "retsub": true,
      "op": "retsub"
    },
    "3354": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_revoke_operator",
      "params": {
        "holder#0": "bytes",
        "operator#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "arc1410_revoke_operator",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "3357": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3359": {
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "holder#0 (copy)"
      ]
    },
    "3361": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3362": {
      "error": "Only holder can revoke",
      "op": "assert // Only holder can revoke",
      "stack_out": []
    },
    "3363": {
      "op": "frame_dig -3",
      "stack_out": [
        "holder#0 (copy)"
      ]
    },
    "3365": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ]
    },
    "3367": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3368": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "3370": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "3371": {
      "op": "bytec 22 // \"arc1410_op\"",
      "defined_out": [
        "\"arc1410_op\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"arc1410_op\""
      ]
    },
    "3373": {
      "op": "swap",
      "stack_out": [
        "\"arc1410_op\"",
        "key#0"
      ]
    },
    "3374": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3375": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "3376": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3377": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "maybe_exists%0#0"
      ]
    },
    "3379": {
      "op": "bz arc1410_revoke_operator_after_if_else@2",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3382": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "3384": {
      "op": "box_del",
      "defined_out": [
        "tmp%2#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%2#0",
        "{box_del}"
      ]
    },
    "3385": {
      "op": "pop",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3386": {
      "block": "arc1410_revoke_operator_after_if_else@2",
      "stack_in": [
        "tmp%2#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "3387": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_operator_transfer_by_partition",
      "params": {
        "from#0": "bytes",
        "partition#0": "bytes",
        "to#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1410_operator_transfer_by_partition",
      "stack_in": [],
      "op": "proto 5 1"
    },
    "3390": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3391": {
      "op": "txn Sender"
    },
    "3393": {
      "op": "frame_dig -5"
    },
    "3395": {
      "op": "txn Sender"
    },
    "3397": {
      "op": "frame_dig -4",
      "defined_out": [
        "from#0 (copy)",
        "partition#0 (copy)",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "from#0 (copy)",
        "sender#0",
        "partition#0 (copy)"
      ]
    },
    "3399": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator",
      "op": "callsub arc1410_is_operator",
      "defined_out": [
        "sender#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "tmp%0#0"
      ]
    },
    "3402": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "tmp%0#0",
        "0"
      ]
    },
    "3403": {
      "op": "getbit",
      "defined_out": [
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "tmp%1#0"
      ]
    },
    "3404": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "tmp%1#0",
        "1"
      ]
    },
    "3405": {
      "op": "==",
      "defined_out": [
        "authorized#0",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0"
      ]
    },
    "3406": {
      "op": "dupn 2",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "authorized#0"
      ]
    },
    "3408": {
      "op": "bnz arc1410_operator_transfer_by_partition_after_if_else@4",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "3411": {
      "op": "frame_dig -5",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "from#0 (copy)"
      ]
    },
    "3413": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "from#0 (copy)",
        "sender#0"
      ]
    },
    "3415": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%2#0",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3416": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "3418": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "pKey#0",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "pKey#0"
      ]
    },
    "3419": {
      "op": "bytec 17 // \"arc1410_opa\"",
      "defined_out": [
        "\"arc1410_opa\"",
        "authorized#0",
        "authorized#9",
        "pKey#0",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "pKey#0",
        "\"arc1410_opa\""
      ]
    },
    "3421": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "\"arc1410_opa\"",
        "pKey#0"
      ]
    },
    "3422": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0"
      ]
    },
    "3423": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "3424": {
      "op": "frame_bury 0",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0"
      ]
    },
    "3426": {
      "op": "box_len",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3427": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_exists%0#0"
      ]
    },
    "3429": {
      "op": "bz arc1410_operator_transfer_by_partition_after_if_else@3",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "3432": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0"
      ]
    },
    "3434": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "3435": {
      "op": "box_get",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "maybe_exists%1#0",
        "remaining#0",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "maybe_exists%1#0"
      ]
    },
    "3436": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0"
      ]
    },
    "3437": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "remaining#0",
        "remaining#0 (copy)",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "remaining#0 (copy)"
      ]
    },
    "3438": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "authorized#0",
        "authorized#9",
        "remaining#0",
        "remaining#0 (copy)",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "remaining#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "3440": {
      "op": "b>=",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "remaining#0",
        "sender#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "tmp%4#0"
      ]
    },
    "3441": {
      "error": "Portion allowance exceeded",
      "op": "assert // Portion allowance exceeded",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0"
      ]
    },
    "3442": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "authorized#0"
      ]
    },
    "3443": {
      "op": "frame_bury 2",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0"
      ]
    },
    "3445": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "amount#0 (copy)"
      ]
    },
    "3447": {
      "op": "b-",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0"
      ]
    },
    "3448": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "3449": {
      "op": "len",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "3450": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "3451": {
      "op": "<=",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "len_ok%0#0",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "3452": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0"
      ]
    },
    "3453": {
      "op": "intc_2 // 32",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "3454": {
      "op": "bzero",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "bzero%0#0",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "3455": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "arc4_encoded%0#0"
      ]
    },
    "3456": {
      "op": "box_put",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "3457": {
      "block": "arc1410_operator_transfer_by_partition_after_if_else@3",
      "stack_in": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "authorized#9"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "authorized#9"
      ]
    },
    "3459": {
      "op": "frame_bury 3",
      "defined_out": [
        "authorized#9"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "3461": {
      "block": "arc1410_operator_transfer_by_partition_after_if_else@4",
      "stack_in": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "authorized#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "authorized#0"
      ]
    },
    "3463": {
      "error": "Not authorized operator",
      "op": "assert // Not authorized operator",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "3464": {
      "op": "frame_dig -3",
      "defined_out": [
        "authorized#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "to#0 (copy)"
      ]
    },
    "3466": {
      "op": "frame_dig -4",
      "defined_out": [
        "authorized#0",
        "partition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "to#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "3468": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._receiverPartition",
      "op": "callsub _receiverPartition",
      "defined_out": [
        "authorized#0",
        "receiverPartition#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0"
      ]
    },
    "3471": {
      "op": "frame_dig -5",
      "defined_out": [
        "authorized#0",
        "from#0 (copy)",
        "receiverPartition#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)"
      ]
    },
    "3473": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "3475": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "to#0 (copy)"
      ]
    },
    "3477": {
      "op": "dig 3",
      "defined_out": [
        "authorized#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)"
      ]
    },
    "3479": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "authorized#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "3481": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "authorized#0",
        "data#0 (copy)",
        "from#0 (copy)",
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)",
        "amount#0 (copy)",
        "data#0 (copy)"
      ]
    },
    "3483": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._transfer_partition",
      "op": "callsub _transfer_partition",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0"
      ]
    },
    "3486": {
      "op": "frame_bury 0"
    },
    "3488": {
      "retsub": true,
      "op": "retsub"
    },
    "3489": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_can_transfer_by_partition",
      "params": {
        "from#0": "bytes",
        "partition#0": "bytes",
        "to#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1410_can_transfer_by_partition",
      "stack_in": [],
      "op": "proto 5 1"
    },
    "3492": {
      "op": "intc_0 // 0",
      "stack_out": [
        "senderAddr#0"
      ]
    },
    "3493": {
      "op": "dup",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0"
      ]
    },
    "3494": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0"
      ]
    },
    "3496": {
      "op": "dup",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10"
      ]
    },
    "3497": {
      "op": "frame_dig -5",
      "defined_out": [
        "from#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "from#0 (copy)"
      ]
    },
    "3499": {
      "op": "frame_dig -4",
      "defined_out": [
        "from#0 (copy)",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "from#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "3501": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "encoded_tuple_buffer%2#1"
      ]
    },
    "3502": {
      "op": "bytec 8 // \"arc1410_p\"",
      "defined_out": [
        "\"arc1410_p\"",
        "encoded_tuple_buffer%2#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "encoded_tuple_buffer%2#1",
        "\"arc1410_p\""
      ]
    },
    "3504": {
      "op": "swap",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "\"arc1410_p\"",
        "encoded_tuple_buffer%2#1"
      ]
    },
    "3505": {
      "op": "concat",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "3506": {
      "op": "dup",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%0#1"
      ]
    },
    "3507": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "3508": {
      "op": "bury 1",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_exists%0#0"
      ]
    },
    "3510": {
      "op": "bnz arc1410_can_transfer_by_partition_after_if_else@2",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "3513": {
      "op": "pushbytes base32(KAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKFAYLSORUXI2LPNYQG433UEBSXQ2LTORZQ)",
      "defined_out": [
        "KAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKFAYLSORUXI2LPNYQG433UEBSXQ2LTORZQ",
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "KAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKFAYLSORUXI2LPNYQG433UEBSXQ2LTORZQ"
      ]
    },
    "3572": {
      "op": "frame_bury 0"
    },
    "3574": {
      "retsub": true,
      "op": "retsub"
    },
    "3575": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@2",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%0#1"
      ]
    },
    "3577": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3578": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_value%0#0"
      ]
    },
    "3579": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_value%0#0",
        "amount#0 (copy)"
      ]
    },
    "3581": {
      "op": "b<",
      "defined_out": [
        "tmp%0#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%2#0"
      ]
    },
    "3582": {
      "op": "bz arc1410_can_transfer_by_partition_after_if_else@4",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "3585": {
      "op": "pushbytes base32(KIACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKES3TTOVTGM2LDNFSW45BAMJQWYYLOMNSQ)",
      "defined_out": [
        "KIACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKES3TTOVTGM2LDNFSW45BAMJQWYYLOMNSQ",
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "KIACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKES3TTOVTGM2LDNFSW45BAMJQWYYLOMNSQ"
      ]
    },
    "3644": {
      "op": "frame_bury 0"
    },
    "3646": {
      "retsub": true,
      "op": "retsub"
    },
    "3647": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@4",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "to#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "to#0 (copy)"
      ]
    },
    "3649": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "3650": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%3#0"
      ]
    },
    "3651": {
      "op": "bz arc1410_can_transfer_by_partition_after_if_else@6",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "3654": {
      "op": "pushbytes base32(K4ACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIES3TWMFWGSZBAOJSWGZLJOZSXE)",
      "defined_out": [
        "K4ACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIES3TWMFWGSZBAOJSWGZLJOZSXE"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "K4ACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIES3TWMFWGSZBAOJSWGZLJOZSXE"
      ]
    },
    "3709": {
      "op": "frame_bury 0"
    },
    "3711": {
      "retsub": true,
      "op": "retsub"
    },
    "3712": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@6",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "txn Sender"
    },
    "3714": {
      "op": "dup",
      "defined_out": [
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "senderAddr#0",
        "senderAddr#0"
      ]
    },
    "3715": {
      "op": "frame_bury 0",
      "defined_out": [
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "senderAddr#0"
      ]
    },
    "3717": {
      "op": "frame_dig -5",
      "defined_out": [
        "from#0 (copy)",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "senderAddr#0",
        "from#0 (copy)"
      ]
    },
    "3719": {
      "op": "!=",
      "defined_out": [
        "senderAddr#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%4#0"
      ]
    },
    "3720": {
      "op": "bz arc1410_can_transfer_by_partition_after_if_else@16",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "3723": {
      "op": "frame_dig -5",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "from#0 (copy)"
      ]
    },
    "3725": {
      "op": "frame_dig 0",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "from#0 (copy)",
        "senderAddr#0"
      ]
    },
    "3727": {
      "op": "frame_dig -4",
      "defined_out": [
        "from#0 (copy)",
        "partition#0 (copy)",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "from#0 (copy)",
        "senderAddr#0",
        "partition#0 (copy)"
      ]
    },
    "3729": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator",
      "op": "callsub arc1410_is_operator",
      "defined_out": [
        "senderAddr#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%5#0"
      ]
    },
    "3732": {
      "op": "intc_0 // 0",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%5#0",
        "0"
      ]
    },
    "3733": {
      "op": "getbit",
      "defined_out": [
        "senderAddr#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%6#0"
      ]
    },
    "3734": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "senderAddr#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%6#0",
        "1"
      ]
    },
    "3735": {
      "op": "==",
      "defined_out": [
        "authorized#0",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0"
      ]
    },
    "3736": {
      "op": "dup",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0",
        "authorized#0"
      ]
    },
    "3737": {
      "op": "frame_bury 2",
      "defined_out": [
        "authorized#0",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0"
      ]
    },
    "3739": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0",
        "authorized#10"
      ]
    },
    "3740": {
      "op": "frame_bury 3",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0"
      ]
    },
    "3742": {
      "op": "bnz arc1410_can_transfer_by_partition_after_if_else@13",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "3745": {
      "op": "frame_dig -5",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "from#0 (copy)"
      ]
    },
    "3747": {
      "op": "frame_dig 0",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "from#0 (copy)",
        "senderAddr#0"
      ]
    },
    "3749": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "encoded_tuple_buffer%20#0",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "encoded_tuple_buffer%20#0"
      ]
    },
    "3750": {
      "op": "frame_dig -4",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "encoded_tuple_buffer%20#0",
        "partition#0 (copy)"
      ]
    },
    "3752": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "pKey#0",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "pKey#0"
      ]
    },
    "3753": {
      "op": "bytec 17 // \"arc1410_opa\"",
      "defined_out": [
        "\"arc1410_opa\"",
        "authorized#0",
        "authorized#10",
        "pKey#0",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "pKey#0",
        "\"arc1410_opa\""
      ]
    },
    "3755": {
      "op": "swap",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "\"arc1410_opa\"",
        "pKey#0"
      ]
    },
    "3756": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "senderAddr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%7#0"
      ]
    },
    "3757": {
      "op": "dup",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%7#0",
        "tmp%7#0"
      ]
    },
    "3758": {
      "op": "frame_bury 1",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "senderAddr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%7#0"
      ]
    },
    "3760": {
      "op": "box_len",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "senderAddr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3761": {
      "op": "bury 1",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_exists%1#0"
      ]
    },
    "3763": {
      "op": "frame_dig 2",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_exists%1#0",
        "authorized#10"
      ]
    },
    "3765": {
      "op": "frame_bury 3",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_exists%1#0"
      ]
    },
    "3767": {
      "op": "bz arc1410_can_transfer_by_partition_after_if_else@13",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "3770": {
      "op": "frame_dig 1",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%7#0"
      ]
    },
    "3772": {
      "op": "box_get",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "maybe_exists%2#0",
        "remaining#0",
        "senderAddr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "remaining#0",
        "maybe_exists%2#0"
      ]
    },
    "3773": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "remaining#0"
      ]
    },
    "3774": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "authorized#0",
        "authorized#10",
        "remaining#0",
        "senderAddr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "remaining#0",
        "amount#0 (copy)"
      ]
    },
    "3776": {
      "op": "b>=",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "senderAddr#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%9#0"
      ]
    },
    "3777": {
      "op": "bz arc1410_can_transfer_by_partition_after_if_else@11",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "3780": {
      "op": "intc_1 // 1",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0"
      ]
    },
    "3781": {
      "op": "frame_bury 2",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "3783": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@11",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "authorized#10"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#10"
      ]
    },
    "3785": {
      "op": "frame_bury 3",
      "defined_out": [
        "authorized#10"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "3787": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@13",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "authorized#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0"
      ]
    },
    "3789": {
      "op": "bnz arc1410_can_transfer_by_partition_after_if_else@16",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "3792": {
      "op": "pushbytes base32(LAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALU64DFOJQXI33SEBXG65BAMF2XI2DPOJUXUZLE)",
      "defined_out": [
        "LAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALU64DFOJQXI33SEBXG65BAMF2XI2DPOJUXUZLE",
        "authorized#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "LAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALU64DFOJQXI33SEBXG65BAMF2XI2DPOJUXUZLE"
      ]
    },
    "3854": {
      "op": "frame_bury 0"
    },
    "3856": {
      "retsub": true,
      "op": "retsub"
    },
    "3857": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@16",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "to#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "to#0 (copy)"
      ]
    },
    "3859": {
      "op": "frame_dig -4",
      "defined_out": [
        "partition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "to#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "3861": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._receiverPartition",
      "op": "callsub _receiverPartition",
      "defined_out": [
        "receiverPartition#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "receiverPartition#0"
      ]
    },
    "3864": {
      "op": "pushbytes 0x510023",
      "defined_out": [
        "0x510023",
        "receiverPartition#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "receiverPartition#0",
        "0x510023"
      ]
    },
    "3869": {
      "op": "swap",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "0x510023",
        "receiverPartition#0"
      ]
    },
    "3870": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%30#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "encoded_tuple_buffer%30#0"
      ]
    },
    "3871": {
      "op": "pushbytes 0x000753756363657373",
      "defined_out": [
        "0x000753756363657373",
        "encoded_tuple_buffer%30#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "encoded_tuple_buffer%30#0",
        "0x000753756363657373"
      ]
    },
    "3882": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%31#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "encoded_tuple_buffer%31#0"
      ]
    },
    "3883": {
      "op": "frame_bury 0"
    },
    "3885": {
      "retsub": true,
      "op": "retsub"
    },
    "3886": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._receiverPartition",
      "params": {
        "receiver#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "_receiverPartition",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "3889": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ"
    },
    "3890": {
      "op": "frame_dig -2"
    },
    "3892": {
      "op": "frame_dig -1",
      "defined_out": [
        "partition#0 (copy)",
        "receiver#0 (copy)",
        "receiverPartition#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "receiver#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "3894": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "receiverPartition#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3895": {
      "op": "bytec 8 // \"arc1410_p\"",
      "defined_out": [
        "\"arc1410_p\"",
        "encoded_tuple_buffer%2#0",
        "receiverPartition#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "encoded_tuple_buffer%2#0",
        "\"arc1410_p\""
      ]
    },
    "3897": {
      "op": "swap",
      "stack_out": [
        "receiverPartition#0",
        "\"arc1410_p\"",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3898": {
      "op": "concat",
      "defined_out": [
        "receiverPartition#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "tmp%0#0"
      ]
    },
    "3899": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "receiverPartition#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3900": {
      "op": "bury 1",
      "stack_out": [
        "receiverPartition#0",
        "maybe_exists%0#0"
      ]
    },
    "3902": {
      "op": "bz _receiverPartition_after_if_else@2",
      "stack_out": [
        "receiverPartition#0"
      ]
    },
    "3905": {
      "op": "frame_dig -1",
      "stack_out": [
        "receiverPartition#0",
        "receiverPartition#0"
      ]
    },
    "3907": {
      "op": "frame_bury 0",
      "stack_out": [
        "receiverPartition#0"
      ]
    },
    "3909": {
      "block": "_receiverPartition_after_if_else@2",
      "stack_in": [
        "receiverPartition#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "receiverPartition#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "receiverPartition#0"
      ]
    },
    "3911": {
      "op": "swap"
    },
    "3912": {
      "retsub": true,
      "op": "retsub"
    },
    "3913": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._add_participation_to_holder",
      "params": {
        "holder#0": "bytes",
        "participation#0": "bytes"
      },
      "block": "_add_participation_to_holder",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "3916": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a#0"
      ]
    },
    "3917": {
      "op": "dupn 4",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0"
      ]
    },
    "3919": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0"
      ]
    },
    "3921": {
      "op": "dupn 4",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "3923": {
      "op": "pushbytes \"arc1410_hp_p\"",
      "defined_out": [
        "\"arc1410_hp_p\""
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "\"arc1410_hp_p\""
      ]
    },
    "3937": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"arc1410_hp_p\"",
        "holder#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "\"arc1410_hp_p\"",
        "holder#0 (copy)"
      ]
    },
    "3939": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "3940": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3941": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3942": {
      "op": "bury 1",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3944": {
      "op": "bnz _add_participation_to_holder_after_if_else@2",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "3947": {
      "op": "frame_dig 10",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3949": {
      "op": "bytec 14 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%0#0",
        "0x0000000000000000"
      ]
    },
    "3951": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "3952": {
      "block": "_add_participation_to_holder_after_if_else@2",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 10",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3954": {
      "op": "box_get",
      "defined_out": [
        "lastPage#0",
        "maybe_exists%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "lastPage#0",
        "maybe_exists%1#0"
      ]
    },
    "3955": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_exists%1#0",
        "lastPage#0"
      ]
    },
    "3956": {
      "op": "frame_bury 2",
      "defined_out": [
        "lastPage#0",
        "maybe_exists%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_exists%1#0"
      ]
    },
    "3958": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "3959": {
      "op": "intc_0 // 0",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "found#0"
      ]
    },
    "3960": {
      "op": "frame_bury 6",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "3962": {
      "op": "bytec 14 // 0x0000000000000000",
      "defined_out": [
        "curPage#0",
        "found#0",
        "lastPage#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "curPage#0"
      ]
    },
    "3964": {
      "op": "frame_bury 1",
      "defined_out": [
        "curPage#0",
        "found#0",
        "lastPage#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "3966": {
      "block": "_add_participation_to_holder_while_top@3",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "curPage#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "curPage#0"
      ]
    },
    "3968": {
      "op": "btoi",
      "defined_out": [
        "curPage#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "3969": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%3#0"
      ]
    },
    "3970": {
      "op": "frame_bury 8",
      "defined_out": [
        "curPage#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "3972": {
      "op": "frame_dig 2",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0",
        "lastPage#0"
      ]
    },
    "3974": {
      "op": "btoi",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "3975": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%4#0"
      ]
    },
    "3976": {
      "op": "frame_bury 9",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "3978": {
      "op": "<",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%5#0"
      ]
    },
    "3979": {
      "op": "bz _add_participation_to_holder_block@10",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "3982": {
      "op": "frame_dig -2",
      "defined_out": [
        "curPage#0",
        "holder#0 (copy)",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "holder#0 (copy)"
      ]
    },
    "3984": {
      "op": "frame_dig 1",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "holder#0 (copy)",
        "curPage#0"
      ]
    },
    "3986": {
      "op": "concat",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "paginatedKey#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "paginatedKey#0"
      ]
    },
    "3987": {
      "op": "bytec 21 // \"arc1410_hp_a\"",
      "defined_out": [
        "\"arc1410_hp_a\"",
        "curPage#0",
        "lastPage#0",
        "paginatedKey#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "paginatedKey#0",
        "\"arc1410_hp_a\""
      ]
    },
    "3989": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "\"arc1410_hp_a\"",
        "paginatedKey#0"
      ]
    },
    "3990": {
      "op": "concat",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "3991": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "3992": {
      "op": "frame_bury 4",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "3994": {
      "op": "box_len",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3995": {
      "op": "bury 1",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_exists%2#0"
      ]
    },
    "3997": {
      "op": "bnz _add_participation_to_holder_after_if_else@6",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "4000": {
      "op": "bytec 26 // 0x0001",
      "defined_out": [
        "0x0001",
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "0x0001"
      ]
    },
    "4002": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x0001",
        "curPage#0",
        "lastPage#0",
        "participation#0 (copy)",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "0x0001",
        "participation#0 (copy)"
      ]
    },
    "4004": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%0#0"
      ]
    },
    "4005": {
      "op": "frame_dig 4",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%6#0"
      ]
    },
    "4007": {
      "op": "dup",
      "defined_out": [
        "concat_result%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "4008": {
      "op": "box_del",
      "defined_out": [
        "concat_result%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0",
        "{box_del}"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%6#0",
        "{box_del}"
      ]
    },
    "4009": {
      "op": "pop",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%6#0"
      ]
    },
    "4010": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%6#0",
        "concat_result%0#0"
      ]
    },
    "4011": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "4012": {
      "block": "_add_participation_to_holder_after_if_else@6",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "4014": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "a#0",
        "maybe_exists%3#0"
      ]
    },
    "4015": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_exists%3#0",
        "a#0"
      ]
    },
    "4016": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_exists%3#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "4017": {
      "op": "cover 2",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "a#0",
        "maybe_exists%3#0",
        "a#0"
      ]
    },
    "4019": {
      "op": "frame_bury 0",
      "defined_out": [
        "a#0",
        "maybe_exists%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "a#0",
        "maybe_exists%3#0"
      ]
    },
    "4021": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "a#0"
      ]
    },
    "4022": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "a#0",
        "0"
      ]
    },
    "4023": {
      "op": "extract_uint16",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "array_length%0#0"
      ]
    },
    "4024": {
      "op": "frame_bury 5",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "4026": {
      "op": "intc_0 // 0",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "item_index_internal%0#0"
      ]
    },
    "4027": {
      "op": "frame_bury 7",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "4029": {
      "block": "_add_participation_to_holder_for_header@17",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "item_index_internal%0#0"
      ]
    },
    "4031": {
      "op": "frame_dig 5",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "item_index_internal%0#0",
        "array_length%0#0"
      ]
    },
    "4033": {
      "op": "<",
      "defined_out": [
        "array_length%0#0",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "continue_looping%0#0"
      ]
    },
    "4034": {
      "op": "bz _add_participation_to_holder_after_for@21",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "4037": {
      "op": "frame_dig 0",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "a#0"
      ]
    },
    "4039": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "4042": {
      "op": "frame_dig 7",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0"
      ]
    },
    "4044": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "a#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0",
        "32"
      ]
    },
    "4045": {
      "op": "*",
      "defined_out": [
        "a#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "4046": {
      "op": "intc_2 // 32",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "32"
      ]
    },
    "4047": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "v#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "v#0"
      ]
    },
    "4048": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "participation#0 (copy)",
        "v#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "v#0",
        "participation#0 (copy)"
      ]
    },
    "4050": {
      "op": "==",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%0#1"
      ]
    },
    "4051": {
      "op": "bz _add_participation_to_holder_after_if_else@20",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "4054": {
      "op": "intc_1 // 1",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%9#0"
      ]
    },
    "4055": {
      "block": "_add_participation_to_holder_after_inlined_smart_contracts/security_token/arc1410.algo.ts::Arc1410.containsAddress@22",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%9#0"
      ],
      "op": "bz _add_participation_to_holder_after_if_else@8",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "4058": {
      "op": "intc_1 // 1",
      "defined_out": [
        "found#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "found#0"
      ]
    },
    "4059": {
      "op": "frame_bury 6",
      "defined_out": [
        "found#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "4061": {
      "block": "_add_participation_to_holder_block@10",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 6",
      "defined_out": [
        "found#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "found#0"
      ]
    },
    "4063": {
      "op": "bnz _add_participation_to_holder_after_if_else@15",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "4066": {
      "op": "frame_dig -2",
      "defined_out": [
        "found#0",
        "holder#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "holder#0 (copy)"
      ]
    },
    "4068": {
      "op": "frame_dig 2",
      "defined_out": [
        "found#0",
        "holder#0 (copy)",
        "lastPage#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "holder#0 (copy)",
        "lastPage#0"
      ]
    },
    "4070": {
      "op": "concat",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "paginatedKey\u2081#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "paginatedKey\u2081#0"
      ]
    },
    "4071": {
      "op": "bytec 21 // \"arc1410_hp_a\"",
      "defined_out": [
        "\"arc1410_hp_a\"",
        "found#0",
        "lastPage#0",
        "paginatedKey\u2081#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "paginatedKey\u2081#0",
        "\"arc1410_hp_a\""
      ]
    },
    "4073": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "\"arc1410_hp_a\"",
        "paginatedKey\u2081#0"
      ]
    },
    "4074": {
      "op": "concat",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0"
      ]
    },
    "4075": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "tmp%11#0"
      ]
    },
    "4076": {
      "op": "frame_bury 3",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0"
      ]
    },
    "4078": {
      "op": "box_get",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4079": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_value%4#0"
      ]
    },
    "4080": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_value%4#0",
        "0"
      ]
    },
    "4081": {
      "op": "extract_uint16",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "to_encode%1#0"
      ]
    },
    "4082": {
      "op": "itob",
      "defined_out": [
        "found#0",
        "itemsCount#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "itemsCount#0"
      ]
    },
    "4083": {
      "op": "btoi",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%12#0"
      ]
    },
    "4084": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%12#0",
        "10"
      ]
    },
    "4086": {
      "op": "<",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%13#0"
      ]
    },
    "4087": {
      "op": "bz _add_participation_to_holder_else_body@13",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "4090": {
      "op": "frame_dig 3",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0"
      ]
    },
    "4092": {
      "op": "dup",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ]
    },
    "4093": {
      "op": "box_get",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "4094": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "maybe_value%5#0"
      ]
    },
    "4095": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%1#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "expr_value_trimmed%1#0"
      ]
    },
    "4098": {
      "op": "bytec 26 // 0x0001",
      "defined_out": [
        "0x0001",
        "expr_value_trimmed%1#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "expr_value_trimmed%1#0",
        "0x0001"
      ]
    },
    "4100": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x0001",
        "expr_value_trimmed%1#0",
        "found#0",
        "lastPage#0",
        "participation#0 (copy)",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "expr_value_trimmed%1#0",
        "0x0001",
        "participation#0 (copy)"
      ]
    },
    "4102": {
      "op": "concat",
      "defined_out": [
        "concat_result%1#0",
        "expr_value_trimmed%1#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "expr_value_trimmed%1#0",
        "concat_result%1#0"
      ]
    },
    "4103": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%1#0",
        "expr_value_trimmed%3#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "expr_value_trimmed%1#0",
        "expr_value_trimmed%3#0"
      ]
    },
    "4106": {
      "op": "concat",
      "defined_out": [
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concatenated%2#0"
      ]
    },
    "4107": {
      "op": "dup",
      "defined_out": [
        "concatenated%2#0",
        "concatenated%2#0 (copy)",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concatenated%2#0",
        "concatenated%2#0 (copy)"
      ]
    },
    "4108": {
      "op": "len",
      "defined_out": [
        "byte_len%2#0",
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concatenated%2#0",
        "byte_len%2#0"
      ]
    },
    "4109": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "byte_len%2#0",
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concatenated%2#0",
        "byte_len%2#0",
        "32"
      ]
    },
    "4110": {
      "op": "/",
      "defined_out": [
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "len_%2#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concatenated%2#0",
        "len_%2#0"
      ]
    },
    "4111": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concatenated%2#0",
        "as_bytes%2#0"
      ]
    },
    "4112": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "len_16_bit%2#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concatenated%2#0",
        "len_16_bit%2#0"
      ]
    },
    "4115": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "len_16_bit%2#0",
        "concatenated%2#0"
      ]
    },
    "4116": {
      "op": "concat",
      "defined_out": [
        "concat_result%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concat_result%2#0"
      ]
    },
    "4117": {
      "op": "dig 1",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concat_result%2#0",
        "tmp%11#0 (copy)"
      ]
    },
    "4119": {
      "op": "box_del",
      "defined_out": [
        "concat_result%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "{box_del}"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concat_result%2#0",
        "{box_del}"
      ]
    },
    "4120": {
      "op": "pop",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concat_result%2#0"
      ]
    },
    "4121": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "4122": {
      "block": "_add_participation_to_holder_after_if_else@15",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "4123": {
      "block": "_add_participation_to_holder_else_body@13",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 9",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%4#0"
      ]
    },
    "4125": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%4#0",
        "1"
      ]
    },
    "4126": {
      "op": "+",
      "defined_out": [
        "tmp%4#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "to_encode%2#0"
      ]
    },
    "4127": {
      "op": "itob",
      "defined_out": [
        "newLastPage#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newLastPage#0"
      ]
    },
    "4128": {
      "op": "frame_dig 10",
      "defined_out": [
        "newLastPage#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newLastPage#0",
        "tmp%0#0"
      ]
    },
    "4130": {
      "op": "dig 1",
      "defined_out": [
        "newLastPage#0",
        "newLastPage#0 (copy)",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newLastPage#0",
        "tmp%0#0",
        "newLastPage#0 (copy)"
      ]
    },
    "4132": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newLastPage#0"
      ]
    },
    "4133": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)",
        "newLastPage#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newLastPage#0",
        "holder#0 (copy)"
      ]
    },
    "4135": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "holder#0 (copy)",
        "newLastPage#0"
      ]
    },
    "4136": {
      "op": "concat",
      "defined_out": [
        "newPaginatedKey#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newPaginatedKey#0"
      ]
    },
    "4137": {
      "op": "bytec 26 // 0x0001",
      "defined_out": [
        "0x0001",
        "newPaginatedKey#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newPaginatedKey#0",
        "0x0001"
      ]
    },
    "4139": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x0001",
        "newPaginatedKey#0",
        "participation#0 (copy)",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newPaginatedKey#0",
        "0x0001",
        "participation#0 (copy)"
      ]
    },
    "4141": {
      "op": "concat",
      "defined_out": [
        "concat_result%3#0",
        "newPaginatedKey#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newPaginatedKey#0",
        "concat_result%3#0"
      ]
    },
    "4142": {
      "op": "bytec 21 // \"arc1410_hp_a\"",
      "defined_out": [
        "\"arc1410_hp_a\"",
        "concat_result%3#0",
        "newPaginatedKey#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newPaginatedKey#0",
        "concat_result%3#0",
        "\"arc1410_hp_a\""
      ]
    },
    "4144": {
      "op": "uncover 2",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%3#0",
        "\"arc1410_hp_a\"",
        "newPaginatedKey#0"
      ]
    },
    "4146": {
      "op": "concat",
      "defined_out": [
        "concat_result%3#0",
        "tmp%0#0",
        "tmp%18#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%3#0",
        "tmp%18#0"
      ]
    },
    "4147": {
      "op": "dup",
      "defined_out": [
        "concat_result%3#0",
        "tmp%0#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%3#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "4148": {
      "op": "box_del",
      "defined_out": [
        "concat_result%3#0",
        "tmp%0#0",
        "tmp%18#0",
        "tmp%4#0",
        "{box_del}"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%3#0",
        "tmp%18#0",
        "{box_del}"
      ]
    },
    "4149": {
      "op": "pop",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%3#0",
        "tmp%18#0"
      ]
    },
    "4150": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%18#0",
        "concat_result%3#0"
      ]
    },
    "4151": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "4152": {
      "retsub": true,
      "op": "retsub"
    },
    "4153": {
      "block": "_add_participation_to_holder_after_if_else@8",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 8",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "4155": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0",
        "1"
      ]
    },
    "4156": {
      "op": "+",
      "defined_out": [
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "to_encode%0#0"
      ]
    },
    "4157": {
      "op": "itob",
      "defined_out": [
        "curPage#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "curPage#0"
      ]
    },
    "4158": {
      "op": "frame_bury 1",
      "defined_out": [
        "curPage#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "4160": {
      "op": "b _add_participation_to_holder_while_top@3"
    },
    "4163": {
      "block": "_add_participation_to_holder_after_if_else@20",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "item_index_internal%0#0"
      ]
    },
    "4165": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "4166": {
      "op": "+",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "item_index_internal%0#0"
      ]
    },
    "4167": {
      "op": "frame_bury 7",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "4169": {
      "op": "b _add_participation_to_holder_for_header@17"
    },
    "4172": {
      "block": "_add_participation_to_holder_after_for@21",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%9#0"
      ]
    },
    "4173": {
      "op": "b _add_participation_to_holder_after_inlined_smart_contracts/security_token/arc1410.algo.ts::Arc1410.containsAddress@22"
    },
    "4176": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._transfer_partition",
      "params": {
        "from#0": "bytes",
        "fromPartition#0": "bytes",
        "to#0": "bytes",
        "toPartition#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "_transfer_partition",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "4179": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bzero%0#0"
      ]
    },
    "4180": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "4181": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "amount#0 (copy)"
      ]
    },
    "4183": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "amount#0 (copy)",
        "0x"
      ]
    },
    "4185": {
      "op": "b>",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%0#0"
      ]
    },
    "4186": {
      "error": "Invalid amount",
      "op": "assert // Invalid amount",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "4187": {
      "op": "frame_dig -6",
      "defined_out": [
        "from#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0 (copy)"
      ]
    },
    "4189": {
      "op": "frame_dig -5",
      "defined_out": [
        "from#0 (copy)",
        "fromPartition#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0 (copy)",
        "fromPartition#0 (copy)"
      ]
    },
    "4191": {
      "op": "concat",
      "defined_out": [
        "fromKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "fromKey#0"
      ]
    },
    "4192": {
      "op": "bytec 8 // \"arc1410_p\"",
      "defined_out": [
        "\"arc1410_p\"",
        "fromKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "fromKey#0",
        "\"arc1410_p\""
      ]
    },
    "4194": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "\"arc1410_p\"",
        "fromKey#0"
      ]
    },
    "4195": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "4196": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "4197": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4198": {
      "op": "bury 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "4200": {
      "op": "bnz _transfer_partition_after_if_else@2",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "4203": {
      "op": "frame_dig 2",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "4205": {
      "op": "bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "4206": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "4207": {
      "block": "_transfer_partition_after_if_else@2",
      "stack_in": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "4209": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "4210": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4211": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "4212": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "4214": {
      "op": "b-",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "4215": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "4216": {
      "op": "len",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "4217": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "4218": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "4219": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "4220": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "4221": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "4222": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0",
        "bzero%0#0"
      ]
    },
    "4223": {
      "op": "frame_bury 0",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "4225": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "arc4_encoded%0#0"
      ]
    },
    "4226": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "4227": {
      "op": "frame_dig -6",
      "defined_out": [
        "bzero%0#0",
        "from#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "from#0 (copy)"
      ]
    },
    "4229": {
      "op": "frame_dig -4",
      "defined_out": [
        "bzero%0#0",
        "from#0 (copy)",
        "tmp%1#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "from#0 (copy)",
        "to#0 (copy)"
      ]
    },
    "4231": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%5#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "4232": {
      "op": "frame_dig -5",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%5#0",
        "fromPartition#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%5#0",
        "fromPartition#0 (copy)"
      ]
    },
    "4234": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%6#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "4235": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%6#0",
        "amount#0 (copy)"
      ]
    },
    "4237": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%7#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "4238": {
      "op": "pushbytes 0x0082",
      "defined_out": [
        "0x0082",
        "bzero%0#0",
        "encoded_tuple_buffer%7#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%7#0",
        "0x0082"
      ]
    },
    "4242": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%8#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "4243": {
      "op": "frame_dig -1",
      "defined_out": [
        "bzero%0#0",
        "data#0 (copy)",
        "encoded_tuple_buffer%8#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%8#0",
        "data#0 (copy)"
      ]
    },
    "4245": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%9#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "4246": {
      "op": "bytec 6 // 0x0002",
      "defined_out": [
        "0x0002",
        "bzero%0#0",
        "encoded_tuple_buffer%9#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%9#0",
        "0x0002"
      ]
    },
    "4248": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "0x0002",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "4249": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%12#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "4250": {
      "op": "pushbytes 0x206b7940 // method \"Transfer((address,address,address,uint256,byte[]))\"",
      "defined_out": [
        "Method(Transfer((address,address,address,uint256,byte[])))",
        "bzero%0#0",
        "encoded_tuple_buffer%12#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%12#0",
        "Method(Transfer((address,address,address,uint256,byte[])))"
      ]
    },
    "4256": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "Method(Transfer((address,address,address,uint256,byte[])))",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "4257": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "event%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "event%0#0"
      ]
    },
    "4258": {
      "op": "log",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "4259": {
      "op": "frame_dig -3",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "toPartition#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "toPartition#0 (copy)"
      ]
    },
    "4261": {
      "op": "frame_dig -5",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "toPartition#0 (copy)",
        "fromPartition#0 (copy)"
      ]
    },
    "4263": {
      "op": "!=",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "4264": {
      "op": "bz _transfer_partition_after_if_else@4",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "4267": {
      "op": "frame_dig -4",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "to#0 (copy)"
      ]
    },
    "4269": {
      "op": "frame_dig -3",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "to#0 (copy)",
        "toPartition#0 (copy)"
      ]
    },
    "4271": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._add_participation_to_holder",
      "op": "callsub _add_participation_to_holder",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "4274": {
      "block": "_transfer_partition_after_if_else@4",
      "stack_in": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ],
      "op": "frame_dig -4",
      "defined_out": [
        "to#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "to#0 (copy)"
      ]
    },
    "4276": {
      "op": "frame_dig -3",
      "defined_out": [
        "to#0 (copy)",
        "toPartition#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "to#0 (copy)",
        "toPartition#0 (copy)"
      ]
    },
    "4278": {
      "op": "concat",
      "defined_out": [
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "toKey#0"
      ]
    },
    "4279": {
      "op": "bytec 8 // \"arc1410_p\"",
      "defined_out": [
        "\"arc1410_p\"",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "toKey#0",
        "\"arc1410_p\""
      ]
    },
    "4281": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "\"arc1410_p\"",
        "toKey#0"
      ]
    },
    "4282": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "4283": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "4284": {
      "op": "frame_bury 1",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "4286": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4287": {
      "op": "bury 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "maybe_exists%2#0"
      ]
    },
    "4289": {
      "op": "bnz _transfer_partition_after_if_else@6",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "4292": {
      "op": "frame_dig 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "4294": {
      "op": "bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "4295": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "4296": {
      "block": "_transfer_partition_after_if_else@6",
      "stack_in": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "4298": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "4299": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4300": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "maybe_value%3#0"
      ]
    },
    "4301": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "maybe_value%3#0",
        "amount#0 (copy)"
      ]
    },
    "4303": {
      "op": "b+",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0"
      ]
    },
    "4304": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "4305": {
      "op": "len",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "4306": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "4307": {
      "op": "<=",
      "defined_out": [
        "len_ok%1#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "4308": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0"
      ]
    },
    "4309": {
      "op": "frame_dig 0",
      "defined_out": [
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%0#0"
      ]
    },
    "4311": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "arc4_encoded%1#0"
      ]
    },
    "4312": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "4313": {
      "retsub": true,
      "op": "retsub"
    },
    "4314": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_authorize_operator_by_portion",
      "params": {
        "holder#0": "bytes",
        "operator#0": "bytes",
        "partition#0": "bytes",
        "amount#0": "bytes"
      },
      "block": "arc1410_authorize_operator_by_portion",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "4317": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4319": {
      "op": "frame_dig -4",
      "defined_out": [
        "holder#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "holder#0 (copy)"
      ]
    },
    "4321": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "4322": {
      "error": "Only holder can authorize portion",
      "op": "assert // Only holder can authorize portion",
      "stack_out": []
    },
    "4323": {
      "op": "frame_dig -4",
      "stack_out": [
        "holder#0 (copy)"
      ]
    },
    "4325": {
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ]
    },
    "4327": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4328": {
      "op": "frame_dig -2",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "4330": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "4331": {
      "op": "bytec 17 // \"arc1410_opa\"",
      "defined_out": [
        "\"arc1410_opa\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"arc1410_opa\""
      ]
    },
    "4333": {
      "op": "swap",
      "stack_out": [
        "\"arc1410_opa\"",
        "key#0"
      ]
    },
    "4334": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "4335": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "amount#0 (copy)"
      ]
    },
    "4337": {
      "op": "box_put",
      "stack_out": []
    },
    "4338": {
      "retsub": true,
      "op": "retsub"
    },
    "4339": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator_by_portion",
      "params": {
        "holder#0": "bytes",
        "operator#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "arc1410_is_operator_by_portion",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "4342": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "4343": {
      "op": "frame_dig -2",
      "defined_out": [
        "operator#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "operator#0 (copy)"
      ]
    },
    "4345": {
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "operator#0 (copy)",
        "holder#0 (copy)"
      ]
    },
    "4347": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "4348": {
      "op": "bz arc1410_is_operator_by_portion_after_if_else@2",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "4351": {
      "op": "bytec 7 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x80"
      ]
    },
    "4353": {
      "op": "swap"
    },
    "4354": {
      "retsub": true,
      "op": "retsub"
    },
    "4355": {
      "block": "arc1410_is_operator_by_portion_after_if_else@2",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "holder#0 (copy)"
      ]
    },
    "4357": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "holder#0 (copy)",
        "operator#0 (copy)"
      ]
    },
    "4359": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4360": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "4362": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "key#0"
      ]
    },
    "4363": {
      "op": "bytec 17 // \"arc1410_opa\"",
      "defined_out": [
        "\"arc1410_opa\"",
        "key#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "key#0",
        "\"arc1410_opa\""
      ]
    },
    "4365": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "\"arc1410_opa\"",
        "key#0"
      ]
    },
    "4366": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "4367": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "4368": {
      "op": "frame_bury 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "4370": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4371": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "4373": {
      "op": "bnz arc1410_is_operator_by_portion_after_if_else@4",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "4376": {
      "op": "bytec 12 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x00"
      ]
    },
    "4378": {
      "op": "swap"
    },
    "4379": {
      "retsub": true,
      "op": "retsub"
    },
    "4380": {
      "block": "arc1410_is_operator_by_portion_after_if_else@4",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "4382": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4383": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "4384": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "0x"
      ]
    },
    "4386": {
      "op": "b>",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "4387": {
      "op": "bytec 12 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "to_encode%0#0",
        "0x00"
      ]
    },
    "4389": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "4390": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "4392": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_bool%0#0"
      ]
    },
    "4393": {
      "op": "swap"
    },
    "4394": {
      "retsub": true,
      "op": "retsub"
    },
    "4395": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_issue_by_partition",
      "params": {
        "to#0": "bytes",
        "partition#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1410_issue_by_partition",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "4398": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bzero%0#0"
      ]
    },
    "4399": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0"
      ]
    },
    "4400": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "tmp%0#0"
      ]
    },
    "4402": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_is_owner",
      "op": "callsub arc88_is_owner",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "tmp%1#0"
      ]
    },
    "4405": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "tmp%1#0",
        "0"
      ]
    },
    "4406": {
      "op": "getbit",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "tmp%2#0"
      ]
    },
    "4407": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "tmp%2#0",
        "1"
      ]
    },
    "4408": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "tmp%3#0"
      ]
    },
    "4409": {
      "error": "only_owner",
      "op": "assert // only_owner",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0"
      ]
    },
    "4410": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "amount#0 (copy)"
      ]
    },
    "4412": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "amount#0 (copy)",
        "0x"
      ]
    },
    "4414": {
      "op": "b>",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "tmp%4#0"
      ]
    },
    "4415": {
      "error": "Invalid amount",
      "op": "assert // Invalid amount",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0"
      ]
    },
    "4416": {
      "op": "frame_dig -4",
      "defined_out": [
        "to#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "to#0 (copy)"
      ]
    },
    "4418": {
      "op": "frame_dig -3",
      "defined_out": [
        "partition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "to#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "4420": {
      "op": "concat",
      "defined_out": [
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0"
      ]
    },
    "4421": {
      "op": "dup",
      "defined_out": [
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "toKey#0"
      ]
    },
    "4422": {
      "op": "bytec 8 // \"arc1410_p\"",
      "defined_out": [
        "\"arc1410_p\"",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "toKey#0",
        "\"arc1410_p\""
      ]
    },
    "4424": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "\"arc1410_p\"",
        "toKey#0"
      ]
    },
    "4425": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "4426": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "4427": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%5#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4428": {
      "op": "bury 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "maybe_exists%0#0"
      ]
    },
    "4430": {
      "op": "bnz arc1410_issue_by_partition_after_if_else@2",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "4433": {
      "op": "frame_dig 3",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "4435": {
      "op": "bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%5#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "4436": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "4437": {
      "op": "frame_dig -4",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "to#0 (copy)"
      ]
    },
    "4439": {
      "op": "frame_dig -3",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "to#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "4441": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._add_participation_to_holder",
      "op": "callsub _add_participation_to_holder",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "4444": {
      "block": "arc1410_issue_by_partition_after_if_else@2",
      "stack_in": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "4446": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "4447": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4448": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "maybe_value%1#0"
      ]
    },
    "4449": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "4451": {
      "op": "b+",
      "defined_out": [
        "tmp%5#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0"
      ]
    },
    "4452": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "4453": {
      "op": "len",
      "defined_out": [
        "tmp%5#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "4454": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%5#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "4455": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "tmp%5#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "4456": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0"
      ]
    },
    "4457": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "4458": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "tmp%5#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "4459": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "bzero%0#0",
        "bzero%0#0"
      ]
    },
    "4460": {
      "op": "frame_bury 0",
      "defined_out": [
        "bzero%0#0",
        "tmp%5#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "4462": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "arc4_encoded%0#0"
      ]
    },
    "4463": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "4464": {
      "op": "bytec 4 // \"b\"",
      "defined_out": [
        "\"b\"",
        "bzero%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "\"b\""
      ]
    },
    "4466": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"b\"",
        "bzero%0#0",
        "tmp%5#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "\"b\"",
        "to#0 (copy)"
      ]
    },
    "4468": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0"
      ]
    },
    "4469": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "tmp%9#0"
      ]
    },
    "4470": {
      "op": "frame_bury 1",
      "defined_out": [
        "bzero%0#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0"
      ]
    },
    "4472": {
      "op": "box_len",
      "defined_out": [
        "bzero%0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4473": {
      "op": "bury 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "maybe_exists%2#0"
      ]
    },
    "4475": {
      "op": "bnz arc1410_issue_by_partition_after_if_else@4",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "4478": {
      "op": "frame_dig 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0"
      ]
    },
    "4480": {
      "op": "bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "bzero%0#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "4481": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "4482": {
      "block": "arc1410_issue_by_partition_after_if_else@4",
      "stack_in": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0"
      ]
    },
    "4484": {
      "op": "dup",
      "defined_out": [
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ]
    },
    "4485": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4486": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "maybe_value%3#0"
      ]
    },
    "4487": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "maybe_value%3#0",
        "amount#0 (copy)"
      ]
    },
    "4489": {
      "op": "b+",
      "defined_out": [
        "tmp%9#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0"
      ]
    },
    "4490": {
      "op": "dup",
      "defined_out": [
        "tmp%9#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "4491": {
      "op": "len",
      "defined_out": [
        "tmp%9#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "4492": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%9#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "4493": {
      "op": "<=",
      "defined_out": [
        "len_ok%1#0",
        "tmp%9#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "4494": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0"
      ]
    },
    "4495": {
      "op": "frame_dig 0",
      "defined_out": [
        "bzero%0#0",
        "tmp%9#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0",
        "bzero%0#0"
      ]
    },
    "4497": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "bzero%0#0 (copy)",
        "tmp%9#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0",
        "bzero%0#0 (copy)",
        "bzero%0#0 (copy)"
      ]
    },
    "4498": {
      "op": "cover 3",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "tmp%9#0",
        "to_encode%1#0",
        "bzero%0#0 (copy)"
      ]
    },
    "4500": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "bzero%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "tmp%9#0",
        "arc4_encoded%1#0"
      ]
    },
    "4501": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0"
      ]
    },
    "4502": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "bzero%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "0"
      ]
    },
    "4503": {
      "op": "bytec_3 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0",
        "bzero%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "0",
        "\"t\""
      ]
    },
    "4504": {
      "op": "app_global_get_ex",
      "defined_out": [
        "bzero%0#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4505": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "maybe_value%4#0"
      ]
    },
    "4506": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "maybe_value%4#0",
        "amount#0 (copy)"
      ]
    },
    "4508": {
      "op": "b+",
      "defined_out": [
        "bzero%0#0",
        "tmp%9#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "to_encode%2#0"
      ]
    },
    "4509": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "tmp%9#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "4510": {
      "op": "len",
      "defined_out": [
        "bzero%0#0",
        "tmp%9#0",
        "to_encode%2#0",
        "value_len%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "to_encode%2#0",
        "value_len%2#0"
      ]
    },
    "4511": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "to_encode%2#0",
        "value_len%2#0",
        "32"
      ]
    },
    "4512": {
      "op": "<=",
      "defined_out": [
        "bzero%0#0",
        "len_ok%2#0",
        "tmp%9#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "to_encode%2#0",
        "len_ok%2#0"
      ]
    },
    "4513": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "to_encode%2#0"
      ]
    },
    "4514": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%2#0",
        "bzero%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "arc4_encoded%2#0"
      ]
    },
    "4515": {
      "op": "bytec_3 // \"t\"",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "arc4_encoded%2#0",
        "\"t\""
      ]
    },
    "4516": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "\"t\"",
        "arc4_encoded%2#0"
      ]
    },
    "4517": {
      "op": "app_global_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "4518": {
      "op": "frame_dig 2",
      "defined_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "toKey#0"
      ]
    },
    "4520": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "toKey#0",
        "amount#0 (copy)"
      ]
    },
    "4522": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%6#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "4523": {
      "op": "bytec 27 // 0x0062",
      "defined_out": [
        "0x0062",
        "bzero%0#0",
        "encoded_tuple_buffer%6#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%6#0",
        "0x0062"
      ]
    },
    "4525": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%7#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "4526": {
      "op": "frame_dig -1",
      "defined_out": [
        "bzero%0#0",
        "data#0 (copy)",
        "encoded_tuple_buffer%7#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%7#0",
        "data#0 (copy)"
      ]
    },
    "4528": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%8#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "4529": {
      "op": "bytec 6 // 0x0002",
      "defined_out": [
        "0x0002",
        "bzero%0#0",
        "encoded_tuple_buffer%8#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%8#0",
        "0x0002"
      ]
    },
    "4531": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "0x0002",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "4532": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%11#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4533": {
      "op": "pushbytes 0xfa443b1b // method \"Issue((address,address,uint256,byte[]))\"",
      "defined_out": [
        "Method(Issue((address,address,uint256,byte[])))",
        "bzero%0#0",
        "encoded_tuple_buffer%11#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%11#0",
        "Method(Issue((address,address,uint256,byte[])))"
      ]
    },
    "4539": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "Method(Issue((address,address,uint256,byte[])))",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4540": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "event%0#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "event%0#0"
      ]
    },
    "4541": {
      "op": "log",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "4542": {
      "retsub": true,
      "op": "retsub"
    },
    "4543": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_redeem_by_partition",
      "params": {
        "partition#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1410_redeem_by_partition",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "4546": {
      "op": "txn Sender",
      "defined_out": [
        "from#0"
      ],
      "stack_out": [
        "from#0"
      ]
    },
    "4548": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "from#0"
      ],
      "stack_out": [
        "from#0",
        "amount#0 (copy)"
      ]
    },
    "4550": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "amount#0 (copy)",
        "from#0"
      ],
      "stack_out": [
        "from#0",
        "amount#0 (copy)",
        "0x"
      ]
    },
    "4552": {
      "op": "b>",
      "defined_out": [
        "from#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%0#0"
      ]
    },
    "4553": {
      "error": "Invalid amount",
      "op": "assert // Invalid amount",
      "stack_out": [
        "from#0"
      ]
    },
    "4554": {
      "op": "dup",
      "defined_out": [
        "from#0",
        "from#0 (copy)"
      ],
      "stack_out": [
        "from#0",
        "from#0 (copy)"
      ]
    },
    "4555": {
      "op": "frame_dig -3",
      "defined_out": [
        "from#0",
        "from#0 (copy)",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "from#0",
        "from#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "4557": {
      "op": "concat",
      "defined_out": [
        "from#0",
        "fromKey#0"
      ],
      "stack_out": [
        "from#0",
        "fromKey#0"
      ]
    },
    "4558": {
      "op": "dup",
      "stack_out": [
        "from#0",
        "fromKey#0",
        "fromKey#0"
      ]
    },
    "4559": {
      "op": "cover 2",
      "defined_out": [
        "from#0",
        "fromKey#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "fromKey#0"
      ]
    },
    "4561": {
      "op": "bytec 8 // \"arc1410_p\"",
      "defined_out": [
        "\"arc1410_p\"",
        "from#0",
        "fromKey#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "fromKey#0",
        "\"arc1410_p\""
      ]
    },
    "4563": {
      "op": "swap",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "\"arc1410_p\"",
        "fromKey#0"
      ]
    },
    "4564": {
      "op": "concat",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0"
      ]
    },
    "4565": {
      "op": "dup",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "4566": {
      "op": "box_len",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4567": {
      "op": "bury 1",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "4569": {
      "error": "Partition balance missing",
      "op": "assert // Partition balance missing",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0"
      ]
    },
    "4570": {
      "op": "dup",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "4571": {
      "op": "box_get",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4572": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "4573": {
      "op": "frame_dig -2",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "4575": {
      "op": "b>=",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "4576": {
      "error": "Insufficient partition balance",
      "op": "assert // Insufficient partition balance",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0"
      ]
    },
    "4577": {
      "op": "dup",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "4578": {
      "op": "box_get",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4579": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%2#0"
      ]
    },
    "4580": {
      "op": "frame_dig -2",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%2#0",
        "amount#0 (copy)"
      ]
    },
    "4582": {
      "op": "b-",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "4583": {
      "op": "dup",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "4584": {
      "op": "len",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "4585": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "4586": {
      "op": "<=",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "len_ok%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "4587": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "4588": {
      "op": "intc_2 // 32",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "4589": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "4590": {
      "op": "dup",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0",
        "bzero%0#0"
      ]
    },
    "4591": {
      "op": "cover 4",
      "defined_out": [
        "bzero%0#0",
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "4593": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "from#0",
        "fromKey#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "from#0",
        "tmp%1#0",
        "arc4_encoded%0#0"
      ]
    },
    "4594": {
      "op": "box_put",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "from#0"
      ]
    },
    "4595": {
      "op": "bytec 4 // \"b\"",
      "defined_out": [
        "\"b\"",
        "bzero%0#0",
        "from#0",
        "fromKey#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "from#0",
        "\"b\""
      ]
    },
    "4597": {
      "op": "swap",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "\"b\"",
        "from#0"
      ]
    },
    "4598": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "4599": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "4600": {
      "op": "box_len",
      "defined_out": [
        "bzero%0#0",
        "fromKey#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4601": {
      "op": "bury 1",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "maybe_exists%3#0"
      ]
    },
    "4603": {
      "op": "bz arc1410_redeem_by_partition_bool_false@3",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "4606": {
      "op": "frame_dig 2",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "4608": {
      "op": "box_get",
      "defined_out": [
        "bzero%0#0",
        "fromKey#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4609": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "maybe_value%4#0"
      ]
    },
    "4610": {
      "op": "frame_dig -2",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "maybe_value%4#0",
        "amount#0 (copy)"
      ]
    },
    "4612": {
      "op": "b>=",
      "defined_out": [
        "bzero%0#0",
        "fromKey#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "4613": {
      "op": "bz arc1410_redeem_by_partition_bool_false@3",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "4616": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "bzero%0#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "and_result%0#0"
      ]
    },
    "4617": {
      "block": "arc1410_redeem_by_partition_bool_merge@4",
      "stack_in": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "and_result%0#0"
      ],
      "error": "Insufficient balance",
      "op": "assert // Insufficient balance",
      "defined_out": [],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "4618": {
      "op": "frame_dig 2",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "4620": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "4621": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "4622": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "maybe_value%5#0"
      ]
    },
    "4623": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "maybe_value%5#0",
        "amount#0 (copy)"
      ]
    },
    "4625": {
      "op": "b-",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0"
      ]
    },
    "4626": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "4627": {
      "op": "len",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "4628": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "4629": {
      "op": "<=",
      "defined_out": [
        "len_ok%1#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "4630": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0"
      ]
    },
    "4631": {
      "op": "frame_dig 1",
      "defined_out": [
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%0#0"
      ]
    },
    "4633": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "bzero%0#0 (copy)",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%0#0 (copy)",
        "bzero%0#0 (copy)"
      ]
    },
    "4634": {
      "op": "cover 3",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%0#0 (copy)"
      ]
    },
    "4636": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "tmp%6#0",
        "arc4_encoded%1#0"
      ]
    },
    "4637": {
      "op": "box_put",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0"
      ]
    },
    "4638": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "0"
      ]
    },
    "4639": {
      "op": "bytec_3 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "0",
        "\"t\""
      ]
    },
    "4640": {
      "op": "app_global_get_ex",
      "defined_out": [
        "bzero%0#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "4641": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "maybe_value%6#0"
      ]
    },
    "4642": {
      "op": "frame_dig -2",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "maybe_value%6#0",
        "amount#0 (copy)"
      ]
    },
    "4644": {
      "op": "b-",
      "defined_out": [
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "to_encode%2#0"
      ]
    },
    "4645": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "4646": {
      "op": "len",
      "defined_out": [
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%2#0",
        "value_len%2#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "to_encode%2#0",
        "value_len%2#0"
      ]
    },
    "4647": {
      "op": "intc_2 // 32",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "to_encode%2#0",
        "value_len%2#0",
        "32"
      ]
    },
    "4648": {
      "op": "<=",
      "defined_out": [
        "bzero%0#0",
        "len_ok%2#0",
        "tmp%6#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "to_encode%2#0",
        "len_ok%2#0"
      ]
    },
    "4649": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "to_encode%2#0"
      ]
    },
    "4650": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%2#0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "arc4_encoded%2#0"
      ]
    },
    "4651": {
      "op": "bytec_3 // \"t\"",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "arc4_encoded%2#0",
        "\"t\""
      ]
    },
    "4652": {
      "op": "swap",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "\"t\"",
        "arc4_encoded%2#0"
      ]
    },
    "4653": {
      "op": "app_global_put",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "4654": {
      "op": "frame_dig 0",
      "defined_out": [
        "bzero%0#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "fromKey#0"
      ]
    },
    "4656": {
      "op": "frame_dig -2",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "fromKey#0",
        "amount#0 (copy)"
      ]
    },
    "4658": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%6#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "4659": {
      "op": "bytec 27 // 0x0062",
      "defined_out": [
        "0x0062",
        "bzero%0#0",
        "encoded_tuple_buffer%6#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%6#0",
        "0x0062"
      ]
    },
    "4661": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%7#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "4662": {
      "op": "frame_dig -1",
      "defined_out": [
        "bzero%0#0",
        "data#0 (copy)",
        "encoded_tuple_buffer%7#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%7#0",
        "data#0 (copy)"
      ]
    },
    "4664": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%8#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "4665": {
      "op": "bytec 6 // 0x0002",
      "defined_out": [
        "0x0002",
        "bzero%0#0",
        "encoded_tuple_buffer%8#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%8#0",
        "0x0002"
      ]
    },
    "4667": {
      "op": "swap",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "0x0002",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "4668": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%11#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4669": {
      "op": "bytec 31 // method \"Redeem((address,address,uint256,byte[]))\"",
      "defined_out": [
        "Method(Redeem((address,address,uint256,byte[])))",
        "bzero%0#0",
        "encoded_tuple_buffer%11#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%11#0",
        "Method(Redeem((address,address,uint256,byte[])))"
      ]
    },
    "4671": {
      "op": "swap",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "Method(Redeem((address,address,uint256,byte[])))",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4672": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "event%0#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "event%0#0"
      ]
    },
    "4673": {
      "op": "log",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "4674": {
      "retsub": true,
      "op": "retsub"
    },
    "4675": {
      "block": "arc1410_redeem_by_partition_bool_false@3",
      "stack_in": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "and_result%0#0"
      ]
    },
    "4676": {
      "op": "b arc1410_redeem_by_partition_bool_merge@4"
    },
    "4679": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_operator_redeem_by_partition",
      "params": {
        "from#0": "bytes",
        "partition#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1410_operator_redeem_by_partition",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "4682": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bzero%1#0"
      ]
    },
    "4683": {
      "op": "dupn 3",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0"
      ]
    },
    "4685": {
      "op": "txn Sender"
    },
    "4687": {
      "op": "frame_dig -4"
    },
    "4689": {
      "op": "txn Sender"
    },
    "4691": {
      "op": "frame_dig -3",
      "defined_out": [
        "from#0 (copy)",
        "partition#0 (copy)",
        "sender#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "from#0 (copy)",
        "sender#0",
        "partition#0 (copy)"
      ]
    },
    "4693": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator",
      "op": "callsub arc1410_is_operator",
      "defined_out": [
        "sender#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "tmp%0#0"
      ]
    },
    "4696": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "tmp%0#0",
        "0"
      ]
    },
    "4697": {
      "op": "getbit",
      "defined_out": [
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "tmp%1#0"
      ]
    },
    "4698": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "tmp%1#0",
        "1"
      ]
    },
    "4699": {
      "op": "==",
      "defined_out": [
        "authorized#0",
        "sender#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0"
      ]
    },
    "4700": {
      "op": "dupn 2",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "authorized#0"
      ]
    },
    "4702": {
      "op": "bnz arc1410_operator_redeem_by_partition_after_if_else@4",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "4705": {
      "op": "frame_dig -4",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "from#0 (copy)"
      ]
    },
    "4707": {
      "op": "frame_dig 4",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "from#0 (copy)",
        "sender#0"
      ]
    },
    "4709": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%2#0",
        "sender#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4710": {
      "op": "frame_dig -3",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "4712": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "pKey#0",
        "sender#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "pKey#0"
      ]
    },
    "4713": {
      "op": "bytec 17 // \"arc1410_opa\"",
      "defined_out": [
        "\"arc1410_opa\"",
        "authorized#0",
        "authorized#9",
        "pKey#0",
        "sender#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "pKey#0",
        "\"arc1410_opa\""
      ]
    },
    "4715": {
      "op": "swap",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "\"arc1410_opa\"",
        "pKey#0"
      ]
    },
    "4716": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0"
      ]
    },
    "4717": {
      "op": "dup",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "4718": {
      "op": "frame_bury 3",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0"
      ]
    },
    "4720": {
      "op": "box_len",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4721": {
      "op": "bury 1",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_exists%0#0"
      ]
    },
    "4723": {
      "op": "bz arc1410_operator_redeem_by_partition_after_if_else@3",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "4726": {
      "op": "frame_dig 3",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0"
      ]
    },
    "4728": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "4729": {
      "op": "box_get",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "maybe_exists%1#0",
        "remaining#0",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "maybe_exists%1#0"
      ]
    },
    "4730": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0"
      ]
    },
    "4731": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "remaining#0",
        "remaining#0 (copy)",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "remaining#0 (copy)"
      ]
    },
    "4732": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "authorized#0",
        "authorized#9",
        "remaining#0",
        "remaining#0 (copy)",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "remaining#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "4734": {
      "op": "b>=",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "remaining#0",
        "sender#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "tmp%4#0"
      ]
    },
    "4735": {
      "error": "Portion allowance exceeded",
      "op": "assert // Portion allowance exceeded",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0"
      ]
    },
    "4736": {
      "op": "intc_1 // 1",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "authorized#0"
      ]
    },
    "4737": {
      "op": "frame_bury 5",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0"
      ]
    },
    "4739": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "amount#0 (copy)"
      ]
    },
    "4741": {
      "op": "b-",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0"
      ]
    },
    "4742": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "4743": {
      "op": "len",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "4744": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "4745": {
      "op": "<=",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "len_ok%0#0",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "4746": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0"
      ]
    },
    "4747": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "4748": {
      "op": "bzero",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "bzero%0#0",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "4749": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "arc4_encoded%0#0"
      ]
    },
    "4750": {
      "op": "box_put",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "4751": {
      "block": "arc1410_operator_redeem_by_partition_after_if_else@3",
      "stack_in": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "authorized#9"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "authorized#9"
      ]
    },
    "4753": {
      "op": "frame_bury 6",
      "defined_out": [
        "authorized#9"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "4755": {
      "block": "arc1410_operator_redeem_by_partition_after_if_else@4",
      "stack_in": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ],
      "op": "frame_dig 6",
      "defined_out": [
        "authorized#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "authorized#0"
      ]
    },
    "4757": {
      "error": "Not authorized operator",
      "op": "assert // Not authorized operator",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "4758": {
      "op": "frame_dig -4",
      "defined_out": [
        "authorized#0",
        "from#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "from#0 (copy)"
      ]
    },
    "4760": {
      "op": "frame_dig -3",
      "defined_out": [
        "authorized#0",
        "from#0 (copy)",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "from#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "4762": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "fromKey#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "fromKey#0"
      ]
    },
    "4763": {
      "op": "dup",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "fromKey#0",
        "fromKey#0"
      ]
    },
    "4764": {
      "op": "frame_bury 1",
      "defined_out": [
        "authorized#0",
        "fromKey#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "fromKey#0"
      ]
    },
    "4766": {
      "op": "bytec 8 // \"arc1410_p\"",
      "defined_out": [
        "\"arc1410_p\"",
        "authorized#0",
        "fromKey#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "fromKey#0",
        "\"arc1410_p\""
      ]
    },
    "4768": {
      "op": "swap",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "\"arc1410_p\"",
        "fromKey#0"
      ]
    },
    "4769": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0"
      ]
    },
    "4770": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "4771": {
      "op": "box_len",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4772": {
      "op": "bury 1",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_exists%2#0"
      ]
    },
    "4774": {
      "error": "Partition balance missing",
      "op": "assert // Partition balance missing",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0"
      ]
    },
    "4775": {
      "op": "dup",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "4776": {
      "op": "box_get",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4777": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_value%3#0"
      ]
    },
    "4778": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "authorized#0",
        "fromKey#0",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_value%3#0",
        "amount#0 (copy)"
      ]
    },
    "4780": {
      "op": "b>=",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "4781": {
      "error": "Insufficient partition balance",
      "op": "assert // Insufficient partition balance",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0"
      ]
    },
    "4782": {
      "op": "dup",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "4783": {
      "op": "box_get",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4784": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_value%4#0"
      ]
    },
    "4785": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_value%4#0",
        "amount#0 (copy)"
      ]
    },
    "4787": {
      "op": "b-",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0"
      ]
    },
    "4788": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "tmp%6#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "4789": {
      "op": "len",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "4790": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "authorized#0",
        "fromKey#0",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "4791": {
      "op": "<=",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "len_ok%1#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "4792": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0"
      ]
    },
    "4793": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "32"
      ]
    },
    "4794": {
      "op": "bzero",
      "defined_out": [
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%1#0"
      ]
    },
    "4795": {
      "op": "dup",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%1#0",
        "bzero%1#0"
      ]
    },
    "4796": {
      "op": "frame_bury 0",
      "defined_out": [
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%1#0"
      ]
    },
    "4798": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "arc4_encoded%1#0"
      ]
    },
    "4799": {
      "op": "box_put",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "4800": {
      "op": "bytec 4 // \"b\"",
      "defined_out": [
        "\"b\"",
        "authorized#0",
        "bzero%1#0",
        "fromKey#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "\"b\""
      ]
    },
    "4802": {
      "op": "frame_dig -4",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "\"b\"",
        "from#0 (copy)"
      ]
    },
    "4804": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0"
      ]
    },
    "4805": {
      "op": "dup",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "tmp%11#0"
      ]
    },
    "4806": {
      "op": "frame_bury 2",
      "defined_out": [
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0"
      ]
    },
    "4808": {
      "op": "box_len",
      "defined_out": [
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "4809": {
      "op": "bury 1",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_exists%5#0"
      ]
    },
    "4811": {
      "op": "bz arc1410_operator_redeem_by_partition_bool_false@7",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "4814": {
      "op": "frame_dig 2",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0"
      ]
    },
    "4816": {
      "op": "box_get",
      "defined_out": [
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "4817": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_value%6#0"
      ]
    },
    "4818": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_value%6#0",
        "amount#0 (copy)"
      ]
    },
    "4820": {
      "op": "b>=",
      "defined_out": [
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%13#0"
      ]
    },
    "4821": {
      "op": "bz arc1410_operator_redeem_by_partition_bool_false@7",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "4824": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "and_result%0#0"
      ]
    },
    "4825": {
      "block": "arc1410_operator_redeem_by_partition_bool_merge@8",
      "stack_in": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "and_result%0#0"
      ],
      "error": "Insufficient balance",
      "op": "assert // Insufficient balance",
      "defined_out": [],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "4826": {
      "op": "frame_dig 2",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0"
      ]
    },
    "4828": {
      "op": "dup",
      "defined_out": [
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ]
    },
    "4829": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "4830": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "maybe_value%7#0"
      ]
    },
    "4831": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%7#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "maybe_value%7#0",
        "amount#0 (copy)"
      ]
    },
    "4833": {
      "op": "b-",
      "defined_out": [
        "tmp%11#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0"
      ]
    },
    "4834": {
      "op": "dup",
      "defined_out": [
        "tmp%11#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "4835": {
      "op": "len",
      "defined_out": [
        "tmp%11#0",
        "to_encode%2#0",
        "value_len%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0",
        "value_len%2#0"
      ]
    },
    "4836": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%11#0",
        "to_encode%2#0",
        "value_len%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0",
        "value_len%2#0",
        "32"
      ]
    },
    "4837": {
      "op": "<=",
      "defined_out": [
        "len_ok%2#0",
        "tmp%11#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0",
        "len_ok%2#0"
      ]
    },
    "4838": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0"
      ]
    },
    "4839": {
      "op": "frame_dig 0",
      "defined_out": [
        "bzero%1#0",
        "tmp%11#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0",
        "bzero%1#0"
      ]
    },
    "4841": {
      "op": "dup",
      "defined_out": [
        "bzero%1#0",
        "bzero%1#0 (copy)",
        "tmp%11#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0",
        "bzero%1#0 (copy)",
        "bzero%1#0 (copy)"
      ]
    },
    "4842": {
      "op": "cover 3",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "tmp%11#0",
        "to_encode%2#0",
        "bzero%1#0 (copy)"
      ]
    },
    "4844": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%2#0",
        "bzero%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "tmp%11#0",
        "arc4_encoded%2#0"
      ]
    },
    "4845": {
      "op": "box_put",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0"
      ]
    },
    "4846": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "bzero%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "0"
      ]
    },
    "4847": {
      "op": "bytec_3 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0",
        "bzero%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "0",
        "\"t\""
      ]
    },
    "4848": {
      "op": "app_global_get_ex",
      "defined_out": [
        "bzero%1#0",
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "4849": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "maybe_value%8#0"
      ]
    },
    "4850": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "maybe_value%8#0",
        "amount#0 (copy)"
      ]
    },
    "4852": {
      "op": "b-",
      "defined_out": [
        "bzero%1#0",
        "tmp%11#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "to_encode%3#0"
      ]
    },
    "4853": {
      "op": "dup",
      "defined_out": [
        "bzero%1#0",
        "tmp%11#0",
        "to_encode%3#0",
        "to_encode%3#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "to_encode%3#0",
        "to_encode%3#0 (copy)"
      ]
    },
    "4854": {
      "op": "len",
      "defined_out": [
        "bzero%1#0",
        "tmp%11#0",
        "to_encode%3#0",
        "value_len%3#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "to_encode%3#0",
        "value_len%3#0"
      ]
    },
    "4855": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "to_encode%3#0",
        "value_len%3#0",
        "32"
      ]
    },
    "4856": {
      "op": "<=",
      "defined_out": [
        "bzero%1#0",
        "len_ok%3#0",
        "tmp%11#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "to_encode%3#0",
        "len_ok%3#0"
      ]
    },
    "4857": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "to_encode%3#0"
      ]
    },
    "4858": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%3#0",
        "bzero%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "arc4_encoded%3#0"
      ]
    },
    "4859": {
      "op": "bytec_3 // \"t\"",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "arc4_encoded%3#0",
        "\"t\""
      ]
    },
    "4860": {
      "op": "swap",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "\"t\"",
        "arc4_encoded%3#0"
      ]
    },
    "4861": {
      "op": "app_global_put",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "4862": {
      "op": "frame_dig 1",
      "defined_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "fromKey#0"
      ]
    },
    "4864": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "fromKey#0",
        "amount#0 (copy)"
      ]
    },
    "4866": {
      "op": "concat",
      "defined_out": [
        "bzero%1#0",
        "encoded_tuple_buffer%10#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "4867": {
      "op": "bytec 27 // 0x0062",
      "defined_out": [
        "0x0062",
        "bzero%1#0",
        "encoded_tuple_buffer%10#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%10#0",
        "0x0062"
      ]
    },
    "4869": {
      "op": "concat",
      "defined_out": [
        "bzero%1#0",
        "encoded_tuple_buffer%11#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4870": {
      "op": "frame_dig -1",
      "defined_out": [
        "bzero%1#0",
        "data#0 (copy)",
        "encoded_tuple_buffer%11#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%11#0",
        "data#0 (copy)"
      ]
    },
    "4872": {
      "op": "concat",
      "defined_out": [
        "bzero%1#0",
        "encoded_tuple_buffer%12#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "4873": {
      "op": "bytec 6 // 0x0002",
      "defined_out": [
        "0x0002",
        "bzero%1#0",
        "encoded_tuple_buffer%12#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%12#0",
        "0x0002"
      ]
    },
    "4875": {
      "op": "swap",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "0x0002",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "4876": {
      "op": "concat",
      "defined_out": [
        "bzero%1#0",
        "encoded_tuple_buffer%15#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "4877": {
      "op": "bytec 31 // method \"Redeem((address,address,uint256,byte[]))\"",
      "defined_out": [
        "Method(Redeem((address,address,uint256,byte[])))",
        "bzero%1#0",
        "encoded_tuple_buffer%15#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%15#0",
        "Method(Redeem((address,address,uint256,byte[])))"
      ]
    },
    "4879": {
      "op": "swap",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "Method(Redeem((address,address,uint256,byte[])))",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "4880": {
      "op": "concat",
      "defined_out": [
        "bzero%1#0",
        "event%0#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "event%0#0"
      ]
    },
    "4881": {
      "op": "log",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "4882": {
      "retsub": true,
      "op": "retsub"
    },
    "4883": {
      "block": "arc1410_operator_redeem_by_partition_bool_false@7",
      "stack_in": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "and_result%0#0"
      ]
    },
    "4884": {
      "op": "b arc1410_operator_redeem_by_partition_bool_merge@8"
    },
    "4887": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_name",
      "params": {},
      "block": "arc200_name",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4888": {
      "op": "pushbytes \"n\"",
      "defined_out": [
        "\"n\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"n\""
      ]
    },
    "4891": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4892": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "4893": {
      "op": "extract 2 0",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "4896": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "4897": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "4898": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0",
        "32"
      ]
    },
    "4899": {
      "op": "==",
      "defined_out": [
        "lengths_equal%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "lengths_equal%0#0"
      ]
    },
    "4900": {
      "error": "invalid size",
      "op": "assert // invalid size",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "4901": {
      "retsub": true,
      "op": "retsub"
    },
    "4902": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_symbol",
      "params": {},
      "block": "arc200_symbol",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4903": {
      "op": "pushbytes \"s\"",
      "defined_out": [
        "\"s\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"s\""
      ]
    },
    "4906": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4907": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "4908": {
      "op": "extract 2 0",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "4911": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "4912": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "4913": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0",
        "8"
      ]
    },
    "4915": {
      "op": "==",
      "defined_out": [
        "lengths_equal%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "lengths_equal%0#0"
      ]
    },
    "4916": {
      "error": "invalid size",
      "op": "assert // invalid size",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "4917": {
      "retsub": true,
      "op": "retsub"
    },
    "4918": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_decimals",
      "params": {},
      "block": "arc200_decimals",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4919": {
      "op": "pushbytes \"d\"",
      "defined_out": [
        "\"d\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"d\""
      ]
    },
    "4922": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4923": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "4924": {
      "retsub": true,
      "op": "retsub"
    },
    "4925": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_totalSupply",
      "params": {},
      "block": "arc200_totalSupply",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4926": {
      "op": "bytec_3 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"t\""
      ]
    },
    "4927": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4928": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "4929": {
      "retsub": true,
      "op": "retsub"
    },
    "4930": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_balanceOf",
      "params": {
        "owner#0": "bytes"
      },
      "block": "arc200_balanceOf",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "4933": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "4935": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "op": "callsub _balanceOf",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4938": {
      "retsub": true,
      "op": "retsub"
    },
    "4939": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_transferFrom",
      "params": {
        "from#0": "bytes",
        "to#0": "bytes",
        "value#0": "bytes"
      },
      "block": "arc200_transferFrom",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "4942": {
      "op": "txn Sender",
      "defined_out": [
        "spender#0"
      ],
      "stack_out": [
        "spender#0"
      ]
    },
    "4944": {
      "op": "frame_dig -3",
      "defined_out": [
        "from#0 (copy)",
        "spender#0"
      ],
      "stack_out": [
        "spender#0",
        "from#0 (copy)"
      ]
    },
    "4946": {
      "op": "dig 1",
      "defined_out": [
        "from#0 (copy)",
        "spender#0",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "spender#0",
        "from#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "4948": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._allowance",
      "op": "callsub _allowance",
      "defined_out": [
        "spender#0",
        "spender_allowance#0"
      ],
      "stack_out": [
        "spender#0",
        "spender_allowance#0"
      ]
    },
    "4951": {
      "op": "dup",
      "defined_out": [
        "spender#0",
        "spender_allowance#0",
        "spender_allowance#0 (copy)"
      ],
      "stack_out": [
        "spender#0",
        "spender_allowance#0",
        "spender_allowance#0 (copy)"
      ]
    },
    "4952": {
      "op": "frame_dig -1",
      "defined_out": [
        "spender#0",
        "spender_allowance#0",
        "spender_allowance#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "spender#0",
        "spender_allowance#0",
        "spender_allowance#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "4954": {
      "op": "b>=",
      "defined_out": [
        "spender#0",
        "spender_allowance#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "spender#0",
        "spender_allowance#0",
        "tmp%0#0"
      ]
    },
    "4955": {
      "error": "insufficient approval",
      "op": "assert // insufficient approval",
      "stack_out": [
        "spender#0",
        "spender_allowance#0"
      ]
    },
    "4956": {
      "op": "frame_dig -1",
      "stack_out": [
        "spender#0",
        "spender_allowance#0",
        "value#0 (copy)"
      ]
    },
    "4958": {
      "op": "b-",
      "defined_out": [
        "spender#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0"
      ]
    },
    "4959": {
      "op": "dup",
      "defined_out": [
        "spender#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "4960": {
      "op": "len",
      "defined_out": [
        "spender#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "4961": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "spender#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "4962": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "spender#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "4963": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "spender#0",
        "to_encode%0#0"
      ]
    },
    "4964": {
      "op": "intc_2 // 32",
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "4965": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "spender#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "4966": {
      "op": "b|",
      "defined_out": [
        "new_spender_allowance#0",
        "spender#0"
      ],
      "stack_out": [
        "spender#0",
        "new_spender_allowance#0"
      ]
    },
    "4967": {
      "op": "frame_dig -3",
      "stack_out": [
        "spender#0",
        "new_spender_allowance#0",
        "from#0 (copy)"
      ]
    },
    "4969": {
      "op": "cover 2",
      "stack_out": [
        "from#0 (copy)",
        "spender#0",
        "new_spender_allowance#0"
      ]
    },
    "4971": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._approve",
      "op": "callsub _approve",
      "defined_out": [
        "{_approve}"
      ],
      "stack_out": [
        "{_approve}"
      ]
    },
    "4974": {
      "op": "pop",
      "stack_out": []
    },
    "4975": {
      "op": "frame_dig -3",
      "stack_out": [
        "from#0 (copy)"
      ]
    },
    "4977": {
      "op": "frame_dig -2",
      "defined_out": [
        "from#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "from#0 (copy)",
        "to#0 (copy)"
      ]
    },
    "4979": {
      "op": "frame_dig -1",
      "stack_out": [
        "from#0 (copy)",
        "to#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "4981": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._transfer",
      "op": "callsub _transfer",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "4984": {
      "retsub": true,
      "op": "retsub"
    },
    "4985": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_approve",
      "params": {
        "spender#0": "bytes",
        "value#0": "bytes"
      },
      "block": "arc200_approve",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "4988": {
      "op": "txn Sender",
      "defined_out": [
        "owner#0"
      ],
      "stack_out": [
        "owner#0"
      ]
    },
    "4990": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0",
        "spender#0 (copy)"
      ]
    },
    "4992": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0",
        "spender#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "owner#0",
        "spender#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "4994": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._approve",
      "op": "callsub _approve",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4997": {
      "retsub": true,
      "op": "retsub"
    },
    "4998": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_allowance",
      "params": {
        "owner#0": "bytes",
        "spender#0": "bytes"
      },
      "block": "arc200_allowance",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "5001": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "5003": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "5005": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._allowance",
      "op": "callsub _allowance",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5008": {
      "retsub": true,
      "op": "retsub"
    },
    "5009": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "params": {
        "owner#0": "bytes"
      },
      "block": "_balanceOf",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "5012": {
      "op": "bytec 4 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "\"b\""
      ]
    },
    "5014": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"b\"",
        "owner#0 (copy)"
      ],
      "stack_out": [
        "\"b\"",
        "owner#0 (copy)"
      ]
    },
    "5016": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5017": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "5018": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5019": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5021": {
      "op": "bnz _balanceOf_after_if_else@2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5024": {
      "op": "bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "5025": {
      "op": "swap"
    },
    "5026": {
      "retsub": true,
      "op": "retsub"
    },
    "5027": {
      "block": "_balanceOf_after_if_else@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "5029": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "5030": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "5031": {
      "op": "swap"
    },
    "5032": {
      "retsub": true,
      "op": "retsub"
    },
    "5033": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._transfer",
      "params": {
        "sender#0": "bytes",
        "recipient#0": "bytes",
        "amount#0": "bytes"
      },
      "block": "_transfer",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "5036": {
      "op": "frame_dig -3",
      "defined_out": [
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0 (copy)"
      ]
    },
    "5038": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "op": "callsub _balanceOf",
      "defined_out": [
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0"
      ]
    },
    "5041": {
      "op": "dup",
      "defined_out": [
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "sender_balance#0"
      ]
    },
    "5042": {
      "op": "frame_dig -2",
      "defined_out": [
        "recipient#0 (copy)",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "sender_balance#0",
        "recipient#0 (copy)"
      ]
    },
    "5044": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "op": "callsub _balanceOf",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "5047": {
      "op": "swap",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender_balance#0"
      ]
    },
    "5048": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender_balance#0",
        "amount#0 (copy)"
      ]
    },
    "5050": {
      "op": "b>=",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "tmp%0#0"
      ]
    },
    "5051": {
      "error": "Insufficient balance at the sender account",
      "op": "assert // Insufficient balance at the sender account",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "5052": {
      "op": "frame_dig -3",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender#0 (copy)"
      ]
    },
    "5054": {
      "op": "frame_dig -2",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender#0 (copy)",
        "recipient#0 (copy)"
      ]
    },
    "5056": {
      "op": "!=",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "tmp%1#0"
      ]
    },
    "5057": {
      "op": "bz _transfer_after_if_else@2",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "5060": {
      "op": "frame_dig 0",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender_balance#0"
      ]
    },
    "5062": {
      "op": "frame_dig -1",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender_balance#0",
        "amount#0 (copy)"
      ]
    },
    "5064": {
      "op": "b-",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0"
      ]
    },
    "5065": {
      "op": "dup",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "5066": {
      "op": "len",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "5067": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "5068": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "5069": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0"
      ]
    },
    "5070": {
      "op": "intc_2 // 32",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "5071": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "5072": {
      "op": "swap",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%0#0"
      ]
    },
    "5073": {
      "op": "dig 1",
      "defined_out": [
        "bzero%0#0",
        "bzero%0#0 (copy)",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%0#0",
        "bzero%0#0 (copy)"
      ]
    },
    "5075": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "arc4_encoded%0#0"
      ]
    },
    "5076": {
      "op": "bytec 4 // \"b\"",
      "defined_out": [
        "\"b\"",
        "arc4_encoded%0#0",
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "arc4_encoded%0#0",
        "\"b\""
      ]
    },
    "5078": {
      "op": "frame_dig -3",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "arc4_encoded%0#0",
        "\"b\"",
        "sender#0 (copy)"
      ]
    },
    "5080": {
      "op": "concat",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "arc4_encoded%0#0",
        "tmp%2#0"
      ]
    },
    "5081": {
      "op": "swap",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "tmp%2#0",
        "arc4_encoded%0#0"
      ]
    },
    "5082": {
      "op": "box_put",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0"
      ]
    },
    "5083": {
      "op": "frame_dig 1",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "recipient_balance#0"
      ]
    },
    "5085": {
      "op": "frame_dig -1",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "recipient_balance#0",
        "amount#0 (copy)"
      ]
    },
    "5087": {
      "op": "b+",
      "defined_out": [
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0"
      ]
    },
    "5088": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "5089": {
      "op": "len",
      "defined_out": [
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "5090": {
      "op": "intc_2 // 32",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "5091": {
      "op": "<=",
      "defined_out": [
        "bzero%0#0",
        "len_ok%1#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "5092": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0"
      ]
    },
    "5093": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "arc4_encoded%1#0"
      ]
    },
    "5094": {
      "op": "bytec 4 // \"b\"",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "arc4_encoded%1#0",
        "\"b\""
      ]
    },
    "5096": {
      "op": "frame_dig -2",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "arc4_encoded%1#0",
        "\"b\"",
        "recipient#0 (copy)"
      ]
    },
    "5098": {
      "op": "concat",
      "defined_out": [
        "arc4_encoded%1#0",
        "recipient_balance#0",
        "sender_balance#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "arc4_encoded%1#0",
        "tmp%3#0"
      ]
    },
    "5099": {
      "op": "swap",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "tmp%3#0",
        "arc4_encoded%1#0"
      ]
    },
    "5100": {
      "op": "box_put",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "5101": {
      "block": "_transfer_after_if_else@2",
      "stack_in": [
        "sender_balance#0",
        "recipient_balance#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender#0 (copy)"
      ]
    },
    "5103": {
      "op": "frame_dig -2",
      "defined_out": [
        "recipient#0 (copy)",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender#0 (copy)",
        "recipient#0 (copy)"
      ]
    },
    "5105": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "5106": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "encoded_tuple_buffer%2#0",
        "amount#0 (copy)"
      ]
    },
    "5108": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "5109": {
      "op": "bytec 28 // method \"arc200_Transfer(address,address,uint256)\"",
      "defined_out": [
        "Method(arc200_Transfer(address,address,uint256))",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "encoded_tuple_buffer%3#0",
        "Method(arc200_Transfer(address,address,uint256))"
      ]
    },
    "5111": {
      "op": "swap",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "Method(arc200_Transfer(address,address,uint256))",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "5112": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "event%0#0"
      ]
    },
    "5113": {
      "op": "log",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "5114": {
      "op": "bytec 7 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "0x80"
      ]
    },
    "5116": {
      "op": "frame_bury 0"
    },
    "5118": {
      "retsub": true,
      "op": "retsub"
    },
    "5119": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._approvalKey",
      "params": {
        "owner#0": "bytes",
        "spender#0": "bytes"
      },
      "block": "_approvalKey",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "5122": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "5124": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "5126": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5127": {
      "op": "sha256",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "5128": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "5129": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "5130": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0",
        "32"
      ]
    },
    "5131": {
      "op": "==",
      "defined_out": [
        "lengths_equal%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "lengths_equal%0#0"
      ]
    },
    "5132": {
      "error": "invalid size",
      "op": "assert // invalid size",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "5133": {
      "retsub": true,
      "op": "retsub"
    },
    "5134": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._allowance",
      "params": {
        "owner#0": "bytes",
        "spender#0": "bytes"
      },
      "block": "_allowance",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "5137": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "5139": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "5141": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._approvalKey",
      "op": "callsub _approvalKey",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "5144": {
      "op": "pushbytes \"a\"",
      "defined_out": [
        "\"a\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"a\""
      ]
    },
    "5147": {
      "op": "swap",
      "stack_out": [
        "\"a\"",
        "key#0"
      ]
    },
    "5148": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5149": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "5150": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5151": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5153": {
      "op": "bnz _allowance_after_if_else@2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5156": {
      "op": "bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "5157": {
      "op": "swap"
    },
    "5158": {
      "retsub": true,
      "op": "retsub"
    },
    "5159": {
      "block": "_allowance_after_if_else@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "5161": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "5162": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "5163": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "5166": {
      "op": "swap"
    },
    "5167": {
      "retsub": true,
      "op": "retsub"
    },
    "5168": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._approve",
      "params": {
        "owner#0": "bytes",
        "spender#0": "bytes",
        "amount#0": "bytes"
      },
      "block": "_approve",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "5171": {
      "op": "frame_dig -3",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "5173": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "5175": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._approvalKey",
      "op": "callsub _approvalKey",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "5178": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "amount#0 (copy)"
      ]
    },
    "5180": {
      "op": "frame_dig -3",
      "stack_out": [
        "key#0",
        "amount#0 (copy)",
        "owner#0 (copy)"
      ]
    },
    "5182": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "5183": {
      "op": "frame_dig -2",
      "stack_out": [
        "key#0",
        "encoded_tuple_buffer%2#0",
        "spender#0 (copy)"
      ]
    },
    "5185": {
      "op": "concat",
      "defined_out": [
        "approvalBox#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "approvalBox#0"
      ]
    },
    "5186": {
      "op": "pushbytes \"a\"",
      "defined_out": [
        "\"a\"",
        "approvalBox#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "approvalBox#0",
        "\"a\""
      ]
    },
    "5189": {
      "op": "uncover 2",
      "stack_out": [
        "approvalBox#0",
        "\"a\"",
        "key#0"
      ]
    },
    "5191": {
      "op": "concat",
      "defined_out": [
        "approvalBox#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "approvalBox#0",
        "tmp%0#0"
      ]
    },
    "5192": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "approvalBox#0"
      ]
    },
    "5193": {
      "op": "box_put",
      "stack_out": []
    },
    "5194": {
      "op": "frame_dig -3",
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "5196": {
      "op": "frame_dig -2",
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "5198": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "5199": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "amount#0 (copy)"
      ]
    },
    "5201": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0"
      ]
    },
    "5202": {
      "op": "pushbytes 0x1969f865 // method \"arc200_Approval(address,address,uint256)\"",
      "defined_out": [
        "Method(arc200_Approval(address,address,uint256))",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "Method(arc200_Approval(address,address,uint256))"
      ]
    },
    "5208": {
      "op": "swap",
      "stack_out": [
        "Method(arc200_Approval(address,address,uint256))",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "5209": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "5210": {
      "op": "log",
      "stack_out": []
    },
    "5211": {
      "op": "bytec 7 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "0x80"
      ]
    },
    "5213": {
      "retsub": true,
      "op": "retsub"
    },
    "5214": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "params": {},
      "block": "_ensureDefaultOwner",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5215": {
      "op": "bytec 13 // \"arc88_oi\"",
      "defined_out": [
        "\"arc88_oi\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_oi\""
      ]
    },
    "5217": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5218": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "5220": {
      "op": "bz _ensureDefaultOwner_if_body@2",
      "stack_out": []
    },
    "5223": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "5224": {
      "op": "bytec 13 // \"arc88_oi\"",
      "stack_out": [
        "0",
        "\"arc88_oi\""
      ]
    },
    "5226": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "5227": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "5228": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5229": {
      "op": "bnz _ensureDefaultOwner_after_if_else@5",
      "stack_out": []
    },
    "5232": {
      "block": "_ensureDefaultOwner_if_body@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5233": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "5234": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "5235": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%2#0"
      ]
    },
    "5237": {
      "op": "bnz _ensureDefaultOwner_after_if_else@4",
      "stack_out": []
    },
    "5240": {
      "op": "bytec_2 // \"arc88_o\"",
      "stack_out": [
        "\"arc88_o\""
      ]
    },
    "5241": {
      "op": "global CreatorAddress",
      "defined_out": [
        "\"arc88_o\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"arc88_o\"",
        "new_state_value%0#0"
      ]
    },
    "5243": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5244": {
      "block": "_ensureDefaultOwner_after_if_else@4",
      "stack_in": [],
      "op": "bytec 13 // \"arc88_oi\"",
      "defined_out": [
        "\"arc88_oi\""
      ],
      "stack_out": [
        "\"arc88_oi\""
      ]
    },
    "5246": {
      "op": "bytec 25 // 0x01",
      "defined_out": [
        "\"arc88_oi\"",
        "0x01"
      ],
      "stack_out": [
        "\"arc88_oi\"",
        "0x01"
      ]
    },
    "5248": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5249": {
      "block": "_ensureDefaultOwner_after_if_else@5",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "5250": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_owner",
      "params": {},
      "block": "arc88_owner",
      "stack_in": [],
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "5253": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5254": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "5255": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5256": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "5257": {
      "retsub": true,
      "op": "retsub"
    },
    "5258": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_is_owner",
      "params": {
        "query#0": "bytes"
      },
      "block": "arc88_is_owner",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "5261": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "5264": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5265": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "5266": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5267": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "5269": {
      "op": "bnz arc88_is_owner_after_if_else@2",
      "stack_out": []
    },
    "5272": {
      "op": "bytec 12 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "5274": {
      "retsub": true,
      "op": "retsub"
    },
    "5275": {
      "block": "arc88_is_owner_after_if_else@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5276": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "5277": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "5278": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "5279": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "5280": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5281": {
      "op": "bz arc88_is_owner_after_if_else@4",
      "stack_out": []
    },
    "5284": {
      "op": "bytec 12 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "5286": {
      "retsub": true,
      "op": "retsub"
    },
    "5287": {
      "block": "arc88_is_owner_after_if_else@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5288": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "5289": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "5290": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "5291": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%2#0",
        "query#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "query#0 (copy)"
      ]
    },
    "5293": {
      "op": "==",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "5294": {
      "op": "bytec 12 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "5296": {
      "op": "intc_0 // 0",
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "5297": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "5299": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "5300": {
      "retsub": true,
      "op": "retsub"
    },
    "5301": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_initialize_owner",
      "params": {
        "new_owner#0": "bytes"
      },
      "block": "arc88_initialize_owner",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5304": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5305": {
      "op": "bytec 13 // \"arc88_oi\"",
      "defined_out": [
        "\"arc88_oi\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_oi\""
      ]
    },
    "5307": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5308": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "5310": {
      "op": "bz arc88_initialize_owner_bool_false@3",
      "stack_out": []
    },
    "5313": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "5314": {
      "op": "bytec 13 // \"arc88_oi\"",
      "stack_out": [
        "0",
        "\"arc88_oi\""
      ]
    },
    "5316": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "5317": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "5318": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5319": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "5320": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "5321": {
      "op": "bz arc88_initialize_owner_bool_false@3",
      "stack_out": []
    },
    "5324": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "5325": {
      "block": "arc88_initialize_owner_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "5326": {
      "error": "already_initialized",
      "op": "assert // already_initialized",
      "stack_out": []
    },
    "5327": {
      "op": "frame_dig -1",
      "defined_out": [
        "new_owner#0 (copy)"
      ],
      "stack_out": [
        "new_owner#0 (copy)"
      ]
    },
    "5329": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "new_owner#0 (copy)"
      ],
      "stack_out": [
        "new_owner#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "5330": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "5331": {
      "error": "zero_address_not_allowed",
      "op": "assert // zero_address_not_allowed",
      "stack_out": []
    },
    "5332": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\""
      ],
      "stack_out": [
        "\"arc88_o\""
      ]
    },
    "5333": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"arc88_o\"",
        "new_owner#0 (copy)"
      ]
    },
    "5335": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5336": {
      "op": "bytec 13 // \"arc88_oi\"",
      "defined_out": [
        "\"arc88_oi\""
      ],
      "stack_out": [
        "\"arc88_oi\""
      ]
    },
    "5338": {
      "op": "bytec 25 // 0x01",
      "defined_out": [
        "\"arc88_oi\"",
        "0x01"
      ],
      "stack_out": [
        "\"arc88_oi\"",
        "0x01"
      ]
    },
    "5340": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5341": {
      "retsub": true,
      "op": "retsub"
    },
    "5342": {
      "block": "arc88_initialize_owner_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "5343": {
      "op": "b arc88_initialize_owner_bool_merge@4"
    },
    "5346": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_transfer_ownership",
      "params": {
        "new_owner#0": "bytes"
      },
      "block": "arc88_transfer_ownership",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5349": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "5352": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5354": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "5355": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "5356": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5357": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "5358": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "5359": {
      "error": "not_owner",
      "op": "assert // not_owner",
      "stack_out": []
    },
    "5360": {
      "op": "frame_dig -1",
      "defined_out": [
        "new_owner#0 (copy)"
      ],
      "stack_out": [
        "new_owner#0 (copy)"
      ]
    },
    "5362": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "new_owner#0 (copy)"
      ],
      "stack_out": [
        "new_owner#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "5363": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "5364": {
      "error": "zero_address_not_allowed",
      "op": "assert // zero_address_not_allowed",
      "stack_out": []
    },
    "5365": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "5366": {
      "op": "bytec_2 // \"arc88_o\"",
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "5367": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "previous#0"
      ],
      "stack_out": [
        "previous#0",
        "maybe_exists%1#0"
      ]
    },
    "5368": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "previous#0"
      ]
    },
    "5369": {
      "op": "bytec_2 // \"arc88_o\"",
      "stack_out": [
        "previous#0",
        "\"arc88_o\""
      ]
    },
    "5370": {
      "op": "frame_dig -1",
      "stack_out": [
        "previous#0",
        "\"arc88_o\"",
        "new_owner#0 (copy)"
      ]
    },
    "5372": {
      "op": "app_global_put",
      "stack_out": [
        "previous#0"
      ]
    },
    "5373": {
      "op": "frame_dig -1",
      "stack_out": [
        "previous#0",
        "new_owner#0 (copy)"
      ]
    },
    "5375": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "5376": {
      "op": "bytec 32 // method \"arc88_OwnershipTransferred(address,address)\"",
      "defined_out": [
        "Method(arc88_OwnershipTransferred(address,address))",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferred(address,address))"
      ]
    },
    "5378": {
      "op": "swap",
      "stack_out": [
        "Method(arc88_OwnershipTransferred(address,address))",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "5379": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "5380": {
      "op": "log",
      "stack_out": []
    },
    "5381": {
      "retsub": true,
      "op": "retsub"
    },
    "5382": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_renounce_ownership",
      "params": {},
      "block": "arc88_renounce_ownership",
      "stack_in": [],
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "5385": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5387": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "5388": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "5389": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5390": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "5391": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "5392": {
      "error": "not_owner",
      "op": "assert // not_owner",
      "stack_out": []
    },
    "5393": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "5394": {
      "op": "bytec_2 // \"arc88_o\"",
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "5395": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "previous#0"
      ],
      "stack_out": [
        "previous#0",
        "maybe_exists%1#0"
      ]
    },
    "5396": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "previous#0"
      ]
    },
    "5397": {
      "op": "bytec_2 // \"arc88_o\"",
      "stack_out": [
        "previous#0",
        "\"arc88_o\""
      ]
    },
    "5398": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "\"arc88_o\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "previous#0"
      ],
      "stack_out": [
        "previous#0",
        "\"arc88_o\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "5399": {
      "op": "app_global_put",
      "stack_out": [
        "previous#0"
      ]
    },
    "5400": {
      "op": "pushbytes 0x346aa166 // method \"arc88_OwnershipRenounced(address)\"",
      "defined_out": [
        "Method(arc88_OwnershipRenounced(address))",
        "previous#0"
      ],
      "stack_out": [
        "previous#0",
        "Method(arc88_OwnershipRenounced(address))"
      ]
    },
    "5406": {
      "op": "swap",
      "stack_out": [
        "Method(arc88_OwnershipRenounced(address))",
        "previous#0"
      ]
    },
    "5407": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "5408": {
      "op": "log",
      "stack_out": []
    },
    "5409": {
      "retsub": true,
      "op": "retsub"
    },
    "5410": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_transfer_ownership_request",
      "params": {
        "pending#0": "bytes"
      },
      "block": "arc88_transfer_ownership_request",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5413": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "5416": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5418": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "5419": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "5420": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5421": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "5422": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "5423": {
      "error": "not_owner",
      "op": "assert // not_owner",
      "stack_out": []
    },
    "5424": {
      "op": "frame_dig -1",
      "defined_out": [
        "pending#0 (copy)"
      ],
      "stack_out": [
        "pending#0 (copy)"
      ]
    },
    "5426": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "pending#0 (copy)"
      ],
      "stack_out": [
        "pending#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "5427": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "5428": {
      "error": "zero_address_not_allowed",
      "op": "assert // zero_address_not_allowed",
      "stack_out": []
    },
    "5429": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "5430": {
      "op": "bytec 11 // \"arc88_po\"",
      "defined_out": [
        "\"arc88_po\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_po\""
      ]
    },
    "5432": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "5433": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "5435": {
      "op": "bz arc88_transfer_ownership_request_after_if_else@3",
      "stack_out": []
    },
    "5438": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "5439": {
      "op": "bytec 11 // \"arc88_po\"",
      "stack_out": [
        "0",
        "\"arc88_po\""
      ]
    },
    "5441": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "5442": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "5443": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "stack_out": [
        "maybe_value%2#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "5444": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "5445": {
      "op": "!",
      "defined_out": [
        "not%tmp%3#0"
      ],
      "stack_out": [
        "not%tmp%3#0"
      ]
    },
    "5446": {
      "error": "pending_transfer_exists",
      "op": "assert // pending_transfer_exists",
      "stack_out": []
    },
    "5447": {
      "block": "arc88_transfer_ownership_request_after_if_else@3",
      "stack_in": [],
      "op": "bytec 11 // \"arc88_po\"",
      "defined_out": [
        "\"arc88_po\""
      ],
      "stack_out": [
        "\"arc88_po\""
      ]
    },
    "5449": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"arc88_po\"",
        "pending#0 (copy)"
      ],
      "stack_out": [
        "\"arc88_po\"",
        "pending#0 (copy)"
      ]
    },
    "5451": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5452": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5453": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "5454": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "5455": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "5456": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%3#0",
        "pending#0 (copy)"
      ]
    },
    "5458": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "5459": {
      "op": "pushbytes 0x16bf1f91 // method \"arc88_OwnershipTransferRequested(address,address)\"",
      "defined_out": [
        "Method(arc88_OwnershipTransferRequested(address,address))",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferRequested(address,address))"
      ]
    },
    "5465": {
      "op": "swap",
      "stack_out": [
        "Method(arc88_OwnershipTransferRequested(address,address))",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "5466": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "5467": {
      "op": "log",
      "stack_out": []
    },
    "5468": {
      "retsub": true,
      "op": "retsub"
    },
    "5469": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_accept_ownership",
      "params": {},
      "block": "arc88_accept_ownership",
      "stack_in": [],
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "5472": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5473": {
      "op": "bytec 11 // \"arc88_po\"",
      "defined_out": [
        "\"arc88_po\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_po\""
      ]
    },
    "5475": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5476": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "5478": {
      "error": "not_pending_owner",
      "op": "assert // not_pending_owner",
      "stack_out": []
    },
    "5479": {
      "op": "txn Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "5481": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sender#0",
        "0"
      ]
    },
    "5482": {
      "op": "bytec 11 // \"arc88_po\"",
      "stack_out": [
        "sender#0",
        "0",
        "\"arc88_po\""
      ]
    },
    "5484": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "5485": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "sender#0",
        "maybe_value%1#0"
      ]
    },
    "5486": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%1#0",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "maybe_value%1#0",
        "sender#0 (copy)"
      ]
    },
    "5488": {
      "op": "==",
      "defined_out": [
        "sender#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%0#0"
      ]
    },
    "5489": {
      "error": "not_pending_owner",
      "op": "assert // not_pending_owner",
      "stack_out": [
        "sender#0"
      ]
    },
    "5490": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sender#0",
        "0"
      ]
    },
    "5491": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "5492": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "previous#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "previous#0",
        "maybe_exists%2#0"
      ]
    },
    "5493": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "sender#0",
        "previous#0"
      ]
    },
    "5494": {
      "op": "bytec_2 // \"arc88_o\"",
      "stack_out": [
        "sender#0",
        "previous#0",
        "\"arc88_o\""
      ]
    },
    "5495": {
      "op": "dig 2",
      "stack_out": [
        "sender#0",
        "previous#0",
        "\"arc88_o\"",
        "sender#0 (copy)"
      ]
    },
    "5497": {
      "op": "app_global_put",
      "stack_out": [
        "sender#0",
        "previous#0"
      ]
    },
    "5498": {
      "op": "bytec 11 // \"arc88_po\"",
      "stack_out": [
        "sender#0",
        "previous#0",
        "\"arc88_po\""
      ]
    },
    "5500": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "\"arc88_po\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "previous#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "previous#0",
        "\"arc88_po\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "5501": {
      "op": "app_global_put",
      "stack_out": [
        "sender#0",
        "previous#0"
      ]
    },
    "5502": {
      "op": "swap",
      "stack_out": [
        "previous#0",
        "sender#0"
      ]
    },
    "5503": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "5504": {
      "op": "pushbytes 0xf7e36b37 // method \"arc88_OwnershipTransferAccepted(address,address)\"",
      "defined_out": [
        "Method(arc88_OwnershipTransferAccepted(address,address))",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferAccepted(address,address))"
      ]
    },
    "5510": {
      "op": "dig 1",
      "defined_out": [
        "Method(arc88_OwnershipTransferAccepted(address,address))",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%2#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferAccepted(address,address))",
        "encoded_tuple_buffer%2#0 (copy)"
      ]
    },
    "5512": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "event%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "event%0#0"
      ]
    },
    "5513": {
      "op": "log",
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "5514": {
      "op": "bytec 32 // method \"arc88_OwnershipTransferred(address,address)\"",
      "defined_out": [
        "Method(arc88_OwnershipTransferred(address,address))",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferred(address,address))"
      ]
    },
    "5516": {
      "op": "swap",
      "stack_out": [
        "Method(arc88_OwnershipTransferred(address,address))",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "5517": {
      "op": "concat",
      "defined_out": [
        "event%1#0"
      ],
      "stack_out": [
        "event%1#0"
      ]
    },
    "5518": {
      "op": "log",
      "stack_out": []
    },
    "5519": {
      "retsub": true,
      "op": "retsub"
    },
    "5520": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_cancel_ownership_request",
      "params": {},
      "block": "arc88_cancel_ownership_request",
      "stack_in": [],
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "5523": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5525": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "5526": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "5527": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5528": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "5529": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "5530": {
      "error": "not_owner",
      "op": "assert // not_owner",
      "stack_out": []
    },
    "5531": {
      "op": "bytec 11 // \"arc88_po\"",
      "defined_out": [
        "\"arc88_po\""
      ],
      "stack_out": [
        "\"arc88_po\""
      ]
    },
    "5533": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "\"arc88_po\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ],
      "stack_out": [
        "\"arc88_po\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "5534": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5535": {
      "retsub": true,
      "op": "retsub"
    }
  }
}