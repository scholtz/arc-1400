{
    "name": "Arc1644",
    "structs": {
        "ApprovalStruct": [
            {
                "name": "approvalAmount",
                "type": "uint256"
            },
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "spender",
                "type": "address"
            }
        ],
        "arc1410_HoldingPartitionsPaginatedKey": [
            {
                "name": "holder",
                "type": "address"
            },
            {
                "name": "page",
                "type": "uint64"
            }
        ],
        "arc1410_OperatorKey": [
            {
                "name": "holder",
                "type": "address"
            },
            {
                "name": "operator",
                "type": "address"
            },
            {
                "name": "partition",
                "type": "address"
            }
        ],
        "arc1410_OperatorPortionKey": [
            {
                "name": "holder",
                "type": "address"
            },
            {
                "name": "operator",
                "type": "address"
            },
            {
                "name": "partition",
                "type": "address"
            }
        ],
        "arc1410_PartitionKey": [
            {
                "name": "holder",
                "type": "address"
            },
            {
                "name": "partition",
                "type": "address"
            }
        ],
        "arc1410_can_transfer_by_partition_return": [
            {
                "name": "code",
                "type": "byte"
            },
            {
                "name": "status",
                "type": "string"
            },
            {
                "name": "receiverPartition",
                "type": "address"
            }
        ],
        "arc1410_partition_issue": [
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "partition",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "data",
                "type": "byte[]"
            }
        ],
        "arc1410_partition_redeem": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "partition",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "data",
                "type": "byte[]"
            }
        ],
        "arc1410_partition_transfer": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "partition",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "data",
                "type": "byte[]"
            }
        ],
        "arc1594_issue_event": [
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "data",
                "type": "byte[]"
            }
        ],
        "arc1594_redeem_event": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "data",
                "type": "byte[]"
            }
        ],
        "arc1643_document_record": [
            {
                "name": "uri",
                "type": "string"
            },
            {
                "name": "hash",
                "type": "byte[]"
            },
            {
                "name": "timestamp",
                "type": "uint64"
            }
        ],
        "arc1643_document_removed_event": [
            {
                "name": "name",
                "type": "byte[]"
            },
            {
                "name": "uri",
                "type": "string"
            },
            {
                "name": "hash",
                "type": "byte[]"
            }
        ],
        "arc1643_document_updated_event": [
            {
                "name": "name",
                "type": "byte[]"
            },
            {
                "name": "uri",
                "type": "string"
            },
            {
                "name": "hash",
                "type": "byte[]"
            }
        ],
        "arc1644_controller_changed_event": [
            {
                "name": "old",
                "type": "address"
            },
            {
                "name": "neu",
                "type": "address"
            }
        ],
        "arc1644_controller_redeem_event": [
            {
                "name": "controller",
                "type": "address"
            },
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "code",
                "type": "byte"
            },
            {
                "name": "operator_data",
                "type": "byte[]"
            }
        ],
        "arc1644_controller_transfer_event": [
            {
                "name": "controller",
                "type": "address"
            },
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "code",
                "type": "byte"
            },
            {
                "name": "data",
                "type": "byte[]"
            },
            {
                "name": "operator_data",
                "type": "byte[]"
            }
        ]
    },
    "methods": [
        {
            "name": "arc1644_set_controller",
            "args": [
                {
                    "type": "address",
                    "name": "new_controller"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "ControllerChanged",
                    "args": [
                        {
                            "type": "(address,address)",
                            "name": "0",
                            "struct": "arc1644_controller_changed_event"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc1644_set_controllable",
            "args": [
                {
                    "type": "bool",
                    "name": "flag"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc1644_set_require_justification",
            "args": [
                {
                    "type": "bool",
                    "name": "flag"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc1644_set_min_action_interval",
            "args": [
                {
                    "type": "uint64",
                    "name": "interval"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc1644_is_controllable",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc1644_controller_transfer",
            "args": [
                {
                    "type": "address",
                    "name": "from"
                },
                {
                    "type": "address",
                    "name": "to"
                },
                {
                    "type": "uint256",
                    "name": "amount"
                },
                {
                    "type": "byte[]",
                    "name": "data"
                },
                {
                    "type": "byte[]",
                    "name": "operator_data"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "ControllerTransfer",
                    "args": [
                        {
                            "type": "(address,address,address,uint256,byte,byte[],byte[])",
                            "name": "0",
                            "struct": "arc1644_controller_transfer_event"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc1644_controller_redeem",
            "args": [
                {
                    "type": "address",
                    "name": "from"
                },
                {
                    "type": "uint256",
                    "name": "amount"
                },
                {
                    "type": "byte[]",
                    "name": "operator_data"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "ControllerRedeem",
                    "args": [
                        {
                            "type": "(address,address,uint256,byte,byte[])",
                            "name": "0",
                            "struct": "arc1644_controller_redeem_event"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc1643_set_document",
            "args": [
                {
                    "type": "byte[]",
                    "name": "name"
                },
                {
                    "type": "string",
                    "name": "uri"
                },
                {
                    "type": "byte[]",
                    "name": "hash"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "DocumentUpdated",
                    "args": [
                        {
                            "type": "(byte[],string,byte[])",
                            "name": "0",
                            "struct": "arc1643_document_updated_event"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc1643_get_document",
            "args": [
                {
                    "type": "byte[]",
                    "name": "name"
                }
            ],
            "returns": {
                "type": "(string,byte[],uint64)",
                "struct": "arc1643_document_record"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc1643_remove_document",
            "args": [
                {
                    "type": "byte[]",
                    "name": "name"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "DocumentRemoved",
                    "args": [
                        {
                            "type": "(byte[],string,byte[])",
                            "name": "0",
                            "struct": "arc1643_document_removed_event"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc1643_get_all_documents",
            "args": [],
            "returns": {
                "type": "byte[][]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc1594_set_issuable",
            "args": [
                {
                    "type": "bool",
                    "name": "flag"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc1594_issue",
            "args": [
                {
                    "type": "address",
                    "name": "to"
                },
                {
                    "type": "uint256",
                    "name": "amount"
                },
                {
                    "type": "byte[]",
                    "name": "data"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "Issue",
                    "args": [
                        {
                            "type": "(address,address,uint256,byte[])",
                            "name": "0",
                            "struct": "arc1410_partition_issue"
                        }
                    ]
                },
                {
                    "name": "Issue",
                    "args": [
                        {
                            "type": "(address,uint256,byte[])",
                            "name": "0",
                            "struct": "arc1594_issue_event"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc1594_redeemFrom",
            "args": [
                {
                    "type": "address",
                    "name": "from"
                },
                {
                    "type": "uint256",
                    "name": "amount"
                },
                {
                    "type": "byte[]",
                    "name": "data"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "Redeem",
                    "args": [
                        {
                            "type": "(address,uint256,byte[])",
                            "name": "0",
                            "struct": "arc1594_redeem_event"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc1594_redeem",
            "args": [
                {
                    "type": "uint256",
                    "name": "amount"
                },
                {
                    "type": "byte[]",
                    "name": "data"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "Redeem",
                    "args": [
                        {
                            "type": "(address,uint256,byte[])",
                            "name": "0",
                            "struct": "arc1594_redeem_event"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc1594_transfer_with_data",
            "args": [
                {
                    "type": "address",
                    "name": "to"
                },
                {
                    "type": "uint256",
                    "name": "amount"
                },
                {
                    "type": "byte[]",
                    "name": "data"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "Transfer",
                    "args": [
                        {
                            "type": "(address,address,address,uint256,byte[])",
                            "name": "0",
                            "struct": "arc1410_partition_transfer"
                        }
                    ]
                },
                {
                    "name": "arc200_Transfer",
                    "args": [
                        {
                            "type": "address",
                            "name": "from"
                        },
                        {
                            "type": "address",
                            "name": "to"
                        },
                        {
                            "type": "uint256",
                            "name": "value"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc1594_transfer_from_with_data",
            "args": [
                {
                    "type": "address",
                    "name": "from"
                },
                {
                    "type": "address",
                    "name": "to"
                },
                {
                    "type": "uint256",
                    "name": "amount"
                },
                {
                    "type": "byte[]",
                    "name": "data"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "arc200_Approval",
                    "args": [
                        {
                            "type": "address",
                            "name": "owner"
                        },
                        {
                            "type": "address",
                            "name": "spender"
                        },
                        {
                            "type": "uint256",
                            "name": "value"
                        }
                    ]
                },
                {
                    "name": "arc200_Transfer",
                    "args": [
                        {
                            "type": "address",
                            "name": "from"
                        },
                        {
                            "type": "address",
                            "name": "to"
                        },
                        {
                            "type": "uint256",
                            "name": "value"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc1594_is_issuable",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc1410_balance_of_partition",
            "args": [
                {
                    "type": "address",
                    "name": "holder"
                },
                {
                    "type": "address",
                    "name": "partition"
                }
            ],
            "returns": {
                "type": "uint256"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc200_transfer",
            "args": [
                {
                    "type": "address",
                    "name": "to"
                },
                {
                    "type": "uint256",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "Transfer",
                    "args": [
                        {
                            "type": "(address,address,address,uint256,byte[])",
                            "name": "0",
                            "struct": "arc1410_partition_transfer"
                        }
                    ]
                },
                {
                    "name": "arc200_Transfer",
                    "args": [
                        {
                            "type": "address",
                            "name": "from"
                        },
                        {
                            "type": "address",
                            "name": "to"
                        },
                        {
                            "type": "uint256",
                            "name": "value"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc1410_transfer_by_partition",
            "args": [
                {
                    "type": "address",
                    "name": "partition"
                },
                {
                    "type": "address",
                    "name": "to"
                },
                {
                    "type": "uint256",
                    "name": "amount"
                },
                {
                    "type": "byte[]",
                    "name": "data"
                }
            ],
            "returns": {
                "type": "address"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Transfer an amount of tokens from partition to receiver. Sender must be msg.sender or authorized operator.",
            "events": [
                {
                    "name": "Transfer",
                    "args": [
                        {
                            "type": "(address,address,address,uint256,byte[])",
                            "name": "0",
                            "struct": "arc1410_partition_transfer"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc1410_partitions_of",
            "args": [
                {
                    "type": "address",
                    "name": "holder"
                },
                {
                    "type": "uint64",
                    "name": "page"
                }
            ],
            "returns": {
                "type": "address[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc1410_is_operator",
            "args": [
                {
                    "type": "address",
                    "name": "holder"
                },
                {
                    "type": "address",
                    "name": "operator"
                },
                {
                    "type": "address",
                    "name": "partition"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc1410_authorize_operator",
            "args": [
                {
                    "type": "address",
                    "name": "holder"
                },
                {
                    "type": "address",
                    "name": "operator"
                },
                {
                    "type": "address",
                    "name": "partition"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc1410_revoke_operator",
            "args": [
                {
                    "type": "address",
                    "name": "holder"
                },
                {
                    "type": "address",
                    "name": "operator"
                },
                {
                    "type": "address",
                    "name": "partition"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc1410_operator_transfer_by_partition",
            "args": [
                {
                    "type": "address",
                    "name": "from"
                },
                {
                    "type": "address",
                    "name": "partition"
                },
                {
                    "type": "address",
                    "name": "to"
                },
                {
                    "type": "uint256",
                    "name": "amount"
                },
                {
                    "type": "byte[]",
                    "name": "data"
                }
            ],
            "returns": {
                "type": "address"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "Transfer",
                    "args": [
                        {
                            "type": "(address,address,address,uint256,byte[])",
                            "name": "0",
                            "struct": "arc1410_partition_transfer"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc1410_can_transfer_by_partition",
            "args": [
                {
                    "type": "address",
                    "name": "from"
                },
                {
                    "type": "address",
                    "name": "partition"
                },
                {
                    "type": "address",
                    "name": "to"
                },
                {
                    "type": "uint256",
                    "name": "amount"
                },
                {
                    "type": "byte[]",
                    "name": "data"
                }
            ],
            "returns": {
                "type": "(byte,string,address)",
                "struct": "arc1410_can_transfer_by_partition_return"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc1410_authorize_operator_by_portion",
            "args": [
                {
                    "type": "address",
                    "name": "holder"
                },
                {
                    "type": "address",
                    "name": "operator"
                },
                {
                    "type": "address",
                    "name": "partition"
                },
                {
                    "type": "uint256",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc1410_is_operator_by_portion",
            "args": [
                {
                    "type": "address",
                    "name": "holder"
                },
                {
                    "type": "address",
                    "name": "operator"
                },
                {
                    "type": "address",
                    "name": "partition"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc1410_issue_by_partition",
            "args": [
                {
                    "type": "address",
                    "name": "to"
                },
                {
                    "type": "address",
                    "name": "partition"
                },
                {
                    "type": "uint256",
                    "name": "amount"
                },
                {
                    "type": "byte[]",
                    "name": "data"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "Issue",
                    "args": [
                        {
                            "type": "(address,address,uint256,byte[])",
                            "name": "0",
                            "struct": "arc1410_partition_issue"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc1410_redeem_by_partition",
            "args": [
                {
                    "type": "address",
                    "name": "partition"
                },
                {
                    "type": "uint256",
                    "name": "amount"
                },
                {
                    "type": "byte[]",
                    "name": "data"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "Redeem",
                    "args": [
                        {
                            "type": "(address,address,uint256,byte[])",
                            "name": "0",
                            "struct": "arc1410_partition_redeem"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc1410_operator_redeem_by_partition",
            "args": [
                {
                    "type": "address",
                    "name": "from"
                },
                {
                    "type": "address",
                    "name": "partition"
                },
                {
                    "type": "uint256",
                    "name": "amount"
                },
                {
                    "type": "byte[]",
                    "name": "data"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "Redeem",
                    "args": [
                        {
                            "type": "(address,address,uint256,byte[])",
                            "name": "0",
                            "struct": "arc1410_partition_redeem"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "bootstrap",
            "args": [
                {
                    "type": "byte[]",
                    "name": "name"
                },
                {
                    "type": "byte[]",
                    "name": "symbol"
                },
                {
                    "type": "uint8",
                    "name": "decimals"
                },
                {
                    "type": "uint256",
                    "name": "totalSupply"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "arc200_Transfer",
                    "args": [
                        {
                            "type": "address",
                            "name": "from"
                        },
                        {
                            "type": "address",
                            "name": "to"
                        },
                        {
                            "type": "uint256",
                            "name": "value"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc200_name",
            "args": [],
            "returns": {
                "type": "byte[32]",
                "desc": "The name of the token"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the name of the token",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc200_symbol",
            "args": [],
            "returns": {
                "type": "byte[8]",
                "desc": "The symbol of the token"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the symbol of the token",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc200_decimals",
            "args": [],
            "returns": {
                "type": "uint8",
                "desc": "The decimals of the token"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the decimals of the token",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc200_totalSupply",
            "args": [],
            "returns": {
                "type": "uint256",
                "desc": "The total supply of the token"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the total supply of the token",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc200_balanceOf",
            "args": [
                {
                    "type": "address",
                    "name": "owner",
                    "desc": "The address of the owner of the token"
                }
            ],
            "returns": {
                "type": "uint256",
                "desc": "The current balance of the holder of the token"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the current balance of the owner of the token",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc200_transferFrom",
            "args": [
                {
                    "type": "address",
                    "name": "from",
                    "desc": "The source of the transfer"
                },
                {
                    "type": "address",
                    "name": "to",
                    "desc": "The destination of the transfer"
                },
                {
                    "type": "uint256",
                    "name": "value",
                    "desc": "Amount of tokens to transfer"
                }
            ],
            "returns": {
                "type": "bool",
                "desc": "Success"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Transfers tokens from source to destination as approved spender",
            "events": [
                {
                    "name": "arc200_Approval",
                    "args": [
                        {
                            "type": "address",
                            "name": "owner"
                        },
                        {
                            "type": "address",
                            "name": "spender"
                        },
                        {
                            "type": "uint256",
                            "name": "value"
                        }
                    ]
                },
                {
                    "name": "arc200_Transfer",
                    "args": [
                        {
                            "type": "address",
                            "name": "from"
                        },
                        {
                            "type": "address",
                            "name": "to"
                        },
                        {
                            "type": "uint256",
                            "name": "value"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc200_approve",
            "args": [
                {
                    "type": "address",
                    "name": "spender",
                    "desc": "Who is allowed to take tokens on owner's behalf"
                },
                {
                    "type": "uint256",
                    "name": "value",
                    "desc": "Amount of tokens to be taken by spender"
                }
            ],
            "returns": {
                "type": "bool",
                "desc": "Success"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Approve spender for a token",
            "events": [
                {
                    "name": "arc200_Approval",
                    "args": [
                        {
                            "type": "address",
                            "name": "owner"
                        },
                        {
                            "type": "address",
                            "name": "spender"
                        },
                        {
                            "type": "uint256",
                            "name": "value"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc200_allowance",
            "args": [
                {
                    "type": "address",
                    "name": "owner",
                    "desc": "Owner's account"
                },
                {
                    "type": "address",
                    "name": "spender",
                    "desc": "Who is allowed to take tokens on owner's behalf"
                }
            ],
            "returns": {
                "type": "uint256",
                "desc": "The remaining allowance"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the current allowance of the spender of the tokens of the owner",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc88_owner",
            "args": [],
            "returns": {
                "type": "address"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc88_is_owner",
            "args": [
                {
                    "type": "address",
                    "name": "query"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc88_initialize_owner",
            "args": [
                {
                    "type": "address",
                    "name": "new_owner"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Explicit initialization override (creation group recommended). Fails if already initialized.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc88_transfer_ownership",
            "args": [
                {
                    "type": "address",
                    "name": "new_owner"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "arc88_OwnershipTransferred",
                    "args": [
                        {
                            "type": "address",
                            "name": "previous_owner"
                        },
                        {
                            "type": "address",
                            "name": "new_owner"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc88_renounce_ownership",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "arc88_OwnershipRenounced",
                    "args": [
                        {
                            "type": "address",
                            "name": "previous_owner"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc88_transfer_ownership_request",
            "args": [
                {
                    "type": "address",
                    "name": "pending"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "arc88_OwnershipTransferRequested",
                    "args": [
                        {
                            "type": "address",
                            "name": "previous_owner"
                        },
                        {
                            "type": "address",
                            "name": "pending_owner"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc88_accept_ownership",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "arc88_OwnershipTransferAccepted",
                    "args": [
                        {
                            "type": "address",
                            "name": "previous_owner"
                        },
                        {
                            "type": "address",
                            "name": "new_owner"
                        }
                    ]
                },
                {
                    "name": "arc88_OwnershipTransferred",
                    "args": [
                        {
                            "type": "address",
                            "name": "previous_owner"
                        },
                        {
                            "type": "address",
                            "name": "new_owner"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc88_cancel_ownership_request",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 13
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "arc1644_controller": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YXJjMTY0NF9jdHJs"
                },
                "arc1644_controllable": {
                    "keyType": "AVMString",
                    "valueType": "bool",
                    "key": "YXJjMTY0NF9jdHJsZW4="
                },
                "arc1644_requireJustification": {
                    "keyType": "AVMString",
                    "valueType": "bool",
                    "key": "YXJjMTY0NF9yanVzdA=="
                },
                "arc1644_lastControllerActionRound": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "YXJjMTY0NF9sY2Fy"
                },
                "arc1644_minControllerActionInterval": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "YXJjMTY0NF9tY2Fp"
                },
                "arc1594_issuable": {
                    "keyType": "AVMString",
                    "valueType": "bool",
                    "key": "YXJjMTU5NF9pc3M="
                },
                "name": {
                    "keyType": "AVMString",
                    "valueType": "byte[]",
                    "key": "bg==",
                    "desc": "Name of the asset. Max 32 bytes"
                },
                "symbol": {
                    "keyType": "AVMString",
                    "valueType": "byte[]",
                    "key": "cw==",
                    "desc": "Symbol of the asset. Max 8 bytes"
                },
                "decimals": {
                    "keyType": "AVMString",
                    "valueType": "uint8",
                    "key": "ZA==",
                    "desc": "Decimals of the asset. Recommended is 6 decimal places."
                },
                "totalSupply": {
                    "keyType": "AVMString",
                    "valueType": "uint256",
                    "key": "dA==",
                    "desc": "Minted supply"
                },
                "owner": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YXJjODhfbw=="
                },
                "pendingOwner": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YXJjODhfcG8="
                },
                "initialized": {
                    "keyType": "AVMString",
                    "valueType": "byte",
                    "key": "YXJjODhfb2k="
                }
            },
            "local": {},
            "box": {
                "documentKeys": {
                    "keyType": "AVMString",
                    "valueType": "byte[][]",
                    "key": "YXJjMTY0M19kb2Nz"
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "documents": {
                    "keyType": "byte[]",
                    "valueType": "arc1643_document_record",
                    "prefix": "YXJjMTY0M19kb2M="
                },
                "partitions": {
                    "keyType": "arc1410_PartitionKey",
                    "valueType": "uint256",
                    "prefix": "YXJjMTQxMF9w"
                },
                "holderPartitionsCurrentPage": {
                    "keyType": "address",
                    "valueType": "uint64",
                    "prefix": "YXJjMTQxMF9ocF9w"
                },
                "holderPartitionsAddresses": {
                    "keyType": "arc1410_HoldingPartitionsPaginatedKey",
                    "valueType": "address[]",
                    "prefix": "YXJjMTQxMF9ocF9h"
                },
                "operators": {
                    "keyType": "arc1410_OperatorKey",
                    "valueType": "byte",
                    "prefix": "YXJjMTQxMF9vcA=="
                },
                "operatorPortionAllowances": {
                    "keyType": "arc1410_OperatorPortionKey",
                    "valueType": "uint256",
                    "prefix": "YXJjMTQxMF9vcGE="
                },
                "balances": {
                    "keyType": "address",
                    "valueType": "uint256",
                    "prefix": "Yg=="
                },
                "approvals": {
                    "keyType": "byte[32]",
                    "valueType": "ApprovalStruct",
                    "prefix": "YQ=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        2420,
                        2473,
                        2493,
                        2572,
                        2721,
                        2734,
                        2824,
                        2837,
                        2940,
                        3021,
                        3070,
                        3102,
                        3226,
                        3368,
                        3563,
                        3748,
                        3811,
                        3869,
                        3884,
                        4001,
                        4090,
                        4173,
                        4238,
                        4276,
                        4362,
                        4369,
                        4399,
                        4412,
                        4520,
                        4567,
                        4574,
                        4607,
                        4620,
                        4906,
                        5038
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        3837,
                        5039
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        4407,
                        4615
                    ],
                    "errorMessage": "Insufficient balance"
                },
                {
                    "pc": [
                        4927
                    ],
                    "errorMessage": "Insufficient balance at the sender account"
                },
                {
                    "pc": [
                        4366,
                        4571
                    ],
                    "errorMessage": "Insufficient partition balance"
                },
                {
                    "pc": [
                        3976,
                        4205,
                        4343
                    ],
                    "errorMessage": "Invalid amount"
                },
                {
                    "pc": [
                        4693
                    ],
                    "errorMessage": "Name of the asset must be longer or equal to 1 character"
                },
                {
                    "pc": [
                        4696
                    ],
                    "errorMessage": "Name of the asset must be shorter or equal to 32 characters"
                },
                {
                    "pc": [
                        3253,
                        4547
                    ],
                    "errorMessage": "Not authorized operator"
                },
                {
                    "pc": [
                        641,
                        653,
                        665,
                        680,
                        692,
                        707,
                        722,
                        741,
                        757,
                        779,
                        801,
                        826,
                        845,
                        861,
                        877,
                        893,
                        909,
                        937,
                        961,
                        982,
                        1006,
                        1031,
                        1055,
                        1086,
                        1117,
                        1138,
                        1159,
                        1184,
                        1206,
                        1234,
                        1256,
                        1278,
                        1294,
                        1322,
                        1347,
                        1365,
                        1386,
                        1407,
                        1422,
                        1438,
                        1453,
                        1472,
                        1493,
                        1518,
                        1549,
                        1565,
                        1580,
                        1595,
                        1610
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        4685
                    ],
                    "errorMessage": "Only deployer of this smart contract can call bootstrap method"
                },
                {
                    "pc": [
                        3127
                    ],
                    "errorMessage": "Only holder can authorize"
                },
                {
                    "pc": [
                        4112
                    ],
                    "errorMessage": "Only holder can authorize portion"
                },
                {
                    "pc": [
                        3152
                    ],
                    "errorMessage": "Only holder can revoke"
                },
                {
                    "pc": [
                        4359,
                        4564
                    ],
                    "errorMessage": "Partition balance missing"
                },
                {
                    "pc": [
                        3231,
                        4525
                    ],
                    "errorMessage": "Portion allowance exceeded"
                },
                {
                    "pc": [
                        4704
                    ],
                    "errorMessage": "Symbol of the asset must be longer or equal to 1 character"
                },
                {
                    "pc": [
                        4708
                    ],
                    "errorMessage": "Symbol of the asset must be shorter or equal to 8 characters"
                },
                {
                    "pc": [
                        4715
                    ],
                    "errorMessage": "This method can be called only once"
                },
                {
                    "pc": [
                        5202
                    ],
                    "errorMessage": "already_initialized"
                },
                {
                    "pc": [
                        1630
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        644,
                        656,
                        668,
                        683,
                        695,
                        710,
                        725,
                        744,
                        760,
                        782,
                        804,
                        829,
                        848,
                        864,
                        880,
                        896,
                        912,
                        940,
                        964,
                        985,
                        1009,
                        1034,
                        1058,
                        1089,
                        1120,
                        1141,
                        1162,
                        1187,
                        1209,
                        1237,
                        1259,
                        1281,
                        1297,
                        1325,
                        1350,
                        1368,
                        1389,
                        1410,
                        1425,
                        1441,
                        1456,
                        1475,
                        1496,
                        1521,
                        1552,
                        1568,
                        1583,
                        1598,
                        1613
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1764,
                        1780,
                        1811,
                        1840,
                        1858,
                        1864,
                        1903,
                        1978,
                        2029,
                        2235,
                        2622,
                        2756,
                        2859,
                        2925,
                        4295,
                        4431,
                        4639,
                        4768,
                        4783,
                        4799,
                        4804,
                        5103,
                        5132,
                        5154,
                        5166,
                        5193,
                        5233,
                        5244,
                        5266,
                        5272,
                        5297,
                        5318,
                        5331,
                        5361,
                        5369,
                        5404
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        1789
                    ],
                    "errorMessage": "controller_disabled"
                },
                {
                    "pc": [
                        2306
                    ],
                    "errorMessage": "empty_name"
                },
                {
                    "pc": [
                        2089,
                        2210
                    ],
                    "errorMessage": "insufficient"
                },
                {
                    "pc": [
                        4831
                    ],
                    "errorMessage": "insufficient approval"
                },
                {
                    "pc": [
                        2729,
                        2832
                    ],
                    "errorMessage": "insufficient_balance"
                },
                {
                    "pc": [
                        4776,
                        4792,
                        5008
                    ],
                    "errorMessage": "invalid size"
                },
                {
                    "pc": [
                        2608,
                        2703,
                        2809
                    ],
                    "errorMessage": "invalid_amount"
                },
                {
                    "pc": [
                        2631
                    ],
                    "errorMessage": "issuance_disabled"
                },
                {
                    "pc": [
                        1825
                    ],
                    "errorMessage": "justification_required"
                },
                {
                    "pc": [
                        1757
                    ],
                    "errorMessage": "no_controller"
                },
                {
                    "pc": [
                        2697
                    ],
                    "errorMessage": "not_auth"
                },
                {
                    "pc": [
                        1766
                    ],
                    "errorMessage": "not_controller"
                },
                {
                    "pc": [
                        2471,
                        2490
                    ],
                    "errorMessage": "not_found"
                },
                {
                    "pc": [
                        5235,
                        5268,
                        5299,
                        5406
                    ],
                    "errorMessage": "not_owner"
                },
                {
                    "pc": [
                        5354,
                        5365
                    ],
                    "errorMessage": "not_pending_owner"
                },
                {
                    "pc": [
                        1749,
                        2294,
                        2583,
                        4199
                    ],
                    "errorMessage": "only_owner"
                },
                {
                    "pc": [
                        2097,
                        2123,
                        2218,
                        2243,
                        2742,
                        2764,
                        2845,
                        2867,
                        3242,
                        4009,
                        4098,
                        4246,
                        4284,
                        4303,
                        4377,
                        4420,
                        4439,
                        4536,
                        4582,
                        4628,
                        4647,
                        4839,
                        4945,
                        4968
                    ],
                    "errorMessage": "overflow"
                },
                {
                    "pc": [
                        5322
                    ],
                    "errorMessage": "pending_transfer_exists"
                },
                {
                    "pc": [
                        1874
                    ],
                    "errorMessage": "rate_limited"
                },
                {
                    "pc": [
                        2079
                    ],
                    "errorMessage": "same_addr"
                },
                {
                    "pc": [
                        5207,
                        5240,
                        5304
                    ],
                    "errorMessage": "zero_address_not_allowed"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [
        {
            "name": "ControllerChanged",
            "args": [
                {
                    "type": "(address,address)",
                    "name": "0",
                    "struct": "arc1644_controller_changed_event"
                }
            ]
        },
        {
            "name": "ControllerTransfer",
            "args": [
                {
                    "type": "(address,address,address,uint256,byte,byte[],byte[])",
                    "name": "0",
                    "struct": "arc1644_controller_transfer_event"
                }
            ]
        },
        {
            "name": "ControllerRedeem",
            "args": [
                {
                    "type": "(address,address,uint256,byte,byte[])",
                    "name": "0",
                    "struct": "arc1644_controller_redeem_event"
                }
            ]
        },
        {
            "name": "DocumentUpdated",
            "args": [
                {
                    "type": "(byte[],string,byte[])",
                    "name": "0",
                    "struct": "arc1643_document_updated_event"
                }
            ]
        },
        {
            "name": "DocumentRemoved",
            "args": [
                {
                    "type": "(byte[],string,byte[])",
                    "name": "0",
                    "struct": "arc1643_document_removed_event"
                }
            ]
        },
        {
            "name": "Issue",
            "args": [
                {
                    "type": "(address,address,uint256,byte[])",
                    "name": "0",
                    "struct": "arc1410_partition_issue"
                }
            ]
        },
        {
            "name": "Issue",
            "args": [
                {
                    "type": "(address,uint256,byte[])",
                    "name": "0",
                    "struct": "arc1594_issue_event"
                }
            ]
        },
        {
            "name": "Redeem",
            "args": [
                {
                    "type": "(address,uint256,byte[])",
                    "name": "0",
                    "struct": "arc1594_redeem_event"
                }
            ]
        },
        {
            "name": "Transfer",
            "args": [
                {
                    "type": "(address,address,address,uint256,byte[])",
                    "name": "0",
                    "struct": "arc1410_partition_transfer"
                }
            ]
        },
        {
            "name": "arc200_Transfer",
            "args": [
                {
                    "type": "address",
                    "name": "from"
                },
                {
                    "type": "address",
                    "name": "to"
                },
                {
                    "type": "uint256",
                    "name": "value"
                }
            ]
        },
        {
            "name": "arc200_Approval",
            "args": [
                {
                    "type": "address",
                    "name": "owner"
                },
                {
                    "type": "address",
                    "name": "spender"
                },
                {
                    "type": "uint256",
                    "name": "value"
                }
            ]
        },
        {
            "name": "Redeem",
            "args": [
                {
                    "type": "(address,address,uint256,byte[])",
                    "name": "0",
                    "struct": "arc1410_partition_redeem"
                }
            ]
        },
        {
            "name": "arc88_OwnershipTransferred",
            "args": [
                {
                    "type": "address",
                    "name": "previous_owner"
                },
                {
                    "type": "address",
                    "name": "new_owner"
                }
            ]
        },
        {
            "name": "arc88_OwnershipRenounced",
            "args": [
                {
                    "type": "address",
                    "name": "previous_owner"
                }
            ]
        },
        {
            "name": "arc88_OwnershipTransferRequested",
            "args": [
                {
                    "type": "address",
                    "name": "previous_owner"
                },
                {
                    "type": "address",
                    "name": "pending_owner"
                }
            ]
        },
        {
            "name": "arc88_OwnershipTransferAccepted",
            "args": [
                {
                    "type": "address",
                    "name": "previous_owner"
                },
                {
                    "type": "address",
                    "name": "new_owner"
                }
            ]
        }
    ],
    "templateVariables": {}
}