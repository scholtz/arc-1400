/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"Arc1643","structs":{"arc1643_document_record":[{"name":"uri","type":"string"},{"name":"hash","type":"byte[]"},{"name":"timestamp","type":"uint64"}],"arc1643_document_removed_event":[{"name":"name","type":"byte[]"},{"name":"uri","type":"string"},{"name":"hash","type":"byte[]"}],"arc1643_document_updated_event":[{"name":"name","type":"byte[]"},{"name":"uri","type":"string"},{"name":"hash","type":"byte[]"}]},"methods":[{"name":"arc1643_set_document","args":[{"type":"byte[]","name":"name"},{"type":"string","name":"uri"},{"type":"byte[]","name":"hash"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"DocumentUpdated","args":[{"type":"(byte[],string,byte[])","name":"0","struct":"arc1643_document_updated_event"}]}],"recommendations":{}},{"name":"arc1643_get_document","args":[{"type":"byte[]","name":"name"}],"returns":{"type":"(string,byte[],uint64)","struct":"arc1643_document_record"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"arc1643_remove_document","args":[{"type":"byte[]","name":"name"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"DocumentRemoved","args":[{"type":"(byte[],string,byte[])","name":"0","struct":"arc1643_document_removed_event"}]}],"recommendations":{}},{"name":"arc1643_get_all_documents","args":[],"returns":{"type":"byte[][]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"arc88_owner","args":[],"returns":{"type":"address"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"arc88_is_owner","args":[{"type":"address","name":"query"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"arc88_initialize_owner","args":[{"type":"address","name":"new_owner"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Explicit initialization override (creation group recommended). Fails if already initialized.","events":[],"recommendations":{}},{"name":"arc88_transfer_ownership","args":[{"type":"address","name":"new_owner"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"arc88_OwnershipTransferred","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"new_owner"}]}],"recommendations":{}},{"name":"arc88_renounce_ownership","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"arc88_OwnershipRenounced","args":[{"type":"address","name":"previous_owner"}]}],"recommendations":{}},{"name":"arc88_transfer_ownership_request","args":[{"type":"address","name":"pending"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"arc88_OwnershipTransferRequested","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"pending_owner"}]}],"recommendations":{}},{"name":"arc88_accept_ownership","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"arc88_OwnershipTransferAccepted","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"new_owner"}]},{"name":"arc88_OwnershipTransferred","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"new_owner"}]}],"recommendations":{}},{"name":"arc88_cancel_ownership_request","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":3},"local":{"ints":0,"bytes":0}},"keys":{"global":{"owner":{"keyType":"AVMString","valueType":"address","key":"YXJjODhfbw=="},"pendingOwner":{"keyType":"AVMString","valueType":"address","key":"YXJjODhfcG8="},"initialized":{"keyType":"AVMString","valueType":"byte","key":"YXJjODhfb2k="}},"local":{},"box":{"documentKeys":{"keyType":"AVMString","valueType":"byte[][]","key":"ZG9jcw=="}}},"maps":{"global":{},"local":{},"box":{"documents":{"keyType":"byte[]","valueType":"arc1643_document_record","prefix":"ZG9j"}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[635,686,706,783],"errorMessage":"Box must have value"},{"pc":[199,211,223,238,250,265,280,300,317,334,349,369],"errorMessage":"OnCompletion is not NoOp"},{"pc":[898],"errorMessage":"already_initialized"},{"pc":[395],"errorMessage":"can only call when creating"},{"pc":[202,214,226,241,253,268,283,303,320,337,352,372],"errorMessage":"can only call when not creating"},{"pc":[798,828,850,862,889,930,941,963,969,994,1013,1025,1053,1061,1095],"errorMessage":"check GlobalState exists"},{"pc":[526],"errorMessage":"empty_name"},{"pc":[684,703],"errorMessage":"not_found"},{"pc":[932,965,996,1097],"errorMessage":"not_owner"},{"pc":[1047,1057],"errorMessage":"not_pending_owner"},{"pc":[514],"errorMessage":"only_owner"},{"pc":[1017],"errorMessage":"pending_transfer_exists"},{"pc":[903,937,1001],"errorMessage":"zero_address_not_allowed"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAAECBiYMB2FyYzg4X28gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZG9jcwhhcmM4OF9wbwhhcmM4OF9vaQQVH3x1A2RvYwEAAgAAAgAGAgACBENV0q0xG0EBHIIMBBHLNvUEsW16jASnyzSCBOy2NsgEBwJlTgTQFXJOBAKf7MAEc0kzTgTbfILvBP0sLG4EQqXwZQStT2jqNhoAjgwArACYAIkAeABnAFMARAA1ACkAGgAOAAIiQzEZFEQxGESIA3EjQzEZFEQxGESIAzUjQzEZFEQxGEQ2GgGIAu4jQzEZFEQxGESIAsYjQzEZFEQxGEQ2GgGIApMjQzEZFEQxGEQ2GgGIAlYjQzEZFEQxGEQ2GgGIAhwnBUxQsCNDMRkURDEYRIgCAycFTFCwI0MxGRREMRhEiAHJJwVMULAjQzEZFEQxGEQ2GgGIAVgjQzEZFEQxGEQ2GgGIATknBUxQsCNDMRkURDEYRDYaATYaAjYaA4gAgyNDMRlA/zoxGBREI0OKAwGL/SJZSYv/CEwkCyQISwEWVwYCTgKL/SRLAlKL/yQLr1CL/RWL/U8DTwJSUIv+UEwkC0kiTIsDiwIMQQAjiwRJFlcGAosBiwNJTgRPAl1JjAFLAVkkCAiMBCQIjANC/9WLAIsBUIwAiTEAiAFAIlMjEkSJigMAiP/vi/0VSUQyBhaL/hVJTgKBDAgWVwYCgAIADExQTFCL/lCL/1AnBov9UEm8SEy/Kr1FAUAAOycIi/0jiP9IKrxIKky/JYsACEkWVwYCJwlMUEyLAQgWVwYCUIv9UIv+UIv/UCcKTFCABC3APDZMULCJKr5EJwiL/SOI/wpJIllMVwIASwEkC0sBFVJMiP73KrxIKky/Qv+sigEBJwaL/1BJvUUBRL5EiYoBAIj/QycGi/9QSb1FAURJvkRMvEhJIllLASRZSwJPAksCUksCFU8DTwNPAlKL/xUlCEkWVwYCJwlMUEsDFU8CCBZXBgJQi/9QTwJQTFAnCkxQgASuek+gTFCwiSq+RIkiJwRlRQFBAAkiJwRlRBdAABIiKGVFAUAABCgyCWcnBIABAWeJiP/YIihlRImKAQGI/80iKGVFAUAAAycHiSIoZUQpEkEAAycHiSIoZUSL/xInByJPAlSJigEAIicEZUUBQQAeIicEZUQXIxJBABMjFESL/ykTRCiL/2cnBIABAWeJIkL/6ooBAIj/dDEAIihlRBJEi/8pE0QiKGVEKIv/Z4v/UCcLTFCwiYj/UzEAIihlRBJEIihlRCgpZ4AENGqhZkxQsImKAQCI/zQxACIoZUQSRIv/KRNEIitlRQFBAAgiK2VEKRMURCuL/2ciKGVEi/9QgAQWvx+RTFCwiYj+/yIrZUUBRDEAIitlREsBEkQiKGVEKEsCZyspZ0xQgAT342s3SwFQsCcLTFCwiYj+zzEAIihlRBJEKylniQ==","clear":"CoEBQw=="},"events":[{"name":"DocumentUpdated","args":[{"type":"(byte[],string,byte[])","name":"0","struct":"arc1643_document_updated_event"}]},{"name":"DocumentRemoved","args":[{"type":"(byte[],string,byte[])","name":"0","struct":"arc1643_document_removed_event"}]},{"name":"arc88_OwnershipTransferred","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"new_owner"}]},{"name":"arc88_OwnershipRenounced","args":[{"type":"address","name":"previous_owner"}]},{"name":"arc88_OwnershipTransferRequested","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"pending_owner"}]},{"name":"arc88_OwnershipTransferAccepted","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"new_owner"}]}],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Arc1643DocumentRecord = {
  uri: string,
  hash: Uint8Array,
  timestamp: bigint
}


/**
 * Converts the ABI tuple representation of a arc1643_document_record to the struct representation
 */
export function Arc1643DocumentRecordFromTuple(abiTuple: [string, Uint8Array, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1643_document_record, APP_SPEC.structs) as Arc1643DocumentRecord
}

export type Arc1643DocumentRemovedEvent = {
  name: Uint8Array,
  uri: string,
  hash: Uint8Array
}


/**
 * Converts the ABI tuple representation of a arc1643_document_removed_event to the struct representation
 */
export function Arc1643DocumentRemovedEventFromTuple(abiTuple: [Uint8Array, string, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1643_document_removed_event, APP_SPEC.structs) as Arc1643DocumentRemovedEvent
}

export type Arc1643DocumentUpdatedEvent = {
  name: Uint8Array,
  uri: string,
  hash: Uint8Array
}


/**
 * Converts the ABI tuple representation of a arc1643_document_updated_event to the struct representation
 */
export function Arc1643DocumentUpdatedEventFromTuple(abiTuple: [Uint8Array, string, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1643_document_updated_event, APP_SPEC.structs) as Arc1643DocumentUpdatedEvent
}

/**
 * The argument types for the Arc1643 contract
 */
export type Arc1643Args = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'arc1643_set_document(byte[],string,byte[])void': {
      name: Uint8Array
      uri: string
      hash: Uint8Array
    }
    'arc1643_get_document(byte[])(string,byte[],uint64)': {
      name: Uint8Array
    }
    'arc1643_remove_document(byte[])void': {
      name: Uint8Array
    }
    'arc1643_get_all_documents()byte[][]': Record<string, never>
    'arc88_owner()address': Record<string, never>
    'arc88_is_owner(address)bool': {
      query: string
    }
    'arc88_initialize_owner(address)void': {
      newOwner: string
    }
    'arc88_transfer_ownership(address)void': {
      newOwner: string
    }
    'arc88_renounce_ownership()void': Record<string, never>
    'arc88_transfer_ownership_request(address)void': {
      pending: string
    }
    'arc88_accept_ownership()void': Record<string, never>
    'arc88_cancel_ownership_request()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'arc1643_set_document(byte[],string,byte[])void': [name: Uint8Array, uri: string, hash: Uint8Array]
    'arc1643_get_document(byte[])(string,byte[],uint64)': [name: Uint8Array]
    'arc1643_remove_document(byte[])void': [name: Uint8Array]
    'arc1643_get_all_documents()byte[][]': []
    'arc88_owner()address': []
    'arc88_is_owner(address)bool': [query: string]
    'arc88_initialize_owner(address)void': [newOwner: string]
    'arc88_transfer_ownership(address)void': [newOwner: string]
    'arc88_renounce_ownership()void': []
    'arc88_transfer_ownership_request(address)void': [pending: string]
    'arc88_accept_ownership()void': []
    'arc88_cancel_ownership_request()void': []
  }
}

/**
 * The return type for each method
 */
export type Arc1643Returns = {
  'arc1643_set_document(byte[],string,byte[])void': void
  'arc1643_get_document(byte[])(string,byte[],uint64)': Arc1643DocumentRecord
  'arc1643_remove_document(byte[])void': void
  'arc1643_get_all_documents()byte[][]': Uint8Array[]
  'arc88_owner()address': string
  'arc88_is_owner(address)bool': boolean
  'arc88_initialize_owner(address)void': void
  'arc88_transfer_ownership(address)void': void
  'arc88_renounce_ownership()void': void
  'arc88_transfer_ownership_request(address)void': void
  'arc88_accept_ownership()void': void
  'arc88_cancel_ownership_request()void': void
}

/**
 * Defines the types of available calls and state of the Arc1643 smart contract.
 */
export type Arc1643Types = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'arc1643_set_document(byte[],string,byte[])void' | 'arc1643_set_document', {
      argsObj: Arc1643Args['obj']['arc1643_set_document(byte[],string,byte[])void']
      argsTuple: Arc1643Args['tuple']['arc1643_set_document(byte[],string,byte[])void']
      returns: Arc1643Returns['arc1643_set_document(byte[],string,byte[])void']
    }>
    & Record<'arc1643_get_document(byte[])(string,byte[],uint64)' | 'arc1643_get_document', {
      argsObj: Arc1643Args['obj']['arc1643_get_document(byte[])(string,byte[],uint64)']
      argsTuple: Arc1643Args['tuple']['arc1643_get_document(byte[])(string,byte[],uint64)']
      returns: Arc1643Returns['arc1643_get_document(byte[])(string,byte[],uint64)']
    }>
    & Record<'arc1643_remove_document(byte[])void' | 'arc1643_remove_document', {
      argsObj: Arc1643Args['obj']['arc1643_remove_document(byte[])void']
      argsTuple: Arc1643Args['tuple']['arc1643_remove_document(byte[])void']
      returns: Arc1643Returns['arc1643_remove_document(byte[])void']
    }>
    & Record<'arc1643_get_all_documents()byte[][]' | 'arc1643_get_all_documents', {
      argsObj: Arc1643Args['obj']['arc1643_get_all_documents()byte[][]']
      argsTuple: Arc1643Args['tuple']['arc1643_get_all_documents()byte[][]']
      returns: Arc1643Returns['arc1643_get_all_documents()byte[][]']
    }>
    & Record<'arc88_owner()address' | 'arc88_owner', {
      argsObj: Arc1643Args['obj']['arc88_owner()address']
      argsTuple: Arc1643Args['tuple']['arc88_owner()address']
      returns: Arc1643Returns['arc88_owner()address']
    }>
    & Record<'arc88_is_owner(address)bool' | 'arc88_is_owner', {
      argsObj: Arc1643Args['obj']['arc88_is_owner(address)bool']
      argsTuple: Arc1643Args['tuple']['arc88_is_owner(address)bool']
      returns: Arc1643Returns['arc88_is_owner(address)bool']
    }>
    & Record<'arc88_initialize_owner(address)void' | 'arc88_initialize_owner', {
      argsObj: Arc1643Args['obj']['arc88_initialize_owner(address)void']
      argsTuple: Arc1643Args['tuple']['arc88_initialize_owner(address)void']
      returns: Arc1643Returns['arc88_initialize_owner(address)void']
    }>
    & Record<'arc88_transfer_ownership(address)void' | 'arc88_transfer_ownership', {
      argsObj: Arc1643Args['obj']['arc88_transfer_ownership(address)void']
      argsTuple: Arc1643Args['tuple']['arc88_transfer_ownership(address)void']
      returns: Arc1643Returns['arc88_transfer_ownership(address)void']
    }>
    & Record<'arc88_renounce_ownership()void' | 'arc88_renounce_ownership', {
      argsObj: Arc1643Args['obj']['arc88_renounce_ownership()void']
      argsTuple: Arc1643Args['tuple']['arc88_renounce_ownership()void']
      returns: Arc1643Returns['arc88_renounce_ownership()void']
    }>
    & Record<'arc88_transfer_ownership_request(address)void' | 'arc88_transfer_ownership_request', {
      argsObj: Arc1643Args['obj']['arc88_transfer_ownership_request(address)void']
      argsTuple: Arc1643Args['tuple']['arc88_transfer_ownership_request(address)void']
      returns: Arc1643Returns['arc88_transfer_ownership_request(address)void']
    }>
    & Record<'arc88_accept_ownership()void' | 'arc88_accept_ownership', {
      argsObj: Arc1643Args['obj']['arc88_accept_ownership()void']
      argsTuple: Arc1643Args['tuple']['arc88_accept_ownership()void']
      returns: Arc1643Returns['arc88_accept_ownership()void']
    }>
    & Record<'arc88_cancel_ownership_request()void' | 'arc88_cancel_ownership_request', {
      argsObj: Arc1643Args['obj']['arc88_cancel_ownership_request()void']
      argsTuple: Arc1643Args['tuple']['arc88_cancel_ownership_request()void']
      returns: Arc1643Returns['arc88_cancel_ownership_request()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        owner: string
        pendingOwner: string
        initialized: number
      }
      maps: {}
    }
    box: {
      keys: {
        documentKeys: Uint8Array[]
      }
      maps: {
        documents: Map<Uint8Array, Arc1643DocumentRecord>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type Arc1643Signatures = keyof Arc1643Types['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Arc1643NonVoidMethodSignatures = keyof Arc1643Types['methods'] extends infer T ? T extends keyof Arc1643Types['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Arc1643 smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Arc1643Signatures> = Arc1643Types['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Arc1643 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc1643Signatures> = Arc1643Types['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = Arc1643Types['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = Arc1643Types['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type Arc1643CreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type Arc1643DeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: Arc1643CreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Arc1643 smart contract
 */
export abstract class Arc1643ParamsFactory {
  /**
   * Constructs a no op call for the arc1643_set_document(byte[],string,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1643SetDocument(params: CallParams<Arc1643Args['obj']['arc1643_set_document(byte[],string,byte[])void'] | Arc1643Args['tuple']['arc1643_set_document(byte[],string,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1643_set_document(byte[],string,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.uri, params.args.hash],
    }
  }
  /**
   * Constructs a no op call for the arc1643_get_document(byte[])(string,byte[],uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1643GetDocument(params: CallParams<Arc1643Args['obj']['arc1643_get_document(byte[])(string,byte[],uint64)'] | Arc1643Args['tuple']['arc1643_get_document(byte[])(string,byte[],uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1643_get_document(byte[])(string,byte[],uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the arc1643_remove_document(byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1643RemoveDocument(params: CallParams<Arc1643Args['obj']['arc1643_remove_document(byte[])void'] | Arc1643Args['tuple']['arc1643_remove_document(byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1643_remove_document(byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the arc1643_get_all_documents()byte[][] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1643GetAllDocuments(params: CallParams<Arc1643Args['obj']['arc1643_get_all_documents()byte[][]'] | Arc1643Args['tuple']['arc1643_get_all_documents()byte[][]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1643_get_all_documents()byte[][]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc88_owner()address ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88Owner(params: CallParams<Arc1643Args['obj']['arc88_owner()address'] | Arc1643Args['tuple']['arc88_owner()address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_owner()address' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc88_is_owner(address)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88IsOwner(params: CallParams<Arc1643Args['obj']['arc88_is_owner(address)bool'] | Arc1643Args['tuple']['arc88_is_owner(address)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_is_owner(address)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.query],
    }
  }
  /**
   * Constructs a no op call for the arc88_initialize_owner(address)void ABI method
   *
   * Explicit initialization override (creation group recommended). Fails if already initialized.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88InitializeOwner(params: CallParams<Arc1643Args['obj']['arc88_initialize_owner(address)void'] | Arc1643Args['tuple']['arc88_initialize_owner(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_initialize_owner(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newOwner],
    }
  }
  /**
   * Constructs a no op call for the arc88_transfer_ownership(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88TransferOwnership(params: CallParams<Arc1643Args['obj']['arc88_transfer_ownership(address)void'] | Arc1643Args['tuple']['arc88_transfer_ownership(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_transfer_ownership(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newOwner],
    }
  }
  /**
   * Constructs a no op call for the arc88_renounce_ownership()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88RenounceOwnership(params: CallParams<Arc1643Args['obj']['arc88_renounce_ownership()void'] | Arc1643Args['tuple']['arc88_renounce_ownership()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_renounce_ownership()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc88_transfer_ownership_request(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88TransferOwnershipRequest(params: CallParams<Arc1643Args['obj']['arc88_transfer_ownership_request(address)void'] | Arc1643Args['tuple']['arc88_transfer_ownership_request(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_transfer_ownership_request(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.pending],
    }
  }
  /**
   * Constructs a no op call for the arc88_accept_ownership()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88AcceptOwnership(params: CallParams<Arc1643Args['obj']['arc88_accept_ownership()void'] | Arc1643Args['tuple']['arc88_accept_ownership()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_accept_ownership()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc88_cancel_ownership_request()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88CancelOwnershipRequest(params: CallParams<Arc1643Args['obj']['arc88_cancel_ownership_request()void'] | Arc1643Args['tuple']['arc88_cancel_ownership_request()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_cancel_ownership_request()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Arc1643 smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Arc1643Factory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `Arc1643Factory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Arc1643Client(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new Arc1643Client(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Arc1643 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Arc1643DeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new Arc1643Client(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Arc1643 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Arc1643 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Arc1643 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new Arc1643Client(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Arc1643 smart contract
 */
export class Arc1643Client {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `Arc1643Client`
   *
   * @param appClient An `AppClient` instance which has been created with the Arc1643 app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `Arc1643Client`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Arc1643NonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `Arc1643Client` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<Arc1643Client> {
    return new Arc1643Client(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `Arc1643Client` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<Arc1643Client> {
    return new Arc1643Client(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Arc1643 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc1643_set_document(byte[],string,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1643SetDocument: (params: CallParams<Arc1643Args['obj']['arc1643_set_document(byte[],string,byte[])void'] | Arc1643Args['tuple']['arc1643_set_document(byte[],string,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1643ParamsFactory.arc1643SetDocument(params))
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc1643_get_document(byte[])(string,byte[],uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1643GetDocument: (params: CallParams<Arc1643Args['obj']['arc1643_get_document(byte[])(string,byte[],uint64)'] | Arc1643Args['tuple']['arc1643_get_document(byte[])(string,byte[],uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1643ParamsFactory.arc1643GetDocument(params))
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc1643_remove_document(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1643RemoveDocument: (params: CallParams<Arc1643Args['obj']['arc1643_remove_document(byte[])void'] | Arc1643Args['tuple']['arc1643_remove_document(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1643ParamsFactory.arc1643RemoveDocument(params))
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc1643_get_all_documents()byte[][]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1643GetAllDocuments: (params: CallParams<Arc1643Args['obj']['arc1643_get_all_documents()byte[][]'] | Arc1643Args['tuple']['arc1643_get_all_documents()byte[][]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1643ParamsFactory.arc1643GetAllDocuments(params))
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc88_owner()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88Owner: (params: CallParams<Arc1643Args['obj']['arc88_owner()address'] | Arc1643Args['tuple']['arc88_owner()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1643ParamsFactory.arc88Owner(params))
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc88_is_owner(address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88IsOwner: (params: CallParams<Arc1643Args['obj']['arc88_is_owner(address)bool'] | Arc1643Args['tuple']['arc88_is_owner(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1643ParamsFactory.arc88IsOwner(params))
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc88_initialize_owner(address)void` ABI method.
     *
     * Explicit initialization override (creation group recommended). Fails if already initialized.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88InitializeOwner: (params: CallParams<Arc1643Args['obj']['arc88_initialize_owner(address)void'] | Arc1643Args['tuple']['arc88_initialize_owner(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1643ParamsFactory.arc88InitializeOwner(params))
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc88_transfer_ownership(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88TransferOwnership: (params: CallParams<Arc1643Args['obj']['arc88_transfer_ownership(address)void'] | Arc1643Args['tuple']['arc88_transfer_ownership(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1643ParamsFactory.arc88TransferOwnership(params))
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc88_renounce_ownership()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88RenounceOwnership: (params: CallParams<Arc1643Args['obj']['arc88_renounce_ownership()void'] | Arc1643Args['tuple']['arc88_renounce_ownership()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1643ParamsFactory.arc88RenounceOwnership(params))
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc88_transfer_ownership_request(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88TransferOwnershipRequest: (params: CallParams<Arc1643Args['obj']['arc88_transfer_ownership_request(address)void'] | Arc1643Args['tuple']['arc88_transfer_ownership_request(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1643ParamsFactory.arc88TransferOwnershipRequest(params))
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc88_accept_ownership()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88AcceptOwnership: (params: CallParams<Arc1643Args['obj']['arc88_accept_ownership()void'] | Arc1643Args['tuple']['arc88_accept_ownership()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1643ParamsFactory.arc88AcceptOwnership(params))
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc88_cancel_ownership_request()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88CancelOwnershipRequest: (params: CallParams<Arc1643Args['obj']['arc88_cancel_ownership_request()void'] | Arc1643Args['tuple']['arc88_cancel_ownership_request()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1643ParamsFactory.arc88CancelOwnershipRequest(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Arc1643 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc1643_set_document(byte[],string,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1643SetDocument: (params: CallParams<Arc1643Args['obj']['arc1643_set_document(byte[],string,byte[])void'] | Arc1643Args['tuple']['arc1643_set_document(byte[],string,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1643ParamsFactory.arc1643SetDocument(params))
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc1643_get_document(byte[])(string,byte[],uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1643GetDocument: (params: CallParams<Arc1643Args['obj']['arc1643_get_document(byte[])(string,byte[],uint64)'] | Arc1643Args['tuple']['arc1643_get_document(byte[])(string,byte[],uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1643ParamsFactory.arc1643GetDocument(params))
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc1643_remove_document(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1643RemoveDocument: (params: CallParams<Arc1643Args['obj']['arc1643_remove_document(byte[])void'] | Arc1643Args['tuple']['arc1643_remove_document(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1643ParamsFactory.arc1643RemoveDocument(params))
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc1643_get_all_documents()byte[][]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1643GetAllDocuments: (params: CallParams<Arc1643Args['obj']['arc1643_get_all_documents()byte[][]'] | Arc1643Args['tuple']['arc1643_get_all_documents()byte[][]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1643ParamsFactory.arc1643GetAllDocuments(params))
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc88_owner()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88Owner: (params: CallParams<Arc1643Args['obj']['arc88_owner()address'] | Arc1643Args['tuple']['arc88_owner()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1643ParamsFactory.arc88Owner(params))
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc88_is_owner(address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88IsOwner: (params: CallParams<Arc1643Args['obj']['arc88_is_owner(address)bool'] | Arc1643Args['tuple']['arc88_is_owner(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1643ParamsFactory.arc88IsOwner(params))
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc88_initialize_owner(address)void` ABI method.
     *
     * Explicit initialization override (creation group recommended). Fails if already initialized.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88InitializeOwner: (params: CallParams<Arc1643Args['obj']['arc88_initialize_owner(address)void'] | Arc1643Args['tuple']['arc88_initialize_owner(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1643ParamsFactory.arc88InitializeOwner(params))
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc88_transfer_ownership(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88TransferOwnership: (params: CallParams<Arc1643Args['obj']['arc88_transfer_ownership(address)void'] | Arc1643Args['tuple']['arc88_transfer_ownership(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1643ParamsFactory.arc88TransferOwnership(params))
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc88_renounce_ownership()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88RenounceOwnership: (params: CallParams<Arc1643Args['obj']['arc88_renounce_ownership()void'] | Arc1643Args['tuple']['arc88_renounce_ownership()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1643ParamsFactory.arc88RenounceOwnership(params))
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc88_transfer_ownership_request(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88TransferOwnershipRequest: (params: CallParams<Arc1643Args['obj']['arc88_transfer_ownership_request(address)void'] | Arc1643Args['tuple']['arc88_transfer_ownership_request(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1643ParamsFactory.arc88TransferOwnershipRequest(params))
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc88_accept_ownership()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88AcceptOwnership: (params: CallParams<Arc1643Args['obj']['arc88_accept_ownership()void'] | Arc1643Args['tuple']['arc88_accept_ownership()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1643ParamsFactory.arc88AcceptOwnership(params))
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc88_cancel_ownership_request()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88CancelOwnershipRequest: (params: CallParams<Arc1643Args['obj']['arc88_cancel_ownership_request()void'] | Arc1643Args['tuple']['arc88_cancel_ownership_request()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1643ParamsFactory.arc88CancelOwnershipRequest(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Arc1643 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc1643_set_document(byte[],string,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1643SetDocument: async (params: CallParams<Arc1643Args['obj']['arc1643_set_document(byte[],string,byte[])void'] | Arc1643Args['tuple']['arc1643_set_document(byte[],string,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1643ParamsFactory.arc1643SetDocument(params))
      return {...result, return: result.return as unknown as (undefined | Arc1643Returns['arc1643_set_document(byte[],string,byte[])void'])}
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc1643_get_document(byte[])(string,byte[],uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1643GetDocument: async (params: CallParams<Arc1643Args['obj']['arc1643_get_document(byte[])(string,byte[],uint64)'] | Arc1643Args['tuple']['arc1643_get_document(byte[])(string,byte[],uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1643ParamsFactory.arc1643GetDocument(params))
      return {...result, return: result.return as unknown as (undefined | Arc1643Returns['arc1643_get_document(byte[])(string,byte[],uint64)'])}
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc1643_remove_document(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1643RemoveDocument: async (params: CallParams<Arc1643Args['obj']['arc1643_remove_document(byte[])void'] | Arc1643Args['tuple']['arc1643_remove_document(byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1643ParamsFactory.arc1643RemoveDocument(params))
      return {...result, return: result.return as unknown as (undefined | Arc1643Returns['arc1643_remove_document(byte[])void'])}
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc1643_get_all_documents()byte[][]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1643GetAllDocuments: async (params: CallParams<Arc1643Args['obj']['arc1643_get_all_documents()byte[][]'] | Arc1643Args['tuple']['arc1643_get_all_documents()byte[][]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1643ParamsFactory.arc1643GetAllDocuments(params))
      return {...result, return: result.return as unknown as (undefined | Arc1643Returns['arc1643_get_all_documents()byte[][]'])}
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc88_owner()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88Owner: async (params: CallParams<Arc1643Args['obj']['arc88_owner()address'] | Arc1643Args['tuple']['arc88_owner()address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1643ParamsFactory.arc88Owner(params))
      return {...result, return: result.return as unknown as (undefined | Arc1643Returns['arc88_owner()address'])}
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc88_is_owner(address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88IsOwner: async (params: CallParams<Arc1643Args['obj']['arc88_is_owner(address)bool'] | Arc1643Args['tuple']['arc88_is_owner(address)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1643ParamsFactory.arc88IsOwner(params))
      return {...result, return: result.return as unknown as (undefined | Arc1643Returns['arc88_is_owner(address)bool'])}
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc88_initialize_owner(address)void` ABI method.
     *
     * Explicit initialization override (creation group recommended). Fails if already initialized.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88InitializeOwner: async (params: CallParams<Arc1643Args['obj']['arc88_initialize_owner(address)void'] | Arc1643Args['tuple']['arc88_initialize_owner(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1643ParamsFactory.arc88InitializeOwner(params))
      return {...result, return: result.return as unknown as (undefined | Arc1643Returns['arc88_initialize_owner(address)void'])}
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc88_transfer_ownership(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88TransferOwnership: async (params: CallParams<Arc1643Args['obj']['arc88_transfer_ownership(address)void'] | Arc1643Args['tuple']['arc88_transfer_ownership(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1643ParamsFactory.arc88TransferOwnership(params))
      return {...result, return: result.return as unknown as (undefined | Arc1643Returns['arc88_transfer_ownership(address)void'])}
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc88_renounce_ownership()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88RenounceOwnership: async (params: CallParams<Arc1643Args['obj']['arc88_renounce_ownership()void'] | Arc1643Args['tuple']['arc88_renounce_ownership()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1643ParamsFactory.arc88RenounceOwnership(params))
      return {...result, return: result.return as unknown as (undefined | Arc1643Returns['arc88_renounce_ownership()void'])}
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc88_transfer_ownership_request(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88TransferOwnershipRequest: async (params: CallParams<Arc1643Args['obj']['arc88_transfer_ownership_request(address)void'] | Arc1643Args['tuple']['arc88_transfer_ownership_request(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1643ParamsFactory.arc88TransferOwnershipRequest(params))
      return {...result, return: result.return as unknown as (undefined | Arc1643Returns['arc88_transfer_ownership_request(address)void'])}
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc88_accept_ownership()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88AcceptOwnership: async (params: CallParams<Arc1643Args['obj']['arc88_accept_ownership()void'] | Arc1643Args['tuple']['arc88_accept_ownership()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1643ParamsFactory.arc88AcceptOwnership(params))
      return {...result, return: result.return as unknown as (undefined | Arc1643Returns['arc88_accept_ownership()void'])}
    },

    /**
     * Makes a call to the Arc1643 smart contract using the `arc88_cancel_ownership_request()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88CancelOwnershipRequest: async (params: CallParams<Arc1643Args['obj']['arc88_cancel_ownership_request()void'] | Arc1643Args['tuple']['arc88_cancel_ownership_request()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1643ParamsFactory.arc88CancelOwnershipRequest(params))
      return {...result, return: result.return as unknown as (undefined | Arc1643Returns['arc88_cancel_ownership_request()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Arc1643Client(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the Arc1643 smart contract using the `arc1643_get_document(byte[])(string,byte[],uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc1643GetDocument(params: CallParams<Arc1643Args['obj']['arc1643_get_document(byte[])(string,byte[],uint64)'] | Arc1643Args['tuple']['arc1643_get_document(byte[])(string,byte[],uint64)']>) {
    const result = await this.appClient.send.call(Arc1643ParamsFactory.arc1643GetDocument(params))
    return result.return as unknown as Arc1643Returns['arc1643_get_document(byte[])(string,byte[],uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1643 smart contract using the `arc1643_get_all_documents()byte[][]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc1643GetAllDocuments(params: CallParams<Arc1643Args['obj']['arc1643_get_all_documents()byte[][]'] | Arc1643Args['tuple']['arc1643_get_all_documents()byte[][]']> = {args: []}) {
    const result = await this.appClient.send.call(Arc1643ParamsFactory.arc1643GetAllDocuments(params))
    return result.return as unknown as Arc1643Returns['arc1643_get_all_documents()byte[][]']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1643 smart contract using the `arc88_owner()address` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc88Owner(params: CallParams<Arc1643Args['obj']['arc88_owner()address'] | Arc1643Args['tuple']['arc88_owner()address']> = {args: []}) {
    const result = await this.appClient.send.call(Arc1643ParamsFactory.arc88Owner(params))
    return result.return as unknown as Arc1643Returns['arc88_owner()address']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1643 smart contract using the `arc88_is_owner(address)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc88IsOwner(params: CallParams<Arc1643Args['obj']['arc88_is_owner(address)bool'] | Arc1643Args['tuple']['arc88_is_owner(address)bool']>) {
    const result = await this.appClient.send.call(Arc1643ParamsFactory.arc88IsOwner(params))
    return result.return as unknown as Arc1643Returns['arc88_is_owner(address)bool']
  }

  /**
   * Methods to access state for the current Arc1643 app
   */
  state = {
    /**
     * Methods to access global state for the current Arc1643 app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          owner: result.owner,
          pendingOwner: result.pendingOwner,
          initialized: result.initialized,
        }
      },
      /**
       * Get the current value of the owner key in global state
       */
      owner: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("owner")) as string | undefined },
      /**
       * Get the current value of the pendingOwner key in global state
       */
      pendingOwner: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("pendingOwner")) as string | undefined },
      /**
       * Get the current value of the initialized key in global state
       */
      initialized: async (): Promise<number | undefined> => { return (await this.appClient.state.global.getValue("initialized")) as number | undefined },
    },
    /**
     * Methods to access box state for the current Arc1643 app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          documentKeys: result.documentKeys,
        }
      },
      /**
       * Get the current value of the documentKeys key in box state
       */
      documentKeys: async (): Promise<Uint8Array[] | undefined> => { return (await this.appClient.state.box.getValue("documentKeys")) as Uint8Array[] | undefined },
      /**
       * Get values from the documents map in box state
       */
      documents: {
        /**
         * Get all current values of the documents map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, Arc1643DocumentRecord>> => { return (await this.appClient.state.box.getMap("documents")) as Map<Uint8Array, Arc1643DocumentRecord> },
        /**
         * Get a current value of the documents map by key from box state
         */
        value: async (key: Uint8Array): Promise<Arc1643DocumentRecord | undefined> => { return await this.appClient.state.box.getMapValue("documents", key) as Arc1643DocumentRecord | undefined },
      },
    },
  }

  public newGroup(): Arc1643Composer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a arc1643_set_document(byte[],string,byte[])void method call against the Arc1643 contract
       */
      arc1643SetDocument(params: CallParams<Arc1643Args['obj']['arc1643_set_document(byte[],string,byte[])void'] | Arc1643Args['tuple']['arc1643_set_document(byte[],string,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1643SetDocument(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1643_get_document(byte[])(string,byte[],uint64) method call against the Arc1643 contract
       */
      arc1643GetDocument(params: CallParams<Arc1643Args['obj']['arc1643_get_document(byte[])(string,byte[],uint64)'] | Arc1643Args['tuple']['arc1643_get_document(byte[])(string,byte[],uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1643GetDocument(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1643_get_document(byte[])(string,byte[],uint64)', v))
        return this
      },
      /**
       * Add a arc1643_remove_document(byte[])void method call against the Arc1643 contract
       */
      arc1643RemoveDocument(params: CallParams<Arc1643Args['obj']['arc1643_remove_document(byte[])void'] | Arc1643Args['tuple']['arc1643_remove_document(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1643RemoveDocument(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1643_get_all_documents()byte[][] method call against the Arc1643 contract
       */
      arc1643GetAllDocuments(params: CallParams<Arc1643Args['obj']['arc1643_get_all_documents()byte[][]'] | Arc1643Args['tuple']['arc1643_get_all_documents()byte[][]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1643GetAllDocuments(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1643_get_all_documents()byte[][]', v))
        return this
      },
      /**
       * Add a arc88_owner()address method call against the Arc1643 contract
       */
      arc88Owner(params: CallParams<Arc1643Args['obj']['arc88_owner()address'] | Arc1643Args['tuple']['arc88_owner()address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88Owner(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc88_owner()address', v))
        return this
      },
      /**
       * Add a arc88_is_owner(address)bool method call against the Arc1643 contract
       */
      arc88IsOwner(params: CallParams<Arc1643Args['obj']['arc88_is_owner(address)bool'] | Arc1643Args['tuple']['arc88_is_owner(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88IsOwner(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc88_is_owner(address)bool', v))
        return this
      },
      /**
       * Add a arc88_initialize_owner(address)void method call against the Arc1643 contract
       */
      arc88InitializeOwner(params: CallParams<Arc1643Args['obj']['arc88_initialize_owner(address)void'] | Arc1643Args['tuple']['arc88_initialize_owner(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88InitializeOwner(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc88_transfer_ownership(address)void method call against the Arc1643 contract
       */
      arc88TransferOwnership(params: CallParams<Arc1643Args['obj']['arc88_transfer_ownership(address)void'] | Arc1643Args['tuple']['arc88_transfer_ownership(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88TransferOwnership(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc88_renounce_ownership()void method call against the Arc1643 contract
       */
      arc88RenounceOwnership(params: CallParams<Arc1643Args['obj']['arc88_renounce_ownership()void'] | Arc1643Args['tuple']['arc88_renounce_ownership()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88RenounceOwnership(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc88_transfer_ownership_request(address)void method call against the Arc1643 contract
       */
      arc88TransferOwnershipRequest(params: CallParams<Arc1643Args['obj']['arc88_transfer_ownership_request(address)void'] | Arc1643Args['tuple']['arc88_transfer_ownership_request(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88TransferOwnershipRequest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc88_accept_ownership()void method call against the Arc1643 contract
       */
      arc88AcceptOwnership(params: CallParams<Arc1643Args['obj']['arc88_accept_ownership()void'] | Arc1643Args['tuple']['arc88_accept_ownership()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88AcceptOwnership(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc88_cancel_ownership_request()void method call against the Arc1643 contract
       */
      arc88CancelOwnershipRequest(params: CallParams<Arc1643Args['obj']['arc88_cancel_ownership_request()void'] | Arc1643Args['tuple']['arc88_cancel_ownership_request()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88CancelOwnershipRequest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the Arc1643 contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as Arc1643Composer
  }
}
export type Arc1643Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the arc1643_set_document(byte[],string,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1643SetDocument(params?: CallParams<Arc1643Args['obj']['arc1643_set_document(byte[],string,byte[])void'] | Arc1643Args['tuple']['arc1643_set_document(byte[],string,byte[])void']>): Arc1643Composer<[...TReturns, Arc1643Returns['arc1643_set_document(byte[],string,byte[])void'] | undefined]>

  /**
   * Calls the arc1643_get_document(byte[])(string,byte[],uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1643GetDocument(params?: CallParams<Arc1643Args['obj']['arc1643_get_document(byte[])(string,byte[],uint64)'] | Arc1643Args['tuple']['arc1643_get_document(byte[])(string,byte[],uint64)']>): Arc1643Composer<[...TReturns, Arc1643Returns['arc1643_get_document(byte[])(string,byte[],uint64)'] | undefined]>

  /**
   * Calls the arc1643_remove_document(byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1643RemoveDocument(params?: CallParams<Arc1643Args['obj']['arc1643_remove_document(byte[])void'] | Arc1643Args['tuple']['arc1643_remove_document(byte[])void']>): Arc1643Composer<[...TReturns, Arc1643Returns['arc1643_remove_document(byte[])void'] | undefined]>

  /**
   * Calls the arc1643_get_all_documents()byte[][] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1643GetAllDocuments(params?: CallParams<Arc1643Args['obj']['arc1643_get_all_documents()byte[][]'] | Arc1643Args['tuple']['arc1643_get_all_documents()byte[][]']>): Arc1643Composer<[...TReturns, Arc1643Returns['arc1643_get_all_documents()byte[][]'] | undefined]>

  /**
   * Calls the arc88_owner()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88Owner(params?: CallParams<Arc1643Args['obj']['arc88_owner()address'] | Arc1643Args['tuple']['arc88_owner()address']>): Arc1643Composer<[...TReturns, Arc1643Returns['arc88_owner()address'] | undefined]>

  /**
   * Calls the arc88_is_owner(address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88IsOwner(params?: CallParams<Arc1643Args['obj']['arc88_is_owner(address)bool'] | Arc1643Args['tuple']['arc88_is_owner(address)bool']>): Arc1643Composer<[...TReturns, Arc1643Returns['arc88_is_owner(address)bool'] | undefined]>

  /**
   * Calls the arc88_initialize_owner(address)void ABI method.
   *
   * Explicit initialization override (creation group recommended). Fails if already initialized.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88InitializeOwner(params?: CallParams<Arc1643Args['obj']['arc88_initialize_owner(address)void'] | Arc1643Args['tuple']['arc88_initialize_owner(address)void']>): Arc1643Composer<[...TReturns, Arc1643Returns['arc88_initialize_owner(address)void'] | undefined]>

  /**
   * Calls the arc88_transfer_ownership(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88TransferOwnership(params?: CallParams<Arc1643Args['obj']['arc88_transfer_ownership(address)void'] | Arc1643Args['tuple']['arc88_transfer_ownership(address)void']>): Arc1643Composer<[...TReturns, Arc1643Returns['arc88_transfer_ownership(address)void'] | undefined]>

  /**
   * Calls the arc88_renounce_ownership()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88RenounceOwnership(params?: CallParams<Arc1643Args['obj']['arc88_renounce_ownership()void'] | Arc1643Args['tuple']['arc88_renounce_ownership()void']>): Arc1643Composer<[...TReturns, Arc1643Returns['arc88_renounce_ownership()void'] | undefined]>

  /**
   * Calls the arc88_transfer_ownership_request(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88TransferOwnershipRequest(params?: CallParams<Arc1643Args['obj']['arc88_transfer_ownership_request(address)void'] | Arc1643Args['tuple']['arc88_transfer_ownership_request(address)void']>): Arc1643Composer<[...TReturns, Arc1643Returns['arc88_transfer_ownership_request(address)void'] | undefined]>

  /**
   * Calls the arc88_accept_ownership()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88AcceptOwnership(params?: CallParams<Arc1643Args['obj']['arc88_accept_ownership()void'] | Arc1643Args['tuple']['arc88_accept_ownership()void']>): Arc1643Composer<[...TReturns, Arc1643Returns['arc88_accept_ownership()void'] | undefined]>

  /**
   * Calls the arc88_cancel_ownership_request()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88CancelOwnershipRequest(params?: CallParams<Arc1643Args['obj']['arc88_cancel_ownership_request()void'] | Arc1643Args['tuple']['arc88_cancel_ownership_request()void']>): Arc1643Composer<[...TReturns, Arc1643Returns['arc88_cancel_ownership_request()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Arc1643 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Arc1643Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Arc1643Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Arc1643ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<Arc1643ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<Arc1643ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Arc1643ComposerResults<TReturns>>
}
export type Arc1643ComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

