/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"Arc1410","structs":{"ApprovalStruct":[{"name":"approvalAmount","type":"uint256"},{"name":"owner","type":"address"},{"name":"spender","type":"address"}],"arc1410_HoldingPartitionsPaginatedKey":[{"name":"holder","type":"address"},{"name":"page","type":"uint64"}],"arc1410_OperatorKey":[{"name":"holder","type":"address"},{"name":"operator","type":"address"},{"name":"partition","type":"address"}],"arc1410_OperatorPortionKey":[{"name":"holder","type":"address"},{"name":"operator","type":"address"},{"name":"partition","type":"address"}],"arc1410_PartitionKey":[{"name":"holder","type":"address"},{"name":"partition","type":"address"}],"arc1410_can_transfer_by_partition_return":[{"name":"code","type":"byte"},{"name":"status","type":"string"},{"name":"receiverPartition","type":"address"}],"arc1410_partition_issue":[{"name":"to","type":"address"},{"name":"partition","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"byte[]"}],"arc1410_partition_redeem":[{"name":"from","type":"address"},{"name":"partition","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"byte[]"}],"arc1410_partition_transfer":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"partition","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"byte[]"}]},"methods":[{"name":"arc1410_balance_of_partition","args":[{"type":"address","name":"holder"},{"type":"address","name":"partition"}],"returns":{"type":"uint256"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"arc200_transfer","args":[{"type":"address","name":"to"},{"type":"uint256","name":"value"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"Transfer","args":[{"type":"(address,address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_transfer"}]},{"name":"arc200_Transfer","args":[{"type":"address","name":"from"},{"type":"address","name":"to"},{"type":"uint256","name":"value"}]}],"recommendations":{}},{"name":"arc1410_transfer_by_partition","args":[{"type":"address","name":"partition"},{"type":"address","name":"to"},{"type":"uint256","name":"amount"},{"type":"byte[]","name":"data"}],"returns":{"type":"address"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Transfer an amount of tokens from partition to receiver. Sender must be msg.sender or authorized operator.","events":[{"name":"Transfer","args":[{"type":"(address,address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_transfer"}]}],"recommendations":{}},{"name":"arc1410_partitions_of","args":[{"type":"address","name":"holder"},{"type":"uint64","name":"page"}],"returns":{"type":"address[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc1410_is_operator","args":[{"type":"address","name":"holder"},{"type":"address","name":"operator"},{"type":"address","name":"partition"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"arc1410_authorize_operator","args":[{"type":"address","name":"holder"},{"type":"address","name":"operator"},{"type":"address","name":"partition"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc1410_revoke_operator","args":[{"type":"address","name":"holder"},{"type":"address","name":"operator"},{"type":"address","name":"partition"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc1410_operator_transfer_by_partition","args":[{"type":"address","name":"from"},{"type":"address","name":"partition"},{"type":"address","name":"to"},{"type":"uint256","name":"amount"},{"type":"byte[]","name":"data"}],"returns":{"type":"address"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"Transfer","args":[{"type":"(address,address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_transfer"}]}],"recommendations":{}},{"name":"arc1410_can_transfer_by_partition","args":[{"type":"address","name":"from"},{"type":"address","name":"partition"},{"type":"address","name":"to"},{"type":"uint256","name":"amount"},{"type":"byte[]","name":"data"}],"returns":{"type":"(byte,string,address)","struct":"arc1410_can_transfer_by_partition_return"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc1410_authorize_operator_by_portion","args":[{"type":"address","name":"holder"},{"type":"address","name":"operator"},{"type":"address","name":"partition"},{"type":"uint256","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc1410_is_operator_by_portion","args":[{"type":"address","name":"holder"},{"type":"address","name":"operator"},{"type":"address","name":"partition"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"arc1410_issue_by_partition","args":[{"type":"address","name":"to"},{"type":"address","name":"partition"},{"type":"uint256","name":"amount"},{"type":"byte[]","name":"data"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"Issue","args":[{"type":"(address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_issue"}]}],"recommendations":{}},{"name":"arc1410_redeem_by_partition","args":[{"type":"address","name":"from"},{"type":"address","name":"partition"},{"type":"uint256","name":"amount"},{"type":"byte[]","name":"data"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"Redeem","args":[{"type":"(address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_redeem"}]}],"recommendations":{}},{"name":"bootstrap","args":[{"type":"byte[]","name":"name"},{"type":"byte[]","name":"symbol"},{"type":"uint8","name":"decimals"},{"type":"uint256","name":"totalSupply"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"arc200_Transfer","args":[{"type":"address","name":"from"},{"type":"address","name":"to"},{"type":"uint256","name":"value"}]}],"recommendations":{}},{"name":"arc200_name","args":[],"returns":{"type":"byte[32]","desc":"The name of the token"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Returns the name of the token","events":[],"recommendations":{}},{"name":"arc200_symbol","args":[],"returns":{"type":"byte[8]","desc":"The symbol of the token"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Returns the symbol of the token","events":[],"recommendations":{}},{"name":"arc200_decimals","args":[],"returns":{"type":"uint8","desc":"The decimals of the token"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Returns the decimals of the token","events":[],"recommendations":{}},{"name":"arc200_totalSupply","args":[],"returns":{"type":"uint256","desc":"The total supply of the token"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Returns the total supply of the token","events":[],"recommendations":{}},{"name":"arc200_balanceOf","args":[{"type":"address","name":"owner","desc":"The address of the owner of the token"}],"returns":{"type":"uint256","desc":"The current balance of the holder of the token"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Returns the current balance of the owner of the token","events":[],"recommendations":{}},{"name":"arc200_transferFrom","args":[{"type":"address","name":"from","desc":"The source of the transfer"},{"type":"address","name":"to","desc":"The destination of the transfer"},{"type":"uint256","name":"value","desc":"Amount of tokens to transfer"}],"returns":{"type":"bool","desc":"Success"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Transfers tokens from source to destination as approved spender","events":[{"name":"arc200_Approval","args":[{"type":"address","name":"owner"},{"type":"address","name":"spender"},{"type":"uint256","name":"value"}]},{"name":"arc200_Transfer","args":[{"type":"address","name":"from"},{"type":"address","name":"to"},{"type":"uint256","name":"value"}]}],"recommendations":{}},{"name":"arc200_approve","args":[{"type":"address","name":"spender","desc":"Who is allowed to take tokens on owner's behalf"},{"type":"uint256","name":"value","desc":"Amount of tokens to be taken by spender"}],"returns":{"type":"bool","desc":"Success"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Approve spender for a token","events":[{"name":"arc200_Approval","args":[{"type":"address","name":"owner"},{"type":"address","name":"spender"},{"type":"uint256","name":"value"}]}],"recommendations":{}},{"name":"arc200_allowance","args":[{"type":"address","name":"owner","desc":"Owner's account"},{"type":"address","name":"spender","desc":"Who is allowed to take tokens on owner's behalf"}],"returns":{"type":"uint256","desc":"The remaining allowance"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Returns the current allowance of the spender of the tokens of the owner","events":[],"recommendations":{}},{"name":"arc88_owner","args":[],"returns":{"type":"address"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"arc88_is_owner","args":[{"type":"address","name":"query"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"arc88_initialize_owner","args":[{"type":"address","name":"new_owner"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Explicit initialization override (creation group recommended). Fails if already initialized.","events":[],"recommendations":{}},{"name":"arc88_transfer_ownership","args":[{"type":"address","name":"new_owner"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"arc88_OwnershipTransferred","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"new_owner"}]}],"recommendations":{}},{"name":"arc88_renounce_ownership","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"arc88_OwnershipRenounced","args":[{"type":"address","name":"previous_owner"}]}],"recommendations":{}},{"name":"arc88_transfer_ownership_request","args":[{"type":"address","name":"pending"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"arc88_OwnershipTransferRequested","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"pending_owner"}]}],"recommendations":{}},{"name":"arc88_accept_ownership","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"arc88_OwnershipTransferAccepted","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"new_owner"}]},{"name":"arc88_OwnershipTransferred","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"new_owner"}]}],"recommendations":{}},{"name":"arc88_cancel_ownership_request","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":7},"local":{"ints":0,"bytes":0}},"keys":{"global":{"name":{"keyType":"AVMString","valueType":"byte[]","key":"bg==","desc":"Name of the asset. Max 32 bytes"},"symbol":{"keyType":"AVMString","valueType":"byte[]","key":"cw==","desc":"Symbol of the asset. Max 8 bytes"},"decimals":{"keyType":"AVMString","valueType":"uint8","key":"ZA==","desc":"Decimals of the asset. Recommended is 6 decimal places."},"totalSupply":{"keyType":"AVMString","valueType":"uint256","key":"dA==","desc":"Minted supply"},"owner":{"keyType":"AVMString","valueType":"address","key":"YXJjODhfbw=="},"pendingOwner":{"keyType":"AVMString","valueType":"address","key":"YXJjODhfcG8="},"initialized":{"keyType":"AVMString","valueType":"byte","key":"YXJjODhfb2k="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"partitions":{"keyType":"arc1410_PartitionKey","valueType":"uint256","prefix":"cA=="},"holderPartitionsCurrentPage":{"keyType":"address","valueType":"uint64","prefix":"aHBfcA=="},"holderPartitionsAddresses":{"keyType":"arc1410_HoldingPartitionsPaginatedKey","valueType":"address[]","prefix":"aHBfYQ=="},"operators":{"keyType":"arc1410_OperatorKey","valueType":"byte","prefix":"b3A="},"operatorPortionAllowances":{"keyType":"arc1410_OperatorPortionKey","valueType":"uint256","prefix":"b3Bh"},"balances":{"keyType":"address","valueType":"uint256","prefix":"Yg=="},"approvals":{"keyType":"byte[32]","valueType":"ApprovalStruct","prefix":"YQ=="}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[991,1072,1121,1153,1277,1418,1613,1789,1852,1910,1925,2041,2129,2212,2266,2304,2388,2395,2426,2439,2732,2864],"errorMessage":"Box must have value"},{"pc":[1878,2865],"errorMessage":"Index access is out of bounds"},{"pc":[2434],"errorMessage":"Insufficient balance"},{"pc":[2753],"errorMessage":"Insufficient balance at the sender account"},{"pc":[2392],"errorMessage":"Insufficient partition balance"},{"pc":[2017,2234,2371],"errorMessage":"Invalid amount"},{"pc":[2518],"errorMessage":"Name of the asset must be longer or equal to 1 character"},{"pc":[2521],"errorMessage":"Name of the asset must be shorter or equal to 32 characters"},{"pc":[1304],"errorMessage":"Not authorized operator"},{"pc":[355,367,379,394,406,421,436,455,471,493,515,540,559,575,591,607,623,651,675,699,724,748,779,810,831,852,877,899,927,949],"errorMessage":"OnCompletion is not NoOp"},{"pc":[2510],"errorMessage":"Only deployer of this smart contract can call bootstrap method"},{"pc":[1178],"errorMessage":"Only holder can authorize"},{"pc":[2151],"errorMessage":"Only holder can authorize portion"},{"pc":[1203],"errorMessage":"Only holder can revoke"},{"pc":[2385],"errorMessage":"Partition balance missing"},{"pc":[1282],"errorMessage":"Portion allowance exceeded"},{"pc":[2529],"errorMessage":"Symbol of the asset must be longer or equal to 1 character"},{"pc":[2532],"errorMessage":"Symbol of the asset must be shorter or equal to 8 characters"},{"pc":[2540],"errorMessage":"This method can be called only once"},{"pc":[3028],"errorMessage":"already_initialized"},{"pc":[976],"errorMessage":"can only call when creating"},{"pc":[358,370,382,397,409,424,439,458,474,496,518,543,562,578,594,610,626,654,678,702,727,751,782,813,834,855,880,902,930,952],"errorMessage":"can only call when not creating"},{"pc":[2324,2459,2594,2609,2624,2630,2929,2958,2980,2992,3019,3059,3070,3092,3098,3123,3144,3157,3187,3195,3230],"errorMessage":"check GlobalState exists"},{"pc":[2657],"errorMessage":"insufficient approval"},{"pc":[2602,2617,2834],"errorMessage":"invalid size"},{"pc":[3061,3094,3125,3232],"errorMessage":"not_owner"},{"pc":[3180,3191],"errorMessage":"not_pending_owner"},{"pc":[1293,2049,2137,2274,2312,2332,2403,2447,2467,2665,2771,2794],"errorMessage":"overflow"},{"pc":[3148],"errorMessage":"pending_transfer_exists"},{"pc":[3033,3066,3130],"errorMessage":"zero_address_not_allowed"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxIDMyIDgKICAgIGJ5dGVjYmxvY2sgMHgxNTFmN2M3NSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAgImFyYzg4X28iICJwIiAweDgwICJ0IiAiYXJjODhfcG8iIDB4MDAgImIiICJhcmM4OF9vaSIgImhwX2EiICJvcCIgIm9wYSIgMHgwMSAweDAwMDEgMHgwMDAyIDB4MDAwMCAweDAwMDAwMDAwMDAwMDAwMDAgMHgwMDYyIDB4Nzk4M2MzNWMgMHg0MzU1ZDJhZAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo1NgogICAgLy8gZXhwb3J0IGNsYXNzIEFyYzE0MTAgZXh0ZW5kcyBBcmMyMDAgewogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDM3CiAgICBwdXNoYnl0ZXNzIDB4MzVmODEzNWYgMHhkYTcwMjViOSAweDNmMjU2NzEzIDB4OTViNGY5ZTMgMHg4MGNjNDlhYiAweDA3OTYyMTY1IDB4ZTc4OTYxZGEgMHhmZDk0ODBkNyAweGIxYjFkNjlhIDB4YzFiZWQ3ODkgMHgzYmZlMTgzMyAweDU5OWNkMWE1IDB4MjIwZmNmOTggMHg5NzUzODJlMiAweDY1N2QxM2VjIDB4YjZhZTFhMjUgMHg4NGVjMTNkNSAweGVjOTk2MDQxIDB4ODJlNTczYzQgMHg0YTk2OGY4ZiAweGI1NDIyMTI1IDB4YmJiMzE5ZjMgMHgwNzAyNjU0ZSAweGQwMTU3MjRlIDB4MDI5ZmVjYzAgMHg3MzQ5MzM0ZSAweGRiN2M4MmVmIDB4ZmQyYzJjNmUgMHg0MmE1ZjA2NSAweGFkNGY2OGVhIC8vIG1ldGhvZCAiYXJjMTQxMF9iYWxhbmNlX29mX3BhcnRpdGlvbihhZGRyZXNzLGFkZHJlc3MpdWludDI1NiIsIG1ldGhvZCAiYXJjMjAwX3RyYW5zZmVyKGFkZHJlc3MsdWludDI1Nilib29sIiwgbWV0aG9kICJhcmMxNDEwX3RyYW5zZmVyX2J5X3BhcnRpdGlvbihhZGRyZXNzLGFkZHJlc3MsdWludDI1NixieXRlW10pYWRkcmVzcyIsIG1ldGhvZCAiYXJjMTQxMF9wYXJ0aXRpb25zX29mKGFkZHJlc3MsdWludDY0KWFkZHJlc3NbXSIsIG1ldGhvZCAiYXJjMTQxMF9pc19vcGVyYXRvcihhZGRyZXNzLGFkZHJlc3MsYWRkcmVzcylib29sIiwgbWV0aG9kICJhcmMxNDEwX2F1dGhvcml6ZV9vcGVyYXRvcihhZGRyZXNzLGFkZHJlc3MsYWRkcmVzcyl2b2lkIiwgbWV0aG9kICJhcmMxNDEwX3Jldm9rZV9vcGVyYXRvcihhZGRyZXNzLGFkZHJlc3MsYWRkcmVzcyl2b2lkIiwgbWV0aG9kICJhcmMxNDEwX29wZXJhdG9yX3RyYW5zZmVyX2J5X3BhcnRpdGlvbihhZGRyZXNzLGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2LGJ5dGVbXSlhZGRyZXNzIiwgbWV0aG9kICJhcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb24oYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MsdWludDI1NixieXRlW10pKGJ5dGUsc3RyaW5nLGFkZHJlc3MpIiwgbWV0aG9kICJhcmMxNDEwX2F1dGhvcml6ZV9vcGVyYXRvcl9ieV9wb3J0aW9uKGFkZHJlc3MsYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpdm9pZCIsIG1ldGhvZCAiYXJjMTQxMF9pc19vcGVyYXRvcl9ieV9wb3J0aW9uKGFkZHJlc3MsYWRkcmVzcyxhZGRyZXNzKWJvb2wiLCBtZXRob2QgImFyYzE0MTBfaXNzdWVfYnlfcGFydGl0aW9uKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2LGJ5dGVbXSl2b2lkIiwgbWV0aG9kICJhcmMxNDEwX3JlZGVlbV9ieV9wYXJ0aXRpb24oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYsYnl0ZVtdKXZvaWQiLCBtZXRob2QgImJvb3RzdHJhcChieXRlW10sYnl0ZVtdLHVpbnQ4LHVpbnQyNTYpYm9vbCIsIG1ldGhvZCAiYXJjMjAwX25hbWUoKWJ5dGVbMzJdIiwgbWV0aG9kICJhcmMyMDBfc3ltYm9sKClieXRlWzhdIiwgbWV0aG9kICJhcmMyMDBfZGVjaW1hbHMoKXVpbnQ4IiwgbWV0aG9kICJhcmMyMDBfdG90YWxTdXBwbHkoKXVpbnQyNTYiLCBtZXRob2QgImFyYzIwMF9iYWxhbmNlT2YoYWRkcmVzcyl1aW50MjU2IiwgbWV0aG9kICJhcmMyMDBfdHJhbnNmZXJGcm9tKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KWJvb2wiLCBtZXRob2QgImFyYzIwMF9hcHByb3ZlKGFkZHJlc3MsdWludDI1Nilib29sIiwgbWV0aG9kICJhcmMyMDBfYWxsb3dhbmNlKGFkZHJlc3MsYWRkcmVzcyl1aW50MjU2IiwgbWV0aG9kICJhcmM4OF9vd25lcigpYWRkcmVzcyIsIG1ldGhvZCAiYXJjODhfaXNfb3duZXIoYWRkcmVzcylib29sIiwgbWV0aG9kICJhcmM4OF9pbml0aWFsaXplX293bmVyKGFkZHJlc3Mpdm9pZCIsIG1ldGhvZCAiYXJjODhfdHJhbnNmZXJfb3duZXJzaGlwKGFkZHJlc3Mpdm9pZCIsIG1ldGhvZCAiYXJjODhfcmVub3VuY2Vfb3duZXJzaGlwKCl2b2lkIiwgbWV0aG9kICJhcmM4OF90cmFuc2Zlcl9vd25lcnNoaXBfcmVxdWVzdChhZGRyZXNzKXZvaWQiLCBtZXRob2QgImFyYzg4X2FjY2VwdF9vd25lcnNoaXAoKXZvaWQiLCBtZXRob2QgImFyYzg4X2NhbmNlbF9vd25lcnNoaXBfcmVxdWVzdCgpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fYXJjMTQxMF9iYWxhbmNlX29mX3BhcnRpdGlvbl9yb3V0ZUA1IG1haW5fYXJjMjAwX3RyYW5zZmVyX3JvdXRlQDYgbWFpbl9hcmMxNDEwX3RyYW5zZmVyX2J5X3BhcnRpdGlvbl9yb3V0ZUA3IG1haW5fYXJjMTQxMF9wYXJ0aXRpb25zX29mX3JvdXRlQDggbWFpbl9hcmMxNDEwX2lzX29wZXJhdG9yX3JvdXRlQDkgbWFpbl9hcmMxNDEwX2F1dGhvcml6ZV9vcGVyYXRvcl9yb3V0ZUAxMCBtYWluX2FyYzE0MTBfcmV2b2tlX29wZXJhdG9yX3JvdXRlQDExIG1haW5fYXJjMTQxMF9vcGVyYXRvcl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fcm91dGVAMTIgbWFpbl9hcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fcm91dGVAMTMgbWFpbl9hcmMxNDEwX2F1dGhvcml6ZV9vcGVyYXRvcl9ieV9wb3J0aW9uX3JvdXRlQDE0IG1haW5fYXJjMTQxMF9pc19vcGVyYXRvcl9ieV9wb3J0aW9uX3JvdXRlQDE1IG1haW5fYXJjMTQxMF9pc3N1ZV9ieV9wYXJ0aXRpb25fcm91dGVAMTYgbWFpbl9hcmMxNDEwX3JlZGVlbV9ieV9wYXJ0aXRpb25fcm91dGVAMTcgbWFpbl9ib290c3RyYXBfcm91dGVAMTggbWFpbl9hcmMyMDBfbmFtZV9yb3V0ZUAxOSBtYWluX2FyYzIwMF9zeW1ib2xfcm91dGVAMjAgbWFpbl9hcmMyMDBfZGVjaW1hbHNfcm91dGVAMjEgbWFpbl9hcmMyMDBfdG90YWxTdXBwbHlfcm91dGVAMjIgbWFpbl9hcmMyMDBfYmFsYW5jZU9mX3JvdXRlQDIzIG1haW5fYXJjMjAwX3RyYW5zZmVyRnJvbV9yb3V0ZUAyNCBtYWluX2FyYzIwMF9hcHByb3ZlX3JvdXRlQDI1IG1haW5fYXJjMjAwX2FsbG93YW5jZV9yb3V0ZUAyNiBtYWluX2FyYzg4X293bmVyX3JvdXRlQDI3IG1haW5fYXJjODhfaXNfb3duZXJfcm91dGVAMjggbWFpbl9hcmM4OF9pbml0aWFsaXplX293bmVyX3JvdXRlQDI5IG1haW5fYXJjODhfdHJhbnNmZXJfb3duZXJzaGlwX3JvdXRlQDMwIG1haW5fYXJjODhfcmVub3VuY2Vfb3duZXJzaGlwX3JvdXRlQDMxIG1haW5fYXJjODhfdHJhbnNmZXJfb3duZXJzaGlwX3JlcXVlc3Rfcm91dGVAMzIgbWFpbl9hcmM4OF9hY2NlcHRfb3duZXJzaGlwX3JvdXRlQDMzIG1haW5fYXJjODhfY2FuY2VsX293bmVyc2hpcF9yZXF1ZXN0X3JvdXRlQDM0CgptYWluX2FmdGVyX2lmX2Vsc2VANDE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjU2CiAgICAvLyBleHBvcnQgY2xhc3MgQXJjMTQxMCBleHRlbmRzIEFyYzIwMCB7CiAgICBpbnRjXzAgLy8gMAogICAgcmV0dXJuCgptYWluX2FyYzg4X2NhbmNlbF9vd25lcnNoaXBfcmVxdWVzdF9yb3V0ZUAzNDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjEwMwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBhcmM4OF9jYW5jZWxfb3duZXJzaGlwX3JlcXVlc3QKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjODhfYWNjZXB0X293bmVyc2hpcF9yb3V0ZUAzMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjkwCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGFyYzg4X2FjY2VwdF9vd25lcnNoaXAKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjODhfdHJhbnNmZXJfb3duZXJzaGlwX3JlcXVlc3Rfcm91dGVAMzI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo3OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo1NgogICAgLy8gZXhwb3J0IGNsYXNzIEFyYzE0MTAgZXh0ZW5kcyBBcmMyMDAgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6NzgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGFyYzg4X3RyYW5zZmVyX293bmVyc2hpcF9yZXF1ZXN0CiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FyYzg4X3Jlbm91bmNlX293bmVyc2hpcF9yb3V0ZUAzMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjY4CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGFyYzg4X3Jlbm91bmNlX293bmVyc2hpcAogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9hcmM4OF90cmFuc2Zlcl9vd25lcnNoaXBfcm91dGVAMzA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo1OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo1NgogICAgLy8gZXhwb3J0IGNsYXNzIEFyYzE0MTAgZXh0ZW5kcyBBcmMyMDAgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6NTgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGFyYzg4X3RyYW5zZmVyX293bmVyc2hpcAogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9hcmM4OF9pbml0aWFsaXplX293bmVyX3JvdXRlQDI5OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6NTAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NTYKICAgIC8vIGV4cG9ydCBjbGFzcyBBcmMxNDEwIGV4dGVuZHMgQXJjMjAwIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjUwCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBhcmM4OF9pbml0aWFsaXplX293bmVyCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FyYzg4X2lzX293bmVyX3JvdXRlQDI4OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6NDEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NTYKICAgIC8vIGV4cG9ydCBjbGFzcyBBcmMxNDEwIGV4dGVuZHMgQXJjMjAwIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjQxCiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgY2FsbHN1YiBhcmM4OF9pc19vd25lcgogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9hcmM4OF9vd25lcl9yb3V0ZUAyNzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjM1CiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGFyYzg4X293bmVyCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FyYzIwMF9hbGxvd2FuY2Vfcm91dGVAMjY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MTc3CiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjU2CiAgICAvLyBleHBvcnQgY2xhc3MgQXJjMTQxMCBleHRlbmRzIEFyYzIwMCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MTc3CiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgY2FsbHN1YiBhcmMyMDBfYWxsb3dhbmNlCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FyYzIwMF9hcHByb3ZlX3JvdXRlQDI1OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjE2NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo1NgogICAgLy8gZXhwb3J0IGNsYXNzIEFyYzE0MTAgZXh0ZW5kcyBBcmMyMDAgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjE2NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgYXJjMjAwX2FwcHJvdmUKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjMjAwX3RyYW5zZmVyRnJvbV9yb3V0ZUAyNDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoxNDgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NTYKICAgIC8vIGV4cG9ydCBjbGFzcyBBcmMxNDEwIGV4dGVuZHMgQXJjMjAwIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoxNDgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGFyYzIwMF90cmFuc2ZlckZyb20KICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjMjAwX2JhbGFuY2VPZl9yb3V0ZUAyMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoxMjMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NTYKICAgIC8vIGV4cG9ydCBjbGFzcyBBcmMxNDEwIGV4dGVuZHMgQXJjMjAwIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoxMjMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICBjYWxsc3ViIGFyYzIwMF9iYWxhbmNlT2YKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjMjAwX3RvdGFsU3VwcGx5X3JvdXRlQDIyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjExMgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBhcmMyMDBfdG90YWxTdXBwbHkKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjMjAwX2RlY2ltYWxzX3JvdXRlQDIxOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjEwMgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBhcmMyMDBfZGVjaW1hbHMKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjMjAwX3N5bWJvbF9yb3V0ZUAyMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo5MgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBhcmMyMDBfc3ltYm9sCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FyYzIwMF9uYW1lX3JvdXRlQDE5OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjgyCiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGFyYzIwMF9uYW1lCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2Jvb3RzdHJhcF9yb3V0ZUAxODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo1NgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo1NgogICAgLy8gZXhwb3J0IGNsYXNzIEFyYzE0MTAgZXh0ZW5kcyBBcmMyMDAgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjU2CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBib290c3RyYXAKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjMTQxMF9yZWRlZW1fYnlfcGFydGl0aW9uX3JvdXRlQDE3OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo0MDcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NTYKICAgIC8vIGV4cG9ydCBjbGFzcyBBcmMxNDEwIGV4dGVuZHMgQXJjMjAwIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NDA3CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBhcmMxNDEwX3JlZGVlbV9ieV9wYXJ0aXRpb24KICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjMTQxMF9pc3N1ZV9ieV9wYXJ0aXRpb25fcm91dGVAMTY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjM4MwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo1NgogICAgLy8gZXhwb3J0IGNsYXNzIEFyYzE0MTAgZXh0ZW5kcyBBcmMyMDAgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czozODMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGFyYzE0MTBfaXNzdWVfYnlfcGFydGl0aW9uCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FyYzE0MTBfaXNfb3BlcmF0b3JfYnlfcG9ydGlvbl9yb3V0ZUAxNToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MzcxCiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjU2CiAgICAvLyBleHBvcnQgY2xhc3MgQXJjMTQxMCBleHRlbmRzIEFyYzIwMCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjM3MQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIGNhbGxzdWIgYXJjMTQxMF9pc19vcGVyYXRvcl9ieV9wb3J0aW9uCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FyYzE0MTBfYXV0aG9yaXplX29wZXJhdG9yX2J5X3BvcnRpb25fcm91dGVAMTQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjM1OQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo1NgogICAgLy8gZXhwb3J0IGNsYXNzIEFyYzE0MTAgZXh0ZW5kcyBBcmMyMDAgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czozNTkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGFyYzE0MTBfYXV0aG9yaXplX29wZXJhdG9yX2J5X3BvcnRpb24KICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjMTQxMF9jYW5fdHJhbnNmZXJfYnlfcGFydGl0aW9uX3JvdXRlQDEzOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxNzQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NTYKICAgIC8vIGV4cG9ydCBjbGFzcyBBcmMxNDEwIGV4dGVuZHMgQXJjMjAwIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTc0CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBhcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb24KICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjMTQxMF9vcGVyYXRvcl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fcm91dGVAMTI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjE0NAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo1NgogICAgLy8gZXhwb3J0IGNsYXNzIEFyYzE0MTAgZXh0ZW5kcyBBcmMyMDAgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxNDQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGFyYzE0MTBfb3BlcmF0b3JfdHJhbnNmZXJfYnlfcGFydGl0aW9uCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FyYzE0MTBfcmV2b2tlX29wZXJhdG9yX3JvdXRlQDExOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxMzUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NTYKICAgIC8vIGV4cG9ydCBjbGFzcyBBcmMxNDEwIGV4dGVuZHMgQXJjMjAwIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTM1CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBhcmMxNDEwX3Jldm9rZV9vcGVyYXRvcgogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9hcmMxNDEwX2F1dGhvcml6ZV9vcGVyYXRvcl9yb3V0ZUAxMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTI4CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjU2CiAgICAvLyBleHBvcnQgY2xhc3MgQXJjMTQxMCBleHRlbmRzIEFyYzIwMCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjEyOAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgYXJjMTQxMF9hdXRob3JpemVfb3BlcmF0b3IKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjMTQxMF9pc19vcGVyYXRvcl9yb3V0ZUA5OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxMTQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NTYKICAgIC8vIGV4cG9ydCBjbGFzcyBBcmMxNDEwIGV4dGVuZHMgQXJjMjAwIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTE0CiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgY2FsbHN1YiBhcmMxNDEwX2lzX29wZXJhdG9yCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FyYzE0MTBfcGFydGl0aW9uc19vZl9yb3V0ZUA4OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxMDcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NTYKICAgIC8vIGV4cG9ydCBjbGFzcyBBcmMxNDEwIGV4dGVuZHMgQXJjMjAwIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTA3CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBhcmMxNDEwX3BhcnRpdGlvbnNfb2YKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjMTQxMF90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fcm91dGVANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6OTMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NTYKICAgIC8vIGV4cG9ydCBjbGFzcyBBcmMxNDEwIGV4dGVuZHMgQXJjMjAwIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6OTMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGFyYzE0MTBfdHJhbnNmZXJfYnlfcGFydGl0aW9uCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FyYzIwMF90cmFuc2Zlcl9yb3V0ZUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo3OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo1NgogICAgLy8gZXhwb3J0IGNsYXNzIEFyYzE0MTAgZXh0ZW5kcyBBcmMyMDAgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo3OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgYXJjMjAwX3RyYW5zZmVyCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FyYzE0MTBfYmFsYW5jZV9vZl9wYXJ0aXRpb25fcm91dGVANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NjkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NTYKICAgIC8vIGV4cG9ydCBjbGFzcyBBcmMxNDEwIGV4dGVuZHMgQXJjMjAwIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NjkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICBjYWxsc3ViIGFyYzE0MTBfYmFsYW5jZV9vZl9wYXJ0aXRpb24KICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDM3OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo1NgogICAgLy8gZXhwb3J0IGNsYXNzIEFyYzE0MTAgZXh0ZW5kcyBBcmMyMDAgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUA0MQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjpBcmMxNDEwLmFyYzE0MTBfYmFsYW5jZV9vZl9wYXJ0aXRpb24oaG9sZGVyOiBieXRlcywgcGFydGl0aW9uOiBieXRlcykgLT4gYnl0ZXM6CmFyYzE0MTBfYmFsYW5jZV9vZl9wYXJ0aXRpb246CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjY5LTcwCiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgLy8gcHVibGljIGFyYzE0MTBfYmFsYW5jZV9vZl9wYXJ0aXRpb24oaG9sZGVyOiBhcmM0LkFkZHJlc3MsIHBhcnRpdGlvbjogYXJjNC5BZGRyZXNzKTogYXJjNC5VaW50TjI1NiB7CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NzEtNzQKICAgIC8vIGNvbnN0IGtleSA9IG5ldyBhcmMxNDEwX1BhcnRpdGlvbktleSh7CiAgICAvLyAgIGhvbGRlcjogaG9sZGVyLAogICAgLy8gICBwYXJ0aXRpb246IHBhcnRpdGlvbiwKICAgIC8vIH0pCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjU3CiAgICAvLyBwdWJsaWMgcGFydGl0aW9ucyA9IEJveE1hcDxhcmMxNDEwX1BhcnRpdGlvbktleSwgYXJjNC5VaW50TjI1Nj4oeyBrZXlQcmVmaXg6ICdwJyB9KQogICAgYnl0ZWNfMyAvLyAicCIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo3NQogICAgLy8gcmV0dXJuIHRoaXMucGFydGl0aW9ucyhrZXkpLnZhbHVlCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo6QXJjMTQxMC5hcmMyMDBfdHJhbnNmZXIodG86IGJ5dGVzLCB2YWx1ZTogYnl0ZXMpIC0+IGJ5dGVzOgphcmMyMDBfdHJhbnNmZXI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjc4LTc5CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gcHVibGljIG92ZXJyaWRlIGFyYzIwMF90cmFuc2Zlcih0bzogYXJjNC5BZGRyZXNzLCB2YWx1ZTogYXJjNC5VaW50TjI1Nik6IGFyYzQuQm9vbCB7CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6ODEKICAgIC8vIG5ldyBhcmM0LkFkZHJlc3MoVHhuLnNlbmRlciksCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjgyCiAgICAvLyBuZXcgYXJjNC5BZGRyZXNzKCksCiAgICBieXRlY18xIC8vIGFkZHIgQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVk1SEZLUQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo4MC04NwogICAgLy8gdGhpcy5fdHJhbnNmZXJfcGFydGl0aW9uKAogICAgLy8gICBuZXcgYXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpLAogICAgLy8gICBuZXcgYXJjNC5BZGRyZXNzKCksCiAgICAvLyAgIHRvLAogICAgLy8gICBuZXcgYXJjNC5BZGRyZXNzKCksCiAgICAvLyAgIHZhbHVlLAogICAgLy8gICBuZXcgYXJjNC5EeW5hbWljQnl0ZXMoKSwKICAgIC8vICkKICAgIGZyYW1lX2RpZyAtMgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo4NAogICAgLy8gbmV3IGFyYzQuQWRkcmVzcygpLAogICAgYnl0ZWNfMSAvLyBhZGRyIEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFZNUhGS1EKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6ODAtODcKICAgIC8vIHRoaXMuX3RyYW5zZmVyX3BhcnRpdGlvbigKICAgIC8vICAgbmV3IGFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKSwKICAgIC8vICAgbmV3IGFyYzQuQWRkcmVzcygpLAogICAgLy8gICB0bywKICAgIC8vICAgbmV3IGFyYzQuQWRkcmVzcygpLAogICAgLy8gICB2YWx1ZSwKICAgIC8vICAgbmV3IGFyYzQuRHluYW1pY0J5dGVzKCksCiAgICAvLyApCiAgICBmcmFtZV9kaWcgLTEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6ODYKICAgIC8vIG5ldyBhcmM0LkR5bmFtaWNCeXRlcygpLAogICAgYnl0ZWMgMTYgLy8gMHgwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjgwLTg3CiAgICAvLyB0aGlzLl90cmFuc2Zlcl9wYXJ0aXRpb24oCiAgICAvLyAgIG5ldyBhcmM0LkFkZHJlc3MoVHhuLnNlbmRlciksCiAgICAvLyAgIG5ldyBhcmM0LkFkZHJlc3MoKSwKICAgIC8vICAgdG8sCiAgICAvLyAgIG5ldyBhcmM0LkFkZHJlc3MoKSwKICAgIC8vICAgdmFsdWUsCiAgICAvLyAgIG5ldyBhcmM0LkR5bmFtaWNCeXRlcygpLAogICAgLy8gKQogICAgY2FsbHN1YiBfdHJhbnNmZXJfcGFydGl0aW9uCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjg4CiAgICAvLyByZXR1cm4gdGhpcy5fdHJhbnNmZXIobmV3IGFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKSwgdG8sIHZhbHVlKQogICAgdHhuIFNlbmRlcgogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgX3RyYW5zZmVyCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjpBcmMxNDEwLmFyYzE0MTBfdHJhbnNmZXJfYnlfcGFydGl0aW9uKHBhcnRpdGlvbjogYnl0ZXMsIHRvOiBieXRlcywgYW1vdW50OiBieXRlcywgZGF0YTogYnl0ZXMpIC0+IGJ5dGVzOgphcmMxNDEwX3RyYW5zZmVyX2J5X3BhcnRpdGlvbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6OTMtOTkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBwdWJsaWMgYXJjMTQxMF90cmFuc2Zlcl9ieV9wYXJ0aXRpb24oCiAgICAvLyAgIHBhcnRpdGlvbjogYXJjNC5BZGRyZXNzLAogICAgLy8gICB0bzogYXJjNC5BZGRyZXNzLAogICAgLy8gICBhbW91bnQ6IGFyYzQuVWludE4yNTYsCiAgICAvLyAgIGRhdGE6IGFyYzQuRHluYW1pY0J5dGVzLAogICAgLy8gKTogYXJjNC5BZGRyZXNzIHsKICAgIHByb3RvIDQgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxMDAKICAgIC8vIGNvbnN0IHNlbmRlciA9IG5ldyBhcmM0LkFkZHJlc3MoVHhuLnNlbmRlcikKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTAyCiAgICAvLyBsZXQgcmVjZWl2ZXJQYXJ0aXRpb24gPSB0aGlzLl9yZWNlaXZlclBhcnRpdGlvbih0bywgcGFydGl0aW9uKQogICAgZnJhbWVfZGlnIC0zCiAgICBmcmFtZV9kaWcgLTQKICAgIGNhbGxzdWIgX3JlY2VpdmVyUGFydGl0aW9uCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjEwMwogICAgLy8gdGhpcy5fdHJhbnNmZXJfcGFydGl0aW9uKHNlbmRlciwgcGFydGl0aW9uLCB0bywgcmVjZWl2ZXJQYXJ0aXRpb24sIGFtb3VudCwgZGF0YSkKICAgIHN3YXAKICAgIGZyYW1lX2RpZyAtNAogICAgZnJhbWVfZGlnIC0zCiAgICBkaWcgMwogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgX3RyYW5zZmVyX3BhcnRpdGlvbgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxMDQKICAgIC8vIHJldHVybiByZWNlaXZlclBhcnRpdGlvbgogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo6QXJjMTQxMC5hcmMxNDEwX3BhcnRpdGlvbnNfb2YoaG9sZGVyOiBieXRlcywgcGFnZTogYnl0ZXMpIC0+IGJ5dGVzOgphcmMxNDEwX3BhcnRpdGlvbnNfb2Y6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjEwNy0xMDgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBwdWJsaWMgYXJjMTQxMF9wYXJ0aXRpb25zX29mKGhvbGRlcjogYXJjNC5BZGRyZXNzLCBwYWdlOiBhcmM0LlVpbnRONjQpOiBhcmM0LkFkZHJlc3NbXSB7CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTA5CiAgICAvLyBjb25zdCBrZXkgPSBuZXcgYXJjMTQxMF9Ib2xkaW5nUGFydGl0aW9uc1BhZ2luYXRlZEtleSh7IGhvbGRlcjogaG9sZGVyLCBwYWdlOiBwYWdlIH0pCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjYwCiAgICAvLyBrZXlQcmVmaXg6ICdocF9hJywKICAgIGJ5dGVjIDEwIC8vICJocF9hIgogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTEwCiAgICAvLyBpZiAoIXRoaXMuaG9sZGVyUGFydGl0aW9uc0FkZHJlc3NlcyhrZXkpLmV4aXN0cykgcmV0dXJuIFtdCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJueiBhcmMxNDEwX3BhcnRpdGlvbnNfb2ZfYWZ0ZXJfaWZfZWxzZUAyCiAgICBieXRlYyAxNiAvLyAweDAwMDAKICAgIHN3YXAKICAgIHJldHN1YgoKYXJjMTQxMF9wYXJ0aXRpb25zX29mX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTExCiAgICAvLyByZXR1cm4gdGhpcy5ob2xkZXJQYXJ0aXRpb25zQWRkcmVzc2VzKGtleSkudmFsdWUKICAgIGZyYW1lX2RpZyAwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgc3dhcAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo6QXJjMTQxMC5hcmMxNDEwX2lzX29wZXJhdG9yKGhvbGRlcjogYnl0ZXMsIG9wZXJhdG9yOiBieXRlcywgcGFydGl0aW9uOiBieXRlcykgLT4gYnl0ZXM6CmFyYzE0MTBfaXNfb3BlcmF0b3I6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjExNC0xMTUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICAvLyBwdWJsaWMgYXJjMTQxMF9pc19vcGVyYXRvcihob2xkZXI6IGFyYzQuQWRkcmVzcywgb3BlcmF0b3I6IGFyYzQuQWRkcmVzcywgcGFydGl0aW9uOiBhcmM0LkFkZHJlc3MpOiBhcmM0LkJvb2wgewogICAgcHJvdG8gMyAxCiAgICBpbnRjXzAgLy8gMAogICAgZHVwbiAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjExNgogICAgLy8gaWYgKG9wZXJhdG9yID09PSBob2xkZXIpIHJldHVybiBuZXcgYXJjNC5Cb29sKHRydWUpCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMwogICAgPT0KICAgIGJ6IGFyYzE0MTBfaXNfb3BlcmF0b3JfYWZ0ZXJfaWZfZWxzZUAyCiAgICBieXRlYyA0IC8vIDB4ODAKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgphcmMxNDEwX2lzX29wZXJhdG9yX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTE3CiAgICAvLyBjb25zdCBzcGVjaWZpYyA9IG5ldyBhcmMxNDEwX09wZXJhdG9yS2V5KHsgaG9sZGVyOiBob2xkZXIsIG9wZXJhdG9yOiBvcGVyYXRvciwgcGFydGl0aW9uOiBwYXJ0aXRpb24gfSkKICAgIGZyYW1lX2RpZyAtMwogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIGR1cAogICAgZnJhbWVfYnVyeSAwCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo2MgogICAgLy8gcHVibGljIG9wZXJhdG9ycyA9IEJveE1hcDxhcmMxNDEwX09wZXJhdG9yS2V5LCBhcmM0LkJ5dGU+KHsga2V5UHJlZml4OiAnb3AnIH0pIC8vIHZhbHVlID0gMSBhdXRob3JpemVkCiAgICBieXRlYyAxMSAvLyAib3AiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgZnJhbWVfYnVyeSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjExOAogICAgLy8gaWYgKHRoaXMub3BlcmF0b3JzKHNwZWNpZmljKS5leGlzdHMgJiYgdGhpcy5vcGVyYXRvcnMoc3BlY2lmaWMpLnZhbHVlLm5hdGl2ZSA9PT0gMSkgewogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBieiBhcmMxNDEwX2lzX29wZXJhdG9yX2FmdGVyX2lmX2Vsc2VANQogICAgZnJhbWVfZGlnIDEKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBidG9pCiAgICBpbnRjXzEgLy8gMQogICAgPT0KICAgIGJ6IGFyYzE0MTBfaXNfb3BlcmF0b3JfYWZ0ZXJfaWZfZWxzZUA1CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjExOQogICAgLy8gcmV0dXJuIG5ldyBhcmM0LkJvb2wodHJ1ZSkKICAgIGJ5dGVjIDQgLy8gMHg4MAogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCmFyYzE0MTBfaXNfb3BlcmF0b3JfYWZ0ZXJfaWZfZWxzZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxMjEKICAgIC8vIGNvbnN0IGdsb2JhbEtleSA9IG5ldyBhcmMxNDEwX09wZXJhdG9yS2V5KHsgaG9sZGVyOiBob2xkZXIsIG9wZXJhdG9yOiBvcGVyYXRvciwgcGFydGl0aW9uOiBuZXcgYXJjNC5BZGRyZXNzKCkgfSkKICAgIGZyYW1lX2RpZyAwCiAgICBieXRlY18xIC8vIGFkZHIgQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVk1SEZLUQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjYyCiAgICAvLyBwdWJsaWMgb3BlcmF0b3JzID0gQm94TWFwPGFyYzE0MTBfT3BlcmF0b3JLZXksIGFyYzQuQnl0ZT4oeyBrZXlQcmVmaXg6ICdvcCcgfSkgLy8gdmFsdWUgPSAxIGF1dGhvcml6ZWQKICAgIGJ5dGVjIDExIC8vICJvcCIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTIyCiAgICAvLyBpZiAodGhpcy5vcGVyYXRvcnMoZ2xvYmFsS2V5KS5leGlzdHMgJiYgdGhpcy5vcGVyYXRvcnMoZ2xvYmFsS2V5KS52YWx1ZS5uYXRpdmUgPT09IDEpIHsKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYnogYXJjMTQxMF9pc19vcGVyYXRvcl9hZnRlcl9pZl9lbHNlQDgKICAgIGZyYW1lX2RpZyAyCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgYnRvaQogICAgaW50Y18xIC8vIDEKICAgID09CiAgICBieiBhcmMxNDEwX2lzX29wZXJhdG9yX2FmdGVyX2lmX2Vsc2VAOAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxMjMKICAgIC8vIHJldHVybiBuZXcgYXJjNC5Cb29sKHRydWUpCiAgICBieXRlYyA0IC8vIDB4ODAKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgphcmMxNDEwX2lzX29wZXJhdG9yX2FmdGVyX2lmX2Vsc2VAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTI1CiAgICAvLyByZXR1cm4gbmV3IGFyYzQuQm9vbChmYWxzZSkKICAgIGJ5dGVjIDcgLy8gMHgwMAogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjpBcmMxNDEwLmFyYzE0MTBfYXV0aG9yaXplX29wZXJhdG9yKGhvbGRlcjogYnl0ZXMsIG9wZXJhdG9yOiBieXRlcywgcGFydGl0aW9uOiBieXRlcykgLT4gdm9pZDoKYXJjMTQxMF9hdXRob3JpemVfb3BlcmF0b3I6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjEyOC0xMjkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBwdWJsaWMgYXJjMTQxMF9hdXRob3JpemVfb3BlcmF0b3IoaG9sZGVyOiBhcmM0LkFkZHJlc3MsIG9wZXJhdG9yOiBhcmM0LkFkZHJlc3MsIHBhcnRpdGlvbjogYXJjNC5BZGRyZXNzKTogdm9pZCB7CiAgICBwcm90byAzIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTMwCiAgICAvLyBhc3NlcnQobmV3IGFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKSA9PT0gaG9sZGVyLCAnT25seSBob2xkZXIgY2FuIGF1dGhvcml6ZScpCiAgICB0eG4gU2VuZGVyCiAgICBmcmFtZV9kaWcgLTMKICAgID09CiAgICBhc3NlcnQgLy8gT25seSBob2xkZXIgY2FuIGF1dGhvcml6ZQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxMzEKICAgIC8vIGNvbnN0IGtleSA9IG5ldyBhcmMxNDEwX09wZXJhdG9yS2V5KHsgaG9sZGVyOiBob2xkZXIsIG9wZXJhdG9yOiBvcGVyYXRvciwgcGFydGl0aW9uOiBwYXJ0aXRpb24gfSkKICAgIGZyYW1lX2RpZyAtMwogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjYyCiAgICAvLyBwdWJsaWMgb3BlcmF0b3JzID0gQm94TWFwPGFyYzE0MTBfT3BlcmF0b3JLZXksIGFyYzQuQnl0ZT4oeyBrZXlQcmVmaXg6ICdvcCcgfSkgLy8gdmFsdWUgPSAxIGF1dGhvcml6ZWQKICAgIGJ5dGVjIDExIC8vICJvcCIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxMzIKICAgIC8vIHRoaXMub3BlcmF0b3JzKGtleSkudmFsdWUgPSBuZXcgYXJjNC5CeXRlKDEpCiAgICBieXRlYyAxMyAvLyAweDAxCiAgICBib3hfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjpBcmMxNDEwLmFyYzE0MTBfcmV2b2tlX29wZXJhdG9yKGhvbGRlcjogYnl0ZXMsIG9wZXJhdG9yOiBieXRlcywgcGFydGl0aW9uOiBieXRlcykgLT4gdm9pZDoKYXJjMTQxMF9yZXZva2Vfb3BlcmF0b3I6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjEzNS0xMzYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBwdWJsaWMgYXJjMTQxMF9yZXZva2Vfb3BlcmF0b3IoaG9sZGVyOiBhcmM0LkFkZHJlc3MsIG9wZXJhdG9yOiBhcmM0LkFkZHJlc3MsIHBhcnRpdGlvbjogYXJjNC5BZGRyZXNzKTogdm9pZCB7CiAgICBwcm90byAzIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTM3CiAgICAvLyBhc3NlcnQobmV3IGFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKSA9PT0gaG9sZGVyLCAnT25seSBob2xkZXIgY2FuIHJldm9rZScpCiAgICB0eG4gU2VuZGVyCiAgICBmcmFtZV9kaWcgLTMKICAgID09CiAgICBhc3NlcnQgLy8gT25seSBob2xkZXIgY2FuIHJldm9rZQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxMzgKICAgIC8vIGNvbnN0IGtleSA9IG5ldyBhcmMxNDEwX09wZXJhdG9yS2V5KHsgaG9sZGVyOiBob2xkZXIsIG9wZXJhdG9yOiBvcGVyYXRvciwgcGFydGl0aW9uOiBwYXJ0aXRpb24gfSkKICAgIGZyYW1lX2RpZyAtMwogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjYyCiAgICAvLyBwdWJsaWMgb3BlcmF0b3JzID0gQm94TWFwPGFyYzE0MTBfT3BlcmF0b3JLZXksIGFyYzQuQnl0ZT4oeyBrZXlQcmVmaXg6ICdvcCcgfSkgLy8gdmFsdWUgPSAxIGF1dGhvcml6ZWQKICAgIGJ5dGVjIDExIC8vICJvcCIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjEzOQogICAgLy8gaWYgKHRoaXMub3BlcmF0b3JzKGtleSkuZXhpc3RzKSB7CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJ6IGFyYzE0MTBfcmV2b2tlX29wZXJhdG9yX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxNDAKICAgIC8vIHRoaXMub3BlcmF0b3JzKGtleSkuZGVsZXRlKCkKICAgIGZyYW1lX2RpZyAwCiAgICBib3hfZGVsCiAgICBwb3AKCmFyYzE0MTBfcmV2b2tlX29wZXJhdG9yX2FmdGVyX2lmX2Vsc2VAMjoKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6OkFyYzE0MTAuYXJjMTQxMF9vcGVyYXRvcl90cmFuc2Zlcl9ieV9wYXJ0aXRpb24oZnJvbTogYnl0ZXMsIHBhcnRpdGlvbjogYnl0ZXMsIHRvOiBieXRlcywgYW1vdW50OiBieXRlcywgZGF0YTogYnl0ZXMpIC0+IGJ5dGVzOgphcmMxNDEwX29wZXJhdG9yX3RyYW5zZmVyX2J5X3BhcnRpdGlvbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTQ0LTE1MQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIHB1YmxpYyBhcmMxNDEwX29wZXJhdG9yX3RyYW5zZmVyX2J5X3BhcnRpdGlvbigKICAgIC8vICAgZnJvbTogYXJjNC5BZGRyZXNzLAogICAgLy8gICBwYXJ0aXRpb246IGFyYzQuQWRkcmVzcywKICAgIC8vICAgdG86IGFyYzQuQWRkcmVzcywKICAgIC8vICAgYW1vdW50OiBhcmM0LlVpbnROMjU2LAogICAgLy8gICBkYXRhOiBhcmM0LkR5bmFtaWNCeXRlcywKICAgIC8vICk6IGFyYzQuQWRkcmVzcyB7CiAgICBwcm90byA1IDEKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjE1MgogICAgLy8gY29uc3Qgc2VuZGVyID0gbmV3IGFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKQogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxNTQKICAgIC8vIGxldCBhdXRob3JpemVkID0gdGhpcy5hcmMxNDEwX2lzX29wZXJhdG9yKGZyb20sIHNlbmRlciwgcGFydGl0aW9uKS5uYXRpdmUgPT09IHRydWUKICAgIGZyYW1lX2RpZyAtNQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxNTIKICAgIC8vIGNvbnN0IHNlbmRlciA9IG5ldyBhcmM0LkFkZHJlc3MoVHhuLnNlbmRlcikKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTU0CiAgICAvLyBsZXQgYXV0aG9yaXplZCA9IHRoaXMuYXJjMTQxMF9pc19vcGVyYXRvcihmcm9tLCBzZW5kZXIsIHBhcnRpdGlvbikubmF0aXZlID09PSB0cnVlCiAgICBmcmFtZV9kaWcgLTQKICAgIGNhbGxzdWIgYXJjMTQxMF9pc19vcGVyYXRvcgogICAgaW50Y18wIC8vIDAKICAgIGdldGJpdAogICAgaW50Y18xIC8vIDEKICAgID09CiAgICBkdXBuIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTU2CiAgICAvLyBpZiAoIWF1dGhvcml6ZWQpIHsKICAgIGJueiBhcmMxNDEwX29wZXJhdG9yX3RyYW5zZmVyX2J5X3BhcnRpdGlvbl9hZnRlcl9pZl9lbHNlQDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTU4CiAgICAvLyBjb25zdCBwS2V5ID0gbmV3IGFyYzE0MTBfT3BlcmF0b3JQb3J0aW9uS2V5KHsgaG9sZGVyOiBmcm9tLCBvcGVyYXRvcjogc2VuZGVyLCBwYXJ0aXRpb24gfSkKICAgIGZyYW1lX2RpZyAtNQogICAgZnJhbWVfZGlnIDEKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC00CiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NjMKICAgIC8vIHB1YmxpYyBvcGVyYXRvclBvcnRpb25BbGxvd2FuY2VzID0gQm94TWFwPGFyYzE0MTBfT3BlcmF0b3JQb3J0aW9uS2V5LCBhcmM0LlVpbnROMjU2Pih7IGtleVByZWZpeDogJ29wYScgfSkKICAgIGJ5dGVjIDEyIC8vICJvcGEiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgZnJhbWVfYnVyeSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjE1OQogICAgLy8gaWYgKHRoaXMub3BlcmF0b3JQb3J0aW9uQWxsb3dhbmNlcyhwS2V5KS5leGlzdHMpIHsKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYnogYXJjMTQxMF9vcGVyYXRvcl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjE2MAogICAgLy8gY29uc3QgcmVtYWluaW5nID0gdGhpcy5vcGVyYXRvclBvcnRpb25BbGxvd2FuY2VzKHBLZXkpLnZhbHVlCiAgICBmcmFtZV9kaWcgMAogICAgZHVwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxNjEKICAgIC8vIGFzc2VydChyZW1haW5pbmcubmF0aXZlID49IGFtb3VudC5uYXRpdmUsICdQb3J0aW9uIGFsbG93YW5jZSBleGNlZWRlZCcpCiAgICBkdXAKICAgIGZyYW1lX2RpZyAtMgogICAgYj49CiAgICBhc3NlcnQgLy8gUG9ydGlvbiBhbGxvd2FuY2UgZXhjZWVkZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTYyCiAgICAvLyBhdXRob3JpemVkID0gdHJ1ZQogICAgaW50Y18xIC8vIDEKICAgIGZyYW1lX2J1cnkgMgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxNjUKICAgIC8vIHRoaXMub3BlcmF0b3JQb3J0aW9uQWxsb3dhbmNlcyhwS2V5KS52YWx1ZSA9IG5ldyBhcmM0LlVpbnROMjU2KHJlbWFpbmluZy5uYXRpdmUgLSBhbW91bnQubmF0aXZlKQogICAgZnJhbWVfZGlnIC0yCiAgICBiLQogICAgZHVwCiAgICBsZW4KICAgIGludGNfMiAvLyAzMgogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgaW50Y18yIC8vIDMyCiAgICBiemVybwogICAgYnwKICAgIGJveF9wdXQKCmFyYzE0MTBfb3BlcmF0b3JfdHJhbnNmZXJfYnlfcGFydGl0aW9uX2FmdGVyX2lmX2Vsc2VAMzoKICAgIGZyYW1lX2RpZyAyCiAgICBmcmFtZV9idXJ5IDMKCmFyYzE0MTBfb3BlcmF0b3JfdHJhbnNmZXJfYnlfcGFydGl0aW9uX2FmdGVyX2lmX2Vsc2VANDoKICAgIGZyYW1lX2RpZyAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjE2OAogICAgLy8gYXNzZXJ0KGF1dGhvcml6ZWQsICdOb3QgYXV0aG9yaXplZCBvcGVyYXRvcicpCiAgICBhc3NlcnQgLy8gTm90IGF1dGhvcml6ZWQgb3BlcmF0b3IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTY5CiAgICAvLyBsZXQgcmVjZWl2ZXJQYXJ0aXRpb24gPSB0aGlzLl9yZWNlaXZlclBhcnRpdGlvbih0bywgcGFydGl0aW9uKQogICAgZnJhbWVfZGlnIC0zCiAgICBmcmFtZV9kaWcgLTQKICAgIGNhbGxzdWIgX3JlY2VpdmVyUGFydGl0aW9uCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjE3MAogICAgLy8gdGhpcy5fdHJhbnNmZXJfcGFydGl0aW9uKGZyb20sIHBhcnRpdGlvbiwgdG8sIHJlY2VpdmVyUGFydGl0aW9uLCBhbW91bnQsIGRhdGEpCiAgICBmcmFtZV9kaWcgLTUKICAgIGZyYW1lX2RpZyAtNAogICAgZnJhbWVfZGlnIC0zCiAgICBkaWcgMwogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgX3RyYW5zZmVyX3BhcnRpdGlvbgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxNzEKICAgIC8vIHJldHVybiByZWNlaXZlclBhcnRpdGlvbgogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjpBcmMxNDEwLmFyYzE0MTBfY2FuX3RyYW5zZmVyX2J5X3BhcnRpdGlvbihmcm9tOiBieXRlcywgcGFydGl0aW9uOiBieXRlcywgdG86IGJ5dGVzLCBhbW91bnQ6IGJ5dGVzLCBkYXRhOiBieXRlcykgLT4gYnl0ZXM6CmFyYzE0MTBfY2FuX3RyYW5zZmVyX2J5X3BhcnRpdGlvbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTc0LTE4MQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIHB1YmxpYyBhcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb24oCiAgICAvLyAgIGZyb206IGFyYzQuQWRkcmVzcywKICAgIC8vICAgcGFydGl0aW9uOiBhcmM0LkFkZHJlc3MsCiAgICAvLyAgIHRvOiBhcmM0LkFkZHJlc3MsCiAgICAvLyAgIGFtb3VudDogYXJjNC5VaW50TjI1NiwKICAgIC8vICAgZGF0YTogYXJjNC5EeW5hbWljQnl0ZXMsCiAgICAvLyApOiBhcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fcmV0dXJuIHsKICAgIHByb3RvIDUgMQogICAgaW50Y18wIC8vIDAKICAgIGR1cAogICAgcHVzaGJ5dGVzICIiCiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MjUxCiAgICAvLyByZXR1cm4gdGhpcy5wYXJ0aXRpb25zKG5ldyBhcmMxNDEwX1BhcnRpdGlvbktleSh7IGhvbGRlcjogaG9sZGVyLCBwYXJ0aXRpb246IHBhcnRpdGlvbiB9KSkuZXhpc3RzCiAgICBmcmFtZV9kaWcgLTUKICAgIGZyYW1lX2RpZyAtNAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjU3CiAgICAvLyBwdWJsaWMgcGFydGl0aW9ucyA9IEJveE1hcDxhcmMxNDEwX1BhcnRpdGlvbktleSwgYXJjNC5VaW50TjI1Nj4oeyBrZXlQcmVmaXg6ICdwJyB9KQogICAgYnl0ZWNfMyAvLyAicCIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI1MQogICAgLy8gcmV0dXJuIHRoaXMucGFydGl0aW9ucyhuZXcgYXJjMTQxMF9QYXJ0aXRpb25LZXkoeyBob2xkZXI6IGhvbGRlciwgcGFydGl0aW9uOiBwYXJ0aXRpb24gfSkpLmV4aXN0cwogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjE4MgogICAgLy8gaWYgKCF0aGlzLl92YWxpZFBhcnRpdGlvbihmcm9tLCBwYXJ0aXRpb24pKSB7CiAgICBibnogYXJjMTQxMF9jYW5fdHJhbnNmZXJfYnlfcGFydGl0aW9uX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxODMtMTg3CiAgICAvLyByZXR1cm4gbmV3IGFyYzE0MTBfY2FuX3RyYW5zZmVyX2J5X3BhcnRpdGlvbl9yZXR1cm4oewogICAgLy8gICBjb2RlOiBuZXcgYXJjNC5CeXRlKDB4NTApLAogICAgLy8gICBzdGF0dXM6IG5ldyBhcmM0LlN0cignUGFydGl0aW9uIG5vdCBleGlzdHMnKSwKICAgIC8vICAgcmVjZWl2ZXJQYXJ0aXRpb246IG5ldyBhcmM0LkFkZHJlc3MoKSwKICAgIC8vIH0pCiAgICBwdXNoYnl0ZXMgYmFzZTMyKEtBQUNHQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFLRkFZTFNPUlVYSTJMUE5ZUUc0MzNVRUJTWFEyTFRPUlpRKQogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCmFyYzE0MTBfY2FuX3RyYW5zZmVyX2J5X3BhcnRpdGlvbl9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjE5MAogICAgLy8gdGhpcy5wYXJ0aXRpb25zKG5ldyBhcmMxNDEwX1BhcnRpdGlvbktleSh7IGhvbGRlcjogZnJvbSwgcGFydGl0aW9uOiBwYXJ0aXRpb24gfSkpLnZhbHVlLm5hdGl2ZSA8IGFtb3VudC5uYXRpdmUKICAgIGZyYW1lX2RpZyA0CiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgZnJhbWVfZGlnIC0yCiAgICBiPAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxODktMTkxCiAgICAvLyBpZiAoCiAgICAvLyAgIHRoaXMucGFydGl0aW9ucyhuZXcgYXJjMTQxMF9QYXJ0aXRpb25LZXkoeyBob2xkZXI6IGZyb20sIHBhcnRpdGlvbjogcGFydGl0aW9uIH0pKS52YWx1ZS5uYXRpdmUgPCBhbW91bnQubmF0aXZlCiAgICAvLyApIHsKICAgIGJ6IGFyYzE0MTBfY2FuX3RyYW5zZmVyX2J5X3BhcnRpdGlvbl9hZnRlcl9pZl9lbHNlQDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTkyLTE5NgogICAgLy8gcmV0dXJuIG5ldyBhcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fcmV0dXJuKHsKICAgIC8vICAgY29kZTogbmV3IGFyYzQuQnl0ZSgweDUyKSwKICAgIC8vICAgc3RhdHVzOiBuZXcgYXJjNC5TdHIoJ0luc3VmZmljaWVudCBiYWxhbmNlJyksCiAgICAvLyAgIHJlY2VpdmVyUGFydGl0aW9uOiBuZXcgYXJjNC5BZGRyZXNzKCksCiAgICAvLyB9KQogICAgcHVzaGJ5dGVzIGJhc2UzMihLSUFDR0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBS0VTM1RUT1ZUR00yTERORlNXNDVCQU1KUVdZWUxPTU5TUSkKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgphcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxOTkKICAgIC8vIGlmICh0byA9PT0gbmV3IGFyYzQuQWRkcmVzcygpKSB7CiAgICBmcmFtZV9kaWcgLTMKICAgIGJ5dGVjXzEgLy8gYWRkciBBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBWTVIRktRCiAgICA9PQogICAgYnogYXJjMTQxMF9jYW5fdHJhbnNmZXJfYnlfcGFydGl0aW9uX2FmdGVyX2lmX2Vsc2VANgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyMDAtMjA0CiAgICAvLyByZXR1cm4gbmV3IGFyYzE0MTBfY2FuX3RyYW5zZmVyX2J5X3BhcnRpdGlvbl9yZXR1cm4oewogICAgLy8gICBjb2RlOiBuZXcgYXJjNC5CeXRlKDB4NTcpLAogICAgLy8gICBzdGF0dXM6IG5ldyBhcmM0LlN0cignSW52YWxpZCByZWNlaXZlcicpLAogICAgLy8gICByZWNlaXZlclBhcnRpdGlvbjogbmV3IGFyYzQuQWRkcmVzcygpLAogICAgLy8gfSkKICAgIHB1c2hieXRlcyBiYXNlMzIoSzRBQ0dBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUlFUzNUV01GV0dTWkJBT0pTV0daTEpPWlNYRSkKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgphcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyMDgKICAgIC8vIGNvbnN0IHNlbmRlckFkZHIgPSBuZXcgYXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpCiAgICB0eG4gU2VuZGVyCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyMDkKICAgIC8vIGlmIChzZW5kZXJBZGRyICE9PSBmcm9tKSB7CiAgICBmcmFtZV9kaWcgLTUKICAgICE9CiAgICBieiBhcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUAxNgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyMTAKICAgIC8vIGxldCBhdXRob3JpemVkID0gdGhpcy5hcmMxNDEwX2lzX29wZXJhdG9yKGZyb20sIHNlbmRlckFkZHIsIHBhcnRpdGlvbikubmF0aXZlID09PSB0cnVlCiAgICBmcmFtZV9kaWcgLTUKICAgIGZyYW1lX2RpZyAwCiAgICBmcmFtZV9kaWcgLTQKICAgIGNhbGxzdWIgYXJjMTQxMF9pc19vcGVyYXRvcgogICAgaW50Y18wIC8vIDAKICAgIGdldGJpdAogICAgaW50Y18xIC8vIDEKICAgID09CiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMgogICAgZHVwCiAgICBmcmFtZV9idXJ5IDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MjExCiAgICAvLyBpZiAoIWF1dGhvcml6ZWQpIHsKICAgIGJueiBhcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUAxMwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyMTIKICAgIC8vIGNvbnN0IHBLZXkgPSBuZXcgYXJjMTQxMF9PcGVyYXRvclBvcnRpb25LZXkoeyBob2xkZXI6IGZyb20sIG9wZXJhdG9yOiBzZW5kZXJBZGRyLCBwYXJ0aXRpb24gfSkKICAgIGZyYW1lX2RpZyAtNQogICAgZnJhbWVfZGlnIDAKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC00CiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NjMKICAgIC8vIHB1YmxpYyBvcGVyYXRvclBvcnRpb25BbGxvd2FuY2VzID0gQm94TWFwPGFyYzE0MTBfT3BlcmF0b3JQb3J0aW9uS2V5LCBhcmM0LlVpbnROMjU2Pih7IGtleVByZWZpeDogJ29wYScgfSkKICAgIGJ5dGVjIDEyIC8vICJvcGEiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgZnJhbWVfYnVyeSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjIxMwogICAgLy8gaWYgKHRoaXMub3BlcmF0b3JQb3J0aW9uQWxsb3dhbmNlcyhwS2V5KS5leGlzdHMpIHsKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgZnJhbWVfZGlnIDIKICAgIGZyYW1lX2J1cnkgMwogICAgYnogYXJjMTQxMF9jYW5fdHJhbnNmZXJfYnlfcGFydGl0aW9uX2FmdGVyX2lmX2Vsc2VAMTMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MjE0CiAgICAvLyBjb25zdCByZW1haW5pbmcgPSB0aGlzLm9wZXJhdG9yUG9ydGlvbkFsbG93YW5jZXMocEtleSkudmFsdWUKICAgIGZyYW1lX2RpZyAxCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyMTUKICAgIC8vIGlmIChyZW1haW5pbmcubmF0aXZlID49IGFtb3VudC5uYXRpdmUpIHsKICAgIGZyYW1lX2RpZyAtMgogICAgYj49CiAgICBieiBhcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUAxMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyMTYKICAgIC8vIGF1dGhvcml6ZWQgPSB0cnVlCiAgICBpbnRjXzEgLy8gMQogICAgZnJhbWVfYnVyeSAyCgphcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUAxMToKICAgIGZyYW1lX2RpZyAyCiAgICBmcmFtZV9idXJ5IDMKCmFyYzE0MTBfY2FuX3RyYW5zZmVyX2J5X3BhcnRpdGlvbl9hZnRlcl9pZl9lbHNlQDEzOgogICAgZnJhbWVfZGlnIDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MjIwCiAgICAvLyBpZiAoIWF1dGhvcml6ZWQpIHsKICAgIGJueiBhcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUAxNgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyMjEtMjI1CiAgICAvLyByZXR1cm4gbmV3IGFyYzE0MTBfY2FuX3RyYW5zZmVyX2J5X3BhcnRpdGlvbl9yZXR1cm4oewogICAgLy8gICBjb2RlOiBuZXcgYXJjNC5CeXRlKDB4NTgpLAogICAgLy8gICBzdGF0dXM6IG5ldyBhcmM0LlN0cignT3BlcmF0b3Igbm90IGF1dGhvcml6ZWQnKSwKICAgIC8vICAgcmVjZWl2ZXJQYXJ0aXRpb246IG5ldyBhcmM0LkFkZHJlc3MoKSwKICAgIC8vIH0pCiAgICBwdXNoYnl0ZXMgYmFzZTMyKExBQUNHQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFMVTY0REZPSlFYSTMzU0VCWEc2NUJBTUYyWEkyRFBPSlVYVVpMRSkKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgphcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUAxNjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MjI5CiAgICAvLyBsZXQgcmVjZWl2ZXJQYXJ0aXRpb24gPSB0aGlzLl9yZWNlaXZlclBhcnRpdGlvbih0bywgcGFydGl0aW9uKQogICAgZnJhbWVfZGlnIC0zCiAgICBmcmFtZV9kaWcgLTQKICAgIGNhbGxzdWIgX3JlY2VpdmVyUGFydGl0aW9uCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjIzMS0yMzUKICAgIC8vIHJldHVybiBuZXcgYXJjMTQxMF9jYW5fdHJhbnNmZXJfYnlfcGFydGl0aW9uX3JldHVybih7CiAgICAvLyAgIGNvZGU6IG5ldyBhcmM0LkJ5dGUoMHg1MSksCiAgICAvLyAgIHN0YXR1czogbmV3IGFyYzQuU3RyKCdTdWNjZXNzJyksCiAgICAvLyAgIHJlY2VpdmVyUGFydGl0aW9uOiByZWNlaXZlclBhcnRpdGlvbiwKICAgIC8vIH0pCiAgICBwdXNoYnl0ZXMgMHg1MTAwMjMKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyMzMKICAgIC8vIHN0YXR1czogbmV3IGFyYzQuU3RyKCdTdWNjZXNzJyksCiAgICBwdXNoYnl0ZXMgMHgwMDA3NTM3NTYzNjM2NTczNzMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MjMxLTIzNQogICAgLy8gcmV0dXJuIG5ldyBhcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fcmV0dXJuKHsKICAgIC8vICAgY29kZTogbmV3IGFyYzQuQnl0ZSgweDUxKSwKICAgIC8vICAgc3RhdHVzOiBuZXcgYXJjNC5TdHIoJ1N1Y2Nlc3MnKSwKICAgIC8vICAgcmVjZWl2ZXJQYXJ0aXRpb246IHJlY2VpdmVyUGFydGl0aW9uLAogICAgLy8gfSkKICAgIGNvbmNhdAogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjpBcmMxNDEwLl9yZWNlaXZlclBhcnRpdGlvbihyZWNlaXZlcjogYnl0ZXMsIHBhcnRpdGlvbjogYnl0ZXMpIC0+IGJ5dGVzOgpfcmVjZWl2ZXJQYXJ0aXRpb246CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI0MwogICAgLy8gcHJvdGVjdGVkIF9yZWNlaXZlclBhcnRpdGlvbihyZWNlaXZlcjogYXJjNC5BZGRyZXNzLCBwYXJ0aXRpb246IGFyYzQuQWRkcmVzcyk6IGFyYzQuQWRkcmVzcyB7CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MjQ0CiAgICAvLyBsZXQgcmVjZWl2ZXJQYXJ0aXRpb24gPSBuZXcgYXJjNC5BZGRyZXNzKCkKICAgIGJ5dGVjXzEgLy8gYWRkciBBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBWTVIRktRCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI0NQogICAgLy8gaWYgKHRoaXMucGFydGl0aW9ucyhuZXcgYXJjMTQxMF9QYXJ0aXRpb25LZXkoeyBob2xkZXI6IHJlY2VpdmVyLCBwYXJ0aXRpb246IHBhcnRpdGlvbiB9KSkuZXhpc3RzKSB7CiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjU3CiAgICAvLyBwdWJsaWMgcGFydGl0aW9ucyA9IEJveE1hcDxhcmMxNDEwX1BhcnRpdGlvbktleSwgYXJjNC5VaW50TjI1Nj4oeyBrZXlQcmVmaXg6ICdwJyB9KQogICAgYnl0ZWNfMyAvLyAicCIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyNDUKICAgIC8vIGlmICh0aGlzLnBhcnRpdGlvbnMobmV3IGFyYzE0MTBfUGFydGl0aW9uS2V5KHsgaG9sZGVyOiByZWNlaXZlciwgcGFydGl0aW9uOiBwYXJ0aXRpb24gfSkpLmV4aXN0cykgewogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBieiBfcmVjZWl2ZXJQYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUAyCiAgICBmcmFtZV9kaWcgLTEKICAgIGZyYW1lX2J1cnkgMAoKX3JlY2VpdmVyUGFydGl0aW9uX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MjQ4CiAgICAvLyByZXR1cm4gcmVjZWl2ZXJQYXJ0aXRpb24KICAgIGZyYW1lX2RpZyAwCiAgICBzd2FwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjpBcmMxNDEwLl9hZGRfcGFydGljaXBhdGlvbl90b19ob2xkZXIoaG9sZGVyOiBieXRlcywgcGFydGljaXBhdGlvbjogYnl0ZXMpIC0+IHZvaWQ6Cl9hZGRfcGFydGljaXBhdGlvbl90b19ob2xkZXI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI2NAogICAgLy8gcHJvdGVjdGVkIF9hZGRfcGFydGljaXBhdGlvbl90b19ob2xkZXIoaG9sZGVyOiBhcmM0LkFkZHJlc3MsIHBhcnRpY2lwYXRpb246IGFyYzQuQWRkcmVzcyk6IHZvaWQgewogICAgcHJvdG8gMiAwCiAgICBpbnRjXzAgLy8gMAogICAgZHVwbiA0CiAgICBwdXNoYnl0ZXMgIiIKICAgIGR1cG4gNAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo1OAogICAgLy8gcHVibGljIGhvbGRlclBhcnRpdGlvbnNDdXJyZW50UGFnZSA9IEJveE1hcDxhcmM0LkFkZHJlc3MsIGFyYzQuVWludE42ND4oeyBrZXlQcmVmaXg6ICdocF9wJyB9KQogICAgcHVzaGJ5dGVzICJocF9wIgogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyNjYKICAgIC8vIGlmICghdGhpcy5ob2xkZXJQYXJ0aXRpb25zQ3VycmVudFBhZ2UoaG9sZGVyKS5leGlzdHMpIHsKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYm56IF9hZGRfcGFydGljaXBhdGlvbl90b19ob2xkZXJfYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI2NwogICAgLy8gdGhpcy5ob2xkZXJQYXJ0aXRpb25zQ3VycmVudFBhZ2UoaG9sZGVyKS52YWx1ZSA9IHBhZ2UKICAgIGZyYW1lX2RpZyAxMAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyNjUKICAgIC8vIGxldCBwYWdlID0gbmV3IGFyYzQuVWludE42NCgwKQogICAgYnl0ZWMgMTcgLy8gMHgwMDAwMDAwMDAwMDAwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI2NwogICAgLy8gdGhpcy5ob2xkZXJQYXJ0aXRpb25zQ3VycmVudFBhZ2UoaG9sZGVyKS52YWx1ZSA9IHBhZ2UKICAgIGJveF9wdXQKCl9hZGRfcGFydGljaXBhdGlvbl90b19ob2xkZXJfYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyNjkKICAgIC8vIGNvbnN0IGxhc3RQYWdlID0gdGhpcy5ob2xkZXJQYXJ0aXRpb25zQ3VycmVudFBhZ2UoaG9sZGVyKS52YWx1ZQogICAgZnJhbWVfZGlnIDEwCiAgICBib3hfZ2V0CiAgICBzd2FwCiAgICBmcmFtZV9idXJ5IDIKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI3MAogICAgLy8gbGV0IGZvdW5kID0gZmFsc2UKICAgIGludGNfMCAvLyAwCiAgICBmcmFtZV9idXJ5IDYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MjY1CiAgICAvLyBsZXQgcGFnZSA9IG5ldyBhcmM0LlVpbnRONjQoMCkKICAgIGJ5dGVjIDE3IC8vIDB4MDAwMDAwMDAwMDAwMDAwMAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyNzEKICAgIC8vIGZvciAobGV0IGN1clBhZ2UgPSBwYWdlOyBjdXJQYWdlLm5hdGl2ZSA8IGxhc3RQYWdlLm5hdGl2ZTsgY3VyUGFnZSA9IG5ldyBhcmM0LlVpbnRONjQoY3VyUGFnZS5uYXRpdmUgKyAxKSkgewogICAgZnJhbWVfYnVyeSAxCgpfYWRkX3BhcnRpY2lwYXRpb25fdG9faG9sZGVyX3doaWxlX3RvcEAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyNzEKICAgIC8vIGZvciAobGV0IGN1clBhZ2UgPSBwYWdlOyBjdXJQYWdlLm5hdGl2ZSA8IGxhc3RQYWdlLm5hdGl2ZTsgY3VyUGFnZSA9IG5ldyBhcmM0LlVpbnRONjQoY3VyUGFnZS5uYXRpdmUgKyAxKSkgewogICAgZnJhbWVfZGlnIDEKICAgIGJ0b2kKICAgIGR1cAogICAgZnJhbWVfYnVyeSA4CiAgICBmcmFtZV9kaWcgMgogICAgYnRvaQogICAgZHVwCiAgICBmcmFtZV9idXJ5IDkKICAgIDwKICAgIGJ6IF9hZGRfcGFydGljaXBhdGlvbl90b19ob2xkZXJfYmxvY2tAMTAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MjcyLTI3NQogICAgLy8gY29uc3QgcGFnaW5hdGVkS2V5ID0gbmV3IGFyYzE0MTBfSG9sZGluZ1BhcnRpdGlvbnNQYWdpbmF0ZWRLZXkoewogICAgLy8gICBob2xkZXI6IGhvbGRlciwKICAgIC8vICAgcGFnZTogY3VyUGFnZSwKICAgIC8vIH0pCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAxCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NjAKICAgIC8vIGtleVByZWZpeDogJ2hwX2EnLAogICAgYnl0ZWMgMTAgLy8gImhwX2EiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgZnJhbWVfYnVyeSA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI3NgogICAgLy8gaWYgKCF0aGlzLmhvbGRlclBhcnRpdGlvbnNBZGRyZXNzZXMocGFnaW5hdGVkS2V5KS5leGlzdHMpIHsKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYm56IF9hZGRfcGFydGljaXBhdGlvbl90b19ob2xkZXJfYWZ0ZXJfaWZfZWxzZUA2CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI3NwogICAgLy8gdGhpcy5ob2xkZXJQYXJ0aXRpb25zQWRkcmVzc2VzKHBhZ2luYXRlZEtleSkudmFsdWUgPSBbcGFydGljaXBhdGlvbl0KICAgIGJ5dGVjIDE0IC8vIDB4MDAwMQogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyA0CiAgICBkdXAKICAgIGJveF9kZWwKICAgIHBvcAogICAgc3dhcAogICAgYm94X3B1dAoKX2FkZF9wYXJ0aWNpcGF0aW9uX3RvX2hvbGRlcl9hZnRlcl9pZl9lbHNlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI4MAogICAgLy8gaWYgKHRoaXMuY29udGFpbnNBZGRyZXNzKHRoaXMuaG9sZGVyUGFydGl0aW9uc0FkZHJlc3NlcyhwYWdpbmF0ZWRLZXkpLnZhbHVlLCBwYXJ0aWNpcGF0aW9uKSkgewogICAgZnJhbWVfZGlnIDQKICAgIGJveF9nZXQKICAgIHN3YXAKICAgIGR1cAogICAgY292ZXIgMgogICAgZnJhbWVfYnVyeSAwCiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyNTQKICAgIC8vIGZvciAoY29uc3QgdiBvZiBhKSB7CiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGZyYW1lX2J1cnkgNQogICAgaW50Y18wIC8vIDAKICAgIGZyYW1lX2J1cnkgNwoKX2FkZF9wYXJ0aWNpcGF0aW9uX3RvX2hvbGRlcl9mb3JfaGVhZGVyQDE3OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyNTQKICAgIC8vIGZvciAoY29uc3QgdiBvZiBhKSB7CiAgICBmcmFtZV9kaWcgNwogICAgZnJhbWVfZGlnIDUKICAgIDwKICAgIGJ6IF9hZGRfcGFydGljaXBhdGlvbl90b19ob2xkZXJfYWZ0ZXJfZm9yQDIxCiAgICBmcmFtZV9kaWcgMAogICAgZXh0cmFjdCAyIDAKICAgIGZyYW1lX2RpZyA3CiAgICBpbnRjXzIgLy8gMzIKICAgICoKICAgIGludGNfMiAvLyAzMgogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI1NQogICAgLy8gaWYgKHYgPT09IHgpIHJldHVybiB0cnVlCiAgICBmcmFtZV9kaWcgLTEKICAgID09CiAgICBieiBfYWRkX3BhcnRpY2lwYXRpb25fdG9faG9sZGVyX2FmdGVyX2lmX2Vsc2VAMjAKICAgIGludGNfMSAvLyAxCgpfYWRkX3BhcnRpY2lwYXRpb25fdG9faG9sZGVyX2FmdGVyX2lubGluZWRfc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo6QXJjMTQxMC5jb250YWluc0FkZHJlc3NAMjI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI4MAogICAgLy8gaWYgKHRoaXMuY29udGFpbnNBZGRyZXNzKHRoaXMuaG9sZGVyUGFydGl0aW9uc0FkZHJlc3NlcyhwYWdpbmF0ZWRLZXkpLnZhbHVlLCBwYXJ0aWNpcGF0aW9uKSkgewogICAgYnogX2FkZF9wYXJ0aWNpcGF0aW9uX3RvX2hvbGRlcl9hZnRlcl9pZl9lbHNlQDgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MjgxCiAgICAvLyBmb3VuZCA9IHRydWUKICAgIGludGNfMSAvLyAxCiAgICBmcmFtZV9idXJ5IDYKCl9hZGRfcGFydGljaXBhdGlvbl90b19ob2xkZXJfYmxvY2tAMTA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI4NQogICAgLy8gaWYgKCFmb3VuZCkgewogICAgZnJhbWVfZGlnIDYKICAgIGJueiBfYWRkX3BhcnRpY2lwYXRpb25fdG9faG9sZGVyX2FmdGVyX2lmX2Vsc2VAMTUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6Mjg2LTI4OQogICAgLy8gY29uc3QgcGFnaW5hdGVkS2V5ID0gbmV3IGFyYzE0MTBfSG9sZGluZ1BhcnRpdGlvbnNQYWdpbmF0ZWRLZXkoewogICAgLy8gICBob2xkZXI6IGhvbGRlciwKICAgIC8vICAgcGFnZTogbGFzdFBhZ2UsCiAgICAvLyB9KQogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgMgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjYwCiAgICAvLyBrZXlQcmVmaXg6ICdocF9hJywKICAgIGJ5dGVjIDEwIC8vICJocF9hIgogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyOTAKICAgIC8vIGNvbnN0IGl0ZW1zQ291bnQgPSBuZXcgYXJjNC5VaW50TjY0KHRoaXMuaG9sZGVyUGFydGl0aW9uc0FkZHJlc3NlcyhwYWdpbmF0ZWRLZXkpLnZhbHVlLmxlbmd0aCkKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MjkxCiAgICAvLyBpZiAoaXRlbXNDb3VudC5uYXRpdmUgPCAxMCkgewogICAgYnRvaQogICAgcHVzaGludCAxMCAvLyAxMAogICAgPAogICAgYnogX2FkZF9wYXJ0aWNpcGF0aW9uX3RvX2hvbGRlcl9lbHNlX2JvZHlAMTMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6Mjk0CiAgICAvLyAuLi50aGlzLmhvbGRlclBhcnRpdGlvbnNBZGRyZXNzZXMocGFnaW5hdGVkS2V5KS52YWx1ZSwKICAgIGZyYW1lX2RpZyAzCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI5My0yOTYKICAgIC8vIHRoaXMuaG9sZGVyUGFydGl0aW9uc0FkZHJlc3NlcyhwYWdpbmF0ZWRLZXkpLnZhbHVlID0gWwogICAgLy8gICAuLi50aGlzLmhvbGRlclBhcnRpdGlvbnNBZGRyZXNzZXMocGFnaW5hdGVkS2V5KS52YWx1ZSwKICAgIC8vICAgcGFydGljaXBhdGlvbiwKICAgIC8vIF0KICAgIGV4dHJhY3QgMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI5NQogICAgLy8gcGFydGljaXBhdGlvbiwKICAgIGJ5dGVjIDE0IC8vIDB4MDAwMQogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MjkzLTI5NgogICAgLy8gdGhpcy5ob2xkZXJQYXJ0aXRpb25zQWRkcmVzc2VzKHBhZ2luYXRlZEtleSkudmFsdWUgPSBbCiAgICAvLyAgIC4uLnRoaXMuaG9sZGVyUGFydGl0aW9uc0FkZHJlc3NlcyhwYWdpbmF0ZWRLZXkpLnZhbHVlLAogICAgLy8gICBwYXJ0aWNpcGF0aW9uLAogICAgLy8gXQogICAgZXh0cmFjdCAyIDAKICAgIGNvbmNhdAogICAgZHVwCiAgICBsZW4KICAgIGludGNfMiAvLyAzMgogICAgLwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZGlnIDEKICAgIGJveF9kZWwKICAgIHBvcAogICAgYm94X3B1dAoKX2FkZF9wYXJ0aWNpcGF0aW9uX3RvX2hvbGRlcl9hZnRlcl9pZl9lbHNlQDE1OgogICAgcmV0c3ViCgpfYWRkX3BhcnRpY2lwYXRpb25fdG9faG9sZGVyX2Vsc2VfYm9keUAxMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6Mjk4CiAgICAvLyBjb25zdCBuZXdMYXN0UGFnZSA9IG5ldyBhcmM0LlVpbnRONjQobGFzdFBhZ2UubmF0aXZlICsgMSkKICAgIGZyYW1lX2RpZyA5CiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyOTkKICAgIC8vIHRoaXMuaG9sZGVyUGFydGl0aW9uc0N1cnJlbnRQYWdlKGhvbGRlcikudmFsdWUgPSBuZXdMYXN0UGFnZQogICAgZnJhbWVfZGlnIDEwCiAgICBkaWcgMQogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czozMDAtMzAzCiAgICAvLyBjb25zdCBuZXdQYWdpbmF0ZWRLZXkgPSBuZXcgYXJjMTQxMF9Ib2xkaW5nUGFydGl0aW9uc1BhZ2luYXRlZEtleSh7CiAgICAvLyAgIGhvbGRlcjogaG9sZGVyLAogICAgLy8gICBwYWdlOiBuZXdMYXN0UGFnZSwKICAgIC8vIH0pCiAgICBmcmFtZV9kaWcgLTIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czozMDQKICAgIC8vIHRoaXMuaG9sZGVyUGFydGl0aW9uc0FkZHJlc3NlcyhuZXdQYWdpbmF0ZWRLZXkpLnZhbHVlID0gW3BhcnRpY2lwYXRpb25dCiAgICBieXRlYyAxNCAvLyAweDAwMDEKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjYwCiAgICAvLyBrZXlQcmVmaXg6ICdocF9hJywKICAgIGJ5dGVjIDEwIC8vICJocF9hIgogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MzA0CiAgICAvLyB0aGlzLmhvbGRlclBhcnRpdGlvbnNBZGRyZXNzZXMobmV3UGFnaW5hdGVkS2V5KS52YWx1ZSA9IFtwYXJ0aWNpcGF0aW9uXQogICAgZHVwCiAgICBib3hfZGVsCiAgICBwb3AKICAgIHN3YXAKICAgIGJveF9wdXQKICAgIHJldHN1YgoKX2FkZF9wYXJ0aWNpcGF0aW9uX3RvX2hvbGRlcl9hZnRlcl9pZl9lbHNlQDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI3MQogICAgLy8gZm9yIChsZXQgY3VyUGFnZSA9IHBhZ2U7IGN1clBhZ2UubmF0aXZlIDwgbGFzdFBhZ2UubmF0aXZlOyBjdXJQYWdlID0gbmV3IGFyYzQuVWludE42NChjdXJQYWdlLm5hdGl2ZSArIDEpKSB7CiAgICBmcmFtZV9kaWcgOAogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGl0b2IKICAgIGZyYW1lX2J1cnkgMQogICAgYiBfYWRkX3BhcnRpY2lwYXRpb25fdG9faG9sZGVyX3doaWxlX3RvcEAzCgpfYWRkX3BhcnRpY2lwYXRpb25fdG9faG9sZGVyX2FmdGVyX2lmX2Vsc2VAMjA6CiAgICBmcmFtZV9kaWcgNwogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgNwogICAgYiBfYWRkX3BhcnRpY2lwYXRpb25fdG9faG9sZGVyX2Zvcl9oZWFkZXJAMTcKCl9hZGRfcGFydGljaXBhdGlvbl90b19ob2xkZXJfYWZ0ZXJfZm9yQDIxOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyNTcKICAgIC8vIHJldHVybiBmYWxzZQogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MjgwCiAgICAvLyBpZiAodGhpcy5jb250YWluc0FkZHJlc3ModGhpcy5ob2xkZXJQYXJ0aXRpb25zQWRkcmVzc2VzKHBhZ2luYXRlZEtleSkudmFsdWUsIHBhcnRpY2lwYXRpb24pKSB7CiAgICBiIF9hZGRfcGFydGljaXBhdGlvbl90b19ob2xkZXJfYWZ0ZXJfaW5saW5lZF9zbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjpBcmMxNDEwLmNvbnRhaW5zQWRkcmVzc0AyMgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6OkFyYzE0MTAuX3RyYW5zZmVyX3BhcnRpdGlvbihmcm9tOiBieXRlcywgZnJvbVBhcnRpdGlvbjogYnl0ZXMsIHRvOiBieXRlcywgdG9QYXJ0aXRpb246IGJ5dGVzLCBhbW91bnQ6IGJ5dGVzLCBkYXRhOiBieXRlcykgLT4gdm9pZDoKX3RyYW5zZmVyX3BhcnRpdGlvbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MzE4LTMyNQogICAgLy8gcHJvdGVjdGVkIF90cmFuc2Zlcl9wYXJ0aXRpb24oCiAgICAvLyAgIGZyb206IGFyYzQuQWRkcmVzcywKICAgIC8vICAgZnJvbVBhcnRpdGlvbjogYXJjNC5BZGRyZXNzLAogICAgLy8gICB0bzogYXJjNC5BZGRyZXNzLAogICAgLy8gICB0b1BhcnRpdGlvbjogYXJjNC5BZGRyZXNzLAogICAgLy8gICBhbW91bnQ6IGFyYzQuVWludE4yNTYsCiAgICAvLyAgIGRhdGE6IGFyYzQuRHluYW1pY0J5dGVzLAogICAgLy8gKTogdm9pZCB7CiAgICBwcm90byA2IDAKICAgIGludGNfMCAvLyAwCiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MzI2CiAgICAvLyBhc3NlcnQoYW1vdW50Lm5hdGl2ZSA+IDAsICdJbnZhbGlkIGFtb3VudCcpCiAgICBmcmFtZV9kaWcgLTIKICAgIHB1c2hieXRlcyAweAogICAgYj4KICAgIGFzc2VydCAvLyBJbnZhbGlkIGFtb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czozMjgKICAgIC8vIGNvbnN0IGZyb21LZXkgPSBuZXcgYXJjMTQxMF9QYXJ0aXRpb25LZXkoeyBob2xkZXI6IGZyb20sIHBhcnRpdGlvbjogZnJvbVBhcnRpdGlvbiB9KQogICAgZnJhbWVfZGlnIC02CiAgICBmcmFtZV9kaWcgLTUKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo1NwogICAgLy8gcHVibGljIHBhcnRpdGlvbnMgPSBCb3hNYXA8YXJjMTQxMF9QYXJ0aXRpb25LZXksIGFyYzQuVWludE4yNTY+KHsga2V5UHJlZml4OiAncCcgfSkKICAgIGJ5dGVjXzMgLy8gInAiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czozMjkKICAgIC8vIGlmICghdGhpcy5wYXJ0aXRpb25zKGZyb21LZXkpLmV4aXN0cykgewogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBibnogX3RyYW5zZmVyX3BhcnRpdGlvbl9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MzMwCiAgICAvLyB0aGlzLnBhcnRpdGlvbnMoZnJvbUtleSkudmFsdWUgPSBuZXcgYXJjNC5VaW50TjI1NigwKQogICAgZnJhbWVfZGlnIDIKICAgIGJ5dGVjXzEgLy8gMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICBib3hfcHV0CgpfdHJhbnNmZXJfcGFydGl0aW9uX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MzMyCiAgICAvLyB0aGlzLnBhcnRpdGlvbnMoZnJvbUtleSkudmFsdWUgPSBuZXcgYXJjNC5VaW50TjI1Nih0aGlzLnBhcnRpdGlvbnMoZnJvbUtleSkudmFsdWUubmF0aXZlIC0gYW1vdW50Lm5hdGl2ZSkKICAgIGZyYW1lX2RpZyAyCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBmcmFtZV9kaWcgLTIKICAgIGItCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18yIC8vIDMyCiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBpbnRjXzIgLy8gMzIKICAgIGJ6ZXJvCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMAogICAgYnwKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MzM3LTM0MwogICAgLy8gbmV3IGFyYzE0MTBfcGFydGl0aW9uX3RyYW5zZmVyKHsKICAgIC8vICAgZnJvbTogZnJvbSwKICAgIC8vICAgdG86IHRvLAogICAgLy8gICBwYXJ0aXRpb246IGZyb21QYXJ0aXRpb24sCiAgICAvLyAgIGFtb3VudDogYW1vdW50LAogICAgLy8gICBkYXRhOiBkYXRhLAogICAgLy8gfSksCiAgICBmcmFtZV9kaWcgLTYKICAgIGZyYW1lX2RpZyAtNAogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTUKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAweDAwODIKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MzM1LTM0NAogICAgLy8gZW1pdCgKICAgIC8vICAgJ1RyYW5zZmVyJywKICAgIC8vICAgbmV3IGFyYzE0MTBfcGFydGl0aW9uX3RyYW5zZmVyKHsKICAgIC8vICAgICBmcm9tOiBmcm9tLAogICAgLy8gICAgIHRvOiB0bywKICAgIC8vICAgICBwYXJ0aXRpb246IGZyb21QYXJ0aXRpb24sCiAgICAvLyAgICAgYW1vdW50OiBhbW91bnQsCiAgICAvLyAgICAgZGF0YTogZGF0YSwKICAgIC8vICAgfSksCiAgICAvLyApCiAgICBieXRlYyAxNSAvLyAweDAwMDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzIDB4MjA2Yjc5NDAgLy8gbWV0aG9kICJUcmFuc2ZlcigoYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MsdWludDI1NixieXRlW10pKSIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjM0NwogICAgLy8gaWYgKHRvUGFydGl0aW9uICE9PSBmcm9tUGFydGl0aW9uKSB7CiAgICBmcmFtZV9kaWcgLTMKICAgIGZyYW1lX2RpZyAtNQogICAgIT0KICAgIGJ6IF90cmFuc2Zlcl9wYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjM0OAogICAgLy8gdGhpcy5fYWRkX3BhcnRpY2lwYXRpb25fdG9faG9sZGVyKHRvLCB0b1BhcnRpdGlvbikKICAgIGZyYW1lX2RpZyAtNAogICAgZnJhbWVfZGlnIC0zCiAgICBjYWxsc3ViIF9hZGRfcGFydGljaXBhdGlvbl90b19ob2xkZXIKCl90cmFuc2Zlcl9wYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czozNTIKICAgIC8vIGNvbnN0IHRvS2V5ID0gbmV3IGFyYzE0MTBfUGFydGl0aW9uS2V5KHsgaG9sZGVyOiB0bywgcGFydGl0aW9uOiB0b1BhcnRpdGlvbiB9KQogICAgZnJhbWVfZGlnIC00CiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo1NwogICAgLy8gcHVibGljIHBhcnRpdGlvbnMgPSBCb3hNYXA8YXJjMTQxMF9QYXJ0aXRpb25LZXksIGFyYzQuVWludE4yNTY+KHsga2V5UHJlZml4OiAncCcgfSkKICAgIGJ5dGVjXzMgLy8gInAiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgZnJhbWVfYnVyeSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjM1MwogICAgLy8gaWYgKCF0aGlzLnBhcnRpdGlvbnModG9LZXkpLmV4aXN0cykgewogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBibnogX3RyYW5zZmVyX3BhcnRpdGlvbl9hZnRlcl9pZl9lbHNlQDYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MzU0CiAgICAvLyB0aGlzLnBhcnRpdGlvbnModG9LZXkpLnZhbHVlID0gbmV3IGFyYzQuVWludE4yNTYoMCkKICAgIGZyYW1lX2RpZyAxCiAgICBieXRlY18xIC8vIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAogICAgYm94X3B1dAoKX3RyYW5zZmVyX3BhcnRpdGlvbl9hZnRlcl9pZl9lbHNlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjM1NgogICAgLy8gdGhpcy5wYXJ0aXRpb25zKHRvS2V5KS52YWx1ZSA9IG5ldyBhcmM0LlVpbnROMjU2KHRoaXMucGFydGl0aW9ucyh0b0tleSkudmFsdWUubmF0aXZlICsgYW1vdW50Lm5hdGl2ZSkKICAgIGZyYW1lX2RpZyAxCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBmcmFtZV9kaWcgLTIKICAgIGIrCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18yIC8vIDMyCiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBmcmFtZV9kaWcgMAogICAgYnwKICAgIGJveF9wdXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6OkFyYzE0MTAuYXJjMTQxMF9hdXRob3JpemVfb3BlcmF0b3JfYnlfcG9ydGlvbihob2xkZXI6IGJ5dGVzLCBvcGVyYXRvcjogYnl0ZXMsIHBhcnRpdGlvbjogYnl0ZXMsIGFtb3VudDogYnl0ZXMpIC0+IHZvaWQ6CmFyYzE0MTBfYXV0aG9yaXplX29wZXJhdG9yX2J5X3BvcnRpb246CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjM1OS0zNjUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBwdWJsaWMgYXJjMTQxMF9hdXRob3JpemVfb3BlcmF0b3JfYnlfcG9ydGlvbigKICAgIC8vICAgaG9sZGVyOiBhcmM0LkFkZHJlc3MsCiAgICAvLyAgIG9wZXJhdG9yOiBhcmM0LkFkZHJlc3MsCiAgICAvLyAgIHBhcnRpdGlvbjogYXJjNC5BZGRyZXNzLAogICAgLy8gICBhbW91bnQ6IGFyYzQuVWludE4yNTYsCiAgICAvLyApOiB2b2lkIHsKICAgIHByb3RvIDQgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czozNjYKICAgIC8vIGFzc2VydChuZXcgYXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpID09PSBob2xkZXIsICdPbmx5IGhvbGRlciBjYW4gYXV0aG9yaXplIHBvcnRpb24nKQogICAgdHhuIFNlbmRlcgogICAgZnJhbWVfZGlnIC00CiAgICA9PQogICAgYXNzZXJ0IC8vIE9ubHkgaG9sZGVyIGNhbiBhdXRob3JpemUgcG9ydGlvbgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czozNjcKICAgIC8vIGNvbnN0IGtleSA9IG5ldyBhcmMxNDEwX09wZXJhdG9yUG9ydGlvbktleSh7IGhvbGRlciwgb3BlcmF0b3IsIHBhcnRpdGlvbiB9KQogICAgZnJhbWVfZGlnIC00CiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NjMKICAgIC8vIHB1YmxpYyBvcGVyYXRvclBvcnRpb25BbGxvd2FuY2VzID0gQm94TWFwPGFyYzE0MTBfT3BlcmF0b3JQb3J0aW9uS2V5LCBhcmM0LlVpbnROMjU2Pih7IGtleVByZWZpeDogJ29wYScgfSkKICAgIGJ5dGVjIDEyIC8vICJvcGEiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MzY4CiAgICAvLyB0aGlzLm9wZXJhdG9yUG9ydGlvbkFsbG93YW5jZXMoa2V5KS52YWx1ZSA9IGFtb3VudAogICAgZnJhbWVfZGlnIC0xCiAgICBib3hfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjpBcmMxNDEwLmFyYzE0MTBfaXNfb3BlcmF0b3JfYnlfcG9ydGlvbihob2xkZXI6IGJ5dGVzLCBvcGVyYXRvcjogYnl0ZXMsIHBhcnRpdGlvbjogYnl0ZXMpIC0+IGJ5dGVzOgphcmMxNDEwX2lzX29wZXJhdG9yX2J5X3BvcnRpb246CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjM3MS0zNzYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICAvLyBwdWJsaWMgYXJjMTQxMF9pc19vcGVyYXRvcl9ieV9wb3J0aW9uKAogICAgLy8gICBob2xkZXI6IGFyYzQuQWRkcmVzcywKICAgIC8vICAgb3BlcmF0b3I6IGFyYzQuQWRkcmVzcywKICAgIC8vICAgcGFydGl0aW9uOiBhcmM0LkFkZHJlc3MsCiAgICAvLyApOiBhcmM0LkJvb2wgewogICAgcHJvdG8gMyAxCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czozNzcKICAgIC8vIGlmIChvcGVyYXRvciA9PT0gaG9sZGVyKSByZXR1cm4gbmV3IGFyYzQuQm9vbCh0cnVlKQogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTMKICAgID09CiAgICBieiBhcmMxNDEwX2lzX29wZXJhdG9yX2J5X3BvcnRpb25fYWZ0ZXJfaWZfZWxzZUAyCiAgICBieXRlYyA0IC8vIDB4ODAKICAgIHN3YXAKICAgIHJldHN1YgoKYXJjMTQxMF9pc19vcGVyYXRvcl9ieV9wb3J0aW9uX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6Mzc4CiAgICAvLyBjb25zdCBrZXkgPSBuZXcgYXJjMTQxMF9PcGVyYXRvclBvcnRpb25LZXkoeyBob2xkZXIsIG9wZXJhdG9yLCBwYXJ0aXRpb24gfSkKICAgIGZyYW1lX2RpZyAtMwogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjYzCiAgICAvLyBwdWJsaWMgb3BlcmF0b3JQb3J0aW9uQWxsb3dhbmNlcyA9IEJveE1hcDxhcmMxNDEwX09wZXJhdG9yUG9ydGlvbktleSwgYXJjNC5VaW50TjI1Nj4oeyBrZXlQcmVmaXg6ICdvcGEnIH0pCiAgICBieXRlYyAxMiAvLyAib3BhIgogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czozNzkKICAgIC8vIGlmICghdGhpcy5vcGVyYXRvclBvcnRpb25BbGxvd2FuY2VzKGtleSkuZXhpc3RzKSByZXR1cm4gbmV3IGFyYzQuQm9vbChmYWxzZSkKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYm56IGFyYzE0MTBfaXNfb3BlcmF0b3JfYnlfcG9ydGlvbl9hZnRlcl9pZl9lbHNlQDQKICAgIGJ5dGVjIDcgLy8gMHgwMAogICAgc3dhcAogICAgcmV0c3ViCgphcmMxNDEwX2lzX29wZXJhdG9yX2J5X3BvcnRpb25fYWZ0ZXJfaWZfZWxzZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czozODAKICAgIC8vIHJldHVybiBuZXcgYXJjNC5Cb29sKHRoaXMub3BlcmF0b3JQb3J0aW9uQWxsb3dhbmNlcyhrZXkpLnZhbHVlLm5hdGl2ZSA+IDApCiAgICBmcmFtZV9kaWcgMAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIHB1c2hieXRlcyAweAogICAgYj4KICAgIGJ5dGVjIDcgLy8gMHgwMAogICAgaW50Y18wIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBzd2FwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjpBcmMxNDEwLmFyYzE0MTBfaXNzdWVfYnlfcGFydGl0aW9uKHRvOiBieXRlcywgcGFydGl0aW9uOiBieXRlcywgYW1vdW50OiBieXRlcywgZGF0YTogYnl0ZXMpIC0+IHZvaWQ6CmFyYzE0MTBfaXNzdWVfYnlfcGFydGl0aW9uOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czozODMtMzg5CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gcHVibGljIGFyYzE0MTBfaXNzdWVfYnlfcGFydGl0aW9uKAogICAgLy8gICB0bzogYXJjNC5BZGRyZXNzLAogICAgLy8gICBwYXJ0aXRpb246IGFyYzQuQWRkcmVzcywKICAgIC8vICAgYW1vdW50OiBhcmM0LlVpbnROMjU2LAogICAgLy8gICBkYXRhOiBhcmM0LkR5bmFtaWNCeXRlcywKICAgIC8vICk6IHZvaWQgewogICAgcHJvdG8gNCAwCiAgICBpbnRjXzAgLy8gMAogICAgZHVwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjM5MAogICAgLy8gYXNzZXJ0KGFtb3VudC5uYXRpdmUgPiAwLCAnSW52YWxpZCBhbW91bnQnKQogICAgZnJhbWVfZGlnIC0yCiAgICBwdXNoYnl0ZXMgMHgKICAgIGI+CiAgICBhc3NlcnQgLy8gSW52YWxpZCBhbW91bnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MzkyCiAgICAvLyBjb25zdCB0b0tleSA9IG5ldyBhcmMxNDEwX1BhcnRpdGlvbktleSh7IGhvbGRlcjogdG8sIHBhcnRpdGlvbiB9KQogICAgZnJhbWVfZGlnIC00CiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgZHVwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjU3CiAgICAvLyBwdWJsaWMgcGFydGl0aW9ucyA9IEJveE1hcDxhcmMxNDEwX1BhcnRpdGlvbktleSwgYXJjNC5VaW50TjI1Nj4oeyBrZXlQcmVmaXg6ICdwJyB9KQogICAgYnl0ZWNfMyAvLyAicCIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjM5MwogICAgLy8gaWYgKCF0aGlzLnBhcnRpdGlvbnModG9LZXkpLmV4aXN0cykgewogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBibnogYXJjMTQxMF9pc3N1ZV9ieV9wYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjM5NAogICAgLy8gdGhpcy5wYXJ0aXRpb25zKHRvS2V5KS52YWx1ZSA9IG5ldyBhcmM0LlVpbnROMjU2KDApCiAgICBmcmFtZV9kaWcgMwogICAgYnl0ZWNfMSAvLyAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6Mzk1CiAgICAvLyB0aGlzLl9hZGRfcGFydGljaXBhdGlvbl90b19ob2xkZXIodG8sIHBhcnRpdGlvbikKICAgIGZyYW1lX2RpZyAtNAogICAgZnJhbWVfZGlnIC0zCiAgICBjYWxsc3ViIF9hZGRfcGFydGljaXBhdGlvbl90b19ob2xkZXIKCmFyYzE0MTBfaXNzdWVfYnlfcGFydGl0aW9uX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6Mzk3CiAgICAvLyB0aGlzLnBhcnRpdGlvbnModG9LZXkpLnZhbHVlID0gbmV3IGFyYzQuVWludE4yNTYodGhpcy5wYXJ0aXRpb25zKHRvS2V5KS52YWx1ZS5uYXRpdmUgKyBhbW91bnQubmF0aXZlKQogICAgZnJhbWVfZGlnIDMKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGZyYW1lX2RpZyAtMgogICAgYisKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzIgLy8gMzIKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGludGNfMiAvLyAzMgogICAgYnplcm8KICAgIGR1cAogICAgZnJhbWVfYnVyeSAwCiAgICBifAogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjUzCiAgICAvLyBwdWJsaWMgYmFsYW5jZXMgPSBCb3hNYXA8QWRkcmVzcywgVWludE4yNTY+KHsga2V5UHJlZml4OiAnYicgfSkKICAgIGJ5dGVjIDggLy8gImIiCiAgICBmcmFtZV9kaWcgLTQKICAgIGNvbmNhdAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6Mzk5CiAgICAvLyBpZiAoIXRoaXMuYmFsYW5jZXModG8pLmV4aXN0cykgewogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBibnogYXJjMTQxMF9pc3N1ZV9ieV9wYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjQwMAogICAgLy8gdGhpcy5iYWxhbmNlcyh0bykudmFsdWUgPSBuZXcgYXJjNC5VaW50TjI1NigwKQogICAgZnJhbWVfZGlnIDEKICAgIGJ5dGVjXzEgLy8gMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICBib3hfcHV0CgphcmMxNDEwX2lzc3VlX2J5X3BhcnRpdGlvbl9hZnRlcl9pZl9lbHNlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjQwMgogICAgLy8gdGhpcy5iYWxhbmNlcyh0bykudmFsdWUgPSBuZXcgYXJjNC5VaW50TjI1Nih0aGlzLmJhbGFuY2VzKHRvKS52YWx1ZS5uYXRpdmUgKyBhbW91bnQubmF0aXZlKQogICAgZnJhbWVfZGlnIDEKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGZyYW1lX2RpZyAtMgogICAgYisKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzIgLy8gMzIKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGZyYW1lX2RpZyAwCiAgICBkdXAKICAgIGNvdmVyIDMKICAgIGJ8CiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NTEKICAgIC8vIHB1YmxpYyB0b3RhbFN1cHBseSA9IEdsb2JhbFN0YXRlPFVpbnROMjU2Pih7IGtleTogJ3QnIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNSAvLyAidCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjQwMwogICAgLy8gdGhpcy50b3RhbFN1cHBseS52YWx1ZSA9IG5ldyBhcmM0LlVpbnROMjU2KHRoaXMudG90YWxTdXBwbHkudmFsdWUubmF0aXZlICsgYW1vdW50Lm5hdGl2ZSkKICAgIGZyYW1lX2RpZyAtMgogICAgYisKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzIgLy8gMzIKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGJ8CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NTEKICAgIC8vIHB1YmxpYyB0b3RhbFN1cHBseSA9IEdsb2JhbFN0YXRlPFVpbnROMjU2Pih7IGtleTogJ3QnIH0pCiAgICBieXRlYyA1IC8vICJ0IgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo0MDMKICAgIC8vIHRoaXMudG90YWxTdXBwbHkudmFsdWUgPSBuZXcgYXJjNC5VaW50TjI1Nih0aGlzLnRvdGFsU3VwcGx5LnZhbHVlLm5hdGl2ZSArIGFtb3VudC5uYXRpdmUpCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo0MDQKICAgIC8vIGVtaXQoJ0lzc3VlJywgbmV3IGFyYzE0MTBfcGFydGl0aW9uX2lzc3VlKHsgdG8sIHBhcnRpdGlvbiwgYW1vdW50LCBkYXRhIH0pKQogICAgZnJhbWVfZGlnIDIKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBieXRlYyAxOCAvLyAweDAwNjIKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIGJ5dGVjIDE1IC8vIDB4MDAwMgogICAgc3dhcAogICAgY29uY2F0CiAgICBwdXNoYnl0ZXMgMHhmYTQ0M2IxYiAvLyBtZXRob2QgIklzc3VlKChhZGRyZXNzLGFkZHJlc3MsdWludDI1NixieXRlW10pKSIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjpBcmMxNDEwLmFyYzE0MTBfcmVkZWVtX2J5X3BhcnRpdGlvbihmcm9tOiBieXRlcywgcGFydGl0aW9uOiBieXRlcywgYW1vdW50OiBieXRlcywgZGF0YTogYnl0ZXMpIC0+IHZvaWQ6CmFyYzE0MTBfcmVkZWVtX2J5X3BhcnRpdGlvbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NDA3LTQxMwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIHB1YmxpYyBhcmMxNDEwX3JlZGVlbV9ieV9wYXJ0aXRpb24oCiAgICAvLyAgIGZyb206IGFyYzQuQWRkcmVzcywKICAgIC8vICAgcGFydGl0aW9uOiBhcmM0LkFkZHJlc3MsCiAgICAvLyAgIGFtb3VudDogYXJjNC5VaW50TjI1NiwKICAgIC8vICAgZGF0YTogYXJjNC5EeW5hbWljQnl0ZXMsCiAgICAvLyApOiB2b2lkIHsKICAgIHByb3RvIDQgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo0MTQKICAgIC8vIGFzc2VydChhbW91bnQubmF0aXZlID4gMCwgJ0ludmFsaWQgYW1vdW50JykKICAgIGZyYW1lX2RpZyAtMgogICAgcHVzaGJ5dGVzIDB4CiAgICBiPgogICAgYXNzZXJ0IC8vIEludmFsaWQgYW1vdW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjQxNQogICAgLy8gY29uc3QgZnJvbUtleSA9IG5ldyBhcmMxNDEwX1BhcnRpdGlvbktleSh7IGhvbGRlcjogZnJvbSwgcGFydGl0aW9uIH0pCiAgICBmcmFtZV9kaWcgLTQKICAgIGZyYW1lX2RpZyAtMwogICAgY29uY2F0CiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NTcKICAgIC8vIHB1YmxpYyBwYXJ0aXRpb25zID0gQm94TWFwPGFyYzE0MTBfUGFydGl0aW9uS2V5LCBhcmM0LlVpbnROMjU2Pih7IGtleVByZWZpeDogJ3AnIH0pCiAgICBieXRlY18zIC8vICJwIgogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjQxNgogICAgLy8gYXNzZXJ0KHRoaXMucGFydGl0aW9ucyhmcm9tS2V5KS5leGlzdHMsICdQYXJ0aXRpb24gYmFsYW5jZSBtaXNzaW5nJykKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gUGFydGl0aW9uIGJhbGFuY2UgbWlzc2luZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo0MTcKICAgIC8vIGFzc2VydCh0aGlzLnBhcnRpdGlvbnMoZnJvbUtleSkudmFsdWUubmF0aXZlID49IGFtb3VudC5uYXRpdmUsICdJbnN1ZmZpY2llbnQgcGFydGl0aW9uIGJhbGFuY2UnKQogICAgZHVwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgZnJhbWVfZGlnIC0yCiAgICBiPj0KICAgIGFzc2VydCAvLyBJbnN1ZmZpY2llbnQgcGFydGl0aW9uIGJhbGFuY2UKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NDE4CiAgICAvLyB0aGlzLnBhcnRpdGlvbnMoZnJvbUtleSkudmFsdWUgPSBuZXcgYXJjNC5VaW50TjI1Nih0aGlzLnBhcnRpdGlvbnMoZnJvbUtleSkudmFsdWUubmF0aXZlIC0gYW1vdW50Lm5hdGl2ZSkKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGZyYW1lX2RpZyAtMgogICAgYi0KICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzIgLy8gMzIKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGludGNfMiAvLyAzMgogICAgYnplcm8KICAgIGR1cAogICAgY292ZXIgMwogICAgYnwKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo1MwogICAgLy8gcHVibGljIGJhbGFuY2VzID0gQm94TWFwPEFkZHJlc3MsIFVpbnROMjU2Pih7IGtleVByZWZpeDogJ2InIH0pCiAgICBieXRlYyA4IC8vICJiIgogICAgZnJhbWVfZGlnIC00CiAgICBjb25jYXQKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo0MjAKICAgIC8vIGFzc2VydCh0aGlzLmJhbGFuY2VzKGZyb20pLmV4aXN0cyAmJiB0aGlzLmJhbGFuY2VzKGZyb20pLnZhbHVlLm5hdGl2ZSA+PSBhbW91bnQubmF0aXZlLCAnSW5zdWZmaWNpZW50IGJhbGFuY2UnKQogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBieiBhcmMxNDEwX3JlZGVlbV9ieV9wYXJ0aXRpb25fYm9vbF9mYWxzZUAzCiAgICBmcmFtZV9kaWcgMgogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGZyYW1lX2RpZyAtMgogICAgYj49CiAgICBieiBhcmMxNDEwX3JlZGVlbV9ieV9wYXJ0aXRpb25fYm9vbF9mYWxzZUAzCiAgICBpbnRjXzEgLy8gMQoKYXJjMTQxMF9yZWRlZW1fYnlfcGFydGl0aW9uX2Jvb2xfbWVyZ2VANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NDIwCiAgICAvLyBhc3NlcnQodGhpcy5iYWxhbmNlcyhmcm9tKS5leGlzdHMgJiYgdGhpcy5iYWxhbmNlcyhmcm9tKS52YWx1ZS5uYXRpdmUgPj0gYW1vdW50Lm5hdGl2ZSwgJ0luc3VmZmljaWVudCBiYWxhbmNlJykKICAgIGFzc2VydCAvLyBJbnN1ZmZpY2llbnQgYmFsYW5jZQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo0MjEKICAgIC8vIHRoaXMuYmFsYW5jZXMoZnJvbSkudmFsdWUgPSBuZXcgYXJjNC5VaW50TjI1Nih0aGlzLmJhbGFuY2VzKGZyb20pLnZhbHVlLm5hdGl2ZSAtIGFtb3VudC5uYXRpdmUpCiAgICBmcmFtZV9kaWcgMgogICAgZHVwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgZnJhbWVfZGlnIC0yCiAgICBiLQogICAgZHVwCiAgICBsZW4KICAgIGludGNfMiAvLyAzMgogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgZnJhbWVfZGlnIDEKICAgIGR1cAogICAgY292ZXIgMwogICAgYnwKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo1MQogICAgLy8gcHVibGljIHRvdGFsU3VwcGx5ID0gR2xvYmFsU3RhdGU8VWludE4yNTY+KHsga2V5OiAndCcgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA1IC8vICJ0IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NDIyCiAgICAvLyB0aGlzLnRvdGFsU3VwcGx5LnZhbHVlID0gbmV3IGFyYzQuVWludE4yNTYodGhpcy50b3RhbFN1cHBseS52YWx1ZS5uYXRpdmUgLSBhbW91bnQubmF0aXZlKQogICAgZnJhbWVfZGlnIC0yCiAgICBiLQogICAgZHVwCiAgICBsZW4KICAgIGludGNfMiAvLyAzMgogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgYnwKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo1MQogICAgLy8gcHVibGljIHRvdGFsU3VwcGx5ID0gR2xvYmFsU3RhdGU8VWludE4yNTY+KHsga2V5OiAndCcgfSkKICAgIGJ5dGVjIDUgLy8gInQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjQyMgogICAgLy8gdGhpcy50b3RhbFN1cHBseS52YWx1ZSA9IG5ldyBhcmM0LlVpbnROMjU2KHRoaXMudG90YWxTdXBwbHkudmFsdWUubmF0aXZlIC0gYW1vdW50Lm5hdGl2ZSkKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjQyMwogICAgLy8gZW1pdCgnUmVkZWVtJywgbmV3IGFyYzE0MTBfcGFydGl0aW9uX3JlZGVlbSh7IGZyb20sIHBhcnRpdGlvbiwgYW1vdW50LCBkYXRhIH0pKQogICAgZnJhbWVfZGlnIDAKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBieXRlYyAxOCAvLyAweDAwNjIKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIGJ5dGVjIDE1IC8vIDB4MDAwMgogICAgc3dhcAogICAgY29uY2F0CiAgICBwdXNoYnl0ZXMgMHg1YzI3YjRmYyAvLyBtZXRob2QgIlJlZGVlbSgoYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYsYnl0ZVtdKSkiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgcmV0c3ViCgphcmMxNDEwX3JlZGVlbV9ieV9wYXJ0aXRpb25fYm9vbF9mYWxzZUAzOgogICAgaW50Y18wIC8vIDAKICAgIGIgYXJjMTQxMF9yZWRlZW1fYnlfcGFydGl0aW9uX2Jvb2xfbWVyZ2VANAoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo6QXJjMjAwLmJvb3RzdHJhcChuYW1lOiBieXRlcywgc3ltYm9sOiBieXRlcywgZGVjaW1hbHM6IGJ5dGVzLCB0b3RhbFN1cHBseTogYnl0ZXMpIC0+IGJ5dGVzOgpib290c3RyYXA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NTYtNTcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBwdWJsaWMgYm9vdHN0cmFwKG5hbWU6IER5bmFtaWNCeXRlcywgc3ltYm9sOiBEeW5hbWljQnl0ZXMsIGRlY2ltYWxzOiBVaW50TjgsIHRvdGFsU3VwcGx5OiBVaW50TjI1Nik6IEJvb2wgewogICAgcHJvdG8gNCAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NTgKICAgIC8vIGFzc2VydChUeG4uc2VuZGVyID09PSBHbG9iYWwuY3JlYXRvckFkZHJlc3MsICdPbmx5IGRlcGxveWVyIG9mIHRoaXMgc21hcnQgY29udHJhY3QgY2FuIGNhbGwgYm9vdHN0cmFwIG1ldGhvZCcpCiAgICB0eG4gU2VuZGVyCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgID09CiAgICBhc3NlcnQgLy8gT25seSBkZXBsb3llciBvZiB0aGlzIHNtYXJ0IGNvbnRyYWN0IGNhbiBjYWxsIGJvb3RzdHJhcCBtZXRob2QKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo1OQogICAgLy8gYXNzZXJ0KG5hbWUubmF0aXZlLmxlbmd0aCA+IDAsICdOYW1lIG9mIHRoZSBhc3NldCBtdXN0IGJlIGxvbmdlciBvciBlcXVhbCB0byAxIGNoYXJhY3RlcicpCiAgICBmcmFtZV9kaWcgLTQKICAgIGV4dHJhY3QgMiAwCiAgICBsZW4KICAgIGR1cAogICAgYXNzZXJ0IC8vIE5hbWUgb2YgdGhlIGFzc2V0IG11c3QgYmUgbG9uZ2VyIG9yIGVxdWFsIHRvIDEgY2hhcmFjdGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NjAKICAgIC8vIGFzc2VydChuYW1lLm5hdGl2ZS5sZW5ndGggPD0gMzIsICdOYW1lIG9mIHRoZSBhc3NldCBtdXN0IGJlIHNob3J0ZXIgb3IgZXF1YWwgdG8gMzIgY2hhcmFjdGVycycpCiAgICBpbnRjXzIgLy8gMzIKICAgIDw9CiAgICBhc3NlcnQgLy8gTmFtZSBvZiB0aGUgYXNzZXQgbXVzdCBiZSBzaG9ydGVyIG9yIGVxdWFsIHRvIDMyIGNoYXJhY3RlcnMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo2MQogICAgLy8gYXNzZXJ0KHN5bWJvbC5uYXRpdmUubGVuZ3RoID4gMCwgJ1N5bWJvbCBvZiB0aGUgYXNzZXQgbXVzdCBiZSBsb25nZXIgb3IgZXF1YWwgdG8gMSBjaGFyYWN0ZXInKQogICAgZnJhbWVfZGlnIC0zCiAgICBleHRyYWN0IDIgMAogICAgbGVuCiAgICBkdXAKICAgIGFzc2VydCAvLyBTeW1ib2wgb2YgdGhlIGFzc2V0IG11c3QgYmUgbG9uZ2VyIG9yIGVxdWFsIHRvIDEgY2hhcmFjdGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NjIKICAgIC8vIGFzc2VydChzeW1ib2wubmF0aXZlLmxlbmd0aCA8PSA4LCAnU3ltYm9sIG9mIHRoZSBhc3NldCBtdXN0IGJlIHNob3J0ZXIgb3IgZXF1YWwgdG8gOCBjaGFyYWN0ZXJzJykKICAgIGludGNfMyAvLyA4CiAgICA8PQogICAgYXNzZXJ0IC8vIFN5bWJvbCBvZiB0aGUgYXNzZXQgbXVzdCBiZSBzaG9ydGVyIG9yIGVxdWFsIHRvIDggY2hhcmFjdGVycwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjUxCiAgICAvLyBwdWJsaWMgdG90YWxTdXBwbHkgPSBHbG9iYWxTdGF0ZTxVaW50TjI1Nj4oeyBrZXk6ICd0JyB9KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDUgLy8gInQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NjMKICAgIC8vIGFzc2VydCghdGhpcy50b3RhbFN1cHBseS5oYXNWYWx1ZSwgJ1RoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgb25seSBvbmNlJykKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBidXJ5IDEKICAgICEKICAgIGFzc2VydCAvLyBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIG9ubHkgb25jZQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjM5CiAgICAvLyBwdWJsaWMgbmFtZSA9IEdsb2JhbFN0YXRlPER5bmFtaWNCeXRlcz4oeyBrZXk6ICduJyB9KQogICAgcHVzaGJ5dGVzICJuIgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjY1CiAgICAvLyB0aGlzLm5hbWUudmFsdWUgPSBuYW1lCiAgICBmcmFtZV9kaWcgLTQKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NDMKICAgIC8vIHB1YmxpYyBzeW1ib2wgPSBHbG9iYWxTdGF0ZTxEeW5hbWljQnl0ZXM+KHsga2V5OiAncycgfSkKICAgIHB1c2hieXRlcyAicyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo2NgogICAgLy8gdGhpcy5zeW1ib2wudmFsdWUgPSBzeW1ib2wKICAgIGZyYW1lX2RpZyAtMwogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo1MQogICAgLy8gcHVibGljIHRvdGFsU3VwcGx5ID0gR2xvYmFsU3RhdGU8VWludE4yNTY+KHsga2V5OiAndCcgfSkKICAgIGJ5dGVjIDUgLy8gInQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NjcKICAgIC8vIHRoaXMudG90YWxTdXBwbHkudmFsdWUgPSB0b3RhbFN1cHBseQogICAgZnJhbWVfZGlnIC0xCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjQ3CiAgICAvLyBwdWJsaWMgZGVjaW1hbHMgPSBHbG9iYWxTdGF0ZTxVaW50Tjg+KHsga2V5OiAnZCcgfSkKICAgIHB1c2hieXRlcyAiZCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo2OAogICAgLy8gdGhpcy5kZWNpbWFscy52YWx1ZSA9IGRlY2ltYWxzCiAgICBmcmFtZV9kaWcgLTIKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NjkKICAgIC8vIGNvbnN0IHNlbmRlciA9IG5ldyBBZGRyZXNzKFR4bi5zZW5kZXIpCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NTMKICAgIC8vIHB1YmxpYyBiYWxhbmNlcyA9IEJveE1hcDxBZGRyZXNzLCBVaW50TjI1Nj4oeyBrZXlQcmVmaXg6ICdiJyB9KQogICAgYnl0ZWMgOCAvLyAiYiIKICAgIGRpZyAxCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo3MQogICAgLy8gdGhpcy5iYWxhbmNlcyhzZW5kZXIpLnZhbHVlID0gdG90YWxTdXBwbHkKICAgIGZyYW1lX2RpZyAtMQogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjczCiAgICAvLyBlbWl0KG5ldyBhcmMyMDBfVHJhbnNmZXIoeyBmcm9tOiBuZXcgQWRkcmVzcyhHbG9iYWwuemVyb0FkZHJlc3MpLCB0bzogc2VuZGVyLCB2YWx1ZTogdG90YWxTdXBwbHkgfSkpCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIGJ5dGVjIDE5IC8vIG1ldGhvZCAiYXJjMjAwX1RyYW5zZmVyKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KSIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NzQKICAgIC8vIHJldHVybiBuZXcgQm9vbCh0cnVlKQogICAgYnl0ZWMgNCAvLyAweDgwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6OkFyYzIwMC5hcmMyMDBfbmFtZSgpIC0+IGJ5dGVzOgphcmMyMDBfbmFtZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czozOQogICAgLy8gcHVibGljIG5hbWUgPSBHbG9iYWxTdGF0ZTxEeW5hbWljQnl0ZXM+KHsga2V5OiAnbicgfSkKICAgIGludGNfMCAvLyAwCiAgICBwdXNoYnl0ZXMgIm4iCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjg0CiAgICAvLyByZXR1cm4gbmV3IFN0YXRpY0J5dGVzPDMyPih0aGlzLm5hbWUudmFsdWUubmF0aXZlKQogICAgZXh0cmFjdCAyIDAKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzIgLy8gMzIKICAgID09CiAgICBhc3NlcnQgLy8gaW52YWxpZCBzaXplCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6OkFyYzIwMC5hcmMyMDBfc3ltYm9sKCkgLT4gYnl0ZXM6CmFyYzIwMF9zeW1ib2w6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NDMKICAgIC8vIHB1YmxpYyBzeW1ib2wgPSBHbG9iYWxTdGF0ZTxEeW5hbWljQnl0ZXM+KHsga2V5OiAncycgfSkKICAgIGludGNfMCAvLyAwCiAgICBwdXNoYnl0ZXMgInMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjk0CiAgICAvLyByZXR1cm4gbmV3IFN0YXRpY0J5dGVzPDg+KHRoaXMuc3ltYm9sLnZhbHVlLm5hdGl2ZSkKICAgIGV4dHJhY3QgMiAwCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18zIC8vIDgKICAgID09CiAgICBhc3NlcnQgLy8gaW52YWxpZCBzaXplCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6OkFyYzIwMC5hcmMyMDBfZGVjaW1hbHMoKSAtPiBieXRlczoKYXJjMjAwX2RlY2ltYWxzOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjQ3CiAgICAvLyBwdWJsaWMgZGVjaW1hbHMgPSBHbG9iYWxTdGF0ZTxVaW50Tjg+KHsga2V5OiAnZCcgfSkKICAgIGludGNfMCAvLyAwCiAgICBwdXNoYnl0ZXMgImQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjEwNAogICAgLy8gcmV0dXJuIHRoaXMuZGVjaW1hbHMudmFsdWUKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo6QXJjMjAwLmFyYzIwMF90b3RhbFN1cHBseSgpIC0+IGJ5dGVzOgphcmMyMDBfdG90YWxTdXBwbHk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NTEKICAgIC8vIHB1YmxpYyB0b3RhbFN1cHBseSA9IEdsb2JhbFN0YXRlPFVpbnROMjU2Pih7IGtleTogJ3QnIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNSAvLyAidCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MTE0CiAgICAvLyByZXR1cm4gdGhpcy50b3RhbFN1cHBseS52YWx1ZQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjpBcmMyMDAuYXJjMjAwX2JhbGFuY2VPZihvd25lcjogYnl0ZXMpIC0+IGJ5dGVzOgphcmMyMDBfYmFsYW5jZU9mOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjEyMy0xMjQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICAvLyBwdWJsaWMgYXJjMjAwX2JhbGFuY2VPZihvd25lcjogQWRkcmVzcyk6IGFyYzQuVWludE4yNTYgewogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MTI1CiAgICAvLyByZXR1cm4gdGhpcy5fYmFsYW5jZU9mKG93bmVyKQogICAgZnJhbWVfZGlnIC0xCiAgICBjYWxsc3ViIF9iYWxhbmNlT2YKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo6QXJjMjAwLmFyYzIwMF90cmFuc2ZlckZyb20oZnJvbTogYnl0ZXMsIHRvOiBieXRlcywgdmFsdWU6IGJ5dGVzKSAtPiBieXRlczoKYXJjMjAwX3RyYW5zZmVyRnJvbToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoxNDgtMTQ5CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gcHVibGljIGFyYzIwMF90cmFuc2ZlckZyb20oZnJvbTogQWRkcmVzcywgdG86IEFkZHJlc3MsIHZhbHVlOiBhcmM0LlVpbnROMjU2KTogYXJjNC5Cb29sIHsKICAgIHByb3RvIDMgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjE1MAogICAgLy8gY29uc3Qgc3BlbmRlciA9IG5ldyBBZGRyZXNzKFR4bi5zZW5kZXIpCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MTUxCiAgICAvLyBjb25zdCBzcGVuZGVyX2FsbG93YW5jZSA9IHRoaXMuX2FsbG93YW5jZShmcm9tLCBzcGVuZGVyKQogICAgZnJhbWVfZGlnIC0zCiAgICBkaWcgMQogICAgY2FsbHN1YiBfYWxsb3dhbmNlCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MTUyCiAgICAvLyBhc3NlcnQoc3BlbmRlcl9hbGxvd2FuY2UubmF0aXZlID49IHZhbHVlLm5hdGl2ZSwgJ2luc3VmZmljaWVudCBhcHByb3ZhbCcpCiAgICBkdXAKICAgIGZyYW1lX2RpZyAtMQogICAgYj49CiAgICBhc3NlcnQgLy8gaW5zdWZmaWNpZW50IGFwcHJvdmFsCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MTUzCiAgICAvLyBjb25zdCBuZXdfc3BlbmRlcl9hbGxvd2FuY2UgPSBuZXcgVWludE4yNTYoc3BlbmRlcl9hbGxvd2FuY2UubmF0aXZlIC0gdmFsdWUubmF0aXZlKQogICAgZnJhbWVfZGlnIC0xCiAgICBiLQogICAgZHVwCiAgICBsZW4KICAgIGludGNfMiAvLyAzMgogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgaW50Y18yIC8vIDMyCiAgICBiemVybwogICAgYnwKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoxNTQKICAgIC8vIHRoaXMuX2FwcHJvdmUoZnJvbSwgc3BlbmRlciwgbmV3X3NwZW5kZXJfYWxsb3dhbmNlKQogICAgZnJhbWVfZGlnIC0zCiAgICBjb3ZlciAyCiAgICBjYWxsc3ViIF9hcHByb3ZlCiAgICBwb3AKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoxNTUKICAgIC8vIHJldHVybiB0aGlzLl90cmFuc2Zlcihmcm9tLCB0bywgdmFsdWUpCiAgICBmcmFtZV9kaWcgLTMKICAgIGZyYW1lX2RpZyAtMgogICAgZnJhbWVfZGlnIC0xCiAgICBjYWxsc3ViIF90cmFuc2ZlcgogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjpBcmMyMDAuYXJjMjAwX2FwcHJvdmUoc3BlbmRlcjogYnl0ZXMsIHZhbHVlOiBieXRlcykgLT4gYnl0ZXM6CmFyYzIwMF9hcHByb3ZlOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjE2NS0xNjYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBwdWJsaWMgYXJjMjAwX2FwcHJvdmUoc3BlbmRlcjogQWRkcmVzcywgdmFsdWU6IGFyYzQuVWludE4yNTYpOiBCb29sIHsKICAgIHByb3RvIDIgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjE2NwogICAgLy8gY29uc3Qgb3duZXIgPSBuZXcgQWRkcmVzcyhUeG4uc2VuZGVyKQogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjE2OAogICAgLy8gcmV0dXJuIHRoaXMuX2FwcHJvdmUob3duZXIsIHNwZW5kZXIsIHZhbHVlKQogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgX2FwcHJvdmUKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo6QXJjMjAwLmFyYzIwMF9hbGxvd2FuY2Uob3duZXI6IGJ5dGVzLCBzcGVuZGVyOiBieXRlcykgLT4gYnl0ZXM6CmFyYzIwMF9hbGxvd2FuY2U6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MTc3LTE3OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIC8vIHB1YmxpYyBhcmMyMDBfYWxsb3dhbmNlKG93bmVyOiBBZGRyZXNzLCBzcGVuZGVyOiBBZGRyZXNzKTogYXJjNC5VaW50TjI1NiB7CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoxNzkKICAgIC8vIHJldHVybiB0aGlzLl9hbGxvd2FuY2Uob3duZXIsIHNwZW5kZXIpCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBfYWxsb3dhbmNlCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6OkFyYzIwMC5fYmFsYW5jZU9mKG93bmVyOiBieXRlcykgLT4gYnl0ZXM6Cl9iYWxhbmNlT2Y6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MTgyCiAgICAvLyBwcm90ZWN0ZWQgX2JhbGFuY2VPZihvd25lcjogQWRkcmVzcyk6IFVpbnROMjU2IHsKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjUzCiAgICAvLyBwdWJsaWMgYmFsYW5jZXMgPSBCb3hNYXA8QWRkcmVzcywgVWludE4yNTY+KHsga2V5UHJlZml4OiAnYicgfSkKICAgIGJ5dGVjIDggLy8gImIiCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgZHVwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MTgzCiAgICAvLyBpZiAoIXRoaXMuYmFsYW5jZXMob3duZXIpLmV4aXN0cykgcmV0dXJuIG5ldyBVaW50TjI1NigwKQogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBibnogX2JhbGFuY2VPZl9hZnRlcl9pZl9lbHNlQDIKICAgIGJ5dGVjXzEgLy8gMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICBzd2FwCiAgICByZXRzdWIKCl9iYWxhbmNlT2ZfYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjE4NAogICAgLy8gcmV0dXJuIHRoaXMuYmFsYW5jZXMob3duZXIpLnZhbHVlCiAgICBmcmFtZV9kaWcgMAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIHN3YXAKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo6QXJjMjAwLl90cmFuc2ZlcihzZW5kZXI6IGJ5dGVzLCByZWNpcGllbnQ6IGJ5dGVzLCBhbW91bnQ6IGJ5dGVzKSAtPiBieXRlczoKX3RyYW5zZmVyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjE4NwogICAgLy8gcHJvdGVjdGVkIF90cmFuc2ZlcihzZW5kZXI6IEFkZHJlc3MsIHJlY2lwaWVudDogQWRkcmVzcywgYW1vdW50OiBVaW50TjI1Nik6IEJvb2wgewogICAgcHJvdG8gMyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MTg4CiAgICAvLyBjb25zdCBzZW5kZXJfYmFsYW5jZSA9IHRoaXMuX2JhbGFuY2VPZihzZW5kZXIpCiAgICBmcmFtZV9kaWcgLTMKICAgIGNhbGxzdWIgX2JhbGFuY2VPZgogICAgZHVwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MTg5CiAgICAvLyBjb25zdCByZWNpcGllbnRfYmFsYW5jZSA9IHRoaXMuX2JhbGFuY2VPZihyZWNpcGllbnQpCiAgICBmcmFtZV9kaWcgLTIKICAgIGNhbGxzdWIgX2JhbGFuY2VPZgogICAgc3dhcAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjE5MAogICAgLy8gYXNzZXJ0KHNlbmRlcl9iYWxhbmNlLm5hdGl2ZSA+PSBhbW91bnQubmF0aXZlLCAnSW5zdWZmaWNpZW50IGJhbGFuY2UgYXQgdGhlIHNlbmRlciBhY2NvdW50JykKICAgIGZyYW1lX2RpZyAtMQogICAgYj49CiAgICBhc3NlcnQgLy8gSW5zdWZmaWNpZW50IGJhbGFuY2UgYXQgdGhlIHNlbmRlciBhY2NvdW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MTkyCiAgICAvLyBpZiAoc2VuZGVyICE9PSByZWNpcGllbnQpIHsKICAgIGZyYW1lX2RpZyAtMwogICAgZnJhbWVfZGlnIC0yCiAgICAhPQogICAgYnogX3RyYW5zZmVyX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjE5NAogICAgLy8gdGhpcy5iYWxhbmNlcyhzZW5kZXIpLnZhbHVlID0gbmV3IFVpbnROMjU2KHNlbmRlcl9iYWxhbmNlLm5hdGl2ZSAtIGFtb3VudC5uYXRpdmUpCiAgICBmcmFtZV9kaWcgMAogICAgZnJhbWVfZGlnIC0xCiAgICBiLQogICAgZHVwCiAgICBsZW4KICAgIGludGNfMiAvLyAzMgogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgaW50Y18yIC8vIDMyCiAgICBiemVybwogICAgc3dhcAogICAgZGlnIDEKICAgIGJ8CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NTMKICAgIC8vIHB1YmxpYyBiYWxhbmNlcyA9IEJveE1hcDxBZGRyZXNzLCBVaW50TjI1Nj4oeyBrZXlQcmVmaXg6ICdiJyB9KQogICAgYnl0ZWMgOCAvLyAiYiIKICAgIGZyYW1lX2RpZyAtMwogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MTk0CiAgICAvLyB0aGlzLmJhbGFuY2VzKHNlbmRlcikudmFsdWUgPSBuZXcgVWludE4yNTYoc2VuZGVyX2JhbGFuY2UubmF0aXZlIC0gYW1vdW50Lm5hdGl2ZSkKICAgIHN3YXAKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoxOTUKICAgIC8vIHRoaXMuYmFsYW5jZXMocmVjaXBpZW50KS52YWx1ZSA9IG5ldyBVaW50TjI1NihyZWNpcGllbnRfYmFsYW5jZS5uYXRpdmUgKyBhbW91bnQubmF0aXZlKQogICAgZnJhbWVfZGlnIDEKICAgIGZyYW1lX2RpZyAtMQogICAgYisKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzIgLy8gMzIKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGJ8CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NTMKICAgIC8vIHB1YmxpYyBiYWxhbmNlcyA9IEJveE1hcDxBZGRyZXNzLCBVaW50TjI1Nj4oeyBrZXlQcmVmaXg6ICdiJyB9KQogICAgYnl0ZWMgOCAvLyAiYiIKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MTk1CiAgICAvLyB0aGlzLmJhbGFuY2VzKHJlY2lwaWVudCkudmFsdWUgPSBuZXcgVWludE4yNTYocmVjaXBpZW50X2JhbGFuY2UubmF0aXZlICsgYW1vdW50Lm5hdGl2ZSkKICAgIHN3YXAKICAgIGJveF9wdXQKCl90cmFuc2Zlcl9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MTk3CiAgICAvLyBlbWl0KG5ldyBhcmMyMDBfVHJhbnNmZXIoeyBmcm9tOiBzZW5kZXIsIHRvOiByZWNpcGllbnQsIHZhbHVlOiBhbW91bnQgfSkpCiAgICBmcmFtZV9kaWcgLTMKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgYnl0ZWMgMTkgLy8gbWV0aG9kICJhcmMyMDBfVHJhbnNmZXIoYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpIgogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoxOTgKICAgIC8vIHJldHVybiBuZXcgQm9vbCh0cnVlKQogICAgYnl0ZWMgNCAvLyAweDgwCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo6QXJjMjAwLl9hcHByb3ZhbEtleShvd25lcjogYnl0ZXMsIHNwZW5kZXI6IGJ5dGVzKSAtPiBieXRlczoKX2FwcHJvdmFsS2V5OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjIwMAogICAgLy8gcHJvdGVjdGVkIF9hcHByb3ZhbEtleShvd25lcjogQWRkcmVzcywgc3BlbmRlcjogQWRkcmVzcyk6IFN0YXRpY0J5dGVzPDMyPiB7CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoyMDEKICAgIC8vIHJldHVybiBuZXcgU3RhdGljQnl0ZXM8MzI+KG9wLnNoYTI1NihvcC5jb25jYXQob3duZXIuYnl0ZXMsIHNwZW5kZXIuYnl0ZXMpKSkKICAgIGZyYW1lX2RpZyAtMgogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIHNoYTI1NgogICAgZHVwCiAgICBsZW4KICAgIGludGNfMiAvLyAzMgogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIHNpemUKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo6QXJjMjAwLl9hbGxvd2FuY2Uob3duZXI6IGJ5dGVzLCBzcGVuZGVyOiBieXRlcykgLT4gYnl0ZXM6Cl9hbGxvd2FuY2U6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MjA0CiAgICAvLyBwcm90ZWN0ZWQgX2FsbG93YW5jZShvd25lcjogQWRkcmVzcywgc3BlbmRlcjogQWRkcmVzcyk6IFVpbnROMjU2IHsKICAgIHByb3RvIDIgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjIwNQogICAgLy8gY29uc3Qga2V5ID0gdGhpcy5fYXBwcm92YWxLZXkob3duZXIsIHNwZW5kZXIpCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBfYXBwcm92YWxLZXkKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo1NQogICAgLy8gcHVibGljIGFwcHJvdmFscyA9IEJveE1hcDxTdGF0aWNCeXRlczwzMj4sIEFwcHJvdmFsU3RydWN0Pih7IGtleVByZWZpeDogJ2EnIH0pCiAgICBwdXNoYnl0ZXMgImEiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjIwNgogICAgLy8gaWYgKCF0aGlzLmFwcHJvdmFscyhrZXkpLmV4aXN0cykgcmV0dXJuIG5ldyBVaW50TjI1NigwKQogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBibnogX2FsbG93YW5jZV9hZnRlcl9pZl9lbHNlQDIKICAgIGJ5dGVjXzEgLy8gMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICBzd2FwCiAgICByZXRzdWIKCl9hbGxvd2FuY2VfYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjIwNwogICAgLy8gcmV0dXJuIHRoaXMuYXBwcm92YWxzKGtleSkudmFsdWUuYXBwcm92YWxBbW91bnQKICAgIGZyYW1lX2RpZyAwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgZXh0cmFjdCAwIDMyIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgc3dhcAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjpBcmMyMDAuX2FwcHJvdmUob3duZXI6IGJ5dGVzLCBzcGVuZGVyOiBieXRlcywgYW1vdW50OiBieXRlcykgLT4gYnl0ZXM6Cl9hcHByb3ZlOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjIxMAogICAgLy8gcHJvdGVjdGVkIF9hcHByb3ZlKG93bmVyOiBBZGRyZXNzLCBzcGVuZGVyOiBBZGRyZXNzLCBhbW91bnQ6IFVpbnROMjU2KTogQm9vbCB7CiAgICBwcm90byAzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoyMTEKICAgIC8vIGNvbnN0IGtleSA9IHRoaXMuX2FwcHJvdmFsS2V5KG93bmVyLCBzcGVuZGVyKQogICAgZnJhbWVfZGlnIC0zCiAgICBmcmFtZV9kaWcgLTIKICAgIGNhbGxzdWIgX2FwcHJvdmFsS2V5CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MjEyLTIxNgogICAgLy8gY29uc3QgYXBwcm92YWxCb3g6IEFwcHJvdmFsU3RydWN0ID0gbmV3IEFwcHJvdmFsU3RydWN0KHsKICAgIC8vICAgYXBwcm92YWxBbW91bnQ6IGFtb3VudCwKICAgIC8vICAgb3duZXI6IG93bmVyLAogICAgLy8gICBzcGVuZGVyOiBzcGVuZGVyLAogICAgLy8gfSkKICAgIGZyYW1lX2RpZyAtMQogICAgZnJhbWVfZGlnIC0zCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NTUKICAgIC8vIHB1YmxpYyBhcHByb3ZhbHMgPSBCb3hNYXA8U3RhdGljQnl0ZXM8MzI+LCBBcHByb3ZhbFN0cnVjdD4oeyBrZXlQcmVmaXg6ICdhJyB9KQogICAgcHVzaGJ5dGVzICJhIgogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoyMTcKICAgIC8vIHRoaXMuYXBwcm92YWxzKGtleSkudmFsdWUgPSBhcHByb3ZhbEJveC5jb3B5KCkKICAgIHN3YXAKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoyMTgKICAgIC8vIGVtaXQobmV3IGFyYzIwMF9BcHByb3ZhbCh7IG93bmVyOiBvd25lciwgc3BlbmRlcjogc3BlbmRlciwgdmFsdWU6IGFtb3VudCB9KSkKICAgIGZyYW1lX2RpZyAtMwogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICBwdXNoYnl0ZXMgMHgxOTY5Zjg2NSAvLyBtZXRob2QgImFyYzIwMF9BcHByb3ZhbChhZGRyZXNzLGFkZHJlc3MsdWludDI1NikiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjIxOQogICAgLy8gcmV0dXJuIG5ldyBCb29sKHRydWUpCiAgICBieXRlYyA0IC8vIDB4ODAKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjpBcmM4OC5fZW5zdXJlRGVmYXVsdE93bmVyKCkgLT4gdm9pZDoKX2Vuc3VyZURlZmF1bHRPd25lcjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjE5CiAgICAvLyBwdWJsaWMgaW5pdGlhbGl6ZWQgPSBHbG9iYWxTdGF0ZTxhcmM0LkJ5dGU+KHsga2V5OiAnYXJjODhfb2knIH0pIC8vIDEgaWYgaW5pdGlhbGl6ZWQgKGV4cGxpY2l0IG9yIGltcGxpY2l0KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDkgLy8gImFyYzg4X29pIgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6MjcKICAgIC8vIGlmICghdGhpcy5pbml0aWFsaXplZC5oYXNWYWx1ZSB8fCB0aGlzLmluaXRpYWxpemVkLnZhbHVlLm5hdGl2ZSA9PT0gMCkgewogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGJ1cnkgMQogICAgYnogX2Vuc3VyZURlZmF1bHRPd25lcl9pZl9ib2R5QDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjE5CiAgICAvLyBwdWJsaWMgaW5pdGlhbGl6ZWQgPSBHbG9iYWxTdGF0ZTxhcmM0LkJ5dGU+KHsga2V5OiAnYXJjODhfb2knIH0pIC8vIDEgaWYgaW5pdGlhbGl6ZWQgKGV4cGxpY2l0IG9yIGltcGxpY2l0KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDkgLy8gImFyYzg4X29pIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjI3CiAgICAvLyBpZiAoIXRoaXMuaW5pdGlhbGl6ZWQuaGFzVmFsdWUgfHwgdGhpcy5pbml0aWFsaXplZC52YWx1ZS5uYXRpdmUgPT09IDApIHsKICAgIGJ0b2kKICAgIGJueiBfZW5zdXJlRGVmYXVsdE93bmVyX2FmdGVyX2lmX2Vsc2VANQoKX2Vuc3VyZURlZmF1bHRPd25lcl9pZl9ib2R5QDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czoxNwogICAgLy8gcHVibGljIG93bmVyID0gR2xvYmFsU3RhdGU8YXJjNC5BZGRyZXNzPih7IGtleTogJ2FyYzg4X28nIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAiYXJjODhfbyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjI4CiAgICAvLyBpZiAoIXRoaXMub3duZXIuaGFzVmFsdWUpIHsKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBidXJ5IDEKICAgIGJueiBfZW5zdXJlRGVmYXVsdE93bmVyX2FmdGVyX2lmX2Vsc2VANAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6MTcKICAgIC8vIHB1YmxpYyBvd25lciA9IEdsb2JhbFN0YXRlPGFyYzQuQWRkcmVzcz4oeyBrZXk6ICdhcmM4OF9vJyB9KQogICAgYnl0ZWNfMiAvLyAiYXJjODhfbyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjI5CiAgICAvLyB0aGlzLm93bmVyLnZhbHVlID0gbmV3IGFyYzQuQWRkcmVzcyhHbG9iYWwuY3JlYXRvckFkZHJlc3MpCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgIGFwcF9nbG9iYWxfcHV0CgpfZW5zdXJlRGVmYXVsdE93bmVyX2FmdGVyX2lmX2Vsc2VANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjE5CiAgICAvLyBwdWJsaWMgaW5pdGlhbGl6ZWQgPSBHbG9iYWxTdGF0ZTxhcmM0LkJ5dGU+KHsga2V5OiAnYXJjODhfb2knIH0pIC8vIDEgaWYgaW5pdGlhbGl6ZWQgKGV4cGxpY2l0IG9yIGltcGxpY2l0KQogICAgYnl0ZWMgOSAvLyAiYXJjODhfb2kiCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czozMQogICAgLy8gdGhpcy5pbml0aWFsaXplZC52YWx1ZSA9IG5ldyBhcmM0LkJ5dGUoMSkKICAgIGJ5dGVjIDEzIC8vIDB4MDEKICAgIGFwcF9nbG9iYWxfcHV0CgpfZW5zdXJlRGVmYXVsdE93bmVyX2FmdGVyX2lmX2Vsc2VANToKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjpBcmM4OC5hcmM4OF9vd25lcigpIC0+IGJ5dGVzOgphcmM4OF9vd25lcjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjM3CiAgICAvLyB0aGlzLl9lbnN1cmVEZWZhdWx0T3duZXIoKQogICAgY2FsbHN1YiBfZW5zdXJlRGVmYXVsdE93bmVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czoxNwogICAgLy8gcHVibGljIG93bmVyID0gR2xvYmFsU3RhdGU8YXJjNC5BZGRyZXNzPih7IGtleTogJ2FyYzg4X28nIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAiYXJjODhfbyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czozOAogICAgLy8gcmV0dXJuIHRoaXMub3duZXIudmFsdWUKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjpBcmM4OC5hcmM4OF9pc19vd25lcihxdWVyeTogYnl0ZXMpIC0+IGJ5dGVzOgphcmM4OF9pc19vd25lcjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjQxLTQyCiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgLy8gcHVibGljIGFyYzg4X2lzX293bmVyKHF1ZXJ5OiBhcmM0LkFkZHJlc3MpOiBhcmM0LkJvb2wgewogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo0MwogICAgLy8gdGhpcy5fZW5zdXJlRGVmYXVsdE93bmVyKCkKICAgIGNhbGxzdWIgX2Vuc3VyZURlZmF1bHRPd25lcgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6MTcKICAgIC8vIHB1YmxpYyBvd25lciA9IEdsb2JhbFN0YXRlPGFyYzQuQWRkcmVzcz4oeyBrZXk6ICdhcmM4OF9vJyB9KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzIgLy8gImFyYzg4X28iCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo0NAogICAgLy8gaWYgKCF0aGlzLm93bmVyLmhhc1ZhbHVlKSByZXR1cm4gbmV3IGFyYzQuQm9vbChmYWxzZSkKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBidXJ5IDEKICAgIGJueiBhcmM4OF9pc19vd25lcl9hZnRlcl9pZl9lbHNlQDIKICAgIGJ5dGVjIDcgLy8gMHgwMAogICAgcmV0c3ViCgphcmM4OF9pc19vd25lcl9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czoxNwogICAgLy8gcHVibGljIG93bmVyID0gR2xvYmFsU3RhdGU8YXJjNC5BZGRyZXNzPih7IGtleTogJ2FyYzg4X28nIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAiYXJjODhfbyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo0NQogICAgLy8gaWYgKHRoaXMub3duZXIudmFsdWUgPT09IG5ldyBhcmM0LkFkZHJlc3MoKSkgcmV0dXJuIG5ldyBhcmM0LkJvb2woZmFsc2UpCiAgICBieXRlY18xIC8vIGFkZHIgQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVk1SEZLUQogICAgPT0KICAgIGJ6IGFyYzg4X2lzX293bmVyX2FmdGVyX2lmX2Vsc2VANAogICAgYnl0ZWMgNyAvLyAweDAwCiAgICByZXRzdWIKCmFyYzg4X2lzX293bmVyX2FmdGVyX2lmX2Vsc2VANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjE3CiAgICAvLyBwdWJsaWMgb3duZXIgPSBHbG9iYWxTdGF0ZTxhcmM0LkFkZHJlc3M+KHsga2V5OiAnYXJjODhfbycgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJhcmM4OF9vIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjQ2CiAgICAvLyByZXR1cm4gbmV3IGFyYzQuQm9vbCh0aGlzLm93bmVyLnZhbHVlID09PSBxdWVyeSkKICAgIGZyYW1lX2RpZyAtMQogICAgPT0KICAgIGJ5dGVjIDcgLy8gMHgwMAogICAgaW50Y18wIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo6QXJjODguYXJjODhfaW5pdGlhbGl6ZV9vd25lcihuZXdfb3duZXI6IGJ5dGVzKSAtPiB2b2lkOgphcmM4OF9pbml0aWFsaXplX293bmVyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6NTAtNTEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBwdWJsaWMgYXJjODhfaW5pdGlhbGl6ZV9vd25lcihuZXdfb3duZXI6IGFyYzQuQWRkcmVzcyk6IHZvaWQgewogICAgcHJvdG8gMSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czoxOQogICAgLy8gcHVibGljIGluaXRpYWxpemVkID0gR2xvYmFsU3RhdGU8YXJjNC5CeXRlPih7IGtleTogJ2FyYzg4X29pJyB9KSAvLyAxIGlmIGluaXRpYWxpemVkIChleHBsaWNpdCBvciBpbXBsaWNpdCkKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA5IC8vICJhcmM4OF9vaSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjUyCiAgICAvLyBhc3NlcnQoISh0aGlzLmluaXRpYWxpemVkLmhhc1ZhbHVlICYmIHRoaXMuaW5pdGlhbGl6ZWQudmFsdWUubmF0aXZlID09PSAxKSwgJ2FscmVhZHlfaW5pdGlhbGl6ZWQnKQogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGJ1cnkgMQogICAgYnogYXJjODhfaW5pdGlhbGl6ZV9vd25lcl9ib29sX2ZhbHNlQDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjE5CiAgICAvLyBwdWJsaWMgaW5pdGlhbGl6ZWQgPSBHbG9iYWxTdGF0ZTxhcmM0LkJ5dGU+KHsga2V5OiAnYXJjODhfb2knIH0pIC8vIDEgaWYgaW5pdGlhbGl6ZWQgKGV4cGxpY2l0IG9yIGltcGxpY2l0KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDkgLy8gImFyYzg4X29pIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjUyCiAgICAvLyBhc3NlcnQoISh0aGlzLmluaXRpYWxpemVkLmhhc1ZhbHVlICYmIHRoaXMuaW5pdGlhbGl6ZWQudmFsdWUubmF0aXZlID09PSAxKSwgJ2FscmVhZHlfaW5pdGlhbGl6ZWQnKQogICAgYnRvaQogICAgaW50Y18xIC8vIDEKICAgID09CiAgICBieiBhcmM4OF9pbml0aWFsaXplX293bmVyX2Jvb2xfZmFsc2VAMwogICAgaW50Y18xIC8vIDEKCmFyYzg4X2luaXRpYWxpemVfb3duZXJfYm9vbF9tZXJnZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6NTIKICAgIC8vIGFzc2VydCghKHRoaXMuaW5pdGlhbGl6ZWQuaGFzVmFsdWUgJiYgdGhpcy5pbml0aWFsaXplZC52YWx1ZS5uYXRpdmUgPT09IDEpLCAnYWxyZWFkeV9pbml0aWFsaXplZCcpCiAgICAhCiAgICBhc3NlcnQgLy8gYWxyZWFkeV9pbml0aWFsaXplZAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6NTMKICAgIC8vIGFzc2VydChuZXdfb3duZXIgIT09IG5ldyBhcmM0LkFkZHJlc3MoKSwgJ3plcm9fYWRkcmVzc19ub3RfYWxsb3dlZCcpCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ5dGVjXzEgLy8gYWRkciBBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBWTVIRktRCiAgICAhPQogICAgYXNzZXJ0IC8vIHplcm9fYWRkcmVzc19ub3RfYWxsb3dlZAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6MTcKICAgIC8vIHB1YmxpYyBvd25lciA9IEdsb2JhbFN0YXRlPGFyYzQuQWRkcmVzcz4oeyBrZXk6ICdhcmM4OF9vJyB9KQogICAgYnl0ZWNfMiAvLyAiYXJjODhfbyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjU0CiAgICAvLyB0aGlzLm93bmVyLnZhbHVlID0gbmV3X293bmVyCiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czoxOQogICAgLy8gcHVibGljIGluaXRpYWxpemVkID0gR2xvYmFsU3RhdGU8YXJjNC5CeXRlPih7IGtleTogJ2FyYzg4X29pJyB9KSAvLyAxIGlmIGluaXRpYWxpemVkIChleHBsaWNpdCBvciBpbXBsaWNpdCkKICAgIGJ5dGVjIDkgLy8gImFyYzg4X29pIgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6NTUKICAgIC8vIHRoaXMuaW5pdGlhbGl6ZWQudmFsdWUgPSBuZXcgYXJjNC5CeXRlKDEpCiAgICBieXRlYyAxMyAvLyAweDAxCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgphcmM4OF9pbml0aWFsaXplX293bmVyX2Jvb2xfZmFsc2VAMzoKICAgIGludGNfMCAvLyAwCiAgICBiIGFyYzg4X2luaXRpYWxpemVfb3duZXJfYm9vbF9tZXJnZUA0CgoKLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6OkFyYzg4LmFyYzg4X3RyYW5zZmVyX293bmVyc2hpcChuZXdfb3duZXI6IGJ5dGVzKSAtPiB2b2lkOgphcmM4OF90cmFuc2Zlcl9vd25lcnNoaXA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo1OC01OQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIHB1YmxpYyBhcmM4OF90cmFuc2Zlcl9vd25lcnNoaXAobmV3X293bmVyOiBhcmM0LkFkZHJlc3MpOiB2b2lkIHsKICAgIHByb3RvIDEgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6NjAKICAgIC8vIHRoaXMuX2Vuc3VyZURlZmF1bHRPd25lcigpCiAgICBjYWxsc3ViIF9lbnN1cmVEZWZhdWx0T3duZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjYxCiAgICAvLyBhc3NlcnQobmV3IGFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKSA9PT0gdGhpcy5vd25lci52YWx1ZSwgJ25vdF9vd25lcicpCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czoxNwogICAgLy8gcHVibGljIG93bmVyID0gR2xvYmFsU3RhdGU8YXJjNC5BZGRyZXNzPih7IGtleTogJ2FyYzg4X28nIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAiYXJjODhfbyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo2MQogICAgLy8gYXNzZXJ0KG5ldyBhcmM0LkFkZHJlc3MoVHhuLnNlbmRlcikgPT09IHRoaXMub3duZXIudmFsdWUsICdub3Rfb3duZXInKQogICAgPT0KICAgIGFzc2VydCAvLyBub3Rfb3duZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjYyCiAgICAvLyBhc3NlcnQobmV3X293bmVyICE9PSBuZXcgYXJjNC5BZGRyZXNzKCksICd6ZXJvX2FkZHJlc3Nfbm90X2FsbG93ZWQnKQogICAgZnJhbWVfZGlnIC0xCiAgICBieXRlY18xIC8vIGFkZHIgQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVk1SEZLUQogICAgIT0KICAgIGFzc2VydCAvLyB6ZXJvX2FkZHJlc3Nfbm90X2FsbG93ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjE3CiAgICAvLyBwdWJsaWMgb3duZXIgPSBHbG9iYWxTdGF0ZTxhcmM0LkFkZHJlc3M+KHsga2V5OiAnYXJjODhfbycgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJhcmM4OF9vIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIGJ5dGVjXzIgLy8gImFyYzg4X28iCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo2NAogICAgLy8gdGhpcy5vd25lci52YWx1ZSA9IG5ld19vd25lcgogICAgZnJhbWVfZGlnIC0xCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6NjUKICAgIC8vIGVtaXQobmV3IGFyYzg4X093bmVyc2hpcFRyYW5zZmVycmVkKHsgcHJldmlvdXNfb3duZXI6IHByZXZpb3VzLCBuZXdfb3duZXIgfSkpCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgYnl0ZWMgMjAgLy8gbWV0aG9kICJhcmM4OF9Pd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzLGFkZHJlc3MpIgogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjpBcmM4OC5hcmM4OF9yZW5vdW5jZV9vd25lcnNoaXAoKSAtPiB2b2lkOgphcmM4OF9yZW5vdW5jZV9vd25lcnNoaXA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo3MAogICAgLy8gdGhpcy5fZW5zdXJlRGVmYXVsdE93bmVyKCkKICAgIGNhbGxzdWIgX2Vuc3VyZURlZmF1bHRPd25lcgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6NzEKICAgIC8vIGFzc2VydChuZXcgYXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpID09PSB0aGlzLm93bmVyLnZhbHVlLCAnbm90X293bmVyJykKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjE3CiAgICAvLyBwdWJsaWMgb3duZXIgPSBHbG9iYWxTdGF0ZTxhcmM0LkFkZHJlc3M+KHsga2V5OiAnYXJjODhfbycgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJhcmM4OF9vIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjcxCiAgICAvLyBhc3NlcnQobmV3IGFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKSA9PT0gdGhpcy5vd25lci52YWx1ZSwgJ25vdF9vd25lcicpCiAgICA9PQogICAgYXNzZXJ0IC8vIG5vdF9vd25lcgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6MTcKICAgIC8vIHB1YmxpYyBvd25lciA9IEdsb2JhbFN0YXRlPGFyYzQuQWRkcmVzcz4oeyBrZXk6ICdhcmM4OF9vJyB9KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzIgLy8gImFyYzg4X28iCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgYnl0ZWNfMiAvLyAiYXJjODhfbyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjczCiAgICAvLyB0aGlzLm93bmVyLnZhbHVlID0gbmV3IGFyYzQuQWRkcmVzcygpCiAgICBieXRlY18xIC8vIGFkZHIgQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVk1SEZLUQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjc0CiAgICAvLyBlbWl0KG5ldyBhcmM4OF9Pd25lcnNoaXBSZW5vdW5jZWQoeyBwcmV2aW91c19vd25lcjogcHJldmlvdXMgfSkpCiAgICBwdXNoYnl0ZXMgMHgzNDZhYTE2NiAvLyBtZXRob2QgImFyYzg4X093bmVyc2hpcFJlbm91bmNlZChhZGRyZXNzKSIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo6QXJjODguYXJjODhfdHJhbnNmZXJfb3duZXJzaGlwX3JlcXVlc3QocGVuZGluZzogYnl0ZXMpIC0+IHZvaWQ6CmFyYzg4X3RyYW5zZmVyX293bmVyc2hpcF9yZXF1ZXN0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6NzgtNzkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBwdWJsaWMgYXJjODhfdHJhbnNmZXJfb3duZXJzaGlwX3JlcXVlc3QocGVuZGluZzogYXJjNC5BZGRyZXNzKTogdm9pZCB7CiAgICBwcm90byAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjgwCiAgICAvLyB0aGlzLl9lbnN1cmVEZWZhdWx0T3duZXIoKQogICAgY2FsbHN1YiBfZW5zdXJlRGVmYXVsdE93bmVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo4MQogICAgLy8gYXNzZXJ0KG5ldyBhcmM0LkFkZHJlc3MoVHhuLnNlbmRlcikgPT09IHRoaXMub3duZXIudmFsdWUsICdub3Rfb3duZXInKQogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6MTcKICAgIC8vIHB1YmxpYyBvd25lciA9IEdsb2JhbFN0YXRlPGFyYzQuQWRkcmVzcz4oeyBrZXk6ICdhcmM4OF9vJyB9KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzIgLy8gImFyYzg4X28iCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6ODEKICAgIC8vIGFzc2VydChuZXcgYXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpID09PSB0aGlzLm93bmVyLnZhbHVlLCAnbm90X293bmVyJykKICAgID09CiAgICBhc3NlcnQgLy8gbm90X293bmVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo4MgogICAgLy8gYXNzZXJ0KHBlbmRpbmcgIT09IG5ldyBhcmM0LkFkZHJlc3MoKSwgJ3plcm9fYWRkcmVzc19ub3RfYWxsb3dlZCcpCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ5dGVjXzEgLy8gYWRkciBBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBWTVIRktRCiAgICAhPQogICAgYXNzZXJ0IC8vIHplcm9fYWRkcmVzc19ub3RfYWxsb3dlZAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6MTgKICAgIC8vIHB1YmxpYyBwZW5kaW5nT3duZXIgPSBHbG9iYWxTdGF0ZTxhcmM0LkFkZHJlc3M+KHsga2V5OiAnYXJjODhfcG8nIH0pIC8vIG9wdGlvbmFsIHR3by1zdGVwCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNiAvLyAiYXJjODhfcG8iCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo4MwogICAgLy8gaWYgKHRoaXMucGVuZGluZ093bmVyLmhhc1ZhbHVlICYmIHRoaXMucGVuZGluZ093bmVyLnZhbHVlICE9PSBuZXcgYXJjNC5BZGRyZXNzKCkpIHsKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBidXJ5IDEKICAgIGJ6IGFyYzg4X3RyYW5zZmVyX293bmVyc2hpcF9yZXF1ZXN0X2FmdGVyX2lmX2Vsc2VAMwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6MTgKICAgIC8vIHB1YmxpYyBwZW5kaW5nT3duZXIgPSBHbG9iYWxTdGF0ZTxhcmM0LkFkZHJlc3M+KHsga2V5OiAnYXJjODhfcG8nIH0pIC8vIG9wdGlvbmFsIHR3by1zdGVwCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNiAvLyAiYXJjODhfcG8iCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6ODMKICAgIC8vIGlmICh0aGlzLnBlbmRpbmdPd25lci5oYXNWYWx1ZSAmJiB0aGlzLnBlbmRpbmdPd25lci52YWx1ZSAhPT0gbmV3IGFyYzQuQWRkcmVzcygpKSB7CiAgICBieXRlY18xIC8vIGFkZHIgQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVk1SEZLUQogICAgIT0KICAgICEKICAgIGFzc2VydCAvLyBwZW5kaW5nX3RyYW5zZmVyX2V4aXN0cwoKYXJjODhfdHJhbnNmZXJfb3duZXJzaGlwX3JlcXVlc3RfYWZ0ZXJfaWZfZWxzZUAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6MTgKICAgIC8vIHB1YmxpYyBwZW5kaW5nT3duZXIgPSBHbG9iYWxTdGF0ZTxhcmM0LkFkZHJlc3M+KHsga2V5OiAnYXJjODhfcG8nIH0pIC8vIG9wdGlvbmFsIHR3by1zdGVwCiAgICBieXRlYyA2IC8vICJhcmM4OF9wbyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjg2CiAgICAvLyB0aGlzLnBlbmRpbmdPd25lci52YWx1ZSA9IHBlbmRpbmcKICAgIGZyYW1lX2RpZyAtMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjE3CiAgICAvLyBwdWJsaWMgb3duZXIgPSBHbG9iYWxTdGF0ZTxhcmM0LkFkZHJlc3M+KHsga2V5OiAnYXJjODhfbycgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJhcmM4OF9vIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjg3CiAgICAvLyBlbWl0KG5ldyBhcmM4OF9Pd25lcnNoaXBUcmFuc2ZlclJlcXVlc3RlZCh7IHByZXZpb3VzX293bmVyOiB0aGlzLm93bmVyLnZhbHVlLCBwZW5kaW5nX293bmVyOiBwZW5kaW5nIH0pKQogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAweDE2YmYxZjkxIC8vIG1ldGhvZCAiYXJjODhfT3duZXJzaGlwVHJhbnNmZXJSZXF1ZXN0ZWQoYWRkcmVzcyxhZGRyZXNzKSIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo6QXJjODguYXJjODhfYWNjZXB0X293bmVyc2hpcCgpIC0+IHZvaWQ6CmFyYzg4X2FjY2VwdF9vd25lcnNoaXA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo5MgogICAgLy8gdGhpcy5fZW5zdXJlRGVmYXVsdE93bmVyKCkKICAgIGNhbGxzdWIgX2Vuc3VyZURlZmF1bHRPd25lcgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6MTgKICAgIC8vIHB1YmxpYyBwZW5kaW5nT3duZXIgPSBHbG9iYWxTdGF0ZTxhcmM0LkFkZHJlc3M+KHsga2V5OiAnYXJjODhfcG8nIH0pIC8vIG9wdGlvbmFsIHR3by1zdGVwCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNiAvLyAiYXJjODhfcG8iCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo5MwogICAgLy8gYXNzZXJ0KHRoaXMucGVuZGluZ093bmVyLmhhc1ZhbHVlLCAnbm90X3BlbmRpbmdfb3duZXInKQogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIG5vdF9wZW5kaW5nX293bmVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo5NAogICAgLy8gY29uc3Qgc2VuZGVyID0gbmV3IGFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKQogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6MTgKICAgIC8vIHB1YmxpYyBwZW5kaW5nT3duZXIgPSBHbG9iYWxTdGF0ZTxhcmM0LkFkZHJlc3M+KHsga2V5OiAnYXJjODhfcG8nIH0pIC8vIG9wdGlvbmFsIHR3by1zdGVwCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNiAvLyAiYXJjODhfcG8iCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6OTUKICAgIC8vIGFzc2VydChzZW5kZXIgPT09IHRoaXMucGVuZGluZ093bmVyLnZhbHVlLCAnbm90X3BlbmRpbmdfb3duZXInKQogICAgZGlnIDEKICAgID09CiAgICBhc3NlcnQgLy8gbm90X3BlbmRpbmdfb3duZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjE3CiAgICAvLyBwdWJsaWMgb3duZXIgPSBHbG9iYWxTdGF0ZTxhcmM0LkFkZHJlc3M+KHsga2V5OiAnYXJjODhfbycgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJhcmM4OF9vIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIGJ5dGVjXzIgLy8gImFyYzg4X28iCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo5NwogICAgLy8gdGhpcy5vd25lci52YWx1ZSA9IHNlbmRlcgogICAgZGlnIDIKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czoxOAogICAgLy8gcHVibGljIHBlbmRpbmdPd25lciA9IEdsb2JhbFN0YXRlPGFyYzQuQWRkcmVzcz4oeyBrZXk6ICdhcmM4OF9wbycgfSkgLy8gb3B0aW9uYWwgdHdvLXN0ZXAKICAgIGJ5dGVjIDYgLy8gImFyYzg4X3BvIgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6OTgKICAgIC8vIHRoaXMucGVuZGluZ093bmVyLnZhbHVlID0gbmV3IGFyYzQuQWRkcmVzcygpCiAgICBieXRlY18xIC8vIGFkZHIgQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVk1SEZLUQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjk5CiAgICAvLyBlbWl0KG5ldyBhcmM4OF9Pd25lcnNoaXBUcmFuc2ZlckFjY2VwdGVkKHsgcHJldmlvdXNfb3duZXI6IHByZXZpb3VzLCBuZXdfb3duZXI6IHNlbmRlciB9KSkKICAgIHN3YXAKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzIDB4ZjdlMzZiMzcgLy8gbWV0aG9kICJhcmM4OF9Pd25lcnNoaXBUcmFuc2ZlckFjY2VwdGVkKGFkZHJlc3MsYWRkcmVzcykiCiAgICBkaWcgMQogICAgY29uY2F0CiAgICBsb2cKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjEwMAogICAgLy8gZW1pdChuZXcgYXJjODhfT3duZXJzaGlwVHJhbnNmZXJyZWQoeyBwcmV2aW91c19vd25lcjogcHJldmlvdXMsIG5ld19vd25lcjogc2VuZGVyIH0pKQogICAgYnl0ZWMgMjAgLy8gbWV0aG9kICJhcmM4OF9Pd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzLGFkZHJlc3MpIgogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjpBcmM4OC5hcmM4OF9jYW5jZWxfb3duZXJzaGlwX3JlcXVlc3QoKSAtPiB2b2lkOgphcmM4OF9jYW5jZWxfb3duZXJzaGlwX3JlcXVlc3Q6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czoxMDUKICAgIC8vIHRoaXMuX2Vuc3VyZURlZmF1bHRPd25lcigpCiAgICBjYWxsc3ViIF9lbnN1cmVEZWZhdWx0T3duZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjEwNgogICAgLy8gYXNzZXJ0KG5ldyBhcmM0LkFkZHJlc3MoVHhuLnNlbmRlcikgPT09IHRoaXMub3duZXIudmFsdWUsICdub3Rfb3duZXInKQogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6MTcKICAgIC8vIHB1YmxpYyBvd25lciA9IEdsb2JhbFN0YXRlPGFyYzQuQWRkcmVzcz4oeyBrZXk6ICdhcmM4OF9vJyB9KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzIgLy8gImFyYzg4X28iCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6MTA2CiAgICAvLyBhc3NlcnQobmV3IGFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKSA9PT0gdGhpcy5vd25lci52YWx1ZSwgJ25vdF9vd25lcicpCiAgICA9PQogICAgYXNzZXJ0IC8vIG5vdF9vd25lcgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6MTgKICAgIC8vIHB1YmxpYyBwZW5kaW5nT3duZXIgPSBHbG9iYWxTdGF0ZTxhcmM0LkFkZHJlc3M+KHsga2V5OiAnYXJjODhfcG8nIH0pIC8vIG9wdGlvbmFsIHR3by1zdGVwCiAgICBieXRlYyA2IC8vICJhcmM4OF9wbyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjEwNwogICAgLy8gdGhpcy5wZW5kaW5nT3duZXIudmFsdWUgPSBuZXcgYXJjNC5BZGRyZXNzKCkKICAgIGJ5dGVjXzEgLy8gYWRkciBBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBWTVIRktRCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCg==","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAAEgCCYVBBUffHUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHYXJjODhfbwFwAYABdAhhcmM4OF9wbwEAAWIIYXJjODhfb2kEaHBfYQJvcANvcGEBAQIAAQIAAgIAAAgAAAAAAAAAAAIAYgR5g8NcBENV0q0xG0EDQ4IeBDX4E18E2nAluQQ/JWcTBJW0+eMEgMxJqwQHliFlBOeJYdoE/ZSA1wSxsdaaBMG+14kEO/4YMwRZnNGlBCIPz5gEl1OC4gRlfRPsBLauGiUEhOwT1QTsmWBBBILlc8QESpaPjwS1QiElBLuzGfMEBwJlTgTQFXJOBAKf7MAEc0kzTgTbfILvBP0sLG4EQqXwZQStT2jqNhoAjh4CVAI+AiICDAHzAd4ByQGqAYsBcwFaAUIBKgEOAP4A7gDeAM4AuwCiAIwAdgBmAFMARAA1ACkAGgAOAAIiQzEZFEQxGESICywjQzEZFEQxGESICu0jQzEZFEQxGEQ2GgGICqMjQzEZFEQxGESICnsjQzEZFEQxGEQ2GgGICkgjQzEZFEQxGEQ2GgGICgwjQzEZFEQxGEQ2GgGICdIoTFCwI0MxGRREMRhEiAm6KExQsCNDMRkURDEYRDYaATYaAogIqChMULAjQzEZFEQxGEQ2GgE2GgKICIUoTFCwI0MxGRREMRhENhoBNhoCNhoDiAg+KExQsCNDMRkURDEYRDYaAYgIIihMULAjQzEZFEQxGESICAwoTFCwI0MxGRREMRhEiAf1KExQsCNDMRkURDEYRIgH1ihMULAjQzEZFEQxGESIB7coTFCwI0MxGRREMRhENhoBNhoCNhoDNhoEiAdEKExQsCNDMRkURDEYRDYaATYaAjYaAzYaBIgGnSNDMRkURDEYRDYaATYaAjYaAzYaBIgF+iNDMRkURDEYRDYaATYaAjYaA4gFrShMULAjQzEZFEQxGEQ2GgE2GgI2GgM2GgSIBXgjQzEZFEQxGEQ2GgE2GgI2GgM2GgQ2GgWIAjAoTFCwI0MxGRREMRhENhoBNhoCNhoDNhoENhoFiAGrKExQsCNDMRkURDEYRDYaATYaAjYaA4gBcSNDMRkURDEYRDYaATYaAjYaA4gBQyNDMRkURDEYRDYaATYaAjYaA4gAzyhMULAjQzEZFEQxGEQ2GgE2GgKIAJwoTFCwI0MxGRREMRhENhoBNhoCNhoDNhoEiABlKExQsCNDMRkURDEYRDYaATYaAogANShMULAjQzEZFEQxGEQ2GgE2GgKIABEoTFCwI0MxGUD9kTEYFEQjQ4oCAYv+i/9QK0xQvkSJigIBMQApi/4pi/8nEIgD5jEAi/6L/4gGtYmKBAExAIv9i/yIArdMi/yL/UsDi/6L/4gDwomKAgGL/ov/UCcKTFBJvUUBQAAEJxBMiYsAvkRMiYoDASJHAov+i/0SQQAFJwSMAImL/Yv+UEmMAIv/UCcLTFBJjAG9RQFBAA+LAb5EFyMSQQAFJwSMAImLAClQJwtMUEmMAr1FAUEAD4sCvkQXIxJBAAUnBIwAiScHjACJigMAMQCL/RJEi/2L/lCL/1AnC0xQJw2/iYoDADEAi/0SRIv9i/5Qi/9QJwtMUEm9RQFBAASLALxIiYoFASIxAIv7MQCL/Ij/WCJTIxJHAkAAMov7iwFQi/xQJwxMUEmMAL1FAUEAGYsASb5ESYv+p0QjjAKL/qFJFSQORCSvq7+LAowDiwNEi/2L/IgBnov7i/yL/UsDi/6L/4gCqIwAiYoFASJJgABJi/uL/FArTFBJvUUBQAA+gDlQACMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUUGFydGl0aW9uIG5vdCBleGlzdHOMAImLBL5Ei/6kQQA+gDlSACMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUSW5zdWZmaWNpZW50IGJhbGFuY2WMAImL/SkSQQA6gDVXACMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQSW52YWxpZCByZWNlaXZlcowAiTEASYwAi/sTQQCGi/uLAIv8iP4PIlMjEkmMAkmMA0AAKov7iwBQi/xQJwxMUEmMAb1FAYsCjANBABGLAb5Ei/6nQQADI4wCiwKMA4sDQABBgDxYACMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXT3BlcmF0b3Igbm90IGF1dGhvcml6ZWSMAImL/Yv8iAAWgANRACNMUIAJAAdTdWNjZXNzUIwAiYoCASmL/ov/UCtMUL1FAUEABIv/jACLAEyJigIAIkcEgABHBIAEaHBfcIv+UEm9RQFAAAWLCicRv4sKvkyMAkQijAYnEYwBiwEXSYwIiwIXSYwJDEEAT4v+iwFQJwpMUEmMBL1FAUAADCcOi/9QiwRJvEhMv4sEvkxJTgKMAEQiWYwFIowHiweLBQxBAIeLAFcCAIsHJAskWIv/EkEAbSNBAF8jjAaLBkAAOIv+iwJQJwpMUEmMA75EIlkWF4EKDEEAIYsDSb5EVwIAJw6L/1BXAgBQSRUkChZXBgJMUEsBvEi/iYsJIwgWiwpLAb+L/kxQJw6L/1AnCk8CUEm8SEy/iYsIIwgWjAFC/zuLByMIjAdC/3EiQv+HigYAIkmL/oAApUSL+ov7UCtMUEm9RQFAAASLAim/iwJJvkSL/qFJFSQORCSvSYwAq7+L+ov8UIv7UIv+UIACAIJQi/9QJw9MUIAEIGt5QExQsIv9i/sTQQAHi/yL/Yj+oIv8i/1QK0xQSYwBvUUBQAAEiwEpv4sBSb5Ei/6gSRUkDkSLAKu/iYoEADEAi/wSRIv8i/1Qi/5QJwxMUIv/v4mKAwEii/6L/RJBAAQnBEyJi/2L/lCL/1AnDExQSYwAvUUBQAAEJwdMiYsAvkSAAKUnByJPAlRMiYoEACJJi/6AAKVEi/yL/VBJK0xQSb1FAUAAC4sDKb+L/Iv9iP4CiwNJvkSL/qBJFSQORCSvSYwAq78nCIv8UEmMAb1FAUAABIsBKb+LAUm+RIv+oEkVJA5EiwBJTgOrvyInBWVEi/6gSRUkDkSrJwVMZ4sCi/5QJxJQi/9QJw9MUIAE+kQ7G0xQsImKBACL/oAApUSL/Iv9UEkrTFBJvUUBREm+RIv+p0RJvkSL/qFJFSQORCSvSU4Dq78nCIv8UEm9RQFBAEuLAr5Ei/6nQQBBI0SLAkm+RIv+oUkVJA5EiwFJTgOrvyInBWVEi/6hSRUkDkSrJwVMZ4sAi/5QJxJQi/9QJw9MUIAEXCe0/ExQsIkiQv+8igQBMQAyCRJEi/xXAgAVSUQkDkSL/VcCABVJRCUORCInBWVFARREgAFui/xngAFzi/1nJwWL/2eAAWSL/mcxACcISwFQi/+/MgNMUIv/UCcTTFCwJwSJIoABbmVEVwIASRUkEkSJIoABc2VEVwIASRUlEkSJIoABZGVEiSInBWVEiYoBAYv/iABHiYoDATEAi/1LAYgAt0mL/6dEi/+hSRUkDkQkr6uL/U4CiADCSIv9i/6L/4gAMYmKAgExAIv+i/+IAKuJigIBi/6L/4gAfomKAQEnCIv/UEm9RQFAAAMpTImLAL5ETImKAwGL/Yj/4EmL/oj/2kyL/6dEi/2L/hNBACmLAIv/oUkVJA5EJK9MSwGrJwiL/VBMv4sBi/+gSRUkDkSrJwiL/lBMv4v9i/5Qi/9QJxNMULAnBIwAiYoCAYv+i/9QAUkVJBJEiYoCAYv+i/+I/+eAAWFMUEm9RQFAAAMpTImLAL5EVwAgTImKAwGL/Yv+iP/Fi/+L/VCL/lCAAWFPAlBMv4v9i/5Qi/9QgAQZafhlTFCwJwSJIicJZUUBQQAJIicJZUQXQAARIiplRQFAAAQqMglnJwknDWeJiP/ZIiplRImKAQGI/84iKmVFAUAAAycHiSIqZUQpEkEAAycHiSIqZUSL/xInByJPAlSJigEAIicJZUUBQQAdIicJZUQXIxJBABIjFESL/ykTRCqL/2cnCScNZ4kiQv/rigEAiP92MQAiKmVEEkSL/ykTRCIqZUQqi/9ni/9QJxRMULCJiP9VMQAiKmVEEkQiKmVEKilngAQ0aqFmTFCwiYoBAIj/NjEAIiplRBJEi/8pE0QiJwZlRQFBAAkiJwZlRCkTFEQnBov/ZyIqZUSL/1CABBa/H5FMULCJiP7+IicGZUUBRDEAIicGZURLARJEIiplRCpLAmcnBilnTFCABPfjazdLAVCwJxRMULCJiP7LMQAiKmVEEkQnBilniQ==","clear":"CoEBQw=="},"events":[{"name":"Transfer","args":[{"type":"(address,address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_transfer"}]},{"name":"arc200_Transfer","args":[{"type":"address","name":"from"},{"type":"address","name":"to"},{"type":"uint256","name":"value"}]},{"name":"Issue","args":[{"type":"(address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_issue"}]},{"name":"Redeem","args":[{"type":"(address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_redeem"}]},{"name":"arc200_Approval","args":[{"type":"address","name":"owner"},{"type":"address","name":"spender"},{"type":"uint256","name":"value"}]},{"name":"arc88_OwnershipTransferred","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"new_owner"}]},{"name":"arc88_OwnershipRenounced","args":[{"type":"address","name":"previous_owner"}]},{"name":"arc88_OwnershipTransferRequested","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"pending_owner"}]},{"name":"arc88_OwnershipTransferAccepted","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"new_owner"}]}],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type ApprovalStruct = {
  approvalAmount: bigint,
  owner: string,
  spender: string
}


/**
 * Converts the ABI tuple representation of a ApprovalStruct to the struct representation
 */
export function ApprovalStructFromTuple(abiTuple: [bigint, string, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ApprovalStruct, APP_SPEC.structs) as ApprovalStruct
}

export type Arc1410HoldingPartitionsPaginatedKey = {
  holder: string,
  page: bigint
}


/**
 * Converts the ABI tuple representation of a arc1410_HoldingPartitionsPaginatedKey to the struct representation
 */
export function Arc1410HoldingPartitionsPaginatedKeyFromTuple(abiTuple: [string, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1410_HoldingPartitionsPaginatedKey, APP_SPEC.structs) as Arc1410HoldingPartitionsPaginatedKey
}

export type Arc1410OperatorKey = {
  holder: string,
  operator: string,
  partition: string
}


/**
 * Converts the ABI tuple representation of a arc1410_OperatorKey to the struct representation
 */
export function Arc1410OperatorKeyFromTuple(abiTuple: [string, string, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1410_OperatorKey, APP_SPEC.structs) as Arc1410OperatorKey
}

export type Arc1410OperatorPortionKey = {
  holder: string,
  operator: string,
  partition: string
}


/**
 * Converts the ABI tuple representation of a arc1410_OperatorPortionKey to the struct representation
 */
export function Arc1410OperatorPortionKeyFromTuple(abiTuple: [string, string, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1410_OperatorPortionKey, APP_SPEC.structs) as Arc1410OperatorPortionKey
}

export type Arc1410PartitionKey = {
  holder: string,
  partition: string
}


/**
 * Converts the ABI tuple representation of a arc1410_PartitionKey to the struct representation
 */
export function Arc1410PartitionKeyFromTuple(abiTuple: [string, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1410_PartitionKey, APP_SPEC.structs) as Arc1410PartitionKey
}

export type Arc1410CanTransferByPartitionReturn = {
  code: number,
  status: string,
  receiverPartition: string
}


/**
 * Converts the ABI tuple representation of a arc1410_can_transfer_by_partition_return to the struct representation
 */
export function Arc1410CanTransferByPartitionReturnFromTuple(abiTuple: [number, string, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1410_can_transfer_by_partition_return, APP_SPEC.structs) as Arc1410CanTransferByPartitionReturn
}

export type Arc1410PartitionIssue = {
  to: string,
  partition: string,
  amount: bigint,
  data: Uint8Array
}


/**
 * Converts the ABI tuple representation of a arc1410_partition_issue to the struct representation
 */
export function Arc1410PartitionIssueFromTuple(abiTuple: [string, string, bigint, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1410_partition_issue, APP_SPEC.structs) as Arc1410PartitionIssue
}

export type Arc1410PartitionRedeem = {
  from: string,
  partition: string,
  amount: bigint,
  data: Uint8Array
}


/**
 * Converts the ABI tuple representation of a arc1410_partition_redeem to the struct representation
 */
export function Arc1410PartitionRedeemFromTuple(abiTuple: [string, string, bigint, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1410_partition_redeem, APP_SPEC.structs) as Arc1410PartitionRedeem
}

export type Arc1410PartitionTransfer = {
  from: string,
  to: string,
  partition: string,
  amount: bigint,
  data: Uint8Array
}


/**
 * Converts the ABI tuple representation of a arc1410_partition_transfer to the struct representation
 */
export function Arc1410PartitionTransferFromTuple(abiTuple: [string, string, string, bigint, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1410_partition_transfer, APP_SPEC.structs) as Arc1410PartitionTransfer
}

/**
 * The argument types for the Arc1410 contract
 */
export type Arc1410Args = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'arc1410_balance_of_partition(address,address)uint256': {
      holder: string
      partition: string
    }
    'arc200_transfer(address,uint256)bool': {
      to: string
      value: bigint | number
    }
    'arc1410_transfer_by_partition(address,address,uint256,byte[])address': {
      partition: string
      to: string
      amount: bigint | number
      data: Uint8Array
    }
    'arc1410_partitions_of(address,uint64)address[]': {
      holder: string
      page: bigint | number
    }
    'arc1410_is_operator(address,address,address)bool': {
      holder: string
      operator: string
      partition: string
    }
    'arc1410_authorize_operator(address,address,address)void': {
      holder: string
      operator: string
      partition: string
    }
    'arc1410_revoke_operator(address,address,address)void': {
      holder: string
      operator: string
      partition: string
    }
    'arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address': {
      from: string
      partition: string
      to: string
      amount: bigint | number
      data: Uint8Array
    }
    'arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)': {
      from: string
      partition: string
      to: string
      amount: bigint | number
      data: Uint8Array
    }
    'arc1410_authorize_operator_by_portion(address,address,address,uint256)void': {
      holder: string
      operator: string
      partition: string
      amount: bigint | number
    }
    'arc1410_is_operator_by_portion(address,address,address)bool': {
      holder: string
      operator: string
      partition: string
    }
    'arc1410_issue_by_partition(address,address,uint256,byte[])void': {
      to: string
      partition: string
      amount: bigint | number
      data: Uint8Array
    }
    'arc1410_redeem_by_partition(address,address,uint256,byte[])void': {
      from: string
      partition: string
      amount: bigint | number
      data: Uint8Array
    }
    'bootstrap(byte[],byte[],uint8,uint256)bool': {
      name: Uint8Array
      symbol: Uint8Array
      decimals: bigint | number
      totalSupply: bigint | number
    }
    'arc200_name()byte[32]': Record<string, never>
    'arc200_symbol()byte[8]': Record<string, never>
    'arc200_decimals()uint8': Record<string, never>
    'arc200_totalSupply()uint256': Record<string, never>
    'arc200_balanceOf(address)uint256': {
      /**
       * The address of the owner of the token
       */
      owner: string
    }
    'arc200_transferFrom(address,address,uint256)bool': {
      /**
       * The source of the transfer
       */
      from: string
      /**
       * The destination of the transfer
       */
      to: string
      /**
       * Amount of tokens to transfer
       */
      value: bigint | number
    }
    'arc200_approve(address,uint256)bool': {
      /**
       * Who is allowed to take tokens on owner's behalf
       */
      spender: string
      /**
       * Amount of tokens to be taken by spender
       */
      value: bigint | number
    }
    'arc200_allowance(address,address)uint256': {
      /**
       * Owner's account
       */
      owner: string
      /**
       * Who is allowed to take tokens on owner's behalf
       */
      spender: string
    }
    'arc88_owner()address': Record<string, never>
    'arc88_is_owner(address)bool': {
      query: string
    }
    'arc88_initialize_owner(address)void': {
      newOwner: string
    }
    'arc88_transfer_ownership(address)void': {
      newOwner: string
    }
    'arc88_renounce_ownership()void': Record<string, never>
    'arc88_transfer_ownership_request(address)void': {
      pending: string
    }
    'arc88_accept_ownership()void': Record<string, never>
    'arc88_cancel_ownership_request()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'arc1410_balance_of_partition(address,address)uint256': [holder: string, partition: string]
    'arc200_transfer(address,uint256)bool': [to: string, value: bigint | number]
    'arc1410_transfer_by_partition(address,address,uint256,byte[])address': [partition: string, to: string, amount: bigint | number, data: Uint8Array]
    'arc1410_partitions_of(address,uint64)address[]': [holder: string, page: bigint | number]
    'arc1410_is_operator(address,address,address)bool': [holder: string, operator: string, partition: string]
    'arc1410_authorize_operator(address,address,address)void': [holder: string, operator: string, partition: string]
    'arc1410_revoke_operator(address,address,address)void': [holder: string, operator: string, partition: string]
    'arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address': [from: string, partition: string, to: string, amount: bigint | number, data: Uint8Array]
    'arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)': [from: string, partition: string, to: string, amount: bigint | number, data: Uint8Array]
    'arc1410_authorize_operator_by_portion(address,address,address,uint256)void': [holder: string, operator: string, partition: string, amount: bigint | number]
    'arc1410_is_operator_by_portion(address,address,address)bool': [holder: string, operator: string, partition: string]
    'arc1410_issue_by_partition(address,address,uint256,byte[])void': [to: string, partition: string, amount: bigint | number, data: Uint8Array]
    'arc1410_redeem_by_partition(address,address,uint256,byte[])void': [from: string, partition: string, amount: bigint | number, data: Uint8Array]
    'bootstrap(byte[],byte[],uint8,uint256)bool': [name: Uint8Array, symbol: Uint8Array, decimals: bigint | number, totalSupply: bigint | number]
    'arc200_name()byte[32]': []
    'arc200_symbol()byte[8]': []
    'arc200_decimals()uint8': []
    'arc200_totalSupply()uint256': []
    'arc200_balanceOf(address)uint256': [owner: string]
    'arc200_transferFrom(address,address,uint256)bool': [from: string, to: string, value: bigint | number]
    'arc200_approve(address,uint256)bool': [spender: string, value: bigint | number]
    'arc200_allowance(address,address)uint256': [owner: string, spender: string]
    'arc88_owner()address': []
    'arc88_is_owner(address)bool': [query: string]
    'arc88_initialize_owner(address)void': [newOwner: string]
    'arc88_transfer_ownership(address)void': [newOwner: string]
    'arc88_renounce_ownership()void': []
    'arc88_transfer_ownership_request(address)void': [pending: string]
    'arc88_accept_ownership()void': []
    'arc88_cancel_ownership_request()void': []
  }
}

/**
 * The return type for each method
 */
export type Arc1410Returns = {
  'arc1410_balance_of_partition(address,address)uint256': bigint
  'arc200_transfer(address,uint256)bool': boolean
  'arc1410_transfer_by_partition(address,address,uint256,byte[])address': string
  'arc1410_partitions_of(address,uint64)address[]': string[]
  'arc1410_is_operator(address,address,address)bool': boolean
  'arc1410_authorize_operator(address,address,address)void': void
  'arc1410_revoke_operator(address,address,address)void': void
  'arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address': string
  'arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)': Arc1410CanTransferByPartitionReturn
  'arc1410_authorize_operator_by_portion(address,address,address,uint256)void': void
  'arc1410_is_operator_by_portion(address,address,address)bool': boolean
  'arc1410_issue_by_partition(address,address,uint256,byte[])void': void
  'arc1410_redeem_by_partition(address,address,uint256,byte[])void': void
  'bootstrap(byte[],byte[],uint8,uint256)bool': boolean
  'arc200_name()byte[32]': Uint8Array
  'arc200_symbol()byte[8]': Uint8Array
  'arc200_decimals()uint8': number
  'arc200_totalSupply()uint256': bigint
  'arc200_balanceOf(address)uint256': bigint
  'arc200_transferFrom(address,address,uint256)bool': boolean
  'arc200_approve(address,uint256)bool': boolean
  'arc200_allowance(address,address)uint256': bigint
  'arc88_owner()address': string
  'arc88_is_owner(address)bool': boolean
  'arc88_initialize_owner(address)void': void
  'arc88_transfer_ownership(address)void': void
  'arc88_renounce_ownership()void': void
  'arc88_transfer_ownership_request(address)void': void
  'arc88_accept_ownership()void': void
  'arc88_cancel_ownership_request()void': void
}

/**
 * Defines the types of available calls and state of the Arc1410 smart contract.
 */
export type Arc1410Types = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'arc1410_balance_of_partition(address,address)uint256' | 'arc1410_balance_of_partition', {
      argsObj: Arc1410Args['obj']['arc1410_balance_of_partition(address,address)uint256']
      argsTuple: Arc1410Args['tuple']['arc1410_balance_of_partition(address,address)uint256']
      returns: Arc1410Returns['arc1410_balance_of_partition(address,address)uint256']
    }>
    & Record<'arc200_transfer(address,uint256)bool' | 'arc200_transfer', {
      argsObj: Arc1410Args['obj']['arc200_transfer(address,uint256)bool']
      argsTuple: Arc1410Args['tuple']['arc200_transfer(address,uint256)bool']
      returns: Arc1410Returns['arc200_transfer(address,uint256)bool']
    }>
    & Record<'arc1410_transfer_by_partition(address,address,uint256,byte[])address' | 'arc1410_transfer_by_partition', {
      argsObj: Arc1410Args['obj']['arc1410_transfer_by_partition(address,address,uint256,byte[])address']
      argsTuple: Arc1410Args['tuple']['arc1410_transfer_by_partition(address,address,uint256,byte[])address']
      returns: Arc1410Returns['arc1410_transfer_by_partition(address,address,uint256,byte[])address']
    }>
    & Record<'arc1410_partitions_of(address,uint64)address[]' | 'arc1410_partitions_of', {
      argsObj: Arc1410Args['obj']['arc1410_partitions_of(address,uint64)address[]']
      argsTuple: Arc1410Args['tuple']['arc1410_partitions_of(address,uint64)address[]']
      returns: Arc1410Returns['arc1410_partitions_of(address,uint64)address[]']
    }>
    & Record<'arc1410_is_operator(address,address,address)bool' | 'arc1410_is_operator', {
      argsObj: Arc1410Args['obj']['arc1410_is_operator(address,address,address)bool']
      argsTuple: Arc1410Args['tuple']['arc1410_is_operator(address,address,address)bool']
      returns: Arc1410Returns['arc1410_is_operator(address,address,address)bool']
    }>
    & Record<'arc1410_authorize_operator(address,address,address)void' | 'arc1410_authorize_operator', {
      argsObj: Arc1410Args['obj']['arc1410_authorize_operator(address,address,address)void']
      argsTuple: Arc1410Args['tuple']['arc1410_authorize_operator(address,address,address)void']
      returns: Arc1410Returns['arc1410_authorize_operator(address,address,address)void']
    }>
    & Record<'arc1410_revoke_operator(address,address,address)void' | 'arc1410_revoke_operator', {
      argsObj: Arc1410Args['obj']['arc1410_revoke_operator(address,address,address)void']
      argsTuple: Arc1410Args['tuple']['arc1410_revoke_operator(address,address,address)void']
      returns: Arc1410Returns['arc1410_revoke_operator(address,address,address)void']
    }>
    & Record<'arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address' | 'arc1410_operator_transfer_by_partition', {
      argsObj: Arc1410Args['obj']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address']
      argsTuple: Arc1410Args['tuple']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address']
      returns: Arc1410Returns['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address']
    }>
    & Record<'arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)' | 'arc1410_can_transfer_by_partition', {
      argsObj: Arc1410Args['obj']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)']
      argsTuple: Arc1410Args['tuple']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)']
      returns: Arc1410Returns['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)']
    }>
    & Record<'arc1410_authorize_operator_by_portion(address,address,address,uint256)void' | 'arc1410_authorize_operator_by_portion', {
      argsObj: Arc1410Args['obj']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void']
      argsTuple: Arc1410Args['tuple']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void']
      returns: Arc1410Returns['arc1410_authorize_operator_by_portion(address,address,address,uint256)void']
    }>
    & Record<'arc1410_is_operator_by_portion(address,address,address)bool' | 'arc1410_is_operator_by_portion', {
      argsObj: Arc1410Args['obj']['arc1410_is_operator_by_portion(address,address,address)bool']
      argsTuple: Arc1410Args['tuple']['arc1410_is_operator_by_portion(address,address,address)bool']
      returns: Arc1410Returns['arc1410_is_operator_by_portion(address,address,address)bool']
    }>
    & Record<'arc1410_issue_by_partition(address,address,uint256,byte[])void' | 'arc1410_issue_by_partition', {
      argsObj: Arc1410Args['obj']['arc1410_issue_by_partition(address,address,uint256,byte[])void']
      argsTuple: Arc1410Args['tuple']['arc1410_issue_by_partition(address,address,uint256,byte[])void']
      returns: Arc1410Returns['arc1410_issue_by_partition(address,address,uint256,byte[])void']
    }>
    & Record<'arc1410_redeem_by_partition(address,address,uint256,byte[])void' | 'arc1410_redeem_by_partition', {
      argsObj: Arc1410Args['obj']['arc1410_redeem_by_partition(address,address,uint256,byte[])void']
      argsTuple: Arc1410Args['tuple']['arc1410_redeem_by_partition(address,address,uint256,byte[])void']
      returns: Arc1410Returns['arc1410_redeem_by_partition(address,address,uint256,byte[])void']
    }>
    & Record<'bootstrap(byte[],byte[],uint8,uint256)bool' | 'bootstrap', {
      argsObj: Arc1410Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool']
      argsTuple: Arc1410Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']
      returns: Arc1410Returns['bootstrap(byte[],byte[],uint8,uint256)bool']
    }>
    & Record<'arc200_name()byte[32]' | 'arc200_name', {
      argsObj: Arc1410Args['obj']['arc200_name()byte[32]']
      argsTuple: Arc1410Args['tuple']['arc200_name()byte[32]']
      /**
       * The name of the token
       */
      returns: Arc1410Returns['arc200_name()byte[32]']
    }>
    & Record<'arc200_symbol()byte[8]' | 'arc200_symbol', {
      argsObj: Arc1410Args['obj']['arc200_symbol()byte[8]']
      argsTuple: Arc1410Args['tuple']['arc200_symbol()byte[8]']
      /**
       * The symbol of the token
       */
      returns: Arc1410Returns['arc200_symbol()byte[8]']
    }>
    & Record<'arc200_decimals()uint8' | 'arc200_decimals', {
      argsObj: Arc1410Args['obj']['arc200_decimals()uint8']
      argsTuple: Arc1410Args['tuple']['arc200_decimals()uint8']
      /**
       * The decimals of the token
       */
      returns: Arc1410Returns['arc200_decimals()uint8']
    }>
    & Record<'arc200_totalSupply()uint256' | 'arc200_totalSupply', {
      argsObj: Arc1410Args['obj']['arc200_totalSupply()uint256']
      argsTuple: Arc1410Args['tuple']['arc200_totalSupply()uint256']
      /**
       * The total supply of the token
       */
      returns: Arc1410Returns['arc200_totalSupply()uint256']
    }>
    & Record<'arc200_balanceOf(address)uint256' | 'arc200_balanceOf', {
      argsObj: Arc1410Args['obj']['arc200_balanceOf(address)uint256']
      argsTuple: Arc1410Args['tuple']['arc200_balanceOf(address)uint256']
      /**
       * The current balance of the holder of the token
       */
      returns: Arc1410Returns['arc200_balanceOf(address)uint256']
    }>
    & Record<'arc200_transferFrom(address,address,uint256)bool' | 'arc200_transferFrom', {
      argsObj: Arc1410Args['obj']['arc200_transferFrom(address,address,uint256)bool']
      argsTuple: Arc1410Args['tuple']['arc200_transferFrom(address,address,uint256)bool']
      /**
       * Success
       */
      returns: Arc1410Returns['arc200_transferFrom(address,address,uint256)bool']
    }>
    & Record<'arc200_approve(address,uint256)bool' | 'arc200_approve', {
      argsObj: Arc1410Args['obj']['arc200_approve(address,uint256)bool']
      argsTuple: Arc1410Args['tuple']['arc200_approve(address,uint256)bool']
      /**
       * Success
       */
      returns: Arc1410Returns['arc200_approve(address,uint256)bool']
    }>
    & Record<'arc200_allowance(address,address)uint256' | 'arc200_allowance', {
      argsObj: Arc1410Args['obj']['arc200_allowance(address,address)uint256']
      argsTuple: Arc1410Args['tuple']['arc200_allowance(address,address)uint256']
      /**
       * The remaining allowance
       */
      returns: Arc1410Returns['arc200_allowance(address,address)uint256']
    }>
    & Record<'arc88_owner()address' | 'arc88_owner', {
      argsObj: Arc1410Args['obj']['arc88_owner()address']
      argsTuple: Arc1410Args['tuple']['arc88_owner()address']
      returns: Arc1410Returns['arc88_owner()address']
    }>
    & Record<'arc88_is_owner(address)bool' | 'arc88_is_owner', {
      argsObj: Arc1410Args['obj']['arc88_is_owner(address)bool']
      argsTuple: Arc1410Args['tuple']['arc88_is_owner(address)bool']
      returns: Arc1410Returns['arc88_is_owner(address)bool']
    }>
    & Record<'arc88_initialize_owner(address)void' | 'arc88_initialize_owner', {
      argsObj: Arc1410Args['obj']['arc88_initialize_owner(address)void']
      argsTuple: Arc1410Args['tuple']['arc88_initialize_owner(address)void']
      returns: Arc1410Returns['arc88_initialize_owner(address)void']
    }>
    & Record<'arc88_transfer_ownership(address)void' | 'arc88_transfer_ownership', {
      argsObj: Arc1410Args['obj']['arc88_transfer_ownership(address)void']
      argsTuple: Arc1410Args['tuple']['arc88_transfer_ownership(address)void']
      returns: Arc1410Returns['arc88_transfer_ownership(address)void']
    }>
    & Record<'arc88_renounce_ownership()void' | 'arc88_renounce_ownership', {
      argsObj: Arc1410Args['obj']['arc88_renounce_ownership()void']
      argsTuple: Arc1410Args['tuple']['arc88_renounce_ownership()void']
      returns: Arc1410Returns['arc88_renounce_ownership()void']
    }>
    & Record<'arc88_transfer_ownership_request(address)void' | 'arc88_transfer_ownership_request', {
      argsObj: Arc1410Args['obj']['arc88_transfer_ownership_request(address)void']
      argsTuple: Arc1410Args['tuple']['arc88_transfer_ownership_request(address)void']
      returns: Arc1410Returns['arc88_transfer_ownership_request(address)void']
    }>
    & Record<'arc88_accept_ownership()void' | 'arc88_accept_ownership', {
      argsObj: Arc1410Args['obj']['arc88_accept_ownership()void']
      argsTuple: Arc1410Args['tuple']['arc88_accept_ownership()void']
      returns: Arc1410Returns['arc88_accept_ownership()void']
    }>
    & Record<'arc88_cancel_ownership_request()void' | 'arc88_cancel_ownership_request', {
      argsObj: Arc1410Args['obj']['arc88_cancel_ownership_request()void']
      argsTuple: Arc1410Args['tuple']['arc88_cancel_ownership_request()void']
      returns: Arc1410Returns['arc88_cancel_ownership_request()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        /**
         * Name of the asset. Max 32 bytes
         */
        name: Uint8Array
        /**
         * Symbol of the asset. Max 8 bytes
         */
        symbol: Uint8Array
        /**
         * Decimals of the asset. Recommended is 6 decimal places.
         */
        decimals: number
        /**
         * Minted supply
         */
        totalSupply: bigint
        owner: string
        pendingOwner: string
        initialized: number
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        partitions: Map<Arc1410PartitionKey, bigint>
        holderPartitionsCurrentPage: Map<string, bigint>
        holderPartitionsAddresses: Map<Arc1410HoldingPartitionsPaginatedKey, string[]>
        operators: Map<Arc1410OperatorKey, number>
        operatorPortionAllowances: Map<Arc1410OperatorPortionKey, bigint>
        balances: Map<string, bigint>
        approvals: Map<Uint8Array, ApprovalStruct>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type Arc1410Signatures = keyof Arc1410Types['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Arc1410NonVoidMethodSignatures = keyof Arc1410Types['methods'] extends infer T ? T extends keyof Arc1410Types['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Arc1410 smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Arc1410Signatures> = Arc1410Types['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Arc1410 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc1410Signatures> = Arc1410Types['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = Arc1410Types['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = Arc1410Types['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type Arc1410CreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type Arc1410DeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: Arc1410CreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Arc1410 smart contract
 */
export abstract class Arc1410ParamsFactory {
  /**
   * Constructs a no op call for the arc1410_balance_of_partition(address,address)uint256 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410BalanceOfPartition(params: CallParams<Arc1410Args['obj']['arc1410_balance_of_partition(address,address)uint256'] | Arc1410Args['tuple']['arc1410_balance_of_partition(address,address)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_balance_of_partition(address,address)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder, params.args.partition],
    }
  }
  /**
   * Constructs a no op call for the arc200_transfer(address,uint256)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Transfer(params: CallParams<Arc1410Args['obj']['arc200_transfer(address,uint256)bool'] | Arc1410Args['tuple']['arc200_transfer(address,uint256)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_transfer(address,uint256)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.to, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the arc1410_transfer_by_partition(address,address,uint256,byte[])address ABI method
   *
   * Transfer an amount of tokens from partition to receiver. Sender must be msg.sender or authorized operator.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410TransferByPartition(params: CallParams<Arc1410Args['obj']['arc1410_transfer_by_partition(address,address,uint256,byte[])address'] | Arc1410Args['tuple']['arc1410_transfer_by_partition(address,address,uint256,byte[])address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_transfer_by_partition(address,address,uint256,byte[])address' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.partition, params.args.to, params.args.amount, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc1410_partitions_of(address,uint64)address[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410PartitionsOf(params: CallParams<Arc1410Args['obj']['arc1410_partitions_of(address,uint64)address[]'] | Arc1410Args['tuple']['arc1410_partitions_of(address,uint64)address[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_partitions_of(address,uint64)address[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder, params.args.page],
    }
  }
  /**
   * Constructs a no op call for the arc1410_is_operator(address,address,address)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410IsOperator(params: CallParams<Arc1410Args['obj']['arc1410_is_operator(address,address,address)bool'] | Arc1410Args['tuple']['arc1410_is_operator(address,address,address)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_is_operator(address,address,address)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder, params.args.operator, params.args.partition],
    }
  }
  /**
   * Constructs a no op call for the arc1410_authorize_operator(address,address,address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410AuthorizeOperator(params: CallParams<Arc1410Args['obj']['arc1410_authorize_operator(address,address,address)void'] | Arc1410Args['tuple']['arc1410_authorize_operator(address,address,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_authorize_operator(address,address,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder, params.args.operator, params.args.partition],
    }
  }
  /**
   * Constructs a no op call for the arc1410_revoke_operator(address,address,address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410RevokeOperator(params: CallParams<Arc1410Args['obj']['arc1410_revoke_operator(address,address,address)void'] | Arc1410Args['tuple']['arc1410_revoke_operator(address,address,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_revoke_operator(address,address,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder, params.args.operator, params.args.partition],
    }
  }
  /**
   * Constructs a no op call for the arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410OperatorTransferByPartition(params: CallParams<Arc1410Args['obj']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address'] | Arc1410Args['tuple']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.from, params.args.partition, params.args.to, params.args.amount, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410CanTransferByPartition(params: CallParams<Arc1410Args['obj']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)'] | Arc1410Args['tuple']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.from, params.args.partition, params.args.to, params.args.amount, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc1410_authorize_operator_by_portion(address,address,address,uint256)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410AuthorizeOperatorByPortion(params: CallParams<Arc1410Args['obj']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void'] | Arc1410Args['tuple']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_authorize_operator_by_portion(address,address,address,uint256)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder, params.args.operator, params.args.partition, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the arc1410_is_operator_by_portion(address,address,address)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410IsOperatorByPortion(params: CallParams<Arc1410Args['obj']['arc1410_is_operator_by_portion(address,address,address)bool'] | Arc1410Args['tuple']['arc1410_is_operator_by_portion(address,address,address)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_is_operator_by_portion(address,address,address)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder, params.args.operator, params.args.partition],
    }
  }
  /**
   * Constructs a no op call for the arc1410_issue_by_partition(address,address,uint256,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410IssueByPartition(params: CallParams<Arc1410Args['obj']['arc1410_issue_by_partition(address,address,uint256,byte[])void'] | Arc1410Args['tuple']['arc1410_issue_by_partition(address,address,uint256,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_issue_by_partition(address,address,uint256,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.to, params.args.partition, params.args.amount, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc1410_redeem_by_partition(address,address,uint256,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410RedeemByPartition(params: CallParams<Arc1410Args['obj']['arc1410_redeem_by_partition(address,address,uint256,byte[])void'] | Arc1410Args['tuple']['arc1410_redeem_by_partition(address,address,uint256,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_redeem_by_partition(address,address,uint256,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.from, params.args.partition, params.args.amount, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the bootstrap(byte[],byte[],uint8,uint256)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrap(params: CallParams<Arc1410Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool'] | Arc1410Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrap(byte[],byte[],uint8,uint256)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.symbol, params.args.decimals, params.args.totalSupply],
    }
  }
  /**
   * Constructs a no op call for the arc200_name()byte[32] ABI method
   *
   * Returns the name of the token
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Name(params: CallParams<Arc1410Args['obj']['arc200_name()byte[32]'] | Arc1410Args['tuple']['arc200_name()byte[32]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_name()byte[32]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc200_symbol()byte[8] ABI method
   *
   * Returns the symbol of the token
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Symbol(params: CallParams<Arc1410Args['obj']['arc200_symbol()byte[8]'] | Arc1410Args['tuple']['arc200_symbol()byte[8]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_symbol()byte[8]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc200_decimals()uint8 ABI method
   *
   * Returns the decimals of the token
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Decimals(params: CallParams<Arc1410Args['obj']['arc200_decimals()uint8'] | Arc1410Args['tuple']['arc200_decimals()uint8']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_decimals()uint8' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc200_totalSupply()uint256 ABI method
   *
   * Returns the total supply of the token
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200TotalSupply(params: CallParams<Arc1410Args['obj']['arc200_totalSupply()uint256'] | Arc1410Args['tuple']['arc200_totalSupply()uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_totalSupply()uint256' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc200_balanceOf(address)uint256 ABI method
   *
   * Returns the current balance of the owner of the token
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200BalanceOf(params: CallParams<Arc1410Args['obj']['arc200_balanceOf(address)uint256'] | Arc1410Args['tuple']['arc200_balanceOf(address)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_balanceOf(address)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.owner],
    }
  }
  /**
   * Constructs a no op call for the arc200_transferFrom(address,address,uint256)bool ABI method
   *
   * Transfers tokens from source to destination as approved spender
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200TransferFrom(params: CallParams<Arc1410Args['obj']['arc200_transferFrom(address,address,uint256)bool'] | Arc1410Args['tuple']['arc200_transferFrom(address,address,uint256)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_transferFrom(address,address,uint256)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.from, params.args.to, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the arc200_approve(address,uint256)bool ABI method
   *
   * Approve spender for a token
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Approve(params: CallParams<Arc1410Args['obj']['arc200_approve(address,uint256)bool'] | Arc1410Args['tuple']['arc200_approve(address,uint256)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_approve(address,uint256)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.spender, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the arc200_allowance(address,address)uint256 ABI method
   *
   * Returns the current allowance of the spender of the tokens of the owner
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Allowance(params: CallParams<Arc1410Args['obj']['arc200_allowance(address,address)uint256'] | Arc1410Args['tuple']['arc200_allowance(address,address)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_allowance(address,address)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.owner, params.args.spender],
    }
  }
  /**
   * Constructs a no op call for the arc88_owner()address ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88Owner(params: CallParams<Arc1410Args['obj']['arc88_owner()address'] | Arc1410Args['tuple']['arc88_owner()address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_owner()address' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc88_is_owner(address)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88IsOwner(params: CallParams<Arc1410Args['obj']['arc88_is_owner(address)bool'] | Arc1410Args['tuple']['arc88_is_owner(address)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_is_owner(address)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.query],
    }
  }
  /**
   * Constructs a no op call for the arc88_initialize_owner(address)void ABI method
   *
   * Explicit initialization override (creation group recommended). Fails if already initialized.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88InitializeOwner(params: CallParams<Arc1410Args['obj']['arc88_initialize_owner(address)void'] | Arc1410Args['tuple']['arc88_initialize_owner(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_initialize_owner(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newOwner],
    }
  }
  /**
   * Constructs a no op call for the arc88_transfer_ownership(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88TransferOwnership(params: CallParams<Arc1410Args['obj']['arc88_transfer_ownership(address)void'] | Arc1410Args['tuple']['arc88_transfer_ownership(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_transfer_ownership(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newOwner],
    }
  }
  /**
   * Constructs a no op call for the arc88_renounce_ownership()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88RenounceOwnership(params: CallParams<Arc1410Args['obj']['arc88_renounce_ownership()void'] | Arc1410Args['tuple']['arc88_renounce_ownership()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_renounce_ownership()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc88_transfer_ownership_request(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88TransferOwnershipRequest(params: CallParams<Arc1410Args['obj']['arc88_transfer_ownership_request(address)void'] | Arc1410Args['tuple']['arc88_transfer_ownership_request(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_transfer_ownership_request(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.pending],
    }
  }
  /**
   * Constructs a no op call for the arc88_accept_ownership()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88AcceptOwnership(params: CallParams<Arc1410Args['obj']['arc88_accept_ownership()void'] | Arc1410Args['tuple']['arc88_accept_ownership()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_accept_ownership()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc88_cancel_ownership_request()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88CancelOwnershipRequest(params: CallParams<Arc1410Args['obj']['arc88_cancel_ownership_request()void'] | Arc1410Args['tuple']['arc88_cancel_ownership_request()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_cancel_ownership_request()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Arc1410 smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Arc1410Factory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `Arc1410Factory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Arc1410Client(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new Arc1410Client(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Arc1410 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Arc1410DeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new Arc1410Client(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Arc1410 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Arc1410 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Arc1410 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new Arc1410Client(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Arc1410 smart contract
 */
export class Arc1410Client {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `Arc1410Client`
   *
   * @param appClient An `AppClient` instance which has been created with the Arc1410 app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `Arc1410Client`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Arc1410NonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `Arc1410Client` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<Arc1410Client> {
    return new Arc1410Client(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `Arc1410Client` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<Arc1410Client> {
    return new Arc1410Client(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Arc1410 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_balance_of_partition(address,address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410BalanceOfPartition: (params: CallParams<Arc1410Args['obj']['arc1410_balance_of_partition(address,address)uint256'] | Arc1410Args['tuple']['arc1410_balance_of_partition(address,address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc1410BalanceOfPartition(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc200_transfer(address,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc200Transfer: (params: CallParams<Arc1410Args['obj']['arc200_transfer(address,uint256)bool'] | Arc1410Args['tuple']['arc200_transfer(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc200Transfer(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_transfer_by_partition(address,address,uint256,byte[])address` ABI method.
     *
     * Transfer an amount of tokens from partition to receiver. Sender must be msg.sender or authorized operator.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410TransferByPartition: (params: CallParams<Arc1410Args['obj']['arc1410_transfer_by_partition(address,address,uint256,byte[])address'] | Arc1410Args['tuple']['arc1410_transfer_by_partition(address,address,uint256,byte[])address']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc1410TransferByPartition(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_partitions_of(address,uint64)address[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410PartitionsOf: (params: CallParams<Arc1410Args['obj']['arc1410_partitions_of(address,uint64)address[]'] | Arc1410Args['tuple']['arc1410_partitions_of(address,uint64)address[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc1410PartitionsOf(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_is_operator(address,address,address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410IsOperator: (params: CallParams<Arc1410Args['obj']['arc1410_is_operator(address,address,address)bool'] | Arc1410Args['tuple']['arc1410_is_operator(address,address,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc1410IsOperator(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_authorize_operator(address,address,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410AuthorizeOperator: (params: CallParams<Arc1410Args['obj']['arc1410_authorize_operator(address,address,address)void'] | Arc1410Args['tuple']['arc1410_authorize_operator(address,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc1410AuthorizeOperator(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_revoke_operator(address,address,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410RevokeOperator: (params: CallParams<Arc1410Args['obj']['arc1410_revoke_operator(address,address,address)void'] | Arc1410Args['tuple']['arc1410_revoke_operator(address,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc1410RevokeOperator(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410OperatorTransferByPartition: (params: CallParams<Arc1410Args['obj']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address'] | Arc1410Args['tuple']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc1410OperatorTransferByPartition(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410CanTransferByPartition: (params: CallParams<Arc1410Args['obj']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)'] | Arc1410Args['tuple']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc1410CanTransferByPartition(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_authorize_operator_by_portion(address,address,address,uint256)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410AuthorizeOperatorByPortion: (params: CallParams<Arc1410Args['obj']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void'] | Arc1410Args['tuple']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc1410AuthorizeOperatorByPortion(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_is_operator_by_portion(address,address,address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410IsOperatorByPortion: (params: CallParams<Arc1410Args['obj']['arc1410_is_operator_by_portion(address,address,address)bool'] | Arc1410Args['tuple']['arc1410_is_operator_by_portion(address,address,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc1410IsOperatorByPortion(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_issue_by_partition(address,address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410IssueByPartition: (params: CallParams<Arc1410Args['obj']['arc1410_issue_by_partition(address,address,uint256,byte[])void'] | Arc1410Args['tuple']['arc1410_issue_by_partition(address,address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc1410IssueByPartition(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_redeem_by_partition(address,address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410RedeemByPartition: (params: CallParams<Arc1410Args['obj']['arc1410_redeem_by_partition(address,address,uint256,byte[])void'] | Arc1410Args['tuple']['arc1410_redeem_by_partition(address,address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc1410RedeemByPartition(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `bootstrap(byte[],byte[],uint8,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrap: (params: CallParams<Arc1410Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool'] | Arc1410Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc200_name()byte[32]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the name of the token
     *
     * @param params The params for the smart contract call
     * @returns The call params: The name of the token
     */
    arc200Name: (params: CallParams<Arc1410Args['obj']['arc200_name()byte[32]'] | Arc1410Args['tuple']['arc200_name()byte[32]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc200Name(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc200_symbol()byte[8]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the symbol of the token
     *
     * @param params The params for the smart contract call
     * @returns The call params: The symbol of the token
     */
    arc200Symbol: (params: CallParams<Arc1410Args['obj']['arc200_symbol()byte[8]'] | Arc1410Args['tuple']['arc200_symbol()byte[8]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc200Symbol(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc200_decimals()uint8` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the decimals of the token
     *
     * @param params The params for the smart contract call
     * @returns The call params: The decimals of the token
     */
    arc200Decimals: (params: CallParams<Arc1410Args['obj']['arc200_decimals()uint8'] | Arc1410Args['tuple']['arc200_decimals()uint8']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc200Decimals(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc200_totalSupply()uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the total supply of the token
     *
     * @param params The params for the smart contract call
     * @returns The call params: The total supply of the token
     */
    arc200TotalSupply: (params: CallParams<Arc1410Args['obj']['arc200_totalSupply()uint256'] | Arc1410Args['tuple']['arc200_totalSupply()uint256']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc200TotalSupply(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc200_balanceOf(address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the current balance of the owner of the token
     *
     * @param params The params for the smart contract call
     * @returns The call params: The current balance of the holder of the token
     */
    arc200BalanceOf: (params: CallParams<Arc1410Args['obj']['arc200_balanceOf(address)uint256'] | Arc1410Args['tuple']['arc200_balanceOf(address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc200BalanceOf(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc200_transferFrom(address,address,uint256)bool` ABI method.
     *
     * Transfers tokens from source to destination as approved spender
     *
     * @param params The params for the smart contract call
     * @returns The call params: Success
     */
    arc200TransferFrom: (params: CallParams<Arc1410Args['obj']['arc200_transferFrom(address,address,uint256)bool'] | Arc1410Args['tuple']['arc200_transferFrom(address,address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc200TransferFrom(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc200_approve(address,uint256)bool` ABI method.
     *
     * Approve spender for a token
     *
     * @param params The params for the smart contract call
     * @returns The call params: Success
     */
    arc200Approve: (params: CallParams<Arc1410Args['obj']['arc200_approve(address,uint256)bool'] | Arc1410Args['tuple']['arc200_approve(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc200Approve(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc200_allowance(address,address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the current allowance of the spender of the tokens of the owner
     *
     * @param params The params for the smart contract call
     * @returns The call params: The remaining allowance
     */
    arc200Allowance: (params: CallParams<Arc1410Args['obj']['arc200_allowance(address,address)uint256'] | Arc1410Args['tuple']['arc200_allowance(address,address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc200Allowance(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc88_owner()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88Owner: (params: CallParams<Arc1410Args['obj']['arc88_owner()address'] | Arc1410Args['tuple']['arc88_owner()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc88Owner(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc88_is_owner(address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88IsOwner: (params: CallParams<Arc1410Args['obj']['arc88_is_owner(address)bool'] | Arc1410Args['tuple']['arc88_is_owner(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc88IsOwner(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc88_initialize_owner(address)void` ABI method.
     *
     * Explicit initialization override (creation group recommended). Fails if already initialized.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88InitializeOwner: (params: CallParams<Arc1410Args['obj']['arc88_initialize_owner(address)void'] | Arc1410Args['tuple']['arc88_initialize_owner(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc88InitializeOwner(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc88_transfer_ownership(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88TransferOwnership: (params: CallParams<Arc1410Args['obj']['arc88_transfer_ownership(address)void'] | Arc1410Args['tuple']['arc88_transfer_ownership(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc88TransferOwnership(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc88_renounce_ownership()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88RenounceOwnership: (params: CallParams<Arc1410Args['obj']['arc88_renounce_ownership()void'] | Arc1410Args['tuple']['arc88_renounce_ownership()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc88RenounceOwnership(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc88_transfer_ownership_request(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88TransferOwnershipRequest: (params: CallParams<Arc1410Args['obj']['arc88_transfer_ownership_request(address)void'] | Arc1410Args['tuple']['arc88_transfer_ownership_request(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc88TransferOwnershipRequest(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc88_accept_ownership()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88AcceptOwnership: (params: CallParams<Arc1410Args['obj']['arc88_accept_ownership()void'] | Arc1410Args['tuple']['arc88_accept_ownership()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc88AcceptOwnership(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc88_cancel_ownership_request()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88CancelOwnershipRequest: (params: CallParams<Arc1410Args['obj']['arc88_cancel_ownership_request()void'] | Arc1410Args['tuple']['arc88_cancel_ownership_request()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1410ParamsFactory.arc88CancelOwnershipRequest(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Arc1410 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_balance_of_partition(address,address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410BalanceOfPartition: (params: CallParams<Arc1410Args['obj']['arc1410_balance_of_partition(address,address)uint256'] | Arc1410Args['tuple']['arc1410_balance_of_partition(address,address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc1410BalanceOfPartition(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc200_transfer(address,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc200Transfer: (params: CallParams<Arc1410Args['obj']['arc200_transfer(address,uint256)bool'] | Arc1410Args['tuple']['arc200_transfer(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc200Transfer(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_transfer_by_partition(address,address,uint256,byte[])address` ABI method.
     *
     * Transfer an amount of tokens from partition to receiver. Sender must be msg.sender or authorized operator.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410TransferByPartition: (params: CallParams<Arc1410Args['obj']['arc1410_transfer_by_partition(address,address,uint256,byte[])address'] | Arc1410Args['tuple']['arc1410_transfer_by_partition(address,address,uint256,byte[])address']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc1410TransferByPartition(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_partitions_of(address,uint64)address[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410PartitionsOf: (params: CallParams<Arc1410Args['obj']['arc1410_partitions_of(address,uint64)address[]'] | Arc1410Args['tuple']['arc1410_partitions_of(address,uint64)address[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc1410PartitionsOf(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_is_operator(address,address,address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410IsOperator: (params: CallParams<Arc1410Args['obj']['arc1410_is_operator(address,address,address)bool'] | Arc1410Args['tuple']['arc1410_is_operator(address,address,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc1410IsOperator(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_authorize_operator(address,address,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410AuthorizeOperator: (params: CallParams<Arc1410Args['obj']['arc1410_authorize_operator(address,address,address)void'] | Arc1410Args['tuple']['arc1410_authorize_operator(address,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc1410AuthorizeOperator(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_revoke_operator(address,address,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410RevokeOperator: (params: CallParams<Arc1410Args['obj']['arc1410_revoke_operator(address,address,address)void'] | Arc1410Args['tuple']['arc1410_revoke_operator(address,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc1410RevokeOperator(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410OperatorTransferByPartition: (params: CallParams<Arc1410Args['obj']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address'] | Arc1410Args['tuple']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc1410OperatorTransferByPartition(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410CanTransferByPartition: (params: CallParams<Arc1410Args['obj']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)'] | Arc1410Args['tuple']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc1410CanTransferByPartition(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_authorize_operator_by_portion(address,address,address,uint256)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410AuthorizeOperatorByPortion: (params: CallParams<Arc1410Args['obj']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void'] | Arc1410Args['tuple']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc1410AuthorizeOperatorByPortion(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_is_operator_by_portion(address,address,address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410IsOperatorByPortion: (params: CallParams<Arc1410Args['obj']['arc1410_is_operator_by_portion(address,address,address)bool'] | Arc1410Args['tuple']['arc1410_is_operator_by_portion(address,address,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc1410IsOperatorByPortion(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_issue_by_partition(address,address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410IssueByPartition: (params: CallParams<Arc1410Args['obj']['arc1410_issue_by_partition(address,address,uint256,byte[])void'] | Arc1410Args['tuple']['arc1410_issue_by_partition(address,address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc1410IssueByPartition(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_redeem_by_partition(address,address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410RedeemByPartition: (params: CallParams<Arc1410Args['obj']['arc1410_redeem_by_partition(address,address,uint256,byte[])void'] | Arc1410Args['tuple']['arc1410_redeem_by_partition(address,address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc1410RedeemByPartition(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `bootstrap(byte[],byte[],uint8,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrap: (params: CallParams<Arc1410Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool'] | Arc1410Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc200_name()byte[32]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the name of the token
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The name of the token
     */
    arc200Name: (params: CallParams<Arc1410Args['obj']['arc200_name()byte[32]'] | Arc1410Args['tuple']['arc200_name()byte[32]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc200Name(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc200_symbol()byte[8]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the symbol of the token
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The symbol of the token
     */
    arc200Symbol: (params: CallParams<Arc1410Args['obj']['arc200_symbol()byte[8]'] | Arc1410Args['tuple']['arc200_symbol()byte[8]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc200Symbol(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc200_decimals()uint8` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the decimals of the token
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The decimals of the token
     */
    arc200Decimals: (params: CallParams<Arc1410Args['obj']['arc200_decimals()uint8'] | Arc1410Args['tuple']['arc200_decimals()uint8']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc200Decimals(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc200_totalSupply()uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the total supply of the token
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The total supply of the token
     */
    arc200TotalSupply: (params: CallParams<Arc1410Args['obj']['arc200_totalSupply()uint256'] | Arc1410Args['tuple']['arc200_totalSupply()uint256']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc200TotalSupply(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc200_balanceOf(address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the current balance of the owner of the token
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The current balance of the holder of the token
     */
    arc200BalanceOf: (params: CallParams<Arc1410Args['obj']['arc200_balanceOf(address)uint256'] | Arc1410Args['tuple']['arc200_balanceOf(address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc200BalanceOf(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc200_transferFrom(address,address,uint256)bool` ABI method.
     *
     * Transfers tokens from source to destination as approved spender
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Success
     */
    arc200TransferFrom: (params: CallParams<Arc1410Args['obj']['arc200_transferFrom(address,address,uint256)bool'] | Arc1410Args['tuple']['arc200_transferFrom(address,address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc200TransferFrom(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc200_approve(address,uint256)bool` ABI method.
     *
     * Approve spender for a token
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Success
     */
    arc200Approve: (params: CallParams<Arc1410Args['obj']['arc200_approve(address,uint256)bool'] | Arc1410Args['tuple']['arc200_approve(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc200Approve(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc200_allowance(address,address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the current allowance of the spender of the tokens of the owner
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The remaining allowance
     */
    arc200Allowance: (params: CallParams<Arc1410Args['obj']['arc200_allowance(address,address)uint256'] | Arc1410Args['tuple']['arc200_allowance(address,address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc200Allowance(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc88_owner()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88Owner: (params: CallParams<Arc1410Args['obj']['arc88_owner()address'] | Arc1410Args['tuple']['arc88_owner()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc88Owner(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc88_is_owner(address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88IsOwner: (params: CallParams<Arc1410Args['obj']['arc88_is_owner(address)bool'] | Arc1410Args['tuple']['arc88_is_owner(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc88IsOwner(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc88_initialize_owner(address)void` ABI method.
     *
     * Explicit initialization override (creation group recommended). Fails if already initialized.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88InitializeOwner: (params: CallParams<Arc1410Args['obj']['arc88_initialize_owner(address)void'] | Arc1410Args['tuple']['arc88_initialize_owner(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc88InitializeOwner(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc88_transfer_ownership(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88TransferOwnership: (params: CallParams<Arc1410Args['obj']['arc88_transfer_ownership(address)void'] | Arc1410Args['tuple']['arc88_transfer_ownership(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc88TransferOwnership(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc88_renounce_ownership()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88RenounceOwnership: (params: CallParams<Arc1410Args['obj']['arc88_renounce_ownership()void'] | Arc1410Args['tuple']['arc88_renounce_ownership()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc88RenounceOwnership(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc88_transfer_ownership_request(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88TransferOwnershipRequest: (params: CallParams<Arc1410Args['obj']['arc88_transfer_ownership_request(address)void'] | Arc1410Args['tuple']['arc88_transfer_ownership_request(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc88TransferOwnershipRequest(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc88_accept_ownership()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88AcceptOwnership: (params: CallParams<Arc1410Args['obj']['arc88_accept_ownership()void'] | Arc1410Args['tuple']['arc88_accept_ownership()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc88AcceptOwnership(params))
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc88_cancel_ownership_request()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88CancelOwnershipRequest: (params: CallParams<Arc1410Args['obj']['arc88_cancel_ownership_request()void'] | Arc1410Args['tuple']['arc88_cancel_ownership_request()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1410ParamsFactory.arc88CancelOwnershipRequest(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Arc1410 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_balance_of_partition(address,address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410BalanceOfPartition: async (params: CallParams<Arc1410Args['obj']['arc1410_balance_of_partition(address,address)uint256'] | Arc1410Args['tuple']['arc1410_balance_of_partition(address,address)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc1410BalanceOfPartition(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc1410_balance_of_partition(address,address)uint256'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc200_transfer(address,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc200Transfer: async (params: CallParams<Arc1410Args['obj']['arc200_transfer(address,uint256)bool'] | Arc1410Args['tuple']['arc200_transfer(address,uint256)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc200Transfer(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc200_transfer(address,uint256)bool'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_transfer_by_partition(address,address,uint256,byte[])address` ABI method.
     *
     * Transfer an amount of tokens from partition to receiver. Sender must be msg.sender or authorized operator.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410TransferByPartition: async (params: CallParams<Arc1410Args['obj']['arc1410_transfer_by_partition(address,address,uint256,byte[])address'] | Arc1410Args['tuple']['arc1410_transfer_by_partition(address,address,uint256,byte[])address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc1410TransferByPartition(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc1410_transfer_by_partition(address,address,uint256,byte[])address'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_partitions_of(address,uint64)address[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410PartitionsOf: async (params: CallParams<Arc1410Args['obj']['arc1410_partitions_of(address,uint64)address[]'] | Arc1410Args['tuple']['arc1410_partitions_of(address,uint64)address[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc1410PartitionsOf(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc1410_partitions_of(address,uint64)address[]'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_is_operator(address,address,address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410IsOperator: async (params: CallParams<Arc1410Args['obj']['arc1410_is_operator(address,address,address)bool'] | Arc1410Args['tuple']['arc1410_is_operator(address,address,address)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc1410IsOperator(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc1410_is_operator(address,address,address)bool'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_authorize_operator(address,address,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410AuthorizeOperator: async (params: CallParams<Arc1410Args['obj']['arc1410_authorize_operator(address,address,address)void'] | Arc1410Args['tuple']['arc1410_authorize_operator(address,address,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc1410AuthorizeOperator(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc1410_authorize_operator(address,address,address)void'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_revoke_operator(address,address,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410RevokeOperator: async (params: CallParams<Arc1410Args['obj']['arc1410_revoke_operator(address,address,address)void'] | Arc1410Args['tuple']['arc1410_revoke_operator(address,address,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc1410RevokeOperator(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc1410_revoke_operator(address,address,address)void'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410OperatorTransferByPartition: async (params: CallParams<Arc1410Args['obj']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address'] | Arc1410Args['tuple']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc1410OperatorTransferByPartition(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410CanTransferByPartition: async (params: CallParams<Arc1410Args['obj']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)'] | Arc1410Args['tuple']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc1410CanTransferByPartition(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_authorize_operator_by_portion(address,address,address,uint256)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410AuthorizeOperatorByPortion: async (params: CallParams<Arc1410Args['obj']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void'] | Arc1410Args['tuple']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc1410AuthorizeOperatorByPortion(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc1410_authorize_operator_by_portion(address,address,address,uint256)void'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_is_operator_by_portion(address,address,address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410IsOperatorByPortion: async (params: CallParams<Arc1410Args['obj']['arc1410_is_operator_by_portion(address,address,address)bool'] | Arc1410Args['tuple']['arc1410_is_operator_by_portion(address,address,address)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc1410IsOperatorByPortion(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc1410_is_operator_by_portion(address,address,address)bool'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_issue_by_partition(address,address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410IssueByPartition: async (params: CallParams<Arc1410Args['obj']['arc1410_issue_by_partition(address,address,uint256,byte[])void'] | Arc1410Args['tuple']['arc1410_issue_by_partition(address,address,uint256,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc1410IssueByPartition(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc1410_issue_by_partition(address,address,uint256,byte[])void'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc1410_redeem_by_partition(address,address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410RedeemByPartition: async (params: CallParams<Arc1410Args['obj']['arc1410_redeem_by_partition(address,address,uint256,byte[])void'] | Arc1410Args['tuple']['arc1410_redeem_by_partition(address,address,uint256,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc1410RedeemByPartition(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc1410_redeem_by_partition(address,address,uint256,byte[])void'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `bootstrap(byte[],byte[],uint8,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrap: async (params: CallParams<Arc1410Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool'] | Arc1410Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.bootstrap(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['bootstrap(byte[],byte[],uint8,uint256)bool'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc200_name()byte[32]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the name of the token
     *
     * @param params The params for the smart contract call
     * @returns The call result: The name of the token
     */
    arc200Name: async (params: CallParams<Arc1410Args['obj']['arc200_name()byte[32]'] | Arc1410Args['tuple']['arc200_name()byte[32]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc200Name(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc200_name()byte[32]'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc200_symbol()byte[8]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the symbol of the token
     *
     * @param params The params for the smart contract call
     * @returns The call result: The symbol of the token
     */
    arc200Symbol: async (params: CallParams<Arc1410Args['obj']['arc200_symbol()byte[8]'] | Arc1410Args['tuple']['arc200_symbol()byte[8]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc200Symbol(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc200_symbol()byte[8]'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc200_decimals()uint8` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the decimals of the token
     *
     * @param params The params for the smart contract call
     * @returns The call result: The decimals of the token
     */
    arc200Decimals: async (params: CallParams<Arc1410Args['obj']['arc200_decimals()uint8'] | Arc1410Args['tuple']['arc200_decimals()uint8']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc200Decimals(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc200_decimals()uint8'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc200_totalSupply()uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the total supply of the token
     *
     * @param params The params for the smart contract call
     * @returns The call result: The total supply of the token
     */
    arc200TotalSupply: async (params: CallParams<Arc1410Args['obj']['arc200_totalSupply()uint256'] | Arc1410Args['tuple']['arc200_totalSupply()uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc200TotalSupply(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc200_totalSupply()uint256'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc200_balanceOf(address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the current balance of the owner of the token
     *
     * @param params The params for the smart contract call
     * @returns The call result: The current balance of the holder of the token
     */
    arc200BalanceOf: async (params: CallParams<Arc1410Args['obj']['arc200_balanceOf(address)uint256'] | Arc1410Args['tuple']['arc200_balanceOf(address)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc200BalanceOf(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc200_balanceOf(address)uint256'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc200_transferFrom(address,address,uint256)bool` ABI method.
     *
     * Transfers tokens from source to destination as approved spender
     *
     * @param params The params for the smart contract call
     * @returns The call result: Success
     */
    arc200TransferFrom: async (params: CallParams<Arc1410Args['obj']['arc200_transferFrom(address,address,uint256)bool'] | Arc1410Args['tuple']['arc200_transferFrom(address,address,uint256)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc200TransferFrom(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc200_transferFrom(address,address,uint256)bool'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc200_approve(address,uint256)bool` ABI method.
     *
     * Approve spender for a token
     *
     * @param params The params for the smart contract call
     * @returns The call result: Success
     */
    arc200Approve: async (params: CallParams<Arc1410Args['obj']['arc200_approve(address,uint256)bool'] | Arc1410Args['tuple']['arc200_approve(address,uint256)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc200Approve(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc200_approve(address,uint256)bool'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc200_allowance(address,address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the current allowance of the spender of the tokens of the owner
     *
     * @param params The params for the smart contract call
     * @returns The call result: The remaining allowance
     */
    arc200Allowance: async (params: CallParams<Arc1410Args['obj']['arc200_allowance(address,address)uint256'] | Arc1410Args['tuple']['arc200_allowance(address,address)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc200Allowance(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc200_allowance(address,address)uint256'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc88_owner()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88Owner: async (params: CallParams<Arc1410Args['obj']['arc88_owner()address'] | Arc1410Args['tuple']['arc88_owner()address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc88Owner(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc88_owner()address'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc88_is_owner(address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88IsOwner: async (params: CallParams<Arc1410Args['obj']['arc88_is_owner(address)bool'] | Arc1410Args['tuple']['arc88_is_owner(address)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc88IsOwner(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc88_is_owner(address)bool'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc88_initialize_owner(address)void` ABI method.
     *
     * Explicit initialization override (creation group recommended). Fails if already initialized.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88InitializeOwner: async (params: CallParams<Arc1410Args['obj']['arc88_initialize_owner(address)void'] | Arc1410Args['tuple']['arc88_initialize_owner(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc88InitializeOwner(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc88_initialize_owner(address)void'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc88_transfer_ownership(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88TransferOwnership: async (params: CallParams<Arc1410Args['obj']['arc88_transfer_ownership(address)void'] | Arc1410Args['tuple']['arc88_transfer_ownership(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc88TransferOwnership(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc88_transfer_ownership(address)void'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc88_renounce_ownership()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88RenounceOwnership: async (params: CallParams<Arc1410Args['obj']['arc88_renounce_ownership()void'] | Arc1410Args['tuple']['arc88_renounce_ownership()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc88RenounceOwnership(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc88_renounce_ownership()void'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc88_transfer_ownership_request(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88TransferOwnershipRequest: async (params: CallParams<Arc1410Args['obj']['arc88_transfer_ownership_request(address)void'] | Arc1410Args['tuple']['arc88_transfer_ownership_request(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc88TransferOwnershipRequest(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc88_transfer_ownership_request(address)void'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc88_accept_ownership()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88AcceptOwnership: async (params: CallParams<Arc1410Args['obj']['arc88_accept_ownership()void'] | Arc1410Args['tuple']['arc88_accept_ownership()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc88AcceptOwnership(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc88_accept_ownership()void'])}
    },

    /**
     * Makes a call to the Arc1410 smart contract using the `arc88_cancel_ownership_request()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88CancelOwnershipRequest: async (params: CallParams<Arc1410Args['obj']['arc88_cancel_ownership_request()void'] | Arc1410Args['tuple']['arc88_cancel_ownership_request()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1410ParamsFactory.arc88CancelOwnershipRequest(params))
      return {...result, return: result.return as unknown as (undefined | Arc1410Returns['arc88_cancel_ownership_request()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Arc1410Client(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the Arc1410 smart contract using the `arc1410_balance_of_partition(address,address)uint256` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc1410BalanceOfPartition(params: CallParams<Arc1410Args['obj']['arc1410_balance_of_partition(address,address)uint256'] | Arc1410Args['tuple']['arc1410_balance_of_partition(address,address)uint256']>) {
    const result = await this.appClient.send.call(Arc1410ParamsFactory.arc1410BalanceOfPartition(params))
    return result.return as unknown as Arc1410Returns['arc1410_balance_of_partition(address,address)uint256']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1410 smart contract using the `arc1410_is_operator(address,address,address)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc1410IsOperator(params: CallParams<Arc1410Args['obj']['arc1410_is_operator(address,address,address)bool'] | Arc1410Args['tuple']['arc1410_is_operator(address,address,address)bool']>) {
    const result = await this.appClient.send.call(Arc1410ParamsFactory.arc1410IsOperator(params))
    return result.return as unknown as Arc1410Returns['arc1410_is_operator(address,address,address)bool']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1410 smart contract using the `arc1410_is_operator_by_portion(address,address,address)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc1410IsOperatorByPortion(params: CallParams<Arc1410Args['obj']['arc1410_is_operator_by_portion(address,address,address)bool'] | Arc1410Args['tuple']['arc1410_is_operator_by_portion(address,address,address)bool']>) {
    const result = await this.appClient.send.call(Arc1410ParamsFactory.arc1410IsOperatorByPortion(params))
    return result.return as unknown as Arc1410Returns['arc1410_is_operator_by_portion(address,address,address)bool']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1410 smart contract using the `arc200_name()byte[32]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the name of the token
   *
   * @param params The params for the smart contract call
   * @returns The call result: The name of the token
   */
  async arc200Name(params: CallParams<Arc1410Args['obj']['arc200_name()byte[32]'] | Arc1410Args['tuple']['arc200_name()byte[32]']> = {args: []}) {
    const result = await this.appClient.send.call(Arc1410ParamsFactory.arc200Name(params))
    return result.return as unknown as Arc1410Returns['arc200_name()byte[32]']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1410 smart contract using the `arc200_symbol()byte[8]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the symbol of the token
   *
   * @param params The params for the smart contract call
   * @returns The call result: The symbol of the token
   */
  async arc200Symbol(params: CallParams<Arc1410Args['obj']['arc200_symbol()byte[8]'] | Arc1410Args['tuple']['arc200_symbol()byte[8]']> = {args: []}) {
    const result = await this.appClient.send.call(Arc1410ParamsFactory.arc200Symbol(params))
    return result.return as unknown as Arc1410Returns['arc200_symbol()byte[8]']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1410 smart contract using the `arc200_decimals()uint8` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the decimals of the token
   *
   * @param params The params for the smart contract call
   * @returns The call result: The decimals of the token
   */
  async arc200Decimals(params: CallParams<Arc1410Args['obj']['arc200_decimals()uint8'] | Arc1410Args['tuple']['arc200_decimals()uint8']> = {args: []}) {
    const result = await this.appClient.send.call(Arc1410ParamsFactory.arc200Decimals(params))
    return result.return as unknown as Arc1410Returns['arc200_decimals()uint8']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1410 smart contract using the `arc200_totalSupply()uint256` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the total supply of the token
   *
   * @param params The params for the smart contract call
   * @returns The call result: The total supply of the token
   */
  async arc200TotalSupply(params: CallParams<Arc1410Args['obj']['arc200_totalSupply()uint256'] | Arc1410Args['tuple']['arc200_totalSupply()uint256']> = {args: []}) {
    const result = await this.appClient.send.call(Arc1410ParamsFactory.arc200TotalSupply(params))
    return result.return as unknown as Arc1410Returns['arc200_totalSupply()uint256']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1410 smart contract using the `arc200_balanceOf(address)uint256` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the current balance of the owner of the token
   *
   * @param params The params for the smart contract call
   * @returns The call result: The current balance of the holder of the token
   */
  async arc200BalanceOf(params: CallParams<Arc1410Args['obj']['arc200_balanceOf(address)uint256'] | Arc1410Args['tuple']['arc200_balanceOf(address)uint256']>) {
    const result = await this.appClient.send.call(Arc1410ParamsFactory.arc200BalanceOf(params))
    return result.return as unknown as Arc1410Returns['arc200_balanceOf(address)uint256']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1410 smart contract using the `arc200_allowance(address,address)uint256` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the current allowance of the spender of the tokens of the owner
   *
   * @param params The params for the smart contract call
   * @returns The call result: The remaining allowance
   */
  async arc200Allowance(params: CallParams<Arc1410Args['obj']['arc200_allowance(address,address)uint256'] | Arc1410Args['tuple']['arc200_allowance(address,address)uint256']>) {
    const result = await this.appClient.send.call(Arc1410ParamsFactory.arc200Allowance(params))
    return result.return as unknown as Arc1410Returns['arc200_allowance(address,address)uint256']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1410 smart contract using the `arc88_owner()address` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc88Owner(params: CallParams<Arc1410Args['obj']['arc88_owner()address'] | Arc1410Args['tuple']['arc88_owner()address']> = {args: []}) {
    const result = await this.appClient.send.call(Arc1410ParamsFactory.arc88Owner(params))
    return result.return as unknown as Arc1410Returns['arc88_owner()address']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1410 smart contract using the `arc88_is_owner(address)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc88IsOwner(params: CallParams<Arc1410Args['obj']['arc88_is_owner(address)bool'] | Arc1410Args['tuple']['arc88_is_owner(address)bool']>) {
    const result = await this.appClient.send.call(Arc1410ParamsFactory.arc88IsOwner(params))
    return result.return as unknown as Arc1410Returns['arc88_is_owner(address)bool']
  }

  /**
   * Methods to access state for the current Arc1410 app
   */
  state = {
    /**
     * Methods to access global state for the current Arc1410 app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          name: result.name,
          symbol: result.symbol,
          decimals: result.decimals,
          totalSupply: result.totalSupply,
          owner: result.owner,
          pendingOwner: result.pendingOwner,
          initialized: result.initialized,
        }
      },
      /**
       * Get the current value of the name key in global state
       */
      name: async (): Promise<Uint8Array | undefined> => { return (await this.appClient.state.global.getValue("name")) as Uint8Array | undefined },
      /**
       * Get the current value of the symbol key in global state
       */
      symbol: async (): Promise<Uint8Array | undefined> => { return (await this.appClient.state.global.getValue("symbol")) as Uint8Array | undefined },
      /**
       * Get the current value of the decimals key in global state
       */
      decimals: async (): Promise<number | undefined> => { return (await this.appClient.state.global.getValue("decimals")) as number | undefined },
      /**
       * Get the current value of the totalSupply key in global state
       */
      totalSupply: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalSupply")) as bigint | undefined },
      /**
       * Get the current value of the owner key in global state
       */
      owner: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("owner")) as string | undefined },
      /**
       * Get the current value of the pendingOwner key in global state
       */
      pendingOwner: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("pendingOwner")) as string | undefined },
      /**
       * Get the current value of the initialized key in global state
       */
      initialized: async (): Promise<number | undefined> => { return (await this.appClient.state.global.getValue("initialized")) as number | undefined },
    },
    /**
     * Methods to access box state for the current Arc1410 app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the partitions map in box state
       */
      partitions: {
        /**
         * Get all current values of the partitions map in box state
         */
        getMap: async (): Promise<Map<Arc1410PartitionKey, bigint>> => { return (await this.appClient.state.box.getMap("partitions")) as Map<Arc1410PartitionKey, bigint> },
        /**
         * Get a current value of the partitions map by key from box state
         */
        value: async (key: Arc1410PartitionKey): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("partitions", key) as bigint | undefined },
      },
      /**
       * Get values from the holderPartitionsCurrentPage map in box state
       */
      holderPartitionsCurrentPage: {
        /**
         * Get all current values of the holderPartitionsCurrentPage map in box state
         */
        getMap: async (): Promise<Map<string, bigint>> => { return (await this.appClient.state.box.getMap("holderPartitionsCurrentPage")) as Map<string, bigint> },
        /**
         * Get a current value of the holderPartitionsCurrentPage map by key from box state
         */
        value: async (key: string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("holderPartitionsCurrentPage", key) as bigint | undefined },
      },
      /**
       * Get values from the holderPartitionsAddresses map in box state
       */
      holderPartitionsAddresses: {
        /**
         * Get all current values of the holderPartitionsAddresses map in box state
         */
        getMap: async (): Promise<Map<Arc1410HoldingPartitionsPaginatedKey, string[]>> => { return (await this.appClient.state.box.getMap("holderPartitionsAddresses")) as Map<Arc1410HoldingPartitionsPaginatedKey, string[]> },
        /**
         * Get a current value of the holderPartitionsAddresses map by key from box state
         */
        value: async (key: Arc1410HoldingPartitionsPaginatedKey): Promise<string[] | undefined> => { return await this.appClient.state.box.getMapValue("holderPartitionsAddresses", key) as string[] | undefined },
      },
      /**
       * Get values from the operators map in box state
       */
      operators: {
        /**
         * Get all current values of the operators map in box state
         */
        getMap: async (): Promise<Map<Arc1410OperatorKey, number>> => { return (await this.appClient.state.box.getMap("operators")) as Map<Arc1410OperatorKey, number> },
        /**
         * Get a current value of the operators map by key from box state
         */
        value: async (key: Arc1410OperatorKey): Promise<number | undefined> => { return await this.appClient.state.box.getMapValue("operators", key) as number | undefined },
      },
      /**
       * Get values from the operatorPortionAllowances map in box state
       */
      operatorPortionAllowances: {
        /**
         * Get all current values of the operatorPortionAllowances map in box state
         */
        getMap: async (): Promise<Map<Arc1410OperatorPortionKey, bigint>> => { return (await this.appClient.state.box.getMap("operatorPortionAllowances")) as Map<Arc1410OperatorPortionKey, bigint> },
        /**
         * Get a current value of the operatorPortionAllowances map by key from box state
         */
        value: async (key: Arc1410OperatorPortionKey): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("operatorPortionAllowances", key) as bigint | undefined },
      },
      /**
       * Get values from the balances map in box state
       */
      balances: {
        /**
         * Get all current values of the balances map in box state
         */
        getMap: async (): Promise<Map<string, bigint>> => { return (await this.appClient.state.box.getMap("balances")) as Map<string, bigint> },
        /**
         * Get a current value of the balances map by key from box state
         */
        value: async (key: string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("balances", key) as bigint | undefined },
      },
      /**
       * Get values from the approvals map in box state
       */
      approvals: {
        /**
         * Get all current values of the approvals map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, ApprovalStruct>> => { return (await this.appClient.state.box.getMap("approvals")) as Map<Uint8Array, ApprovalStruct> },
        /**
         * Get a current value of the approvals map by key from box state
         */
        value: async (key: Uint8Array): Promise<ApprovalStruct | undefined> => { return await this.appClient.state.box.getMapValue("approvals", key) as ApprovalStruct | undefined },
      },
    },
  }

  public newGroup(): Arc1410Composer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a arc1410_balance_of_partition(address,address)uint256 method call against the Arc1410 contract
       */
      arc1410BalanceOfPartition(params: CallParams<Arc1410Args['obj']['arc1410_balance_of_partition(address,address)uint256'] | Arc1410Args['tuple']['arc1410_balance_of_partition(address,address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410BalanceOfPartition(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1410_balance_of_partition(address,address)uint256', v))
        return this
      },
      /**
       * Add a arc200_transfer(address,uint256)bool method call against the Arc1410 contract
       */
      arc200Transfer(params: CallParams<Arc1410Args['obj']['arc200_transfer(address,uint256)bool'] | Arc1410Args['tuple']['arc200_transfer(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Transfer(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_transfer(address,uint256)bool', v))
        return this
      },
      /**
       * Add a arc1410_transfer_by_partition(address,address,uint256,byte[])address method call against the Arc1410 contract
       */
      arc1410TransferByPartition(params: CallParams<Arc1410Args['obj']['arc1410_transfer_by_partition(address,address,uint256,byte[])address'] | Arc1410Args['tuple']['arc1410_transfer_by_partition(address,address,uint256,byte[])address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410TransferByPartition(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1410_transfer_by_partition(address,address,uint256,byte[])address', v))
        return this
      },
      /**
       * Add a arc1410_partitions_of(address,uint64)address[] method call against the Arc1410 contract
       */
      arc1410PartitionsOf(params: CallParams<Arc1410Args['obj']['arc1410_partitions_of(address,uint64)address[]'] | Arc1410Args['tuple']['arc1410_partitions_of(address,uint64)address[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410PartitionsOf(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1410_partitions_of(address,uint64)address[]', v))
        return this
      },
      /**
       * Add a arc1410_is_operator(address,address,address)bool method call against the Arc1410 contract
       */
      arc1410IsOperator(params: CallParams<Arc1410Args['obj']['arc1410_is_operator(address,address,address)bool'] | Arc1410Args['tuple']['arc1410_is_operator(address,address,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410IsOperator(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1410_is_operator(address,address,address)bool', v))
        return this
      },
      /**
       * Add a arc1410_authorize_operator(address,address,address)void method call against the Arc1410 contract
       */
      arc1410AuthorizeOperator(params: CallParams<Arc1410Args['obj']['arc1410_authorize_operator(address,address,address)void'] | Arc1410Args['tuple']['arc1410_authorize_operator(address,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410AuthorizeOperator(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1410_revoke_operator(address,address,address)void method call against the Arc1410 contract
       */
      arc1410RevokeOperator(params: CallParams<Arc1410Args['obj']['arc1410_revoke_operator(address,address,address)void'] | Arc1410Args['tuple']['arc1410_revoke_operator(address,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410RevokeOperator(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address method call against the Arc1410 contract
       */
      arc1410OperatorTransferByPartition(params: CallParams<Arc1410Args['obj']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address'] | Arc1410Args['tuple']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410OperatorTransferByPartition(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address', v))
        return this
      },
      /**
       * Add a arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address) method call against the Arc1410 contract
       */
      arc1410CanTransferByPartition(params: CallParams<Arc1410Args['obj']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)'] | Arc1410Args['tuple']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410CanTransferByPartition(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)', v))
        return this
      },
      /**
       * Add a arc1410_authorize_operator_by_portion(address,address,address,uint256)void method call against the Arc1410 contract
       */
      arc1410AuthorizeOperatorByPortion(params: CallParams<Arc1410Args['obj']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void'] | Arc1410Args['tuple']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410AuthorizeOperatorByPortion(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1410_is_operator_by_portion(address,address,address)bool method call against the Arc1410 contract
       */
      arc1410IsOperatorByPortion(params: CallParams<Arc1410Args['obj']['arc1410_is_operator_by_portion(address,address,address)bool'] | Arc1410Args['tuple']['arc1410_is_operator_by_portion(address,address,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410IsOperatorByPortion(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1410_is_operator_by_portion(address,address,address)bool', v))
        return this
      },
      /**
       * Add a arc1410_issue_by_partition(address,address,uint256,byte[])void method call against the Arc1410 contract
       */
      arc1410IssueByPartition(params: CallParams<Arc1410Args['obj']['arc1410_issue_by_partition(address,address,uint256,byte[])void'] | Arc1410Args['tuple']['arc1410_issue_by_partition(address,address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410IssueByPartition(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1410_redeem_by_partition(address,address,uint256,byte[])void method call against the Arc1410 contract
       */
      arc1410RedeemByPartition(params: CallParams<Arc1410Args['obj']['arc1410_redeem_by_partition(address,address,uint256,byte[])void'] | Arc1410Args['tuple']['arc1410_redeem_by_partition(address,address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410RedeemByPartition(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a bootstrap(byte[],byte[],uint8,uint256)bool method call against the Arc1410 contract
       */
      bootstrap(params: CallParams<Arc1410Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool'] | Arc1410Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrap(params)))
        resultMappers.push((v) => client.decodeReturnValue('bootstrap(byte[],byte[],uint8,uint256)bool', v))
        return this
      },
      /**
       * Add a arc200_name()byte[32] method call against the Arc1410 contract
       */
      arc200Name(params: CallParams<Arc1410Args['obj']['arc200_name()byte[32]'] | Arc1410Args['tuple']['arc200_name()byte[32]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Name(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_name()byte[32]', v))
        return this
      },
      /**
       * Add a arc200_symbol()byte[8] method call against the Arc1410 contract
       */
      arc200Symbol(params: CallParams<Arc1410Args['obj']['arc200_symbol()byte[8]'] | Arc1410Args['tuple']['arc200_symbol()byte[8]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Symbol(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_symbol()byte[8]', v))
        return this
      },
      /**
       * Add a arc200_decimals()uint8 method call against the Arc1410 contract
       */
      arc200Decimals(params: CallParams<Arc1410Args['obj']['arc200_decimals()uint8'] | Arc1410Args['tuple']['arc200_decimals()uint8']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Decimals(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_decimals()uint8', v))
        return this
      },
      /**
       * Add a arc200_totalSupply()uint256 method call against the Arc1410 contract
       */
      arc200TotalSupply(params: CallParams<Arc1410Args['obj']['arc200_totalSupply()uint256'] | Arc1410Args['tuple']['arc200_totalSupply()uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200TotalSupply(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_totalSupply()uint256', v))
        return this
      },
      /**
       * Add a arc200_balanceOf(address)uint256 method call against the Arc1410 contract
       */
      arc200BalanceOf(params: CallParams<Arc1410Args['obj']['arc200_balanceOf(address)uint256'] | Arc1410Args['tuple']['arc200_balanceOf(address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200BalanceOf(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_balanceOf(address)uint256', v))
        return this
      },
      /**
       * Add a arc200_transferFrom(address,address,uint256)bool method call against the Arc1410 contract
       */
      arc200TransferFrom(params: CallParams<Arc1410Args['obj']['arc200_transferFrom(address,address,uint256)bool'] | Arc1410Args['tuple']['arc200_transferFrom(address,address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200TransferFrom(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_transferFrom(address,address,uint256)bool', v))
        return this
      },
      /**
       * Add a arc200_approve(address,uint256)bool method call against the Arc1410 contract
       */
      arc200Approve(params: CallParams<Arc1410Args['obj']['arc200_approve(address,uint256)bool'] | Arc1410Args['tuple']['arc200_approve(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Approve(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_approve(address,uint256)bool', v))
        return this
      },
      /**
       * Add a arc200_allowance(address,address)uint256 method call against the Arc1410 contract
       */
      arc200Allowance(params: CallParams<Arc1410Args['obj']['arc200_allowance(address,address)uint256'] | Arc1410Args['tuple']['arc200_allowance(address,address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Allowance(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_allowance(address,address)uint256', v))
        return this
      },
      /**
       * Add a arc88_owner()address method call against the Arc1410 contract
       */
      arc88Owner(params: CallParams<Arc1410Args['obj']['arc88_owner()address'] | Arc1410Args['tuple']['arc88_owner()address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88Owner(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc88_owner()address', v))
        return this
      },
      /**
       * Add a arc88_is_owner(address)bool method call against the Arc1410 contract
       */
      arc88IsOwner(params: CallParams<Arc1410Args['obj']['arc88_is_owner(address)bool'] | Arc1410Args['tuple']['arc88_is_owner(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88IsOwner(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc88_is_owner(address)bool', v))
        return this
      },
      /**
       * Add a arc88_initialize_owner(address)void method call against the Arc1410 contract
       */
      arc88InitializeOwner(params: CallParams<Arc1410Args['obj']['arc88_initialize_owner(address)void'] | Arc1410Args['tuple']['arc88_initialize_owner(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88InitializeOwner(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc88_transfer_ownership(address)void method call against the Arc1410 contract
       */
      arc88TransferOwnership(params: CallParams<Arc1410Args['obj']['arc88_transfer_ownership(address)void'] | Arc1410Args['tuple']['arc88_transfer_ownership(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88TransferOwnership(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc88_renounce_ownership()void method call against the Arc1410 contract
       */
      arc88RenounceOwnership(params: CallParams<Arc1410Args['obj']['arc88_renounce_ownership()void'] | Arc1410Args['tuple']['arc88_renounce_ownership()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88RenounceOwnership(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc88_transfer_ownership_request(address)void method call against the Arc1410 contract
       */
      arc88TransferOwnershipRequest(params: CallParams<Arc1410Args['obj']['arc88_transfer_ownership_request(address)void'] | Arc1410Args['tuple']['arc88_transfer_ownership_request(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88TransferOwnershipRequest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc88_accept_ownership()void method call against the Arc1410 contract
       */
      arc88AcceptOwnership(params: CallParams<Arc1410Args['obj']['arc88_accept_ownership()void'] | Arc1410Args['tuple']['arc88_accept_ownership()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88AcceptOwnership(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc88_cancel_ownership_request()void method call against the Arc1410 contract
       */
      arc88CancelOwnershipRequest(params: CallParams<Arc1410Args['obj']['arc88_cancel_ownership_request()void'] | Arc1410Args['tuple']['arc88_cancel_ownership_request()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88CancelOwnershipRequest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the Arc1410 contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as Arc1410Composer
  }
}
export type Arc1410Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the arc1410_balance_of_partition(address,address)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410BalanceOfPartition(params?: CallParams<Arc1410Args['obj']['arc1410_balance_of_partition(address,address)uint256'] | Arc1410Args['tuple']['arc1410_balance_of_partition(address,address)uint256']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc1410_balance_of_partition(address,address)uint256'] | undefined]>

  /**
   * Calls the arc200_transfer(address,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Transfer(params?: CallParams<Arc1410Args['obj']['arc200_transfer(address,uint256)bool'] | Arc1410Args['tuple']['arc200_transfer(address,uint256)bool']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc200_transfer(address,uint256)bool'] | undefined]>

  /**
   * Calls the arc1410_transfer_by_partition(address,address,uint256,byte[])address ABI method.
   *
   * Transfer an amount of tokens from partition to receiver. Sender must be msg.sender or authorized operator.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410TransferByPartition(params?: CallParams<Arc1410Args['obj']['arc1410_transfer_by_partition(address,address,uint256,byte[])address'] | Arc1410Args['tuple']['arc1410_transfer_by_partition(address,address,uint256,byte[])address']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc1410_transfer_by_partition(address,address,uint256,byte[])address'] | undefined]>

  /**
   * Calls the arc1410_partitions_of(address,uint64)address[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410PartitionsOf(params?: CallParams<Arc1410Args['obj']['arc1410_partitions_of(address,uint64)address[]'] | Arc1410Args['tuple']['arc1410_partitions_of(address,uint64)address[]']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc1410_partitions_of(address,uint64)address[]'] | undefined]>

  /**
   * Calls the arc1410_is_operator(address,address,address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410IsOperator(params?: CallParams<Arc1410Args['obj']['arc1410_is_operator(address,address,address)bool'] | Arc1410Args['tuple']['arc1410_is_operator(address,address,address)bool']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc1410_is_operator(address,address,address)bool'] | undefined]>

  /**
   * Calls the arc1410_authorize_operator(address,address,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410AuthorizeOperator(params?: CallParams<Arc1410Args['obj']['arc1410_authorize_operator(address,address,address)void'] | Arc1410Args['tuple']['arc1410_authorize_operator(address,address,address)void']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc1410_authorize_operator(address,address,address)void'] | undefined]>

  /**
   * Calls the arc1410_revoke_operator(address,address,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410RevokeOperator(params?: CallParams<Arc1410Args['obj']['arc1410_revoke_operator(address,address,address)void'] | Arc1410Args['tuple']['arc1410_revoke_operator(address,address,address)void']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc1410_revoke_operator(address,address,address)void'] | undefined]>

  /**
   * Calls the arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410OperatorTransferByPartition(params?: CallParams<Arc1410Args['obj']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address'] | Arc1410Args['tuple']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address'] | undefined]>

  /**
   * Calls the arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410CanTransferByPartition(params?: CallParams<Arc1410Args['obj']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)'] | Arc1410Args['tuple']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)'] | undefined]>

  /**
   * Calls the arc1410_authorize_operator_by_portion(address,address,address,uint256)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410AuthorizeOperatorByPortion(params?: CallParams<Arc1410Args['obj']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void'] | Arc1410Args['tuple']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc1410_authorize_operator_by_portion(address,address,address,uint256)void'] | undefined]>

  /**
   * Calls the arc1410_is_operator_by_portion(address,address,address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410IsOperatorByPortion(params?: CallParams<Arc1410Args['obj']['arc1410_is_operator_by_portion(address,address,address)bool'] | Arc1410Args['tuple']['arc1410_is_operator_by_portion(address,address,address)bool']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc1410_is_operator_by_portion(address,address,address)bool'] | undefined]>

  /**
   * Calls the arc1410_issue_by_partition(address,address,uint256,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410IssueByPartition(params?: CallParams<Arc1410Args['obj']['arc1410_issue_by_partition(address,address,uint256,byte[])void'] | Arc1410Args['tuple']['arc1410_issue_by_partition(address,address,uint256,byte[])void']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc1410_issue_by_partition(address,address,uint256,byte[])void'] | undefined]>

  /**
   * Calls the arc1410_redeem_by_partition(address,address,uint256,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410RedeemByPartition(params?: CallParams<Arc1410Args['obj']['arc1410_redeem_by_partition(address,address,uint256,byte[])void'] | Arc1410Args['tuple']['arc1410_redeem_by_partition(address,address,uint256,byte[])void']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc1410_redeem_by_partition(address,address,uint256,byte[])void'] | undefined]>

  /**
   * Calls the bootstrap(byte[],byte[],uint8,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(params?: CallParams<Arc1410Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool'] | Arc1410Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']>): Arc1410Composer<[...TReturns, Arc1410Returns['bootstrap(byte[],byte[],uint8,uint256)bool'] | undefined]>

  /**
   * Calls the arc200_name()byte[32] ABI method.
   *
   * Returns the name of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Name(params?: CallParams<Arc1410Args['obj']['arc200_name()byte[32]'] | Arc1410Args['tuple']['arc200_name()byte[32]']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc200_name()byte[32]'] | undefined]>

  /**
   * Calls the arc200_symbol()byte[8] ABI method.
   *
   * Returns the symbol of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Symbol(params?: CallParams<Arc1410Args['obj']['arc200_symbol()byte[8]'] | Arc1410Args['tuple']['arc200_symbol()byte[8]']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc200_symbol()byte[8]'] | undefined]>

  /**
   * Calls the arc200_decimals()uint8 ABI method.
   *
   * Returns the decimals of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Decimals(params?: CallParams<Arc1410Args['obj']['arc200_decimals()uint8'] | Arc1410Args['tuple']['arc200_decimals()uint8']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc200_decimals()uint8'] | undefined]>

  /**
   * Calls the arc200_totalSupply()uint256 ABI method.
   *
   * Returns the total supply of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200TotalSupply(params?: CallParams<Arc1410Args['obj']['arc200_totalSupply()uint256'] | Arc1410Args['tuple']['arc200_totalSupply()uint256']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc200_totalSupply()uint256'] | undefined]>

  /**
   * Calls the arc200_balanceOf(address)uint256 ABI method.
   *
   * Returns the current balance of the owner of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200BalanceOf(params?: CallParams<Arc1410Args['obj']['arc200_balanceOf(address)uint256'] | Arc1410Args['tuple']['arc200_balanceOf(address)uint256']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc200_balanceOf(address)uint256'] | undefined]>

  /**
   * Calls the arc200_transferFrom(address,address,uint256)bool ABI method.
   *
   * Transfers tokens from source to destination as approved spender
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200TransferFrom(params?: CallParams<Arc1410Args['obj']['arc200_transferFrom(address,address,uint256)bool'] | Arc1410Args['tuple']['arc200_transferFrom(address,address,uint256)bool']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc200_transferFrom(address,address,uint256)bool'] | undefined]>

  /**
   * Calls the arc200_approve(address,uint256)bool ABI method.
   *
   * Approve spender for a token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Approve(params?: CallParams<Arc1410Args['obj']['arc200_approve(address,uint256)bool'] | Arc1410Args['tuple']['arc200_approve(address,uint256)bool']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc200_approve(address,uint256)bool'] | undefined]>

  /**
   * Calls the arc200_allowance(address,address)uint256 ABI method.
   *
   * Returns the current allowance of the spender of the tokens of the owner
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Allowance(params?: CallParams<Arc1410Args['obj']['arc200_allowance(address,address)uint256'] | Arc1410Args['tuple']['arc200_allowance(address,address)uint256']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc200_allowance(address,address)uint256'] | undefined]>

  /**
   * Calls the arc88_owner()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88Owner(params?: CallParams<Arc1410Args['obj']['arc88_owner()address'] | Arc1410Args['tuple']['arc88_owner()address']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc88_owner()address'] | undefined]>

  /**
   * Calls the arc88_is_owner(address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88IsOwner(params?: CallParams<Arc1410Args['obj']['arc88_is_owner(address)bool'] | Arc1410Args['tuple']['arc88_is_owner(address)bool']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc88_is_owner(address)bool'] | undefined]>

  /**
   * Calls the arc88_initialize_owner(address)void ABI method.
   *
   * Explicit initialization override (creation group recommended). Fails if already initialized.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88InitializeOwner(params?: CallParams<Arc1410Args['obj']['arc88_initialize_owner(address)void'] | Arc1410Args['tuple']['arc88_initialize_owner(address)void']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc88_initialize_owner(address)void'] | undefined]>

  /**
   * Calls the arc88_transfer_ownership(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88TransferOwnership(params?: CallParams<Arc1410Args['obj']['arc88_transfer_ownership(address)void'] | Arc1410Args['tuple']['arc88_transfer_ownership(address)void']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc88_transfer_ownership(address)void'] | undefined]>

  /**
   * Calls the arc88_renounce_ownership()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88RenounceOwnership(params?: CallParams<Arc1410Args['obj']['arc88_renounce_ownership()void'] | Arc1410Args['tuple']['arc88_renounce_ownership()void']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc88_renounce_ownership()void'] | undefined]>

  /**
   * Calls the arc88_transfer_ownership_request(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88TransferOwnershipRequest(params?: CallParams<Arc1410Args['obj']['arc88_transfer_ownership_request(address)void'] | Arc1410Args['tuple']['arc88_transfer_ownership_request(address)void']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc88_transfer_ownership_request(address)void'] | undefined]>

  /**
   * Calls the arc88_accept_ownership()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88AcceptOwnership(params?: CallParams<Arc1410Args['obj']['arc88_accept_ownership()void'] | Arc1410Args['tuple']['arc88_accept_ownership()void']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc88_accept_ownership()void'] | undefined]>

  /**
   * Calls the arc88_cancel_ownership_request()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88CancelOwnershipRequest(params?: CallParams<Arc1410Args['obj']['arc88_cancel_ownership_request()void'] | Arc1410Args['tuple']['arc88_cancel_ownership_request()void']>): Arc1410Composer<[...TReturns, Arc1410Returns['arc88_cancel_ownership_request()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Arc1410 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Arc1410Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Arc1410Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Arc1410ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<Arc1410ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<Arc1410ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Arc1410ComposerResults<TReturns>>
}
export type Arc1410ComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

