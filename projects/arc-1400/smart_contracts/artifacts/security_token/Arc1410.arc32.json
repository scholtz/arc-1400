{
    "hints": {
        "arc1410_balance_of_partition(address,address)uint256": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_transfer(address,uint256)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc1410_transfer_by_partition(address,address,uint256,byte[])address": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc1410_partitions_of(address,uint64)address[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc1410_is_operator(address,address,address)bool": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc1410_authorize_operator(address,address,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc1410_revoke_operator(address,address,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "arc1410_can_transfer_by_partition_return",
                    "elements": [
                        [
                            "code",
                            "byte"
                        ],
                        [
                            "status",
                            "string"
                        ],
                        [
                            "receiverPartition",
                            "address"
                        ]
                    ]
                }
            }
        },
        "bootstrap(byte[],byte[],uint8,uint256)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_name()byte[32]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_symbol()byte[8]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_decimals()uint8": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_totalSupply()uint256": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_balanceOf(address)uint256": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_transferFrom(address,address,uint256)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_approve(address,uint256)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_allowance(address,address)uint256": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 4,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "decimals": {
                    "type": "bytes",
                    "key": "d",
                    "descr": "Decimals of the asset. Recommended is 6 decimal places."
                },
                "name": {
                    "type": "bytes",
                    "key": "n",
                    "descr": "Name of the asset. Max 32 bytes"
                },
                "symbol": {
                    "type": "bytes",
                    "key": "s",
                    "descr": "Symbol of the asset. Max 8 bytes"
                },
                "totalSupply": {
                    "type": "bytes",
                    "key": "t",
                    "descr": "Minted supply"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Arc1410",
        "methods": [
            {
                "name": "arc1410_balance_of_partition",
                "args": [
                    {
                        "type": "address",
                        "name": "holder"
                    },
                    {
                        "type": "address",
                        "name": "partition"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint256"
                }
            },
            {
                "name": "arc200_transfer",
                "args": [
                    {
                        "type": "address",
                        "name": "to"
                    },
                    {
                        "type": "uint256",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "arc1410_transfer_by_partition",
                "args": [
                    {
                        "type": "address",
                        "name": "partition"
                    },
                    {
                        "type": "address",
                        "name": "to"
                    },
                    {
                        "type": "uint256",
                        "name": "amount"
                    },
                    {
                        "type": "byte[]",
                        "name": "data"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "address"
                },
                "desc": "Transfer an amount of tokens from partition to receiver. Sender must be msg.sender or authorized operator."
            },
            {
                "name": "arc1410_partitions_of",
                "args": [
                    {
                        "type": "address",
                        "name": "holder"
                    },
                    {
                        "type": "uint64",
                        "name": "page"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "address[]"
                }
            },
            {
                "name": "arc1410_is_operator",
                "args": [
                    {
                        "type": "address",
                        "name": "holder"
                    },
                    {
                        "type": "address",
                        "name": "operator"
                    },
                    {
                        "type": "address",
                        "name": "partition"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "arc1410_authorize_operator",
                "args": [
                    {
                        "type": "address",
                        "name": "holder"
                    },
                    {
                        "type": "address",
                        "name": "operator"
                    },
                    {
                        "type": "address",
                        "name": "partition"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc1410_revoke_operator",
                "args": [
                    {
                        "type": "address",
                        "name": "holder"
                    },
                    {
                        "type": "address",
                        "name": "operator"
                    },
                    {
                        "type": "address",
                        "name": "partition"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc1410_operator_transfer_by_partition",
                "args": [
                    {
                        "type": "address",
                        "name": "from"
                    },
                    {
                        "type": "address",
                        "name": "partition"
                    },
                    {
                        "type": "address",
                        "name": "to"
                    },
                    {
                        "type": "uint256",
                        "name": "amount"
                    },
                    {
                        "type": "byte[]",
                        "name": "data"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "address"
                }
            },
            {
                "name": "arc1410_can_transfer_by_partition",
                "args": [
                    {
                        "type": "address",
                        "name": "from"
                    },
                    {
                        "type": "address",
                        "name": "partition"
                    },
                    {
                        "type": "address",
                        "name": "to"
                    },
                    {
                        "type": "uint256",
                        "name": "amount"
                    },
                    {
                        "type": "byte[]",
                        "name": "data"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(byte,string,address)"
                }
            },
            {
                "name": "bootstrap",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "name"
                    },
                    {
                        "type": "byte[]",
                        "name": "symbol"
                    },
                    {
                        "type": "uint8",
                        "name": "decimals"
                    },
                    {
                        "type": "uint256",
                        "name": "totalSupply"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "arc200_name",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "byte[32]",
                    "desc": "The name of the token"
                },
                "desc": "Returns the name of the token"
            },
            {
                "name": "arc200_symbol",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "byte[8]",
                    "desc": "The symbol of the token"
                },
                "desc": "Returns the symbol of the token"
            },
            {
                "name": "arc200_decimals",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint8",
                    "desc": "The decimals of the token"
                },
                "desc": "Returns the decimals of the token"
            },
            {
                "name": "arc200_totalSupply",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint256",
                    "desc": "The total supply of the token"
                },
                "desc": "Returns the total supply of the token"
            },
            {
                "name": "arc200_balanceOf",
                "args": [
                    {
                        "type": "address",
                        "name": "owner",
                        "desc": "The address of the owner of the token"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint256",
                    "desc": "The current balance of the holder of the token"
                },
                "desc": "Returns the current balance of the owner of the token"
            },
            {
                "name": "arc200_transferFrom",
                "args": [
                    {
                        "type": "address",
                        "name": "from",
                        "desc": "The source of the transfer"
                    },
                    {
                        "type": "address",
                        "name": "to",
                        "desc": "The destination of the transfer"
                    },
                    {
                        "type": "uint256",
                        "name": "value",
                        "desc": "Amount of tokens to transfer"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool",
                    "desc": "Success"
                },
                "desc": "Transfers tokens from source to destination as approved spender"
            },
            {
                "name": "arc200_approve",
                "args": [
                    {
                        "type": "address",
                        "name": "spender",
                        "desc": "Who is allowed to take tokens on owner's behalf"
                    },
                    {
                        "type": "uint256",
                        "name": "value",
                        "desc": "Amount of tokens to be taken by spender"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool",
                    "desc": "Success"
                },
                "desc": "Approve spender for a token"
            },
            {
                "name": "arc200_allowance",
                "args": [
                    {
                        "type": "address",
                        "name": "owner",
                        "desc": "Owner's account"
                    },
                    {
                        "type": "address",
                        "name": "spender",
                        "desc": "Who is allowed to take tokens on owner's behalf"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint256",
                    "desc": "The remaining allowance"
                },
                "desc": "Returns the current allowance of the spender of the tokens of the owner"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}