/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"Arc1594","structs":{"ApprovalStruct":[{"name":"approvalAmount","type":"uint256"},{"name":"owner","type":"address"},{"name":"spender","type":"address"}],"arc1410_HoldingPartitionsPaginatedKey":[{"name":"holder","type":"address"},{"name":"page","type":"uint64"}],"arc1410_OperatorKey":[{"name":"holder","type":"address"},{"name":"operator","type":"address"},{"name":"partition","type":"address"}],"arc1410_OperatorPortionKey":[{"name":"holder","type":"address"},{"name":"operator","type":"address"},{"name":"partition","type":"address"}],"arc1410_PartitionKey":[{"name":"holder","type":"address"},{"name":"partition","type":"address"}],"arc1410_can_transfer_by_partition_return":[{"name":"code","type":"byte"},{"name":"status","type":"string"},{"name":"receiverPartition","type":"address"}],"arc1410_partition_issue":[{"name":"to","type":"address"},{"name":"partition","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"byte[]"}],"arc1410_partition_redeem":[{"name":"from","type":"address"},{"name":"partition","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"byte[]"}],"arc1410_partition_transfer":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"partition","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"byte[]"}],"arc1594_LastValidationKey":[{"name":"sender","type":"address"}],"arc1594_issue_event":[{"name":"to","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"byte[]"}],"arc1594_redeem_event":[{"name":"from","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"byte[]"}]},"methods":[{"name":"arc1594_set_halt","args":[{"type":"uint64","name":"flag"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc1594_set_kyc","args":[{"type":"address","name":"account"},{"type":"uint64","name":"flag"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc1594_set_lockup","args":[{"type":"address","name":"account"},{"type":"uint64","name":"round"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc1594_issue","args":[{"type":"address","name":"to"},{"type":"uint256","name":"amount"},{"type":"byte[]","name":"data"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"Issue","args":[{"type":"(address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_issue"}]},{"name":"Issue","args":[{"type":"(address,uint256,byte[])","name":"0","struct":"arc1594_issue_event"}]}],"recommendations":{}},{"name":"arc1594_redeem","args":[{"type":"address","name":"from"},{"type":"uint256","name":"amount"},{"type":"byte[]","name":"data"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"Redeem","args":[{"type":"(address,uint256,byte[])","name":"0","struct":"arc1594_redeem_event"}]}],"recommendations":{}},{"name":"arc1594_validate_transfer","args":[{"type":"address","name":"from"},{"type":"address","name":"to"},{"type":"uint256","name":"amount"},{"type":"byte[]","name":"data"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"arc1410_balance_of_partition","args":[{"type":"address","name":"holder"},{"type":"address","name":"partition"}],"returns":{"type":"uint256"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"arc200_transfer","args":[{"type":"address","name":"to"},{"type":"uint256","name":"value"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"Transfer","args":[{"type":"(address,address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_transfer"}]},{"name":"arc200_Transfer","args":[{"type":"address","name":"from"},{"type":"address","name":"to"},{"type":"uint256","name":"value"}]}],"recommendations":{}},{"name":"arc1410_transfer_by_partition","args":[{"type":"address","name":"partition"},{"type":"address","name":"to"},{"type":"uint256","name":"amount"},{"type":"byte[]","name":"data"}],"returns":{"type":"address"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Transfer an amount of tokens from partition to receiver. Sender must be msg.sender or authorized operator.","events":[{"name":"Transfer","args":[{"type":"(address,address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_transfer"}]}],"recommendations":{}},{"name":"arc1410_partitions_of","args":[{"type":"address","name":"holder"},{"type":"uint64","name":"page"}],"returns":{"type":"address[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc1410_is_operator","args":[{"type":"address","name":"holder"},{"type":"address","name":"operator"},{"type":"address","name":"partition"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"arc1410_authorize_operator","args":[{"type":"address","name":"holder"},{"type":"address","name":"operator"},{"type":"address","name":"partition"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc1410_revoke_operator","args":[{"type":"address","name":"holder"},{"type":"address","name":"operator"},{"type":"address","name":"partition"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc1410_operator_transfer_by_partition","args":[{"type":"address","name":"from"},{"type":"address","name":"partition"},{"type":"address","name":"to"},{"type":"uint256","name":"amount"},{"type":"byte[]","name":"data"}],"returns":{"type":"address"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"Transfer","args":[{"type":"(address,address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_transfer"}]}],"recommendations":{}},{"name":"arc1410_can_transfer_by_partition","args":[{"type":"address","name":"from"},{"type":"address","name":"partition"},{"type":"address","name":"to"},{"type":"uint256","name":"amount"},{"type":"byte[]","name":"data"}],"returns":{"type":"(byte,string,address)","struct":"arc1410_can_transfer_by_partition_return"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc1410_authorize_operator_by_portion","args":[{"type":"address","name":"holder"},{"type":"address","name":"operator"},{"type":"address","name":"partition"},{"type":"uint256","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc1410_is_operator_by_portion","args":[{"type":"address","name":"holder"},{"type":"address","name":"operator"},{"type":"address","name":"partition"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"arc1410_issue_by_partition","args":[{"type":"address","name":"to"},{"type":"address","name":"partition"},{"type":"uint256","name":"amount"},{"type":"byte[]","name":"data"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"Issue","args":[{"type":"(address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_issue"}]}],"recommendations":{}},{"name":"arc1410_redeem_by_partition","args":[{"type":"address","name":"partition"},{"type":"uint256","name":"amount"},{"type":"byte[]","name":"data"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"Redeem","args":[{"type":"(address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_redeem"}]}],"recommendations":{}},{"name":"arc1410_operator_redeem_by_partition","args":[{"type":"address","name":"from"},{"type":"address","name":"partition"},{"type":"uint256","name":"amount"},{"type":"byte[]","name":"data"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"Redeem","args":[{"type":"(address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_redeem"}]}],"recommendations":{}},{"name":"bootstrap","args":[{"type":"byte[]","name":"name"},{"type":"byte[]","name":"symbol"},{"type":"uint8","name":"decimals"},{"type":"uint256","name":"totalSupply"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"arc200_Transfer","args":[{"type":"address","name":"from"},{"type":"address","name":"to"},{"type":"uint256","name":"value"}]}],"recommendations":{}},{"name":"arc200_name","args":[],"returns":{"type":"byte[32]","desc":"The name of the token"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Returns the name of the token","events":[],"recommendations":{}},{"name":"arc200_symbol","args":[],"returns":{"type":"byte[8]","desc":"The symbol of the token"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Returns the symbol of the token","events":[],"recommendations":{}},{"name":"arc200_decimals","args":[],"returns":{"type":"uint8","desc":"The decimals of the token"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Returns the decimals of the token","events":[],"recommendations":{}},{"name":"arc200_totalSupply","args":[],"returns":{"type":"uint256","desc":"The total supply of the token"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Returns the total supply of the token","events":[],"recommendations":{}},{"name":"arc200_balanceOf","args":[{"type":"address","name":"owner","desc":"The address of the owner of the token"}],"returns":{"type":"uint256","desc":"The current balance of the holder of the token"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Returns the current balance of the owner of the token","events":[],"recommendations":{}},{"name":"arc200_transferFrom","args":[{"type":"address","name":"from","desc":"The source of the transfer"},{"type":"address","name":"to","desc":"The destination of the transfer"},{"type":"uint256","name":"value","desc":"Amount of tokens to transfer"}],"returns":{"type":"bool","desc":"Success"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Transfers tokens from source to destination as approved spender","events":[{"name":"arc200_Approval","args":[{"type":"address","name":"owner"},{"type":"address","name":"spender"},{"type":"uint256","name":"value"}]},{"name":"arc200_Transfer","args":[{"type":"address","name":"from"},{"type":"address","name":"to"},{"type":"uint256","name":"value"}]}],"recommendations":{}},{"name":"arc200_approve","args":[{"type":"address","name":"spender","desc":"Who is allowed to take tokens on owner's behalf"},{"type":"uint256","name":"value","desc":"Amount of tokens to be taken by spender"}],"returns":{"type":"bool","desc":"Success"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Approve spender for a token","events":[{"name":"arc200_Approval","args":[{"type":"address","name":"owner"},{"type":"address","name":"spender"},{"type":"uint256","name":"value"}]}],"recommendations":{}},{"name":"arc200_allowance","args":[{"type":"address","name":"owner","desc":"Owner's account"},{"type":"address","name":"spender","desc":"Who is allowed to take tokens on owner's behalf"}],"returns":{"type":"uint256","desc":"The remaining allowance"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Returns the current allowance of the spender of the tokens of the owner","events":[],"recommendations":{}},{"name":"arc88_owner","args":[],"returns":{"type":"address"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"arc88_is_owner","args":[{"type":"address","name":"query"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"arc88_initialize_owner","args":[{"type":"address","name":"new_owner"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Explicit initialization override (creation group recommended). Fails if already initialized.","events":[],"recommendations":{}},{"name":"arc88_transfer_ownership","args":[{"type":"address","name":"new_owner"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"arc88_OwnershipTransferred","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"new_owner"}]}],"recommendations":{}},{"name":"arc88_renounce_ownership","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"arc88_OwnershipRenounced","args":[{"type":"address","name":"previous_owner"}]}],"recommendations":{}},{"name":"arc88_transfer_ownership_request","args":[{"type":"address","name":"pending"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"arc88_OwnershipTransferRequested","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"pending_owner"}]}],"recommendations":{}},{"name":"arc88_accept_ownership","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"arc88_OwnershipTransferAccepted","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"new_owner"}]},{"name":"arc88_OwnershipTransferred","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"new_owner"}]}],"recommendations":{}},{"name":"arc88_cancel_ownership_request","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":8},"local":{"ints":0,"bytes":0}},"keys":{"global":{"halt":{"keyType":"AVMString","valueType":"uint64","key":"aGx0"},"name":{"keyType":"AVMString","valueType":"byte[]","key":"bg==","desc":"Name of the asset. Max 32 bytes"},"symbol":{"keyType":"AVMString","valueType":"byte[]","key":"cw==","desc":"Symbol of the asset. Max 8 bytes"},"decimals":{"keyType":"AVMString","valueType":"uint8","key":"ZA==","desc":"Decimals of the asset. Recommended is 6 decimal places."},"totalSupply":{"keyType":"AVMString","valueType":"uint256","key":"dA==","desc":"Minted supply"},"owner":{"keyType":"AVMString","valueType":"address","key":"YXJjODhfbw=="},"pendingOwner":{"keyType":"AVMString","valueType":"address","key":"YXJjODhfcG8="},"initialized":{"keyType":"AVMString","valueType":"byte","key":"YXJjODhfb2k="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"kyc":{"keyType":"address","valueType":"uint64","prefix":"a3lj"},"lockupUntil":{"keyType":"address","valueType":"uint64","prefix":"bGt1"},"lastValidation":{"keyType":"arc1594_LastValidationKey","valueType":"uint64","prefix":"bHZj"},"partitions":{"keyType":"arc1410_PartitionKey","valueType":"uint256","prefix":"cA=="},"holderPartitionsCurrentPage":{"keyType":"address","valueType":"uint64","prefix":"aHBfcA=="},"holderPartitionsAddresses":{"keyType":"arc1410_HoldingPartitionsPaginatedKey","valueType":"address[]","prefix":"aHBfYQ=="},"operators":{"keyType":"arc1410_OperatorKey","valueType":"byte","prefix":"b3A="},"operatorPortionAllowances":{"keyType":"arc1410_OperatorPortionKey","valueType":"uint256","prefix":"b3Bh"},"balances":{"keyType":"address","valueType":"uint256","prefix":"Yg=="},"approvals":{"keyType":"byte[32]","valueType":"ApprovalStruct","prefix":"YQ=="}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[1345,1358,1391,1404,1548,1599,1687,1746,1786,1867,1916,1948,2072,2214,2409,2586,2649,2707,2722,2839,2928,3011,3076,3114,3200,3207,3237,3250,3358,3405,3412,3445,3458,3742,3874],"errorMessage":"Box must have value"},{"pc":[2675,3875],"errorMessage":"Index access is out of bounds"},{"pc":[3245,3453],"errorMessage":"Insufficient balance"},{"pc":[3763],"errorMessage":"Insufficient balance at the sender account"},{"pc":[3204,3409],"errorMessage":"Insufficient partition balance"},{"pc":[2814,3043,3181],"errorMessage":"Invalid amount"},{"pc":[3531],"errorMessage":"Name of the asset must be longer or equal to 1 character"},{"pc":[3534],"errorMessage":"Name of the asset must be shorter or equal to 32 characters"},{"pc":[2099,3385],"errorMessage":"Not authorized operator"},{"pc":[424,436,448,463,475,490,505,524,540,562,584,609,628,644,660,676,692,720,744,765,789,814,838,869,900,921,942,967,989,1017,1039,1061,1089,1110,1131,1149,1167],"errorMessage":"OnCompletion is not NoOp"},{"pc":[3523],"errorMessage":"Only deployer of this smart contract can call bootstrap method"},{"pc":[1973],"errorMessage":"Only holder can authorize"},{"pc":[2950],"errorMessage":"Only holder can authorize portion"},{"pc":[1998],"errorMessage":"Only holder can revoke"},{"pc":[3197,3402],"errorMessage":"Partition balance missing"},{"pc":[2077,3363],"errorMessage":"Portion allowance exceeded"},{"pc":[3542],"errorMessage":"Symbol of the asset must be longer or equal to 1 character"},{"pc":[3545],"errorMessage":"Symbol of the asset must be shorter or equal to 8 characters"},{"pc":[3552],"errorMessage":"This method can be called only once"},{"pc":[4038],"errorMessage":"already_initialized"},{"pc":[1187],"errorMessage":"can only call when creating"},{"pc":[427,439,451,466,478,493,508,527,543,565,587,612,631,647,663,679,695,723,747,768,792,817,841,872,903,924,945,970,992,1020,1042,1064,1092,1113,1134,1152,1170],"errorMessage":"can only call when not creating"},{"pc":[1423,1495,3133,3269,3477,3605,3620,3635,3640,3939,3968,3990,4002,4029,4069,4080,4102,4108,4133,4154,4167,4197,4205,4240],"errorMessage":"check GlobalState exists"},{"pc":[3667],"errorMessage":"insufficient approval"},{"pc":[1399],"errorMessage":"insufficient_balance"},{"pc":[1353],"errorMessage":"insufficient_partition"},{"pc":[3613,3628,3844],"errorMessage":"invalid size"},{"pc":[1254,1324],"errorMessage":"invalid_amount"},{"pc":[1318],"errorMessage":"not_auth"},{"pc":[4071,4104,4135,4242],"errorMessage":"not_owner"},{"pc":[4190,4201],"errorMessage":"not_pending_owner"},{"pc":[1199,3037],"errorMessage":"only_owner"},{"pc":[1366,1412,1431,2088,2847,2936,3084,3122,3141,3215,3258,3277,3374,3420,3466,3485,3675,3781,3804],"errorMessage":"overflow"},{"pc":[4158],"errorMessage":"pending_transfer_exists"},{"pc":[4043,4076,4140],"errorMessage":"zero_address_not_allowed"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAAEgCCYaIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBUffHUHYXJjODhfbwF0AXABYgGACGFyYzg4X3BvAgACAQAIYXJjODhfb2kDb3BhBGhwX2ECb3ADaGx0A2t5YwgAAAAAAAAAAAEBAgABAgBiA2xrdQIAQgIAAARcJ7T8BHmDw1wEQ1XSrTEbQQQCgiUEd9gkXASstSbsBH1pas4EATBZmwQkvxZ+BD+lBqkENfgTXwTacCW5BD8lZxMElbT54wSAzEmrBAeWIWUE54lh2gT9lIDXBLGx1poEwb7XiQQ7/hgzBFmc0aUEbelBZgQo8CPXBJdTguIEZX0T7AS2rholBITsE9UE7JlgQQSC5XPEBEqWj48EtUIhJQS7sxnzBAcCZU4E0BVyTgQCn+zABHNJM04E23yC7wT9LCxuBEKl8GUErU9o6jYaAI4lAukC1wLFArACmwJ/AmkCUwI3AiECCAHzAd4BvwGgAYgBbwFXAUIBKgEOAP4A7gDeAM4AuwCiAIwAdgBmAFMARAA1ACkAGgAOAAIiQzEZFEQxGESIDtkjQzEZFEQxGESIDpojQzEZFEQxGEQ2GgGIDlAjQzEZFEQxGESIDigjQzEZFEQxGEQ2GgGIDfUjQzEZFEQxGEQ2GgGIDbkjQzEZFEQxGEQ2GgGIDX8pTFCwI0MxGRREMRhEiA1nKUxQsCNDMRkURDEYRDYaATYaAogMVSlMULAjQzEZFEQxGEQ2GgE2GgKIDDIpTFCwI0MxGRREMRhENhoBNhoCNhoDiAvrKUxQsCNDMRkURDEYRDYaAYgLzylMULAjQzEZFEQxGESIC7opTFCwI0MxGRREMRhEiAujKUxQsCNDMRkURDEYRIgLhClMULAjQzEZFEQxGESIC2UpTFCwI0MxGRREMRhENhoBNhoCNhoDNhoEiAr0KUxQsCNDMRkURDEYRDYaATYaAjYaAzYaBIgKCCNDMRkURDEYRDYaATYaAjYaA4gJayNDMRkURDEYRDYaATYaAjYaAzYaBIgIvyNDMRkURDEYRDYaATYaAjYaA4gIcilMULAjQzEZFEQxGEQ2GgE2GgI2GgM2GgSICD0jQzEZFEQxGEQ2GgE2GgI2GgM2GgQ2GgWIBPEpTFCwI0MxGRREMRhENhoBNhoCNhoDNhoENhoFiARsKUxQsCNDMRkURDEYRDYaATYaAjYaA4gEMiNDMRkURDEYRDYaATYaAjYaA4gEBCNDMRkURDEYRDYaATYaAjYaA4gDkClMULAjQzEZFEQxGEQ2GgE2GgKIA10pTFCwI0MxGRREMRhENhoBNhoCNhoDNhoEiAMmKUxQsCNDMRkURDEYRDYaATYaAogC9ilMULAjQzEZFEQxGEQ2GgE2GgKIAtEpTFCwI0MxGRREMRhENhoBNhoCNhoDNhoEiAGJKUxQsCNDMRkURDEYRDYaATYaAjYaA4gAuSNDMRkURDEYRDYaATYaAjYaA4gAdSNDMRkURDEYRDYaATYaAogAVCNDMRkURDEYRDYaATYaAogAMyNDMRkURDEYRDYaAYgAGCNDMRlA/QMxGBREI0MxAIgK1yJTIxJEiYoBAIj/7ycOi/9niYoCAIj/4ycPi/5Qi/+/iYoCAIj/1CcUi/5Qi/+/iYoDAIj/xYv+gAClRIv9KIv+i/+IBt6L/Yv+UCcVUIv/UCcITFCABPLpmK9MULCJigMAIkcCMQBJi/0SQAAMiwOICmQiUyMSQQCYI0SL/oAApUSL/ShQJwRMUEmMAr1FAUEAe4sCvkSL/qdBAHEjRIsCSb5Ei/6hSRUkDkQkr0mMAKu/JwWL/VBJjAG9RQFBAEmLAb5Ei/6nQQA/I0SLAUm+RIv+oUkVJA5EiwBJTgOrvyIrZUSL/qFJFSQORKsrTGeL/Yv+UCcVUIv/UCcITFCABNf8SphMULCJIkL/viJC/4wiQv9ligQBIkcDJxBJIicOZUUBQQAbIicOZUQXIxKLBIwFQQAMgAgAAAAAAAAADowFiwVJjARJF0yMBUAAJicPi/xQSYwDvUUBQQAIiwO+RBdAAAyACAAAAAAAAAAKjASLBIwFiwVJjARJF0yMBUAAJicPi/1QSYwAvUUBQQAIiwC+RBdAAAyACAAAAAAAAAALjASLBIwFiwVJjARJF0yMBUAAGIv+gACoQQAMgAgAAAAAAAAAKIwEiwSMBYsFSYwESRdMjAVAACgnBYv8UEmMAb1FAUEACosBvkSL/qRBAAyACAAAAAAAAAANjASLBIwFiwVJjARJF0yMBUAALScUi/xQSYwCvUUBiwSMBUEAGzIGiwK+RBcOiwSMBUEADIAIAAAAAAAAAA+MBYsFjACJigIBi/6L/1AnBExQvkSJigIBMQAoi/4oi/8nFogD6DEAi/6L/4gHjImKBAExAIv9i/yIArhMi/yL/UsDi/6L/4gDxImKAgGL/ov/UCcMTFBJvUUBQAAEJxZMiYsAvkRMiYoDASJHAov+i/0SQQAFJwaMAImL/Yv+UEmMAIv/UCcNTFBJjAG9RQFBAA+LAb5EFyMSQQAFJwaMAImLAChQJw1MUEmMAr1FAUEAD4sCvkQXIxJBAAUnBowAiScJjACJigMAMQCL/RJEi/2L/lCL/1AnDUxQJxG/iYoDADEAi/0SRIv9i/5Qi/9QJw1MUEm9RQFBAASLALxIiYoFASIxAIv7MQCL/Ij/WCJTIxJHAkAAMov7iwFQi/xQJwtMUEmMAL1FAUEAGYsASb5ESYv+p0QjjAKL/qFJFSQORCSvq7+LAowDiwNEi/2L/IgBn4v7i/yL/UsDi/6L/4gCqowAiYoFASJJgABJi/uL/FAnBExQSb1FAUAAPoA5UAAjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFBhcnRpdGlvbiBub3QgZXhpc3RzjACJiwS+RIv+pEEAPoA5UgAjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFEluc3VmZmljaWVudCBiYWxhbmNljACJi/0oEkEAOoA1VwAjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEEludmFsaWQgcmVjZWl2ZXKMAIkxAEmMAIv7E0EAhov7iwCL/Ij+DiJTIxJJjAJJjANAACqL+4sAUIv8UCcLTFBJjAG9RQGLAowDQQARiwG+RIv+p0EAAyOMAosCjAOLA0AAQYA8WAAjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF09wZXJhdG9yIG5vdCBhdXRob3JpemVkjACJi/2L/IgAFoADUQAjTFCACQAHU3VjY2Vzc1CMAImKAgEoi/6L/1AnBExQvUUBQQAEi/+MAIsATImKAgAiRwSAAEcEgARocF9wi/5QSb1FAUAABYsKJxC/iwq+TIwCRCKMBicQjAGLARdJjAiLAhdJjAkMQQBPi/6LAVAnDExQSYwEvUUBQAAMJxKL/1CLBEm8SEy/iwS+TElOAowARCJZjAUijAeLB4sFDEEAh4sAVwIAiwckCyRYi/8SQQBtI0EAXyOMBosGQAA4i/6LAlAnDExQSYwDvkQiWRYXgQoMQQAhiwNJvkRXAgAnEov/UFcCAFBJFSQKFlcGAkxQSwG8SL+JiwkjCBaLCksBv4v+TFAnEov/UCcMTwJQSbxITL+JiwgjCBaMAUL/O4sHIwiMB0L/cSJC/4eKBgAiSYv+gAClRIv6i/tQJwRMUEm9RQFAAASLAii/iwJJvkSL/qFJFSQORCSvSYwAq7+L+ov8UIv7UIv+UIACAIJQi/9QJwhMUIAEIGt5QExQsIv9i/sTQQAHi/yL/Yj+n4v8i/1QJwRMUEmMAb1FAUAABIsBKL+LAUm+RIv+oEkVJA5EiwCrv4mKBAAxAIv8EkSL/Iv9UIv+UCcLTFCL/7+JigMBIov+i/0SQQAEJwZMiYv9i/5Qi/9QJwtMUEmMAL1FAUAABCcJTImLAL5EgAClJwkiTwJUTImKBAAiSTEAiAOpIlMjEkSL/oAApUSL/Iv9UEknBExQSb1FAUAAC4sDKL+L/Iv9iP31iwNJvkSL/qBJFSQORCSvSYwAq78nBYv8UEmMAb1FAUAABIsBKL+LAUm+RIv+oEkVJA5EiwBJTgOrvyIrZUSL/qBJFSQORKsrTGeLAov+UCcTUIv/UCcITFCABPpEOxtMULCJigMAMQCL/oAApURJi/1QSU4CJwRMUEm9RQFESb5Ei/6nREm+RIv+oUkVJA5EJK9JTgSrvycFTFBJvUUBQQBFiwK+RIv+p0EAOyNEiwJJvkSL/qFJFSQORIsBSU4Dq78iK2VEi/6hSRUkDkSrK0xniwCL/lAnE1CL/1AnCExQJxdMULCJIkL/wooEACJHAzEAi/wxAIv9iPpSIlMjEkcCQAAyi/yLBFCL/VAnC0xQSYwDvUUBQQAZiwNJvkRJi/6nRCOMBYv+oUkVJA5EJK+rv4sFjAaLBkSL/Iv9UEmMAScETFBJvUUBREm+RIv+p0RJvkSL/qFJFSQORCSvSYwAq78nBYv8UEmMAr1FAUEARYsCvkSL/qdBADsjRIsCSb5Ei/6hSRUkDkSLAElOA6u/IitlRIv+oUkVJA5EqytMZ4sBi/5QJxNQi/9QJwhMUCcXTFCwiSJC/8KKBAExADIJEkSL/FcCABVJRCQORIv9VwIAFUlEJQ5EIitlRQEURIABbov8Z4ABc4v9ZyuL/2eAAWSL/mcxACcFSwFQi/+/MgNMUIv/UCcYTFCwJwaJIoABbmVEVwIASRUkEkSJIoABc2VEVwIASRUlEkSJIoABZGVEiSIrZUSJigEBi/+IAEeJigMBMQCL/UsBiAC3SYv/p0SL/6FJFSQORCSvq4v9TgKIAMJIi/2L/ov/iAAxiYoCATEAi/6L/4gAq4mKAgGL/ov/iAB+iYoBAScFi/9QSb1FAUAAAyhMiYsAvkRMiYoDAYv9iP/gSYv+iP/aTIv/p0SL/Yv+E0EAKYsAi/+hSRUkDkQkr0xLAasnBYv9UEy/iwGL/6BJFSQORKsnBYv+UEy/i/2L/lCL/1AnGExQsCcGjACJigIBi/6L/1ABSRUkEkSJigIBi/6L/4j/54ABYUxQSb1FAUAAAyhMiYsAvkRXACBMiYoDAYv9i/6I/8WL/4v9UIv+UIABYU8CUEy/i/2L/lCL/1CABBlp+GVMULAnBokiJwplRQFBAAkiJwplRBdAABEiKmVFAUAABCoyCWcnCicRZ4mI/9kiKmVEiYoBAYj/ziIqZUUBQAADJwmJIiplRCgSQQADJwmJIiplRIv/EicJIk8CVImKAQAiJwplRQFBAB0iJwplRBcjEkEAEiMURIv/KBNEKov/ZycKJxFniSJC/+uKAQCI/3YxACIqZUQSRIv/KBNEIiplRCqL/2eL/1AnGUxQsImI/1UxACIqZUQSRCIqZUQqKGeABDRqoWZMULCJigEAiP82MQAiKmVEEkSL/ygTRCInB2VFAUEACSInB2VEKBMURCcHi/9nIiplRIv/UIAEFr8fkUxQsImI/v4iJwdlRQFEMQAiJwdlREsBEkQiKmVEKksCZycHKGdMUIAE9+NrN0sBULAnGUxQsImI/ssxACIqZUQSRCcHKGeJ","clear":"CoEBQw=="},"events":[{"name":"Issue","args":[{"type":"(address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_issue"}]},{"name":"Issue","args":[{"type":"(address,uint256,byte[])","name":"0","struct":"arc1594_issue_event"}]},{"name":"Redeem","args":[{"type":"(address,uint256,byte[])","name":"0","struct":"arc1594_redeem_event"}]},{"name":"Transfer","args":[{"type":"(address,address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_transfer"}]},{"name":"arc200_Transfer","args":[{"type":"address","name":"from"},{"type":"address","name":"to"},{"type":"uint256","name":"value"}]},{"name":"Redeem","args":[{"type":"(address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_redeem"}]},{"name":"arc200_Approval","args":[{"type":"address","name":"owner"},{"type":"address","name":"spender"},{"type":"uint256","name":"value"}]},{"name":"arc88_OwnershipTransferred","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"new_owner"}]},{"name":"arc88_OwnershipRenounced","args":[{"type":"address","name":"previous_owner"}]},{"name":"arc88_OwnershipTransferRequested","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"pending_owner"}]},{"name":"arc88_OwnershipTransferAccepted","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"new_owner"}]}],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type ApprovalStruct = {
  approvalAmount: bigint,
  owner: string,
  spender: string
}


/**
 * Converts the ABI tuple representation of a ApprovalStruct to the struct representation
 */
export function ApprovalStructFromTuple(abiTuple: [bigint, string, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ApprovalStruct, APP_SPEC.structs) as ApprovalStruct
}

export type Arc1410HoldingPartitionsPaginatedKey = {
  holder: string,
  page: bigint
}


/**
 * Converts the ABI tuple representation of a arc1410_HoldingPartitionsPaginatedKey to the struct representation
 */
export function Arc1410HoldingPartitionsPaginatedKeyFromTuple(abiTuple: [string, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1410_HoldingPartitionsPaginatedKey, APP_SPEC.structs) as Arc1410HoldingPartitionsPaginatedKey
}

export type Arc1410OperatorKey = {
  holder: string,
  operator: string,
  partition: string
}


/**
 * Converts the ABI tuple representation of a arc1410_OperatorKey to the struct representation
 */
export function Arc1410OperatorKeyFromTuple(abiTuple: [string, string, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1410_OperatorKey, APP_SPEC.structs) as Arc1410OperatorKey
}

export type Arc1410OperatorPortionKey = {
  holder: string,
  operator: string,
  partition: string
}


/**
 * Converts the ABI tuple representation of a arc1410_OperatorPortionKey to the struct representation
 */
export function Arc1410OperatorPortionKeyFromTuple(abiTuple: [string, string, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1410_OperatorPortionKey, APP_SPEC.structs) as Arc1410OperatorPortionKey
}

export type Arc1410PartitionKey = {
  holder: string,
  partition: string
}


/**
 * Converts the ABI tuple representation of a arc1410_PartitionKey to the struct representation
 */
export function Arc1410PartitionKeyFromTuple(abiTuple: [string, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1410_PartitionKey, APP_SPEC.structs) as Arc1410PartitionKey
}

export type Arc1410CanTransferByPartitionReturn = {
  code: number,
  status: string,
  receiverPartition: string
}


/**
 * Converts the ABI tuple representation of a arc1410_can_transfer_by_partition_return to the struct representation
 */
export function Arc1410CanTransferByPartitionReturnFromTuple(abiTuple: [number, string, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1410_can_transfer_by_partition_return, APP_SPEC.structs) as Arc1410CanTransferByPartitionReturn
}

export type Arc1410PartitionIssue = {
  to: string,
  partition: string,
  amount: bigint,
  data: Uint8Array
}


/**
 * Converts the ABI tuple representation of a arc1410_partition_issue to the struct representation
 */
export function Arc1410PartitionIssueFromTuple(abiTuple: [string, string, bigint, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1410_partition_issue, APP_SPEC.structs) as Arc1410PartitionIssue
}

export type Arc1410PartitionRedeem = {
  from: string,
  partition: string,
  amount: bigint,
  data: Uint8Array
}


/**
 * Converts the ABI tuple representation of a arc1410_partition_redeem to the struct representation
 */
export function Arc1410PartitionRedeemFromTuple(abiTuple: [string, string, bigint, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1410_partition_redeem, APP_SPEC.structs) as Arc1410PartitionRedeem
}

export type Arc1410PartitionTransfer = {
  from: string,
  to: string,
  partition: string,
  amount: bigint,
  data: Uint8Array
}


/**
 * Converts the ABI tuple representation of a arc1410_partition_transfer to the struct representation
 */
export function Arc1410PartitionTransferFromTuple(abiTuple: [string, string, string, bigint, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1410_partition_transfer, APP_SPEC.structs) as Arc1410PartitionTransfer
}

export type Arc1594LastValidationKey = {
  sender: string
}


/**
 * Converts the ABI tuple representation of a arc1594_LastValidationKey to the struct representation
 */
export function Arc1594LastValidationKeyFromTuple(abiTuple: [string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1594_LastValidationKey, APP_SPEC.structs) as Arc1594LastValidationKey
}

export type Arc1594IssueEvent = {
  to: string,
  amount: bigint,
  data: Uint8Array
}


/**
 * Converts the ABI tuple representation of a arc1594_issue_event to the struct representation
 */
export function Arc1594IssueEventFromTuple(abiTuple: [string, bigint, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1594_issue_event, APP_SPEC.structs) as Arc1594IssueEvent
}

export type Arc1594RedeemEvent = {
  from: string,
  amount: bigint,
  data: Uint8Array
}


/**
 * Converts the ABI tuple representation of a arc1594_redeem_event to the struct representation
 */
export function Arc1594RedeemEventFromTuple(abiTuple: [string, bigint, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1594_redeem_event, APP_SPEC.structs) as Arc1594RedeemEvent
}

/**
 * The argument types for the Arc1594 contract
 */
export type Arc1594Args = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'arc1594_set_halt(uint64)void': {
      flag: bigint | number
    }
    'arc1594_set_kyc(address,uint64)void': {
      account: string
      flag: bigint | number
    }
    'arc1594_set_lockup(address,uint64)void': {
      account: string
      round: bigint | number
    }
    'arc1594_issue(address,uint256,byte[])void': {
      to: string
      amount: bigint | number
      data: Uint8Array
    }
    'arc1594_redeem(address,uint256,byte[])void': {
      from: string
      amount: bigint | number
      data: Uint8Array
    }
    'arc1594_validate_transfer(address,address,uint256,byte[])uint64': {
      from: string
      to: string
      amount: bigint | number
      data: Uint8Array
    }
    'arc1410_balance_of_partition(address,address)uint256': {
      holder: string
      partition: string
    }
    'arc200_transfer(address,uint256)bool': {
      to: string
      value: bigint | number
    }
    'arc1410_transfer_by_partition(address,address,uint256,byte[])address': {
      partition: string
      to: string
      amount: bigint | number
      data: Uint8Array
    }
    'arc1410_partitions_of(address,uint64)address[]': {
      holder: string
      page: bigint | number
    }
    'arc1410_is_operator(address,address,address)bool': {
      holder: string
      operator: string
      partition: string
    }
    'arc1410_authorize_operator(address,address,address)void': {
      holder: string
      operator: string
      partition: string
    }
    'arc1410_revoke_operator(address,address,address)void': {
      holder: string
      operator: string
      partition: string
    }
    'arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address': {
      from: string
      partition: string
      to: string
      amount: bigint | number
      data: Uint8Array
    }
    'arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)': {
      from: string
      partition: string
      to: string
      amount: bigint | number
      data: Uint8Array
    }
    'arc1410_authorize_operator_by_portion(address,address,address,uint256)void': {
      holder: string
      operator: string
      partition: string
      amount: bigint | number
    }
    'arc1410_is_operator_by_portion(address,address,address)bool': {
      holder: string
      operator: string
      partition: string
    }
    'arc1410_issue_by_partition(address,address,uint256,byte[])void': {
      to: string
      partition: string
      amount: bigint | number
      data: Uint8Array
    }
    'arc1410_redeem_by_partition(address,uint256,byte[])void': {
      partition: string
      amount: bigint | number
      data: Uint8Array
    }
    'arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void': {
      from: string
      partition: string
      amount: bigint | number
      data: Uint8Array
    }
    'bootstrap(byte[],byte[],uint8,uint256)bool': {
      name: Uint8Array
      symbol: Uint8Array
      decimals: bigint | number
      totalSupply: bigint | number
    }
    'arc200_name()byte[32]': Record<string, never>
    'arc200_symbol()byte[8]': Record<string, never>
    'arc200_decimals()uint8': Record<string, never>
    'arc200_totalSupply()uint256': Record<string, never>
    'arc200_balanceOf(address)uint256': {
      /**
       * The address of the owner of the token
       */
      owner: string
    }
    'arc200_transferFrom(address,address,uint256)bool': {
      /**
       * The source of the transfer
       */
      from: string
      /**
       * The destination of the transfer
       */
      to: string
      /**
       * Amount of tokens to transfer
       */
      value: bigint | number
    }
    'arc200_approve(address,uint256)bool': {
      /**
       * Who is allowed to take tokens on owner's behalf
       */
      spender: string
      /**
       * Amount of tokens to be taken by spender
       */
      value: bigint | number
    }
    'arc200_allowance(address,address)uint256': {
      /**
       * Owner's account
       */
      owner: string
      /**
       * Who is allowed to take tokens on owner's behalf
       */
      spender: string
    }
    'arc88_owner()address': Record<string, never>
    'arc88_is_owner(address)bool': {
      query: string
    }
    'arc88_initialize_owner(address)void': {
      newOwner: string
    }
    'arc88_transfer_ownership(address)void': {
      newOwner: string
    }
    'arc88_renounce_ownership()void': Record<string, never>
    'arc88_transfer_ownership_request(address)void': {
      pending: string
    }
    'arc88_accept_ownership()void': Record<string, never>
    'arc88_cancel_ownership_request()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'arc1594_set_halt(uint64)void': [flag: bigint | number]
    'arc1594_set_kyc(address,uint64)void': [account: string, flag: bigint | number]
    'arc1594_set_lockup(address,uint64)void': [account: string, round: bigint | number]
    'arc1594_issue(address,uint256,byte[])void': [to: string, amount: bigint | number, data: Uint8Array]
    'arc1594_redeem(address,uint256,byte[])void': [from: string, amount: bigint | number, data: Uint8Array]
    'arc1594_validate_transfer(address,address,uint256,byte[])uint64': [from: string, to: string, amount: bigint | number, data: Uint8Array]
    'arc1410_balance_of_partition(address,address)uint256': [holder: string, partition: string]
    'arc200_transfer(address,uint256)bool': [to: string, value: bigint | number]
    'arc1410_transfer_by_partition(address,address,uint256,byte[])address': [partition: string, to: string, amount: bigint | number, data: Uint8Array]
    'arc1410_partitions_of(address,uint64)address[]': [holder: string, page: bigint | number]
    'arc1410_is_operator(address,address,address)bool': [holder: string, operator: string, partition: string]
    'arc1410_authorize_operator(address,address,address)void': [holder: string, operator: string, partition: string]
    'arc1410_revoke_operator(address,address,address)void': [holder: string, operator: string, partition: string]
    'arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address': [from: string, partition: string, to: string, amount: bigint | number, data: Uint8Array]
    'arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)': [from: string, partition: string, to: string, amount: bigint | number, data: Uint8Array]
    'arc1410_authorize_operator_by_portion(address,address,address,uint256)void': [holder: string, operator: string, partition: string, amount: bigint | number]
    'arc1410_is_operator_by_portion(address,address,address)bool': [holder: string, operator: string, partition: string]
    'arc1410_issue_by_partition(address,address,uint256,byte[])void': [to: string, partition: string, amount: bigint | number, data: Uint8Array]
    'arc1410_redeem_by_partition(address,uint256,byte[])void': [partition: string, amount: bigint | number, data: Uint8Array]
    'arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void': [from: string, partition: string, amount: bigint | number, data: Uint8Array]
    'bootstrap(byte[],byte[],uint8,uint256)bool': [name: Uint8Array, symbol: Uint8Array, decimals: bigint | number, totalSupply: bigint | number]
    'arc200_name()byte[32]': []
    'arc200_symbol()byte[8]': []
    'arc200_decimals()uint8': []
    'arc200_totalSupply()uint256': []
    'arc200_balanceOf(address)uint256': [owner: string]
    'arc200_transferFrom(address,address,uint256)bool': [from: string, to: string, value: bigint | number]
    'arc200_approve(address,uint256)bool': [spender: string, value: bigint | number]
    'arc200_allowance(address,address)uint256': [owner: string, spender: string]
    'arc88_owner()address': []
    'arc88_is_owner(address)bool': [query: string]
    'arc88_initialize_owner(address)void': [newOwner: string]
    'arc88_transfer_ownership(address)void': [newOwner: string]
    'arc88_renounce_ownership()void': []
    'arc88_transfer_ownership_request(address)void': [pending: string]
    'arc88_accept_ownership()void': []
    'arc88_cancel_ownership_request()void': []
  }
}

/**
 * The return type for each method
 */
export type Arc1594Returns = {
  'arc1594_set_halt(uint64)void': void
  'arc1594_set_kyc(address,uint64)void': void
  'arc1594_set_lockup(address,uint64)void': void
  'arc1594_issue(address,uint256,byte[])void': void
  'arc1594_redeem(address,uint256,byte[])void': void
  'arc1594_validate_transfer(address,address,uint256,byte[])uint64': bigint
  'arc1410_balance_of_partition(address,address)uint256': bigint
  'arc200_transfer(address,uint256)bool': boolean
  'arc1410_transfer_by_partition(address,address,uint256,byte[])address': string
  'arc1410_partitions_of(address,uint64)address[]': string[]
  'arc1410_is_operator(address,address,address)bool': boolean
  'arc1410_authorize_operator(address,address,address)void': void
  'arc1410_revoke_operator(address,address,address)void': void
  'arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address': string
  'arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)': Arc1410CanTransferByPartitionReturn
  'arc1410_authorize_operator_by_portion(address,address,address,uint256)void': void
  'arc1410_is_operator_by_portion(address,address,address)bool': boolean
  'arc1410_issue_by_partition(address,address,uint256,byte[])void': void
  'arc1410_redeem_by_partition(address,uint256,byte[])void': void
  'arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void': void
  'bootstrap(byte[],byte[],uint8,uint256)bool': boolean
  'arc200_name()byte[32]': Uint8Array
  'arc200_symbol()byte[8]': Uint8Array
  'arc200_decimals()uint8': number
  'arc200_totalSupply()uint256': bigint
  'arc200_balanceOf(address)uint256': bigint
  'arc200_transferFrom(address,address,uint256)bool': boolean
  'arc200_approve(address,uint256)bool': boolean
  'arc200_allowance(address,address)uint256': bigint
  'arc88_owner()address': string
  'arc88_is_owner(address)bool': boolean
  'arc88_initialize_owner(address)void': void
  'arc88_transfer_ownership(address)void': void
  'arc88_renounce_ownership()void': void
  'arc88_transfer_ownership_request(address)void': void
  'arc88_accept_ownership()void': void
  'arc88_cancel_ownership_request()void': void
}

/**
 * Defines the types of available calls and state of the Arc1594 smart contract.
 */
export type Arc1594Types = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'arc1594_set_halt(uint64)void' | 'arc1594_set_halt', {
      argsObj: Arc1594Args['obj']['arc1594_set_halt(uint64)void']
      argsTuple: Arc1594Args['tuple']['arc1594_set_halt(uint64)void']
      returns: Arc1594Returns['arc1594_set_halt(uint64)void']
    }>
    & Record<'arc1594_set_kyc(address,uint64)void' | 'arc1594_set_kyc', {
      argsObj: Arc1594Args['obj']['arc1594_set_kyc(address,uint64)void']
      argsTuple: Arc1594Args['tuple']['arc1594_set_kyc(address,uint64)void']
      returns: Arc1594Returns['arc1594_set_kyc(address,uint64)void']
    }>
    & Record<'arc1594_set_lockup(address,uint64)void' | 'arc1594_set_lockup', {
      argsObj: Arc1594Args['obj']['arc1594_set_lockup(address,uint64)void']
      argsTuple: Arc1594Args['tuple']['arc1594_set_lockup(address,uint64)void']
      returns: Arc1594Returns['arc1594_set_lockup(address,uint64)void']
    }>
    & Record<'arc1594_issue(address,uint256,byte[])void' | 'arc1594_issue', {
      argsObj: Arc1594Args['obj']['arc1594_issue(address,uint256,byte[])void']
      argsTuple: Arc1594Args['tuple']['arc1594_issue(address,uint256,byte[])void']
      returns: Arc1594Returns['arc1594_issue(address,uint256,byte[])void']
    }>
    & Record<'arc1594_redeem(address,uint256,byte[])void' | 'arc1594_redeem', {
      argsObj: Arc1594Args['obj']['arc1594_redeem(address,uint256,byte[])void']
      argsTuple: Arc1594Args['tuple']['arc1594_redeem(address,uint256,byte[])void']
      returns: Arc1594Returns['arc1594_redeem(address,uint256,byte[])void']
    }>
    & Record<'arc1594_validate_transfer(address,address,uint256,byte[])uint64' | 'arc1594_validate_transfer', {
      argsObj: Arc1594Args['obj']['arc1594_validate_transfer(address,address,uint256,byte[])uint64']
      argsTuple: Arc1594Args['tuple']['arc1594_validate_transfer(address,address,uint256,byte[])uint64']
      returns: Arc1594Returns['arc1594_validate_transfer(address,address,uint256,byte[])uint64']
    }>
    & Record<'arc1410_balance_of_partition(address,address)uint256' | 'arc1410_balance_of_partition', {
      argsObj: Arc1594Args['obj']['arc1410_balance_of_partition(address,address)uint256']
      argsTuple: Arc1594Args['tuple']['arc1410_balance_of_partition(address,address)uint256']
      returns: Arc1594Returns['arc1410_balance_of_partition(address,address)uint256']
    }>
    & Record<'arc200_transfer(address,uint256)bool' | 'arc200_transfer', {
      argsObj: Arc1594Args['obj']['arc200_transfer(address,uint256)bool']
      argsTuple: Arc1594Args['tuple']['arc200_transfer(address,uint256)bool']
      returns: Arc1594Returns['arc200_transfer(address,uint256)bool']
    }>
    & Record<'arc1410_transfer_by_partition(address,address,uint256,byte[])address' | 'arc1410_transfer_by_partition', {
      argsObj: Arc1594Args['obj']['arc1410_transfer_by_partition(address,address,uint256,byte[])address']
      argsTuple: Arc1594Args['tuple']['arc1410_transfer_by_partition(address,address,uint256,byte[])address']
      returns: Arc1594Returns['arc1410_transfer_by_partition(address,address,uint256,byte[])address']
    }>
    & Record<'arc1410_partitions_of(address,uint64)address[]' | 'arc1410_partitions_of', {
      argsObj: Arc1594Args['obj']['arc1410_partitions_of(address,uint64)address[]']
      argsTuple: Arc1594Args['tuple']['arc1410_partitions_of(address,uint64)address[]']
      returns: Arc1594Returns['arc1410_partitions_of(address,uint64)address[]']
    }>
    & Record<'arc1410_is_operator(address,address,address)bool' | 'arc1410_is_operator', {
      argsObj: Arc1594Args['obj']['arc1410_is_operator(address,address,address)bool']
      argsTuple: Arc1594Args['tuple']['arc1410_is_operator(address,address,address)bool']
      returns: Arc1594Returns['arc1410_is_operator(address,address,address)bool']
    }>
    & Record<'arc1410_authorize_operator(address,address,address)void' | 'arc1410_authorize_operator', {
      argsObj: Arc1594Args['obj']['arc1410_authorize_operator(address,address,address)void']
      argsTuple: Arc1594Args['tuple']['arc1410_authorize_operator(address,address,address)void']
      returns: Arc1594Returns['arc1410_authorize_operator(address,address,address)void']
    }>
    & Record<'arc1410_revoke_operator(address,address,address)void' | 'arc1410_revoke_operator', {
      argsObj: Arc1594Args['obj']['arc1410_revoke_operator(address,address,address)void']
      argsTuple: Arc1594Args['tuple']['arc1410_revoke_operator(address,address,address)void']
      returns: Arc1594Returns['arc1410_revoke_operator(address,address,address)void']
    }>
    & Record<'arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address' | 'arc1410_operator_transfer_by_partition', {
      argsObj: Arc1594Args['obj']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address']
      argsTuple: Arc1594Args['tuple']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address']
      returns: Arc1594Returns['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address']
    }>
    & Record<'arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)' | 'arc1410_can_transfer_by_partition', {
      argsObj: Arc1594Args['obj']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)']
      argsTuple: Arc1594Args['tuple']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)']
      returns: Arc1594Returns['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)']
    }>
    & Record<'arc1410_authorize_operator_by_portion(address,address,address,uint256)void' | 'arc1410_authorize_operator_by_portion', {
      argsObj: Arc1594Args['obj']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void']
      argsTuple: Arc1594Args['tuple']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void']
      returns: Arc1594Returns['arc1410_authorize_operator_by_portion(address,address,address,uint256)void']
    }>
    & Record<'arc1410_is_operator_by_portion(address,address,address)bool' | 'arc1410_is_operator_by_portion', {
      argsObj: Arc1594Args['obj']['arc1410_is_operator_by_portion(address,address,address)bool']
      argsTuple: Arc1594Args['tuple']['arc1410_is_operator_by_portion(address,address,address)bool']
      returns: Arc1594Returns['arc1410_is_operator_by_portion(address,address,address)bool']
    }>
    & Record<'arc1410_issue_by_partition(address,address,uint256,byte[])void' | 'arc1410_issue_by_partition', {
      argsObj: Arc1594Args['obj']['arc1410_issue_by_partition(address,address,uint256,byte[])void']
      argsTuple: Arc1594Args['tuple']['arc1410_issue_by_partition(address,address,uint256,byte[])void']
      returns: Arc1594Returns['arc1410_issue_by_partition(address,address,uint256,byte[])void']
    }>
    & Record<'arc1410_redeem_by_partition(address,uint256,byte[])void' | 'arc1410_redeem_by_partition', {
      argsObj: Arc1594Args['obj']['arc1410_redeem_by_partition(address,uint256,byte[])void']
      argsTuple: Arc1594Args['tuple']['arc1410_redeem_by_partition(address,uint256,byte[])void']
      returns: Arc1594Returns['arc1410_redeem_by_partition(address,uint256,byte[])void']
    }>
    & Record<'arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void' | 'arc1410_operator_redeem_by_partition', {
      argsObj: Arc1594Args['obj']['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void']
      argsTuple: Arc1594Args['tuple']['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void']
      returns: Arc1594Returns['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void']
    }>
    & Record<'bootstrap(byte[],byte[],uint8,uint256)bool' | 'bootstrap', {
      argsObj: Arc1594Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool']
      argsTuple: Arc1594Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']
      returns: Arc1594Returns['bootstrap(byte[],byte[],uint8,uint256)bool']
    }>
    & Record<'arc200_name()byte[32]' | 'arc200_name', {
      argsObj: Arc1594Args['obj']['arc200_name()byte[32]']
      argsTuple: Arc1594Args['tuple']['arc200_name()byte[32]']
      /**
       * The name of the token
       */
      returns: Arc1594Returns['arc200_name()byte[32]']
    }>
    & Record<'arc200_symbol()byte[8]' | 'arc200_symbol', {
      argsObj: Arc1594Args['obj']['arc200_symbol()byte[8]']
      argsTuple: Arc1594Args['tuple']['arc200_symbol()byte[8]']
      /**
       * The symbol of the token
       */
      returns: Arc1594Returns['arc200_symbol()byte[8]']
    }>
    & Record<'arc200_decimals()uint8' | 'arc200_decimals', {
      argsObj: Arc1594Args['obj']['arc200_decimals()uint8']
      argsTuple: Arc1594Args['tuple']['arc200_decimals()uint8']
      /**
       * The decimals of the token
       */
      returns: Arc1594Returns['arc200_decimals()uint8']
    }>
    & Record<'arc200_totalSupply()uint256' | 'arc200_totalSupply', {
      argsObj: Arc1594Args['obj']['arc200_totalSupply()uint256']
      argsTuple: Arc1594Args['tuple']['arc200_totalSupply()uint256']
      /**
       * The total supply of the token
       */
      returns: Arc1594Returns['arc200_totalSupply()uint256']
    }>
    & Record<'arc200_balanceOf(address)uint256' | 'arc200_balanceOf', {
      argsObj: Arc1594Args['obj']['arc200_balanceOf(address)uint256']
      argsTuple: Arc1594Args['tuple']['arc200_balanceOf(address)uint256']
      /**
       * The current balance of the holder of the token
       */
      returns: Arc1594Returns['arc200_balanceOf(address)uint256']
    }>
    & Record<'arc200_transferFrom(address,address,uint256)bool' | 'arc200_transferFrom', {
      argsObj: Arc1594Args['obj']['arc200_transferFrom(address,address,uint256)bool']
      argsTuple: Arc1594Args['tuple']['arc200_transferFrom(address,address,uint256)bool']
      /**
       * Success
       */
      returns: Arc1594Returns['arc200_transferFrom(address,address,uint256)bool']
    }>
    & Record<'arc200_approve(address,uint256)bool' | 'arc200_approve', {
      argsObj: Arc1594Args['obj']['arc200_approve(address,uint256)bool']
      argsTuple: Arc1594Args['tuple']['arc200_approve(address,uint256)bool']
      /**
       * Success
       */
      returns: Arc1594Returns['arc200_approve(address,uint256)bool']
    }>
    & Record<'arc200_allowance(address,address)uint256' | 'arc200_allowance', {
      argsObj: Arc1594Args['obj']['arc200_allowance(address,address)uint256']
      argsTuple: Arc1594Args['tuple']['arc200_allowance(address,address)uint256']
      /**
       * The remaining allowance
       */
      returns: Arc1594Returns['arc200_allowance(address,address)uint256']
    }>
    & Record<'arc88_owner()address' | 'arc88_owner', {
      argsObj: Arc1594Args['obj']['arc88_owner()address']
      argsTuple: Arc1594Args['tuple']['arc88_owner()address']
      returns: Arc1594Returns['arc88_owner()address']
    }>
    & Record<'arc88_is_owner(address)bool' | 'arc88_is_owner', {
      argsObj: Arc1594Args['obj']['arc88_is_owner(address)bool']
      argsTuple: Arc1594Args['tuple']['arc88_is_owner(address)bool']
      returns: Arc1594Returns['arc88_is_owner(address)bool']
    }>
    & Record<'arc88_initialize_owner(address)void' | 'arc88_initialize_owner', {
      argsObj: Arc1594Args['obj']['arc88_initialize_owner(address)void']
      argsTuple: Arc1594Args['tuple']['arc88_initialize_owner(address)void']
      returns: Arc1594Returns['arc88_initialize_owner(address)void']
    }>
    & Record<'arc88_transfer_ownership(address)void' | 'arc88_transfer_ownership', {
      argsObj: Arc1594Args['obj']['arc88_transfer_ownership(address)void']
      argsTuple: Arc1594Args['tuple']['arc88_transfer_ownership(address)void']
      returns: Arc1594Returns['arc88_transfer_ownership(address)void']
    }>
    & Record<'arc88_renounce_ownership()void' | 'arc88_renounce_ownership', {
      argsObj: Arc1594Args['obj']['arc88_renounce_ownership()void']
      argsTuple: Arc1594Args['tuple']['arc88_renounce_ownership()void']
      returns: Arc1594Returns['arc88_renounce_ownership()void']
    }>
    & Record<'arc88_transfer_ownership_request(address)void' | 'arc88_transfer_ownership_request', {
      argsObj: Arc1594Args['obj']['arc88_transfer_ownership_request(address)void']
      argsTuple: Arc1594Args['tuple']['arc88_transfer_ownership_request(address)void']
      returns: Arc1594Returns['arc88_transfer_ownership_request(address)void']
    }>
    & Record<'arc88_accept_ownership()void' | 'arc88_accept_ownership', {
      argsObj: Arc1594Args['obj']['arc88_accept_ownership()void']
      argsTuple: Arc1594Args['tuple']['arc88_accept_ownership()void']
      returns: Arc1594Returns['arc88_accept_ownership()void']
    }>
    & Record<'arc88_cancel_ownership_request()void' | 'arc88_cancel_ownership_request', {
      argsObj: Arc1594Args['obj']['arc88_cancel_ownership_request()void']
      argsTuple: Arc1594Args['tuple']['arc88_cancel_ownership_request()void']
      returns: Arc1594Returns['arc88_cancel_ownership_request()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        halt: bigint
        /**
         * Name of the asset. Max 32 bytes
         */
        name: Uint8Array
        /**
         * Symbol of the asset. Max 8 bytes
         */
        symbol: Uint8Array
        /**
         * Decimals of the asset. Recommended is 6 decimal places.
         */
        decimals: number
        /**
         * Minted supply
         */
        totalSupply: bigint
        owner: string
        pendingOwner: string
        initialized: number
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        kyc: Map<string, bigint>
        lockupUntil: Map<string, bigint>
        lastValidation: Map<Arc1594LastValidationKey, bigint>
        partitions: Map<Arc1410PartitionKey, bigint>
        holderPartitionsCurrentPage: Map<string, bigint>
        holderPartitionsAddresses: Map<Arc1410HoldingPartitionsPaginatedKey, string[]>
        operators: Map<Arc1410OperatorKey, number>
        operatorPortionAllowances: Map<Arc1410OperatorPortionKey, bigint>
        balances: Map<string, bigint>
        approvals: Map<Uint8Array, ApprovalStruct>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type Arc1594Signatures = keyof Arc1594Types['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Arc1594NonVoidMethodSignatures = keyof Arc1594Types['methods'] extends infer T ? T extends keyof Arc1594Types['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Arc1594 smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Arc1594Signatures> = Arc1594Types['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Arc1594 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc1594Signatures> = Arc1594Types['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = Arc1594Types['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = Arc1594Types['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type Arc1594CreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type Arc1594DeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: Arc1594CreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Arc1594 smart contract
 */
export abstract class Arc1594ParamsFactory {
  /**
   * Constructs a no op call for the arc1594_set_halt(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1594SetHalt(params: CallParams<Arc1594Args['obj']['arc1594_set_halt(uint64)void'] | Arc1594Args['tuple']['arc1594_set_halt(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1594_set_halt(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.flag],
    }
  }
  /**
   * Constructs a no op call for the arc1594_set_kyc(address,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1594SetKyc(params: CallParams<Arc1594Args['obj']['arc1594_set_kyc(address,uint64)void'] | Arc1594Args['tuple']['arc1594_set_kyc(address,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1594_set_kyc(address,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account, params.args.flag],
    }
  }
  /**
   * Constructs a no op call for the arc1594_set_lockup(address,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1594SetLockup(params: CallParams<Arc1594Args['obj']['arc1594_set_lockup(address,uint64)void'] | Arc1594Args['tuple']['arc1594_set_lockup(address,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1594_set_lockup(address,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account, params.args.round],
    }
  }
  /**
   * Constructs a no op call for the arc1594_issue(address,uint256,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1594Issue(params: CallParams<Arc1594Args['obj']['arc1594_issue(address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1594_issue(address,uint256,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1594_issue(address,uint256,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.to, params.args.amount, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc1594_redeem(address,uint256,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1594Redeem(params: CallParams<Arc1594Args['obj']['arc1594_redeem(address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1594_redeem(address,uint256,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1594_redeem(address,uint256,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.from, params.args.amount, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc1594_validate_transfer(address,address,uint256,byte[])uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1594ValidateTransfer(params: CallParams<Arc1594Args['obj']['arc1594_validate_transfer(address,address,uint256,byte[])uint64'] | Arc1594Args['tuple']['arc1594_validate_transfer(address,address,uint256,byte[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1594_validate_transfer(address,address,uint256,byte[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.from, params.args.to, params.args.amount, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc1410_balance_of_partition(address,address)uint256 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410BalanceOfPartition(params: CallParams<Arc1594Args['obj']['arc1410_balance_of_partition(address,address)uint256'] | Arc1594Args['tuple']['arc1410_balance_of_partition(address,address)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_balance_of_partition(address,address)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder, params.args.partition],
    }
  }
  /**
   * Constructs a no op call for the arc200_transfer(address,uint256)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Transfer(params: CallParams<Arc1594Args['obj']['arc200_transfer(address,uint256)bool'] | Arc1594Args['tuple']['arc200_transfer(address,uint256)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_transfer(address,uint256)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.to, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the arc1410_transfer_by_partition(address,address,uint256,byte[])address ABI method
   *
   * Transfer an amount of tokens from partition to receiver. Sender must be msg.sender or authorized operator.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410TransferByPartition(params: CallParams<Arc1594Args['obj']['arc1410_transfer_by_partition(address,address,uint256,byte[])address'] | Arc1594Args['tuple']['arc1410_transfer_by_partition(address,address,uint256,byte[])address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_transfer_by_partition(address,address,uint256,byte[])address' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.partition, params.args.to, params.args.amount, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc1410_partitions_of(address,uint64)address[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410PartitionsOf(params: CallParams<Arc1594Args['obj']['arc1410_partitions_of(address,uint64)address[]'] | Arc1594Args['tuple']['arc1410_partitions_of(address,uint64)address[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_partitions_of(address,uint64)address[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder, params.args.page],
    }
  }
  /**
   * Constructs a no op call for the arc1410_is_operator(address,address,address)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410IsOperator(params: CallParams<Arc1594Args['obj']['arc1410_is_operator(address,address,address)bool'] | Arc1594Args['tuple']['arc1410_is_operator(address,address,address)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_is_operator(address,address,address)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder, params.args.operator, params.args.partition],
    }
  }
  /**
   * Constructs a no op call for the arc1410_authorize_operator(address,address,address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410AuthorizeOperator(params: CallParams<Arc1594Args['obj']['arc1410_authorize_operator(address,address,address)void'] | Arc1594Args['tuple']['arc1410_authorize_operator(address,address,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_authorize_operator(address,address,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder, params.args.operator, params.args.partition],
    }
  }
  /**
   * Constructs a no op call for the arc1410_revoke_operator(address,address,address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410RevokeOperator(params: CallParams<Arc1594Args['obj']['arc1410_revoke_operator(address,address,address)void'] | Arc1594Args['tuple']['arc1410_revoke_operator(address,address,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_revoke_operator(address,address,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder, params.args.operator, params.args.partition],
    }
  }
  /**
   * Constructs a no op call for the arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410OperatorTransferByPartition(params: CallParams<Arc1594Args['obj']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address'] | Arc1594Args['tuple']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.from, params.args.partition, params.args.to, params.args.amount, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410CanTransferByPartition(params: CallParams<Arc1594Args['obj']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)'] | Arc1594Args['tuple']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.from, params.args.partition, params.args.to, params.args.amount, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc1410_authorize_operator_by_portion(address,address,address,uint256)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410AuthorizeOperatorByPortion(params: CallParams<Arc1594Args['obj']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void'] | Arc1594Args['tuple']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_authorize_operator_by_portion(address,address,address,uint256)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder, params.args.operator, params.args.partition, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the arc1410_is_operator_by_portion(address,address,address)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410IsOperatorByPortion(params: CallParams<Arc1594Args['obj']['arc1410_is_operator_by_portion(address,address,address)bool'] | Arc1594Args['tuple']['arc1410_is_operator_by_portion(address,address,address)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_is_operator_by_portion(address,address,address)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder, params.args.operator, params.args.partition],
    }
  }
  /**
   * Constructs a no op call for the arc1410_issue_by_partition(address,address,uint256,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410IssueByPartition(params: CallParams<Arc1594Args['obj']['arc1410_issue_by_partition(address,address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1410_issue_by_partition(address,address,uint256,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_issue_by_partition(address,address,uint256,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.to, params.args.partition, params.args.amount, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc1410_redeem_by_partition(address,uint256,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410RedeemByPartition(params: CallParams<Arc1594Args['obj']['arc1410_redeem_by_partition(address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1410_redeem_by_partition(address,uint256,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_redeem_by_partition(address,uint256,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.partition, params.args.amount, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410OperatorRedeemByPartition(params: CallParams<Arc1594Args['obj']['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.from, params.args.partition, params.args.amount, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the bootstrap(byte[],byte[],uint8,uint256)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrap(params: CallParams<Arc1594Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool'] | Arc1594Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrap(byte[],byte[],uint8,uint256)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.symbol, params.args.decimals, params.args.totalSupply],
    }
  }
  /**
   * Constructs a no op call for the arc200_name()byte[32] ABI method
   *
   * Returns the name of the token
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Name(params: CallParams<Arc1594Args['obj']['arc200_name()byte[32]'] | Arc1594Args['tuple']['arc200_name()byte[32]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_name()byte[32]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc200_symbol()byte[8] ABI method
   *
   * Returns the symbol of the token
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Symbol(params: CallParams<Arc1594Args['obj']['arc200_symbol()byte[8]'] | Arc1594Args['tuple']['arc200_symbol()byte[8]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_symbol()byte[8]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc200_decimals()uint8 ABI method
   *
   * Returns the decimals of the token
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Decimals(params: CallParams<Arc1594Args['obj']['arc200_decimals()uint8'] | Arc1594Args['tuple']['arc200_decimals()uint8']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_decimals()uint8' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc200_totalSupply()uint256 ABI method
   *
   * Returns the total supply of the token
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200TotalSupply(params: CallParams<Arc1594Args['obj']['arc200_totalSupply()uint256'] | Arc1594Args['tuple']['arc200_totalSupply()uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_totalSupply()uint256' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc200_balanceOf(address)uint256 ABI method
   *
   * Returns the current balance of the owner of the token
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200BalanceOf(params: CallParams<Arc1594Args['obj']['arc200_balanceOf(address)uint256'] | Arc1594Args['tuple']['arc200_balanceOf(address)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_balanceOf(address)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.owner],
    }
  }
  /**
   * Constructs a no op call for the arc200_transferFrom(address,address,uint256)bool ABI method
   *
   * Transfers tokens from source to destination as approved spender
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200TransferFrom(params: CallParams<Arc1594Args['obj']['arc200_transferFrom(address,address,uint256)bool'] | Arc1594Args['tuple']['arc200_transferFrom(address,address,uint256)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_transferFrom(address,address,uint256)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.from, params.args.to, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the arc200_approve(address,uint256)bool ABI method
   *
   * Approve spender for a token
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Approve(params: CallParams<Arc1594Args['obj']['arc200_approve(address,uint256)bool'] | Arc1594Args['tuple']['arc200_approve(address,uint256)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_approve(address,uint256)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.spender, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the arc200_allowance(address,address)uint256 ABI method
   *
   * Returns the current allowance of the spender of the tokens of the owner
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Allowance(params: CallParams<Arc1594Args['obj']['arc200_allowance(address,address)uint256'] | Arc1594Args['tuple']['arc200_allowance(address,address)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_allowance(address,address)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.owner, params.args.spender],
    }
  }
  /**
   * Constructs a no op call for the arc88_owner()address ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88Owner(params: CallParams<Arc1594Args['obj']['arc88_owner()address'] | Arc1594Args['tuple']['arc88_owner()address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_owner()address' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc88_is_owner(address)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88IsOwner(params: CallParams<Arc1594Args['obj']['arc88_is_owner(address)bool'] | Arc1594Args['tuple']['arc88_is_owner(address)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_is_owner(address)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.query],
    }
  }
  /**
   * Constructs a no op call for the arc88_initialize_owner(address)void ABI method
   *
   * Explicit initialization override (creation group recommended). Fails if already initialized.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88InitializeOwner(params: CallParams<Arc1594Args['obj']['arc88_initialize_owner(address)void'] | Arc1594Args['tuple']['arc88_initialize_owner(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_initialize_owner(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newOwner],
    }
  }
  /**
   * Constructs a no op call for the arc88_transfer_ownership(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88TransferOwnership(params: CallParams<Arc1594Args['obj']['arc88_transfer_ownership(address)void'] | Arc1594Args['tuple']['arc88_transfer_ownership(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_transfer_ownership(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newOwner],
    }
  }
  /**
   * Constructs a no op call for the arc88_renounce_ownership()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88RenounceOwnership(params: CallParams<Arc1594Args['obj']['arc88_renounce_ownership()void'] | Arc1594Args['tuple']['arc88_renounce_ownership()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_renounce_ownership()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc88_transfer_ownership_request(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88TransferOwnershipRequest(params: CallParams<Arc1594Args['obj']['arc88_transfer_ownership_request(address)void'] | Arc1594Args['tuple']['arc88_transfer_ownership_request(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_transfer_ownership_request(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.pending],
    }
  }
  /**
   * Constructs a no op call for the arc88_accept_ownership()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88AcceptOwnership(params: CallParams<Arc1594Args['obj']['arc88_accept_ownership()void'] | Arc1594Args['tuple']['arc88_accept_ownership()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_accept_ownership()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc88_cancel_ownership_request()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88CancelOwnershipRequest(params: CallParams<Arc1594Args['obj']['arc88_cancel_ownership_request()void'] | Arc1594Args['tuple']['arc88_cancel_ownership_request()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_cancel_ownership_request()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Arc1594 smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Arc1594Factory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `Arc1594Factory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Arc1594Client(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new Arc1594Client(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Arc1594 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Arc1594DeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new Arc1594Client(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Arc1594 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Arc1594 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Arc1594 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new Arc1594Client(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Arc1594 smart contract
 */
export class Arc1594Client {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `Arc1594Client`
   *
   * @param appClient An `AppClient` instance which has been created with the Arc1594 app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `Arc1594Client`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Arc1594NonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `Arc1594Client` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<Arc1594Client> {
    return new Arc1594Client(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `Arc1594Client` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<Arc1594Client> {
    return new Arc1594Client(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Arc1594 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1594_set_halt(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1594SetHalt: (params: CallParams<Arc1594Args['obj']['arc1594_set_halt(uint64)void'] | Arc1594Args['tuple']['arc1594_set_halt(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc1594SetHalt(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1594_set_kyc(address,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1594SetKyc: (params: CallParams<Arc1594Args['obj']['arc1594_set_kyc(address,uint64)void'] | Arc1594Args['tuple']['arc1594_set_kyc(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc1594SetKyc(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1594_set_lockup(address,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1594SetLockup: (params: CallParams<Arc1594Args['obj']['arc1594_set_lockup(address,uint64)void'] | Arc1594Args['tuple']['arc1594_set_lockup(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc1594SetLockup(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1594_issue(address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1594Issue: (params: CallParams<Arc1594Args['obj']['arc1594_issue(address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1594_issue(address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc1594Issue(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1594_redeem(address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1594Redeem: (params: CallParams<Arc1594Args['obj']['arc1594_redeem(address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1594_redeem(address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc1594Redeem(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1594_validate_transfer(address,address,uint256,byte[])uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1594ValidateTransfer: (params: CallParams<Arc1594Args['obj']['arc1594_validate_transfer(address,address,uint256,byte[])uint64'] | Arc1594Args['tuple']['arc1594_validate_transfer(address,address,uint256,byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc1594ValidateTransfer(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_balance_of_partition(address,address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410BalanceOfPartition: (params: CallParams<Arc1594Args['obj']['arc1410_balance_of_partition(address,address)uint256'] | Arc1594Args['tuple']['arc1410_balance_of_partition(address,address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc1410BalanceOfPartition(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc200_transfer(address,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc200Transfer: (params: CallParams<Arc1594Args['obj']['arc200_transfer(address,uint256)bool'] | Arc1594Args['tuple']['arc200_transfer(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc200Transfer(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_transfer_by_partition(address,address,uint256,byte[])address` ABI method.
     *
     * Transfer an amount of tokens from partition to receiver. Sender must be msg.sender or authorized operator.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410TransferByPartition: (params: CallParams<Arc1594Args['obj']['arc1410_transfer_by_partition(address,address,uint256,byte[])address'] | Arc1594Args['tuple']['arc1410_transfer_by_partition(address,address,uint256,byte[])address']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc1410TransferByPartition(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_partitions_of(address,uint64)address[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410PartitionsOf: (params: CallParams<Arc1594Args['obj']['arc1410_partitions_of(address,uint64)address[]'] | Arc1594Args['tuple']['arc1410_partitions_of(address,uint64)address[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc1410PartitionsOf(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_is_operator(address,address,address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410IsOperator: (params: CallParams<Arc1594Args['obj']['arc1410_is_operator(address,address,address)bool'] | Arc1594Args['tuple']['arc1410_is_operator(address,address,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc1410IsOperator(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_authorize_operator(address,address,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410AuthorizeOperator: (params: CallParams<Arc1594Args['obj']['arc1410_authorize_operator(address,address,address)void'] | Arc1594Args['tuple']['arc1410_authorize_operator(address,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc1410AuthorizeOperator(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_revoke_operator(address,address,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410RevokeOperator: (params: CallParams<Arc1594Args['obj']['arc1410_revoke_operator(address,address,address)void'] | Arc1594Args['tuple']['arc1410_revoke_operator(address,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc1410RevokeOperator(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410OperatorTransferByPartition: (params: CallParams<Arc1594Args['obj']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address'] | Arc1594Args['tuple']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc1410OperatorTransferByPartition(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410CanTransferByPartition: (params: CallParams<Arc1594Args['obj']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)'] | Arc1594Args['tuple']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc1410CanTransferByPartition(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_authorize_operator_by_portion(address,address,address,uint256)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410AuthorizeOperatorByPortion: (params: CallParams<Arc1594Args['obj']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void'] | Arc1594Args['tuple']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc1410AuthorizeOperatorByPortion(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_is_operator_by_portion(address,address,address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410IsOperatorByPortion: (params: CallParams<Arc1594Args['obj']['arc1410_is_operator_by_portion(address,address,address)bool'] | Arc1594Args['tuple']['arc1410_is_operator_by_portion(address,address,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc1410IsOperatorByPortion(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_issue_by_partition(address,address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410IssueByPartition: (params: CallParams<Arc1594Args['obj']['arc1410_issue_by_partition(address,address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1410_issue_by_partition(address,address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc1410IssueByPartition(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_redeem_by_partition(address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410RedeemByPartition: (params: CallParams<Arc1594Args['obj']['arc1410_redeem_by_partition(address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1410_redeem_by_partition(address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc1410RedeemByPartition(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410OperatorRedeemByPartition: (params: CallParams<Arc1594Args['obj']['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc1410OperatorRedeemByPartition(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `bootstrap(byte[],byte[],uint8,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrap: (params: CallParams<Arc1594Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool'] | Arc1594Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc200_name()byte[32]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the name of the token
     *
     * @param params The params for the smart contract call
     * @returns The call params: The name of the token
     */
    arc200Name: (params: CallParams<Arc1594Args['obj']['arc200_name()byte[32]'] | Arc1594Args['tuple']['arc200_name()byte[32]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc200Name(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc200_symbol()byte[8]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the symbol of the token
     *
     * @param params The params for the smart contract call
     * @returns The call params: The symbol of the token
     */
    arc200Symbol: (params: CallParams<Arc1594Args['obj']['arc200_symbol()byte[8]'] | Arc1594Args['tuple']['arc200_symbol()byte[8]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc200Symbol(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc200_decimals()uint8` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the decimals of the token
     *
     * @param params The params for the smart contract call
     * @returns The call params: The decimals of the token
     */
    arc200Decimals: (params: CallParams<Arc1594Args['obj']['arc200_decimals()uint8'] | Arc1594Args['tuple']['arc200_decimals()uint8']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc200Decimals(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc200_totalSupply()uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the total supply of the token
     *
     * @param params The params for the smart contract call
     * @returns The call params: The total supply of the token
     */
    arc200TotalSupply: (params: CallParams<Arc1594Args['obj']['arc200_totalSupply()uint256'] | Arc1594Args['tuple']['arc200_totalSupply()uint256']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc200TotalSupply(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc200_balanceOf(address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the current balance of the owner of the token
     *
     * @param params The params for the smart contract call
     * @returns The call params: The current balance of the holder of the token
     */
    arc200BalanceOf: (params: CallParams<Arc1594Args['obj']['arc200_balanceOf(address)uint256'] | Arc1594Args['tuple']['arc200_balanceOf(address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc200BalanceOf(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc200_transferFrom(address,address,uint256)bool` ABI method.
     *
     * Transfers tokens from source to destination as approved spender
     *
     * @param params The params for the smart contract call
     * @returns The call params: Success
     */
    arc200TransferFrom: (params: CallParams<Arc1594Args['obj']['arc200_transferFrom(address,address,uint256)bool'] | Arc1594Args['tuple']['arc200_transferFrom(address,address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc200TransferFrom(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc200_approve(address,uint256)bool` ABI method.
     *
     * Approve spender for a token
     *
     * @param params The params for the smart contract call
     * @returns The call params: Success
     */
    arc200Approve: (params: CallParams<Arc1594Args['obj']['arc200_approve(address,uint256)bool'] | Arc1594Args['tuple']['arc200_approve(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc200Approve(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc200_allowance(address,address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the current allowance of the spender of the tokens of the owner
     *
     * @param params The params for the smart contract call
     * @returns The call params: The remaining allowance
     */
    arc200Allowance: (params: CallParams<Arc1594Args['obj']['arc200_allowance(address,address)uint256'] | Arc1594Args['tuple']['arc200_allowance(address,address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc200Allowance(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc88_owner()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88Owner: (params: CallParams<Arc1594Args['obj']['arc88_owner()address'] | Arc1594Args['tuple']['arc88_owner()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc88Owner(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc88_is_owner(address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88IsOwner: (params: CallParams<Arc1594Args['obj']['arc88_is_owner(address)bool'] | Arc1594Args['tuple']['arc88_is_owner(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc88IsOwner(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc88_initialize_owner(address)void` ABI method.
     *
     * Explicit initialization override (creation group recommended). Fails if already initialized.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88InitializeOwner: (params: CallParams<Arc1594Args['obj']['arc88_initialize_owner(address)void'] | Arc1594Args['tuple']['arc88_initialize_owner(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc88InitializeOwner(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc88_transfer_ownership(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88TransferOwnership: (params: CallParams<Arc1594Args['obj']['arc88_transfer_ownership(address)void'] | Arc1594Args['tuple']['arc88_transfer_ownership(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc88TransferOwnership(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc88_renounce_ownership()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88RenounceOwnership: (params: CallParams<Arc1594Args['obj']['arc88_renounce_ownership()void'] | Arc1594Args['tuple']['arc88_renounce_ownership()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc88RenounceOwnership(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc88_transfer_ownership_request(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88TransferOwnershipRequest: (params: CallParams<Arc1594Args['obj']['arc88_transfer_ownership_request(address)void'] | Arc1594Args['tuple']['arc88_transfer_ownership_request(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc88TransferOwnershipRequest(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc88_accept_ownership()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88AcceptOwnership: (params: CallParams<Arc1594Args['obj']['arc88_accept_ownership()void'] | Arc1594Args['tuple']['arc88_accept_ownership()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc88AcceptOwnership(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc88_cancel_ownership_request()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88CancelOwnershipRequest: (params: CallParams<Arc1594Args['obj']['arc88_cancel_ownership_request()void'] | Arc1594Args['tuple']['arc88_cancel_ownership_request()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1594ParamsFactory.arc88CancelOwnershipRequest(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Arc1594 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1594_set_halt(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1594SetHalt: (params: CallParams<Arc1594Args['obj']['arc1594_set_halt(uint64)void'] | Arc1594Args['tuple']['arc1594_set_halt(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc1594SetHalt(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1594_set_kyc(address,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1594SetKyc: (params: CallParams<Arc1594Args['obj']['arc1594_set_kyc(address,uint64)void'] | Arc1594Args['tuple']['arc1594_set_kyc(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc1594SetKyc(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1594_set_lockup(address,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1594SetLockup: (params: CallParams<Arc1594Args['obj']['arc1594_set_lockup(address,uint64)void'] | Arc1594Args['tuple']['arc1594_set_lockup(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc1594SetLockup(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1594_issue(address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1594Issue: (params: CallParams<Arc1594Args['obj']['arc1594_issue(address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1594_issue(address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc1594Issue(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1594_redeem(address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1594Redeem: (params: CallParams<Arc1594Args['obj']['arc1594_redeem(address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1594_redeem(address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc1594Redeem(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1594_validate_transfer(address,address,uint256,byte[])uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1594ValidateTransfer: (params: CallParams<Arc1594Args['obj']['arc1594_validate_transfer(address,address,uint256,byte[])uint64'] | Arc1594Args['tuple']['arc1594_validate_transfer(address,address,uint256,byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc1594ValidateTransfer(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_balance_of_partition(address,address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410BalanceOfPartition: (params: CallParams<Arc1594Args['obj']['arc1410_balance_of_partition(address,address)uint256'] | Arc1594Args['tuple']['arc1410_balance_of_partition(address,address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc1410BalanceOfPartition(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc200_transfer(address,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc200Transfer: (params: CallParams<Arc1594Args['obj']['arc200_transfer(address,uint256)bool'] | Arc1594Args['tuple']['arc200_transfer(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc200Transfer(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_transfer_by_partition(address,address,uint256,byte[])address` ABI method.
     *
     * Transfer an amount of tokens from partition to receiver. Sender must be msg.sender or authorized operator.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410TransferByPartition: (params: CallParams<Arc1594Args['obj']['arc1410_transfer_by_partition(address,address,uint256,byte[])address'] | Arc1594Args['tuple']['arc1410_transfer_by_partition(address,address,uint256,byte[])address']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc1410TransferByPartition(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_partitions_of(address,uint64)address[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410PartitionsOf: (params: CallParams<Arc1594Args['obj']['arc1410_partitions_of(address,uint64)address[]'] | Arc1594Args['tuple']['arc1410_partitions_of(address,uint64)address[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc1410PartitionsOf(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_is_operator(address,address,address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410IsOperator: (params: CallParams<Arc1594Args['obj']['arc1410_is_operator(address,address,address)bool'] | Arc1594Args['tuple']['arc1410_is_operator(address,address,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc1410IsOperator(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_authorize_operator(address,address,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410AuthorizeOperator: (params: CallParams<Arc1594Args['obj']['arc1410_authorize_operator(address,address,address)void'] | Arc1594Args['tuple']['arc1410_authorize_operator(address,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc1410AuthorizeOperator(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_revoke_operator(address,address,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410RevokeOperator: (params: CallParams<Arc1594Args['obj']['arc1410_revoke_operator(address,address,address)void'] | Arc1594Args['tuple']['arc1410_revoke_operator(address,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc1410RevokeOperator(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410OperatorTransferByPartition: (params: CallParams<Arc1594Args['obj']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address'] | Arc1594Args['tuple']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc1410OperatorTransferByPartition(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410CanTransferByPartition: (params: CallParams<Arc1594Args['obj']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)'] | Arc1594Args['tuple']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc1410CanTransferByPartition(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_authorize_operator_by_portion(address,address,address,uint256)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410AuthorizeOperatorByPortion: (params: CallParams<Arc1594Args['obj']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void'] | Arc1594Args['tuple']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc1410AuthorizeOperatorByPortion(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_is_operator_by_portion(address,address,address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410IsOperatorByPortion: (params: CallParams<Arc1594Args['obj']['arc1410_is_operator_by_portion(address,address,address)bool'] | Arc1594Args['tuple']['arc1410_is_operator_by_portion(address,address,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc1410IsOperatorByPortion(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_issue_by_partition(address,address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410IssueByPartition: (params: CallParams<Arc1594Args['obj']['arc1410_issue_by_partition(address,address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1410_issue_by_partition(address,address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc1410IssueByPartition(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_redeem_by_partition(address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410RedeemByPartition: (params: CallParams<Arc1594Args['obj']['arc1410_redeem_by_partition(address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1410_redeem_by_partition(address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc1410RedeemByPartition(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410OperatorRedeemByPartition: (params: CallParams<Arc1594Args['obj']['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc1410OperatorRedeemByPartition(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `bootstrap(byte[],byte[],uint8,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrap: (params: CallParams<Arc1594Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool'] | Arc1594Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc200_name()byte[32]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the name of the token
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The name of the token
     */
    arc200Name: (params: CallParams<Arc1594Args['obj']['arc200_name()byte[32]'] | Arc1594Args['tuple']['arc200_name()byte[32]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc200Name(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc200_symbol()byte[8]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the symbol of the token
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The symbol of the token
     */
    arc200Symbol: (params: CallParams<Arc1594Args['obj']['arc200_symbol()byte[8]'] | Arc1594Args['tuple']['arc200_symbol()byte[8]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc200Symbol(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc200_decimals()uint8` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the decimals of the token
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The decimals of the token
     */
    arc200Decimals: (params: CallParams<Arc1594Args['obj']['arc200_decimals()uint8'] | Arc1594Args['tuple']['arc200_decimals()uint8']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc200Decimals(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc200_totalSupply()uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the total supply of the token
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The total supply of the token
     */
    arc200TotalSupply: (params: CallParams<Arc1594Args['obj']['arc200_totalSupply()uint256'] | Arc1594Args['tuple']['arc200_totalSupply()uint256']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc200TotalSupply(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc200_balanceOf(address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the current balance of the owner of the token
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The current balance of the holder of the token
     */
    arc200BalanceOf: (params: CallParams<Arc1594Args['obj']['arc200_balanceOf(address)uint256'] | Arc1594Args['tuple']['arc200_balanceOf(address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc200BalanceOf(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc200_transferFrom(address,address,uint256)bool` ABI method.
     *
     * Transfers tokens from source to destination as approved spender
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Success
     */
    arc200TransferFrom: (params: CallParams<Arc1594Args['obj']['arc200_transferFrom(address,address,uint256)bool'] | Arc1594Args['tuple']['arc200_transferFrom(address,address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc200TransferFrom(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc200_approve(address,uint256)bool` ABI method.
     *
     * Approve spender for a token
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Success
     */
    arc200Approve: (params: CallParams<Arc1594Args['obj']['arc200_approve(address,uint256)bool'] | Arc1594Args['tuple']['arc200_approve(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc200Approve(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc200_allowance(address,address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the current allowance of the spender of the tokens of the owner
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The remaining allowance
     */
    arc200Allowance: (params: CallParams<Arc1594Args['obj']['arc200_allowance(address,address)uint256'] | Arc1594Args['tuple']['arc200_allowance(address,address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc200Allowance(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc88_owner()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88Owner: (params: CallParams<Arc1594Args['obj']['arc88_owner()address'] | Arc1594Args['tuple']['arc88_owner()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc88Owner(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc88_is_owner(address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88IsOwner: (params: CallParams<Arc1594Args['obj']['arc88_is_owner(address)bool'] | Arc1594Args['tuple']['arc88_is_owner(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc88IsOwner(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc88_initialize_owner(address)void` ABI method.
     *
     * Explicit initialization override (creation group recommended). Fails if already initialized.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88InitializeOwner: (params: CallParams<Arc1594Args['obj']['arc88_initialize_owner(address)void'] | Arc1594Args['tuple']['arc88_initialize_owner(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc88InitializeOwner(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc88_transfer_ownership(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88TransferOwnership: (params: CallParams<Arc1594Args['obj']['arc88_transfer_ownership(address)void'] | Arc1594Args['tuple']['arc88_transfer_ownership(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc88TransferOwnership(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc88_renounce_ownership()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88RenounceOwnership: (params: CallParams<Arc1594Args['obj']['arc88_renounce_ownership()void'] | Arc1594Args['tuple']['arc88_renounce_ownership()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc88RenounceOwnership(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc88_transfer_ownership_request(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88TransferOwnershipRequest: (params: CallParams<Arc1594Args['obj']['arc88_transfer_ownership_request(address)void'] | Arc1594Args['tuple']['arc88_transfer_ownership_request(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc88TransferOwnershipRequest(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc88_accept_ownership()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88AcceptOwnership: (params: CallParams<Arc1594Args['obj']['arc88_accept_ownership()void'] | Arc1594Args['tuple']['arc88_accept_ownership()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc88AcceptOwnership(params))
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc88_cancel_ownership_request()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88CancelOwnershipRequest: (params: CallParams<Arc1594Args['obj']['arc88_cancel_ownership_request()void'] | Arc1594Args['tuple']['arc88_cancel_ownership_request()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1594ParamsFactory.arc88CancelOwnershipRequest(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Arc1594 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1594_set_halt(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1594SetHalt: async (params: CallParams<Arc1594Args['obj']['arc1594_set_halt(uint64)void'] | Arc1594Args['tuple']['arc1594_set_halt(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc1594SetHalt(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc1594_set_halt(uint64)void'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1594_set_kyc(address,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1594SetKyc: async (params: CallParams<Arc1594Args['obj']['arc1594_set_kyc(address,uint64)void'] | Arc1594Args['tuple']['arc1594_set_kyc(address,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc1594SetKyc(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc1594_set_kyc(address,uint64)void'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1594_set_lockup(address,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1594SetLockup: async (params: CallParams<Arc1594Args['obj']['arc1594_set_lockup(address,uint64)void'] | Arc1594Args['tuple']['arc1594_set_lockup(address,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc1594SetLockup(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc1594_set_lockup(address,uint64)void'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1594_issue(address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1594Issue: async (params: CallParams<Arc1594Args['obj']['arc1594_issue(address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1594_issue(address,uint256,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc1594Issue(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc1594_issue(address,uint256,byte[])void'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1594_redeem(address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1594Redeem: async (params: CallParams<Arc1594Args['obj']['arc1594_redeem(address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1594_redeem(address,uint256,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc1594Redeem(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc1594_redeem(address,uint256,byte[])void'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1594_validate_transfer(address,address,uint256,byte[])uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1594ValidateTransfer: async (params: CallParams<Arc1594Args['obj']['arc1594_validate_transfer(address,address,uint256,byte[])uint64'] | Arc1594Args['tuple']['arc1594_validate_transfer(address,address,uint256,byte[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc1594ValidateTransfer(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc1594_validate_transfer(address,address,uint256,byte[])uint64'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_balance_of_partition(address,address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410BalanceOfPartition: async (params: CallParams<Arc1594Args['obj']['arc1410_balance_of_partition(address,address)uint256'] | Arc1594Args['tuple']['arc1410_balance_of_partition(address,address)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc1410BalanceOfPartition(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc1410_balance_of_partition(address,address)uint256'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc200_transfer(address,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc200Transfer: async (params: CallParams<Arc1594Args['obj']['arc200_transfer(address,uint256)bool'] | Arc1594Args['tuple']['arc200_transfer(address,uint256)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc200Transfer(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc200_transfer(address,uint256)bool'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_transfer_by_partition(address,address,uint256,byte[])address` ABI method.
     *
     * Transfer an amount of tokens from partition to receiver. Sender must be msg.sender or authorized operator.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410TransferByPartition: async (params: CallParams<Arc1594Args['obj']['arc1410_transfer_by_partition(address,address,uint256,byte[])address'] | Arc1594Args['tuple']['arc1410_transfer_by_partition(address,address,uint256,byte[])address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc1410TransferByPartition(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc1410_transfer_by_partition(address,address,uint256,byte[])address'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_partitions_of(address,uint64)address[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410PartitionsOf: async (params: CallParams<Arc1594Args['obj']['arc1410_partitions_of(address,uint64)address[]'] | Arc1594Args['tuple']['arc1410_partitions_of(address,uint64)address[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc1410PartitionsOf(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc1410_partitions_of(address,uint64)address[]'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_is_operator(address,address,address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410IsOperator: async (params: CallParams<Arc1594Args['obj']['arc1410_is_operator(address,address,address)bool'] | Arc1594Args['tuple']['arc1410_is_operator(address,address,address)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc1410IsOperator(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc1410_is_operator(address,address,address)bool'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_authorize_operator(address,address,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410AuthorizeOperator: async (params: CallParams<Arc1594Args['obj']['arc1410_authorize_operator(address,address,address)void'] | Arc1594Args['tuple']['arc1410_authorize_operator(address,address,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc1410AuthorizeOperator(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc1410_authorize_operator(address,address,address)void'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_revoke_operator(address,address,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410RevokeOperator: async (params: CallParams<Arc1594Args['obj']['arc1410_revoke_operator(address,address,address)void'] | Arc1594Args['tuple']['arc1410_revoke_operator(address,address,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc1410RevokeOperator(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc1410_revoke_operator(address,address,address)void'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410OperatorTransferByPartition: async (params: CallParams<Arc1594Args['obj']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address'] | Arc1594Args['tuple']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc1410OperatorTransferByPartition(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410CanTransferByPartition: async (params: CallParams<Arc1594Args['obj']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)'] | Arc1594Args['tuple']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc1410CanTransferByPartition(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_authorize_operator_by_portion(address,address,address,uint256)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410AuthorizeOperatorByPortion: async (params: CallParams<Arc1594Args['obj']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void'] | Arc1594Args['tuple']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc1410AuthorizeOperatorByPortion(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc1410_authorize_operator_by_portion(address,address,address,uint256)void'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_is_operator_by_portion(address,address,address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410IsOperatorByPortion: async (params: CallParams<Arc1594Args['obj']['arc1410_is_operator_by_portion(address,address,address)bool'] | Arc1594Args['tuple']['arc1410_is_operator_by_portion(address,address,address)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc1410IsOperatorByPortion(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc1410_is_operator_by_portion(address,address,address)bool'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_issue_by_partition(address,address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410IssueByPartition: async (params: CallParams<Arc1594Args['obj']['arc1410_issue_by_partition(address,address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1410_issue_by_partition(address,address,uint256,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc1410IssueByPartition(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc1410_issue_by_partition(address,address,uint256,byte[])void'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_redeem_by_partition(address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410RedeemByPartition: async (params: CallParams<Arc1594Args['obj']['arc1410_redeem_by_partition(address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1410_redeem_by_partition(address,uint256,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc1410RedeemByPartition(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc1410_redeem_by_partition(address,uint256,byte[])void'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410OperatorRedeemByPartition: async (params: CallParams<Arc1594Args['obj']['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc1410OperatorRedeemByPartition(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `bootstrap(byte[],byte[],uint8,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrap: async (params: CallParams<Arc1594Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool'] | Arc1594Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.bootstrap(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['bootstrap(byte[],byte[],uint8,uint256)bool'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc200_name()byte[32]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the name of the token
     *
     * @param params The params for the smart contract call
     * @returns The call result: The name of the token
     */
    arc200Name: async (params: CallParams<Arc1594Args['obj']['arc200_name()byte[32]'] | Arc1594Args['tuple']['arc200_name()byte[32]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc200Name(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc200_name()byte[32]'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc200_symbol()byte[8]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the symbol of the token
     *
     * @param params The params for the smart contract call
     * @returns The call result: The symbol of the token
     */
    arc200Symbol: async (params: CallParams<Arc1594Args['obj']['arc200_symbol()byte[8]'] | Arc1594Args['tuple']['arc200_symbol()byte[8]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc200Symbol(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc200_symbol()byte[8]'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc200_decimals()uint8` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the decimals of the token
     *
     * @param params The params for the smart contract call
     * @returns The call result: The decimals of the token
     */
    arc200Decimals: async (params: CallParams<Arc1594Args['obj']['arc200_decimals()uint8'] | Arc1594Args['tuple']['arc200_decimals()uint8']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc200Decimals(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc200_decimals()uint8'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc200_totalSupply()uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the total supply of the token
     *
     * @param params The params for the smart contract call
     * @returns The call result: The total supply of the token
     */
    arc200TotalSupply: async (params: CallParams<Arc1594Args['obj']['arc200_totalSupply()uint256'] | Arc1594Args['tuple']['arc200_totalSupply()uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc200TotalSupply(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc200_totalSupply()uint256'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc200_balanceOf(address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the current balance of the owner of the token
     *
     * @param params The params for the smart contract call
     * @returns The call result: The current balance of the holder of the token
     */
    arc200BalanceOf: async (params: CallParams<Arc1594Args['obj']['arc200_balanceOf(address)uint256'] | Arc1594Args['tuple']['arc200_balanceOf(address)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc200BalanceOf(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc200_balanceOf(address)uint256'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc200_transferFrom(address,address,uint256)bool` ABI method.
     *
     * Transfers tokens from source to destination as approved spender
     *
     * @param params The params for the smart contract call
     * @returns The call result: Success
     */
    arc200TransferFrom: async (params: CallParams<Arc1594Args['obj']['arc200_transferFrom(address,address,uint256)bool'] | Arc1594Args['tuple']['arc200_transferFrom(address,address,uint256)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc200TransferFrom(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc200_transferFrom(address,address,uint256)bool'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc200_approve(address,uint256)bool` ABI method.
     *
     * Approve spender for a token
     *
     * @param params The params for the smart contract call
     * @returns The call result: Success
     */
    arc200Approve: async (params: CallParams<Arc1594Args['obj']['arc200_approve(address,uint256)bool'] | Arc1594Args['tuple']['arc200_approve(address,uint256)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc200Approve(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc200_approve(address,uint256)bool'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc200_allowance(address,address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the current allowance of the spender of the tokens of the owner
     *
     * @param params The params for the smart contract call
     * @returns The call result: The remaining allowance
     */
    arc200Allowance: async (params: CallParams<Arc1594Args['obj']['arc200_allowance(address,address)uint256'] | Arc1594Args['tuple']['arc200_allowance(address,address)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc200Allowance(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc200_allowance(address,address)uint256'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc88_owner()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88Owner: async (params: CallParams<Arc1594Args['obj']['arc88_owner()address'] | Arc1594Args['tuple']['arc88_owner()address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc88Owner(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc88_owner()address'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc88_is_owner(address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88IsOwner: async (params: CallParams<Arc1594Args['obj']['arc88_is_owner(address)bool'] | Arc1594Args['tuple']['arc88_is_owner(address)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc88IsOwner(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc88_is_owner(address)bool'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc88_initialize_owner(address)void` ABI method.
     *
     * Explicit initialization override (creation group recommended). Fails if already initialized.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88InitializeOwner: async (params: CallParams<Arc1594Args['obj']['arc88_initialize_owner(address)void'] | Arc1594Args['tuple']['arc88_initialize_owner(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc88InitializeOwner(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc88_initialize_owner(address)void'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc88_transfer_ownership(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88TransferOwnership: async (params: CallParams<Arc1594Args['obj']['arc88_transfer_ownership(address)void'] | Arc1594Args['tuple']['arc88_transfer_ownership(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc88TransferOwnership(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc88_transfer_ownership(address)void'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc88_renounce_ownership()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88RenounceOwnership: async (params: CallParams<Arc1594Args['obj']['arc88_renounce_ownership()void'] | Arc1594Args['tuple']['arc88_renounce_ownership()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc88RenounceOwnership(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc88_renounce_ownership()void'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc88_transfer_ownership_request(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88TransferOwnershipRequest: async (params: CallParams<Arc1594Args['obj']['arc88_transfer_ownership_request(address)void'] | Arc1594Args['tuple']['arc88_transfer_ownership_request(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc88TransferOwnershipRequest(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc88_transfer_ownership_request(address)void'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc88_accept_ownership()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88AcceptOwnership: async (params: CallParams<Arc1594Args['obj']['arc88_accept_ownership()void'] | Arc1594Args['tuple']['arc88_accept_ownership()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc88AcceptOwnership(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc88_accept_ownership()void'])}
    },

    /**
     * Makes a call to the Arc1594 smart contract using the `arc88_cancel_ownership_request()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88CancelOwnershipRequest: async (params: CallParams<Arc1594Args['obj']['arc88_cancel_ownership_request()void'] | Arc1594Args['tuple']['arc88_cancel_ownership_request()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1594ParamsFactory.arc88CancelOwnershipRequest(params))
      return {...result, return: result.return as unknown as (undefined | Arc1594Returns['arc88_cancel_ownership_request()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Arc1594Client(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the Arc1594 smart contract using the `arc1594_validate_transfer(address,address,uint256,byte[])uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc1594ValidateTransfer(params: CallParams<Arc1594Args['obj']['arc1594_validate_transfer(address,address,uint256,byte[])uint64'] | Arc1594Args['tuple']['arc1594_validate_transfer(address,address,uint256,byte[])uint64']>) {
    const result = await this.appClient.send.call(Arc1594ParamsFactory.arc1594ValidateTransfer(params))
    return result.return as unknown as Arc1594Returns['arc1594_validate_transfer(address,address,uint256,byte[])uint64']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1594 smart contract using the `arc1410_balance_of_partition(address,address)uint256` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc1410BalanceOfPartition(params: CallParams<Arc1594Args['obj']['arc1410_balance_of_partition(address,address)uint256'] | Arc1594Args['tuple']['arc1410_balance_of_partition(address,address)uint256']>) {
    const result = await this.appClient.send.call(Arc1594ParamsFactory.arc1410BalanceOfPartition(params))
    return result.return as unknown as Arc1594Returns['arc1410_balance_of_partition(address,address)uint256']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1594 smart contract using the `arc1410_is_operator(address,address,address)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc1410IsOperator(params: CallParams<Arc1594Args['obj']['arc1410_is_operator(address,address,address)bool'] | Arc1594Args['tuple']['arc1410_is_operator(address,address,address)bool']>) {
    const result = await this.appClient.send.call(Arc1594ParamsFactory.arc1410IsOperator(params))
    return result.return as unknown as Arc1594Returns['arc1410_is_operator(address,address,address)bool']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1594 smart contract using the `arc1410_is_operator_by_portion(address,address,address)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc1410IsOperatorByPortion(params: CallParams<Arc1594Args['obj']['arc1410_is_operator_by_portion(address,address,address)bool'] | Arc1594Args['tuple']['arc1410_is_operator_by_portion(address,address,address)bool']>) {
    const result = await this.appClient.send.call(Arc1594ParamsFactory.arc1410IsOperatorByPortion(params))
    return result.return as unknown as Arc1594Returns['arc1410_is_operator_by_portion(address,address,address)bool']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1594 smart contract using the `arc200_name()byte[32]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the name of the token
   *
   * @param params The params for the smart contract call
   * @returns The call result: The name of the token
   */
  async arc200Name(params: CallParams<Arc1594Args['obj']['arc200_name()byte[32]'] | Arc1594Args['tuple']['arc200_name()byte[32]']> = {args: []}) {
    const result = await this.appClient.send.call(Arc1594ParamsFactory.arc200Name(params))
    return result.return as unknown as Arc1594Returns['arc200_name()byte[32]']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1594 smart contract using the `arc200_symbol()byte[8]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the symbol of the token
   *
   * @param params The params for the smart contract call
   * @returns The call result: The symbol of the token
   */
  async arc200Symbol(params: CallParams<Arc1594Args['obj']['arc200_symbol()byte[8]'] | Arc1594Args['tuple']['arc200_symbol()byte[8]']> = {args: []}) {
    const result = await this.appClient.send.call(Arc1594ParamsFactory.arc200Symbol(params))
    return result.return as unknown as Arc1594Returns['arc200_symbol()byte[8]']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1594 smart contract using the `arc200_decimals()uint8` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the decimals of the token
   *
   * @param params The params for the smart contract call
   * @returns The call result: The decimals of the token
   */
  async arc200Decimals(params: CallParams<Arc1594Args['obj']['arc200_decimals()uint8'] | Arc1594Args['tuple']['arc200_decimals()uint8']> = {args: []}) {
    const result = await this.appClient.send.call(Arc1594ParamsFactory.arc200Decimals(params))
    return result.return as unknown as Arc1594Returns['arc200_decimals()uint8']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1594 smart contract using the `arc200_totalSupply()uint256` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the total supply of the token
   *
   * @param params The params for the smart contract call
   * @returns The call result: The total supply of the token
   */
  async arc200TotalSupply(params: CallParams<Arc1594Args['obj']['arc200_totalSupply()uint256'] | Arc1594Args['tuple']['arc200_totalSupply()uint256']> = {args: []}) {
    const result = await this.appClient.send.call(Arc1594ParamsFactory.arc200TotalSupply(params))
    return result.return as unknown as Arc1594Returns['arc200_totalSupply()uint256']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1594 smart contract using the `arc200_balanceOf(address)uint256` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the current balance of the owner of the token
   *
   * @param params The params for the smart contract call
   * @returns The call result: The current balance of the holder of the token
   */
  async arc200BalanceOf(params: CallParams<Arc1594Args['obj']['arc200_balanceOf(address)uint256'] | Arc1594Args['tuple']['arc200_balanceOf(address)uint256']>) {
    const result = await this.appClient.send.call(Arc1594ParamsFactory.arc200BalanceOf(params))
    return result.return as unknown as Arc1594Returns['arc200_balanceOf(address)uint256']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1594 smart contract using the `arc200_allowance(address,address)uint256` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the current allowance of the spender of the tokens of the owner
   *
   * @param params The params for the smart contract call
   * @returns The call result: The remaining allowance
   */
  async arc200Allowance(params: CallParams<Arc1594Args['obj']['arc200_allowance(address,address)uint256'] | Arc1594Args['tuple']['arc200_allowance(address,address)uint256']>) {
    const result = await this.appClient.send.call(Arc1594ParamsFactory.arc200Allowance(params))
    return result.return as unknown as Arc1594Returns['arc200_allowance(address,address)uint256']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1594 smart contract using the `arc88_owner()address` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc88Owner(params: CallParams<Arc1594Args['obj']['arc88_owner()address'] | Arc1594Args['tuple']['arc88_owner()address']> = {args: []}) {
    const result = await this.appClient.send.call(Arc1594ParamsFactory.arc88Owner(params))
    return result.return as unknown as Arc1594Returns['arc88_owner()address']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1594 smart contract using the `arc88_is_owner(address)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc88IsOwner(params: CallParams<Arc1594Args['obj']['arc88_is_owner(address)bool'] | Arc1594Args['tuple']['arc88_is_owner(address)bool']>) {
    const result = await this.appClient.send.call(Arc1594ParamsFactory.arc88IsOwner(params))
    return result.return as unknown as Arc1594Returns['arc88_is_owner(address)bool']
  }

  /**
   * Methods to access state for the current Arc1594 app
   */
  state = {
    /**
     * Methods to access global state for the current Arc1594 app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          halt: result.halt,
          name: result.name,
          symbol: result.symbol,
          decimals: result.decimals,
          totalSupply: result.totalSupply,
          owner: result.owner,
          pendingOwner: result.pendingOwner,
          initialized: result.initialized,
        }
      },
      /**
       * Get the current value of the halt key in global state
       */
      halt: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("halt")) as bigint | undefined },
      /**
       * Get the current value of the name key in global state
       */
      name: async (): Promise<Uint8Array | undefined> => { return (await this.appClient.state.global.getValue("name")) as Uint8Array | undefined },
      /**
       * Get the current value of the symbol key in global state
       */
      symbol: async (): Promise<Uint8Array | undefined> => { return (await this.appClient.state.global.getValue("symbol")) as Uint8Array | undefined },
      /**
       * Get the current value of the decimals key in global state
       */
      decimals: async (): Promise<number | undefined> => { return (await this.appClient.state.global.getValue("decimals")) as number | undefined },
      /**
       * Get the current value of the totalSupply key in global state
       */
      totalSupply: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalSupply")) as bigint | undefined },
      /**
       * Get the current value of the owner key in global state
       */
      owner: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("owner")) as string | undefined },
      /**
       * Get the current value of the pendingOwner key in global state
       */
      pendingOwner: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("pendingOwner")) as string | undefined },
      /**
       * Get the current value of the initialized key in global state
       */
      initialized: async (): Promise<number | undefined> => { return (await this.appClient.state.global.getValue("initialized")) as number | undefined },
    },
    /**
     * Methods to access box state for the current Arc1594 app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the kyc map in box state
       */
      kyc: {
        /**
         * Get all current values of the kyc map in box state
         */
        getMap: async (): Promise<Map<string, bigint>> => { return (await this.appClient.state.box.getMap("kyc")) as Map<string, bigint> },
        /**
         * Get a current value of the kyc map by key from box state
         */
        value: async (key: string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("kyc", key) as bigint | undefined },
      },
      /**
       * Get values from the lockupUntil map in box state
       */
      lockupUntil: {
        /**
         * Get all current values of the lockupUntil map in box state
         */
        getMap: async (): Promise<Map<string, bigint>> => { return (await this.appClient.state.box.getMap("lockupUntil")) as Map<string, bigint> },
        /**
         * Get a current value of the lockupUntil map by key from box state
         */
        value: async (key: string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("lockupUntil", key) as bigint | undefined },
      },
      /**
       * Get values from the lastValidation map in box state
       */
      lastValidation: {
        /**
         * Get all current values of the lastValidation map in box state
         */
        getMap: async (): Promise<Map<Arc1594LastValidationKey, bigint>> => { return (await this.appClient.state.box.getMap("lastValidation")) as Map<Arc1594LastValidationKey, bigint> },
        /**
         * Get a current value of the lastValidation map by key from box state
         */
        value: async (key: Arc1594LastValidationKey): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("lastValidation", key) as bigint | undefined },
      },
      /**
       * Get values from the partitions map in box state
       */
      partitions: {
        /**
         * Get all current values of the partitions map in box state
         */
        getMap: async (): Promise<Map<Arc1410PartitionKey, bigint>> => { return (await this.appClient.state.box.getMap("partitions")) as Map<Arc1410PartitionKey, bigint> },
        /**
         * Get a current value of the partitions map by key from box state
         */
        value: async (key: Arc1410PartitionKey): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("partitions", key) as bigint | undefined },
      },
      /**
       * Get values from the holderPartitionsCurrentPage map in box state
       */
      holderPartitionsCurrentPage: {
        /**
         * Get all current values of the holderPartitionsCurrentPage map in box state
         */
        getMap: async (): Promise<Map<string, bigint>> => { return (await this.appClient.state.box.getMap("holderPartitionsCurrentPage")) as Map<string, bigint> },
        /**
         * Get a current value of the holderPartitionsCurrentPage map by key from box state
         */
        value: async (key: string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("holderPartitionsCurrentPage", key) as bigint | undefined },
      },
      /**
       * Get values from the holderPartitionsAddresses map in box state
       */
      holderPartitionsAddresses: {
        /**
         * Get all current values of the holderPartitionsAddresses map in box state
         */
        getMap: async (): Promise<Map<Arc1410HoldingPartitionsPaginatedKey, string[]>> => { return (await this.appClient.state.box.getMap("holderPartitionsAddresses")) as Map<Arc1410HoldingPartitionsPaginatedKey, string[]> },
        /**
         * Get a current value of the holderPartitionsAddresses map by key from box state
         */
        value: async (key: Arc1410HoldingPartitionsPaginatedKey): Promise<string[] | undefined> => { return await this.appClient.state.box.getMapValue("holderPartitionsAddresses", key) as string[] | undefined },
      },
      /**
       * Get values from the operators map in box state
       */
      operators: {
        /**
         * Get all current values of the operators map in box state
         */
        getMap: async (): Promise<Map<Arc1410OperatorKey, number>> => { return (await this.appClient.state.box.getMap("operators")) as Map<Arc1410OperatorKey, number> },
        /**
         * Get a current value of the operators map by key from box state
         */
        value: async (key: Arc1410OperatorKey): Promise<number | undefined> => { return await this.appClient.state.box.getMapValue("operators", key) as number | undefined },
      },
      /**
       * Get values from the operatorPortionAllowances map in box state
       */
      operatorPortionAllowances: {
        /**
         * Get all current values of the operatorPortionAllowances map in box state
         */
        getMap: async (): Promise<Map<Arc1410OperatorPortionKey, bigint>> => { return (await this.appClient.state.box.getMap("operatorPortionAllowances")) as Map<Arc1410OperatorPortionKey, bigint> },
        /**
         * Get a current value of the operatorPortionAllowances map by key from box state
         */
        value: async (key: Arc1410OperatorPortionKey): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("operatorPortionAllowances", key) as bigint | undefined },
      },
      /**
       * Get values from the balances map in box state
       */
      balances: {
        /**
         * Get all current values of the balances map in box state
         */
        getMap: async (): Promise<Map<string, bigint>> => { return (await this.appClient.state.box.getMap("balances")) as Map<string, bigint> },
        /**
         * Get a current value of the balances map by key from box state
         */
        value: async (key: string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("balances", key) as bigint | undefined },
      },
      /**
       * Get values from the approvals map in box state
       */
      approvals: {
        /**
         * Get all current values of the approvals map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, ApprovalStruct>> => { return (await this.appClient.state.box.getMap("approvals")) as Map<Uint8Array, ApprovalStruct> },
        /**
         * Get a current value of the approvals map by key from box state
         */
        value: async (key: Uint8Array): Promise<ApprovalStruct | undefined> => { return await this.appClient.state.box.getMapValue("approvals", key) as ApprovalStruct | undefined },
      },
    },
  }

  public newGroup(): Arc1594Composer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a arc1594_set_halt(uint64)void method call against the Arc1594 contract
       */
      arc1594SetHalt(params: CallParams<Arc1594Args['obj']['arc1594_set_halt(uint64)void'] | Arc1594Args['tuple']['arc1594_set_halt(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1594SetHalt(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1594_set_kyc(address,uint64)void method call against the Arc1594 contract
       */
      arc1594SetKyc(params: CallParams<Arc1594Args['obj']['arc1594_set_kyc(address,uint64)void'] | Arc1594Args['tuple']['arc1594_set_kyc(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1594SetKyc(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1594_set_lockup(address,uint64)void method call against the Arc1594 contract
       */
      arc1594SetLockup(params: CallParams<Arc1594Args['obj']['arc1594_set_lockup(address,uint64)void'] | Arc1594Args['tuple']['arc1594_set_lockup(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1594SetLockup(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1594_issue(address,uint256,byte[])void method call against the Arc1594 contract
       */
      arc1594Issue(params: CallParams<Arc1594Args['obj']['arc1594_issue(address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1594_issue(address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1594Issue(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1594_redeem(address,uint256,byte[])void method call against the Arc1594 contract
       */
      arc1594Redeem(params: CallParams<Arc1594Args['obj']['arc1594_redeem(address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1594_redeem(address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1594Redeem(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1594_validate_transfer(address,address,uint256,byte[])uint64 method call against the Arc1594 contract
       */
      arc1594ValidateTransfer(params: CallParams<Arc1594Args['obj']['arc1594_validate_transfer(address,address,uint256,byte[])uint64'] | Arc1594Args['tuple']['arc1594_validate_transfer(address,address,uint256,byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1594ValidateTransfer(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1594_validate_transfer(address,address,uint256,byte[])uint64', v))
        return this
      },
      /**
       * Add a arc1410_balance_of_partition(address,address)uint256 method call against the Arc1594 contract
       */
      arc1410BalanceOfPartition(params: CallParams<Arc1594Args['obj']['arc1410_balance_of_partition(address,address)uint256'] | Arc1594Args['tuple']['arc1410_balance_of_partition(address,address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410BalanceOfPartition(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1410_balance_of_partition(address,address)uint256', v))
        return this
      },
      /**
       * Add a arc200_transfer(address,uint256)bool method call against the Arc1594 contract
       */
      arc200Transfer(params: CallParams<Arc1594Args['obj']['arc200_transfer(address,uint256)bool'] | Arc1594Args['tuple']['arc200_transfer(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Transfer(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_transfer(address,uint256)bool', v))
        return this
      },
      /**
       * Add a arc1410_transfer_by_partition(address,address,uint256,byte[])address method call against the Arc1594 contract
       */
      arc1410TransferByPartition(params: CallParams<Arc1594Args['obj']['arc1410_transfer_by_partition(address,address,uint256,byte[])address'] | Arc1594Args['tuple']['arc1410_transfer_by_partition(address,address,uint256,byte[])address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410TransferByPartition(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1410_transfer_by_partition(address,address,uint256,byte[])address', v))
        return this
      },
      /**
       * Add a arc1410_partitions_of(address,uint64)address[] method call against the Arc1594 contract
       */
      arc1410PartitionsOf(params: CallParams<Arc1594Args['obj']['arc1410_partitions_of(address,uint64)address[]'] | Arc1594Args['tuple']['arc1410_partitions_of(address,uint64)address[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410PartitionsOf(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1410_partitions_of(address,uint64)address[]', v))
        return this
      },
      /**
       * Add a arc1410_is_operator(address,address,address)bool method call against the Arc1594 contract
       */
      arc1410IsOperator(params: CallParams<Arc1594Args['obj']['arc1410_is_operator(address,address,address)bool'] | Arc1594Args['tuple']['arc1410_is_operator(address,address,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410IsOperator(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1410_is_operator(address,address,address)bool', v))
        return this
      },
      /**
       * Add a arc1410_authorize_operator(address,address,address)void method call against the Arc1594 contract
       */
      arc1410AuthorizeOperator(params: CallParams<Arc1594Args['obj']['arc1410_authorize_operator(address,address,address)void'] | Arc1594Args['tuple']['arc1410_authorize_operator(address,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410AuthorizeOperator(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1410_revoke_operator(address,address,address)void method call against the Arc1594 contract
       */
      arc1410RevokeOperator(params: CallParams<Arc1594Args['obj']['arc1410_revoke_operator(address,address,address)void'] | Arc1594Args['tuple']['arc1410_revoke_operator(address,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410RevokeOperator(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address method call against the Arc1594 contract
       */
      arc1410OperatorTransferByPartition(params: CallParams<Arc1594Args['obj']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address'] | Arc1594Args['tuple']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410OperatorTransferByPartition(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address', v))
        return this
      },
      /**
       * Add a arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address) method call against the Arc1594 contract
       */
      arc1410CanTransferByPartition(params: CallParams<Arc1594Args['obj']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)'] | Arc1594Args['tuple']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410CanTransferByPartition(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)', v))
        return this
      },
      /**
       * Add a arc1410_authorize_operator_by_portion(address,address,address,uint256)void method call against the Arc1594 contract
       */
      arc1410AuthorizeOperatorByPortion(params: CallParams<Arc1594Args['obj']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void'] | Arc1594Args['tuple']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410AuthorizeOperatorByPortion(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1410_is_operator_by_portion(address,address,address)bool method call against the Arc1594 contract
       */
      arc1410IsOperatorByPortion(params: CallParams<Arc1594Args['obj']['arc1410_is_operator_by_portion(address,address,address)bool'] | Arc1594Args['tuple']['arc1410_is_operator_by_portion(address,address,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410IsOperatorByPortion(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1410_is_operator_by_portion(address,address,address)bool', v))
        return this
      },
      /**
       * Add a arc1410_issue_by_partition(address,address,uint256,byte[])void method call against the Arc1594 contract
       */
      arc1410IssueByPartition(params: CallParams<Arc1594Args['obj']['arc1410_issue_by_partition(address,address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1410_issue_by_partition(address,address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410IssueByPartition(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1410_redeem_by_partition(address,uint256,byte[])void method call against the Arc1594 contract
       */
      arc1410RedeemByPartition(params: CallParams<Arc1594Args['obj']['arc1410_redeem_by_partition(address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1410_redeem_by_partition(address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410RedeemByPartition(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void method call against the Arc1594 contract
       */
      arc1410OperatorRedeemByPartition(params: CallParams<Arc1594Args['obj']['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410OperatorRedeemByPartition(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a bootstrap(byte[],byte[],uint8,uint256)bool method call against the Arc1594 contract
       */
      bootstrap(params: CallParams<Arc1594Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool'] | Arc1594Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrap(params)))
        resultMappers.push((v) => client.decodeReturnValue('bootstrap(byte[],byte[],uint8,uint256)bool', v))
        return this
      },
      /**
       * Add a arc200_name()byte[32] method call against the Arc1594 contract
       */
      arc200Name(params: CallParams<Arc1594Args['obj']['arc200_name()byte[32]'] | Arc1594Args['tuple']['arc200_name()byte[32]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Name(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_name()byte[32]', v))
        return this
      },
      /**
       * Add a arc200_symbol()byte[8] method call against the Arc1594 contract
       */
      arc200Symbol(params: CallParams<Arc1594Args['obj']['arc200_symbol()byte[8]'] | Arc1594Args['tuple']['arc200_symbol()byte[8]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Symbol(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_symbol()byte[8]', v))
        return this
      },
      /**
       * Add a arc200_decimals()uint8 method call against the Arc1594 contract
       */
      arc200Decimals(params: CallParams<Arc1594Args['obj']['arc200_decimals()uint8'] | Arc1594Args['tuple']['arc200_decimals()uint8']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Decimals(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_decimals()uint8', v))
        return this
      },
      /**
       * Add a arc200_totalSupply()uint256 method call against the Arc1594 contract
       */
      arc200TotalSupply(params: CallParams<Arc1594Args['obj']['arc200_totalSupply()uint256'] | Arc1594Args['tuple']['arc200_totalSupply()uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200TotalSupply(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_totalSupply()uint256', v))
        return this
      },
      /**
       * Add a arc200_balanceOf(address)uint256 method call against the Arc1594 contract
       */
      arc200BalanceOf(params: CallParams<Arc1594Args['obj']['arc200_balanceOf(address)uint256'] | Arc1594Args['tuple']['arc200_balanceOf(address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200BalanceOf(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_balanceOf(address)uint256', v))
        return this
      },
      /**
       * Add a arc200_transferFrom(address,address,uint256)bool method call against the Arc1594 contract
       */
      arc200TransferFrom(params: CallParams<Arc1594Args['obj']['arc200_transferFrom(address,address,uint256)bool'] | Arc1594Args['tuple']['arc200_transferFrom(address,address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200TransferFrom(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_transferFrom(address,address,uint256)bool', v))
        return this
      },
      /**
       * Add a arc200_approve(address,uint256)bool method call against the Arc1594 contract
       */
      arc200Approve(params: CallParams<Arc1594Args['obj']['arc200_approve(address,uint256)bool'] | Arc1594Args['tuple']['arc200_approve(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Approve(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_approve(address,uint256)bool', v))
        return this
      },
      /**
       * Add a arc200_allowance(address,address)uint256 method call against the Arc1594 contract
       */
      arc200Allowance(params: CallParams<Arc1594Args['obj']['arc200_allowance(address,address)uint256'] | Arc1594Args['tuple']['arc200_allowance(address,address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Allowance(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_allowance(address,address)uint256', v))
        return this
      },
      /**
       * Add a arc88_owner()address method call against the Arc1594 contract
       */
      arc88Owner(params: CallParams<Arc1594Args['obj']['arc88_owner()address'] | Arc1594Args['tuple']['arc88_owner()address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88Owner(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc88_owner()address', v))
        return this
      },
      /**
       * Add a arc88_is_owner(address)bool method call against the Arc1594 contract
       */
      arc88IsOwner(params: CallParams<Arc1594Args['obj']['arc88_is_owner(address)bool'] | Arc1594Args['tuple']['arc88_is_owner(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88IsOwner(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc88_is_owner(address)bool', v))
        return this
      },
      /**
       * Add a arc88_initialize_owner(address)void method call against the Arc1594 contract
       */
      arc88InitializeOwner(params: CallParams<Arc1594Args['obj']['arc88_initialize_owner(address)void'] | Arc1594Args['tuple']['arc88_initialize_owner(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88InitializeOwner(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc88_transfer_ownership(address)void method call against the Arc1594 contract
       */
      arc88TransferOwnership(params: CallParams<Arc1594Args['obj']['arc88_transfer_ownership(address)void'] | Arc1594Args['tuple']['arc88_transfer_ownership(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88TransferOwnership(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc88_renounce_ownership()void method call against the Arc1594 contract
       */
      arc88RenounceOwnership(params: CallParams<Arc1594Args['obj']['arc88_renounce_ownership()void'] | Arc1594Args['tuple']['arc88_renounce_ownership()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88RenounceOwnership(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc88_transfer_ownership_request(address)void method call against the Arc1594 contract
       */
      arc88TransferOwnershipRequest(params: CallParams<Arc1594Args['obj']['arc88_transfer_ownership_request(address)void'] | Arc1594Args['tuple']['arc88_transfer_ownership_request(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88TransferOwnershipRequest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc88_accept_ownership()void method call against the Arc1594 contract
       */
      arc88AcceptOwnership(params: CallParams<Arc1594Args['obj']['arc88_accept_ownership()void'] | Arc1594Args['tuple']['arc88_accept_ownership()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88AcceptOwnership(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc88_cancel_ownership_request()void method call against the Arc1594 contract
       */
      arc88CancelOwnershipRequest(params: CallParams<Arc1594Args['obj']['arc88_cancel_ownership_request()void'] | Arc1594Args['tuple']['arc88_cancel_ownership_request()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88CancelOwnershipRequest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the Arc1594 contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as Arc1594Composer
  }
}
export type Arc1594Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the arc1594_set_halt(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1594SetHalt(params?: CallParams<Arc1594Args['obj']['arc1594_set_halt(uint64)void'] | Arc1594Args['tuple']['arc1594_set_halt(uint64)void']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc1594_set_halt(uint64)void'] | undefined]>

  /**
   * Calls the arc1594_set_kyc(address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1594SetKyc(params?: CallParams<Arc1594Args['obj']['arc1594_set_kyc(address,uint64)void'] | Arc1594Args['tuple']['arc1594_set_kyc(address,uint64)void']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc1594_set_kyc(address,uint64)void'] | undefined]>

  /**
   * Calls the arc1594_set_lockup(address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1594SetLockup(params?: CallParams<Arc1594Args['obj']['arc1594_set_lockup(address,uint64)void'] | Arc1594Args['tuple']['arc1594_set_lockup(address,uint64)void']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc1594_set_lockup(address,uint64)void'] | undefined]>

  /**
   * Calls the arc1594_issue(address,uint256,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1594Issue(params?: CallParams<Arc1594Args['obj']['arc1594_issue(address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1594_issue(address,uint256,byte[])void']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc1594_issue(address,uint256,byte[])void'] | undefined]>

  /**
   * Calls the arc1594_redeem(address,uint256,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1594Redeem(params?: CallParams<Arc1594Args['obj']['arc1594_redeem(address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1594_redeem(address,uint256,byte[])void']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc1594_redeem(address,uint256,byte[])void'] | undefined]>

  /**
   * Calls the arc1594_validate_transfer(address,address,uint256,byte[])uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1594ValidateTransfer(params?: CallParams<Arc1594Args['obj']['arc1594_validate_transfer(address,address,uint256,byte[])uint64'] | Arc1594Args['tuple']['arc1594_validate_transfer(address,address,uint256,byte[])uint64']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc1594_validate_transfer(address,address,uint256,byte[])uint64'] | undefined]>

  /**
   * Calls the arc1410_balance_of_partition(address,address)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410BalanceOfPartition(params?: CallParams<Arc1594Args['obj']['arc1410_balance_of_partition(address,address)uint256'] | Arc1594Args['tuple']['arc1410_balance_of_partition(address,address)uint256']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc1410_balance_of_partition(address,address)uint256'] | undefined]>

  /**
   * Calls the arc200_transfer(address,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Transfer(params?: CallParams<Arc1594Args['obj']['arc200_transfer(address,uint256)bool'] | Arc1594Args['tuple']['arc200_transfer(address,uint256)bool']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc200_transfer(address,uint256)bool'] | undefined]>

  /**
   * Calls the arc1410_transfer_by_partition(address,address,uint256,byte[])address ABI method.
   *
   * Transfer an amount of tokens from partition to receiver. Sender must be msg.sender or authorized operator.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410TransferByPartition(params?: CallParams<Arc1594Args['obj']['arc1410_transfer_by_partition(address,address,uint256,byte[])address'] | Arc1594Args['tuple']['arc1410_transfer_by_partition(address,address,uint256,byte[])address']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc1410_transfer_by_partition(address,address,uint256,byte[])address'] | undefined]>

  /**
   * Calls the arc1410_partitions_of(address,uint64)address[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410PartitionsOf(params?: CallParams<Arc1594Args['obj']['arc1410_partitions_of(address,uint64)address[]'] | Arc1594Args['tuple']['arc1410_partitions_of(address,uint64)address[]']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc1410_partitions_of(address,uint64)address[]'] | undefined]>

  /**
   * Calls the arc1410_is_operator(address,address,address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410IsOperator(params?: CallParams<Arc1594Args['obj']['arc1410_is_operator(address,address,address)bool'] | Arc1594Args['tuple']['arc1410_is_operator(address,address,address)bool']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc1410_is_operator(address,address,address)bool'] | undefined]>

  /**
   * Calls the arc1410_authorize_operator(address,address,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410AuthorizeOperator(params?: CallParams<Arc1594Args['obj']['arc1410_authorize_operator(address,address,address)void'] | Arc1594Args['tuple']['arc1410_authorize_operator(address,address,address)void']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc1410_authorize_operator(address,address,address)void'] | undefined]>

  /**
   * Calls the arc1410_revoke_operator(address,address,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410RevokeOperator(params?: CallParams<Arc1594Args['obj']['arc1410_revoke_operator(address,address,address)void'] | Arc1594Args['tuple']['arc1410_revoke_operator(address,address,address)void']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc1410_revoke_operator(address,address,address)void'] | undefined]>

  /**
   * Calls the arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410OperatorTransferByPartition(params?: CallParams<Arc1594Args['obj']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address'] | Arc1594Args['tuple']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address'] | undefined]>

  /**
   * Calls the arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410CanTransferByPartition(params?: CallParams<Arc1594Args['obj']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)'] | Arc1594Args['tuple']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)'] | undefined]>

  /**
   * Calls the arc1410_authorize_operator_by_portion(address,address,address,uint256)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410AuthorizeOperatorByPortion(params?: CallParams<Arc1594Args['obj']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void'] | Arc1594Args['tuple']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc1410_authorize_operator_by_portion(address,address,address,uint256)void'] | undefined]>

  /**
   * Calls the arc1410_is_operator_by_portion(address,address,address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410IsOperatorByPortion(params?: CallParams<Arc1594Args['obj']['arc1410_is_operator_by_portion(address,address,address)bool'] | Arc1594Args['tuple']['arc1410_is_operator_by_portion(address,address,address)bool']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc1410_is_operator_by_portion(address,address,address)bool'] | undefined]>

  /**
   * Calls the arc1410_issue_by_partition(address,address,uint256,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410IssueByPartition(params?: CallParams<Arc1594Args['obj']['arc1410_issue_by_partition(address,address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1410_issue_by_partition(address,address,uint256,byte[])void']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc1410_issue_by_partition(address,address,uint256,byte[])void'] | undefined]>

  /**
   * Calls the arc1410_redeem_by_partition(address,uint256,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410RedeemByPartition(params?: CallParams<Arc1594Args['obj']['arc1410_redeem_by_partition(address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1410_redeem_by_partition(address,uint256,byte[])void']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc1410_redeem_by_partition(address,uint256,byte[])void'] | undefined]>

  /**
   * Calls the arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410OperatorRedeemByPartition(params?: CallParams<Arc1594Args['obj']['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void'] | Arc1594Args['tuple']['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void'] | undefined]>

  /**
   * Calls the bootstrap(byte[],byte[],uint8,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(params?: CallParams<Arc1594Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool'] | Arc1594Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']>): Arc1594Composer<[...TReturns, Arc1594Returns['bootstrap(byte[],byte[],uint8,uint256)bool'] | undefined]>

  /**
   * Calls the arc200_name()byte[32] ABI method.
   *
   * Returns the name of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Name(params?: CallParams<Arc1594Args['obj']['arc200_name()byte[32]'] | Arc1594Args['tuple']['arc200_name()byte[32]']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc200_name()byte[32]'] | undefined]>

  /**
   * Calls the arc200_symbol()byte[8] ABI method.
   *
   * Returns the symbol of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Symbol(params?: CallParams<Arc1594Args['obj']['arc200_symbol()byte[8]'] | Arc1594Args['tuple']['arc200_symbol()byte[8]']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc200_symbol()byte[8]'] | undefined]>

  /**
   * Calls the arc200_decimals()uint8 ABI method.
   *
   * Returns the decimals of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Decimals(params?: CallParams<Arc1594Args['obj']['arc200_decimals()uint8'] | Arc1594Args['tuple']['arc200_decimals()uint8']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc200_decimals()uint8'] | undefined]>

  /**
   * Calls the arc200_totalSupply()uint256 ABI method.
   *
   * Returns the total supply of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200TotalSupply(params?: CallParams<Arc1594Args['obj']['arc200_totalSupply()uint256'] | Arc1594Args['tuple']['arc200_totalSupply()uint256']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc200_totalSupply()uint256'] | undefined]>

  /**
   * Calls the arc200_balanceOf(address)uint256 ABI method.
   *
   * Returns the current balance of the owner of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200BalanceOf(params?: CallParams<Arc1594Args['obj']['arc200_balanceOf(address)uint256'] | Arc1594Args['tuple']['arc200_balanceOf(address)uint256']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc200_balanceOf(address)uint256'] | undefined]>

  /**
   * Calls the arc200_transferFrom(address,address,uint256)bool ABI method.
   *
   * Transfers tokens from source to destination as approved spender
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200TransferFrom(params?: CallParams<Arc1594Args['obj']['arc200_transferFrom(address,address,uint256)bool'] | Arc1594Args['tuple']['arc200_transferFrom(address,address,uint256)bool']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc200_transferFrom(address,address,uint256)bool'] | undefined]>

  /**
   * Calls the arc200_approve(address,uint256)bool ABI method.
   *
   * Approve spender for a token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Approve(params?: CallParams<Arc1594Args['obj']['arc200_approve(address,uint256)bool'] | Arc1594Args['tuple']['arc200_approve(address,uint256)bool']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc200_approve(address,uint256)bool'] | undefined]>

  /**
   * Calls the arc200_allowance(address,address)uint256 ABI method.
   *
   * Returns the current allowance of the spender of the tokens of the owner
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Allowance(params?: CallParams<Arc1594Args['obj']['arc200_allowance(address,address)uint256'] | Arc1594Args['tuple']['arc200_allowance(address,address)uint256']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc200_allowance(address,address)uint256'] | undefined]>

  /**
   * Calls the arc88_owner()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88Owner(params?: CallParams<Arc1594Args['obj']['arc88_owner()address'] | Arc1594Args['tuple']['arc88_owner()address']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc88_owner()address'] | undefined]>

  /**
   * Calls the arc88_is_owner(address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88IsOwner(params?: CallParams<Arc1594Args['obj']['arc88_is_owner(address)bool'] | Arc1594Args['tuple']['arc88_is_owner(address)bool']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc88_is_owner(address)bool'] | undefined]>

  /**
   * Calls the arc88_initialize_owner(address)void ABI method.
   *
   * Explicit initialization override (creation group recommended). Fails if already initialized.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88InitializeOwner(params?: CallParams<Arc1594Args['obj']['arc88_initialize_owner(address)void'] | Arc1594Args['tuple']['arc88_initialize_owner(address)void']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc88_initialize_owner(address)void'] | undefined]>

  /**
   * Calls the arc88_transfer_ownership(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88TransferOwnership(params?: CallParams<Arc1594Args['obj']['arc88_transfer_ownership(address)void'] | Arc1594Args['tuple']['arc88_transfer_ownership(address)void']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc88_transfer_ownership(address)void'] | undefined]>

  /**
   * Calls the arc88_renounce_ownership()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88RenounceOwnership(params?: CallParams<Arc1594Args['obj']['arc88_renounce_ownership()void'] | Arc1594Args['tuple']['arc88_renounce_ownership()void']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc88_renounce_ownership()void'] | undefined]>

  /**
   * Calls the arc88_transfer_ownership_request(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88TransferOwnershipRequest(params?: CallParams<Arc1594Args['obj']['arc88_transfer_ownership_request(address)void'] | Arc1594Args['tuple']['arc88_transfer_ownership_request(address)void']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc88_transfer_ownership_request(address)void'] | undefined]>

  /**
   * Calls the arc88_accept_ownership()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88AcceptOwnership(params?: CallParams<Arc1594Args['obj']['arc88_accept_ownership()void'] | Arc1594Args['tuple']['arc88_accept_ownership()void']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc88_accept_ownership()void'] | undefined]>

  /**
   * Calls the arc88_cancel_ownership_request()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88CancelOwnershipRequest(params?: CallParams<Arc1594Args['obj']['arc88_cancel_ownership_request()void'] | Arc1594Args['tuple']['arc88_cancel_ownership_request()void']>): Arc1594Composer<[...TReturns, Arc1594Returns['arc88_cancel_ownership_request()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Arc1594 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Arc1594Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Arc1594Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Arc1594ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<Arc1594ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<Arc1594ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Arc1594ComposerResults<TReturns>>
}
export type Arc1594ComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

