{
    "name": "Arc1410",
    "structs": {
        "ApprovalStruct": [
            {
                "name": "approvalAmount",
                "type": "uint256"
            },
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "spender",
                "type": "address"
            }
        ],
        "arc1410_HoldingPartitionsPaginatedKey": [
            {
                "name": "holder",
                "type": "address"
            },
            {
                "name": "page",
                "type": "uint64"
            }
        ],
        "arc1410_OperatorKey": [
            {
                "name": "holder",
                "type": "address"
            },
            {
                "name": "operator",
                "type": "address"
            },
            {
                "name": "partition",
                "type": "address"
            }
        ],
        "arc1410_OperatorPortionKey": [
            {
                "name": "holder",
                "type": "address"
            },
            {
                "name": "operator",
                "type": "address"
            },
            {
                "name": "partition",
                "type": "address"
            }
        ],
        "arc1410_PartitionKey": [
            {
                "name": "holder",
                "type": "address"
            },
            {
                "name": "partition",
                "type": "address"
            }
        ],
        "arc1410_can_transfer_by_partition_return": [
            {
                "name": "code",
                "type": "byte"
            },
            {
                "name": "status",
                "type": "string"
            },
            {
                "name": "receiverPartition",
                "type": "address"
            }
        ],
        "arc1410_partition_issue": [
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "partition",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "data",
                "type": "byte[]"
            }
        ],
        "arc1410_partition_redeem": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "partition",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "data",
                "type": "byte[]"
            }
        ],
        "arc1410_partition_transfer": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "partition",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "data",
                "type": "byte[]"
            }
        ]
    },
    "methods": [
        {
            "name": "arc1410_balance_of_partition",
            "args": [
                {
                    "type": "address",
                    "name": "holder"
                },
                {
                    "type": "address",
                    "name": "partition"
                }
            ],
            "returns": {
                "type": "uint256"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc200_transfer",
            "args": [
                {
                    "type": "address",
                    "name": "to"
                },
                {
                    "type": "uint256",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "Transfer",
                    "args": [
                        {
                            "type": "(address,address,address,uint256,byte[])",
                            "name": "0",
                            "struct": "arc1410_partition_transfer"
                        }
                    ]
                },
                {
                    "name": "arc200_Transfer",
                    "args": [
                        {
                            "type": "address",
                            "name": "from"
                        },
                        {
                            "type": "address",
                            "name": "to"
                        },
                        {
                            "type": "uint256",
                            "name": "value"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc1410_transfer_by_partition",
            "args": [
                {
                    "type": "address",
                    "name": "partition"
                },
                {
                    "type": "address",
                    "name": "to"
                },
                {
                    "type": "uint256",
                    "name": "amount"
                },
                {
                    "type": "byte[]",
                    "name": "data"
                }
            ],
            "returns": {
                "type": "address"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Transfer an amount of tokens from partition to receiver. Sender must be msg.sender or authorized operator.",
            "events": [
                {
                    "name": "Transfer",
                    "args": [
                        {
                            "type": "(address,address,address,uint256,byte[])",
                            "name": "0",
                            "struct": "arc1410_partition_transfer"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc1410_partitions_of",
            "args": [
                {
                    "type": "address",
                    "name": "holder"
                },
                {
                    "type": "uint64",
                    "name": "page"
                }
            ],
            "returns": {
                "type": "address[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc1410_is_operator",
            "args": [
                {
                    "type": "address",
                    "name": "holder"
                },
                {
                    "type": "address",
                    "name": "operator"
                },
                {
                    "type": "address",
                    "name": "partition"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc1410_authorize_operator",
            "args": [
                {
                    "type": "address",
                    "name": "holder"
                },
                {
                    "type": "address",
                    "name": "operator"
                },
                {
                    "type": "address",
                    "name": "partition"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc1410_revoke_operator",
            "args": [
                {
                    "type": "address",
                    "name": "holder"
                },
                {
                    "type": "address",
                    "name": "operator"
                },
                {
                    "type": "address",
                    "name": "partition"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc1410_operator_transfer_by_partition",
            "args": [
                {
                    "type": "address",
                    "name": "from"
                },
                {
                    "type": "address",
                    "name": "partition"
                },
                {
                    "type": "address",
                    "name": "to"
                },
                {
                    "type": "uint256",
                    "name": "amount"
                },
                {
                    "type": "byte[]",
                    "name": "data"
                }
            ],
            "returns": {
                "type": "address"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "Transfer",
                    "args": [
                        {
                            "type": "(address,address,address,uint256,byte[])",
                            "name": "0",
                            "struct": "arc1410_partition_transfer"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc1410_can_transfer_by_partition",
            "args": [
                {
                    "type": "address",
                    "name": "from"
                },
                {
                    "type": "address",
                    "name": "partition"
                },
                {
                    "type": "address",
                    "name": "to"
                },
                {
                    "type": "uint256",
                    "name": "amount"
                },
                {
                    "type": "byte[]",
                    "name": "data"
                }
            ],
            "returns": {
                "type": "(byte,string,address)",
                "struct": "arc1410_can_transfer_by_partition_return"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc1410_authorize_operator_by_portion",
            "args": [
                {
                    "type": "address",
                    "name": "holder"
                },
                {
                    "type": "address",
                    "name": "operator"
                },
                {
                    "type": "address",
                    "name": "partition"
                },
                {
                    "type": "uint256",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc1410_is_operator_by_portion",
            "args": [
                {
                    "type": "address",
                    "name": "holder"
                },
                {
                    "type": "address",
                    "name": "operator"
                },
                {
                    "type": "address",
                    "name": "partition"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc1410_issue_by_partition",
            "args": [
                {
                    "type": "address",
                    "name": "to"
                },
                {
                    "type": "address",
                    "name": "partition"
                },
                {
                    "type": "uint256",
                    "name": "amount"
                },
                {
                    "type": "byte[]",
                    "name": "data"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "Issue",
                    "args": [
                        {
                            "type": "(address,address,uint256,byte[])",
                            "name": "0",
                            "struct": "arc1410_partition_issue"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc1410_redeem_by_partition",
            "args": [
                {
                    "type": "address",
                    "name": "from"
                },
                {
                    "type": "address",
                    "name": "partition"
                },
                {
                    "type": "uint256",
                    "name": "amount"
                },
                {
                    "type": "byte[]",
                    "name": "data"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "Redeem",
                    "args": [
                        {
                            "type": "(address,address,uint256,byte[])",
                            "name": "0",
                            "struct": "arc1410_partition_redeem"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc1410_operator_redeem_by_partition",
            "args": [
                {
                    "type": "address",
                    "name": "from"
                },
                {
                    "type": "address",
                    "name": "partition"
                },
                {
                    "type": "uint256",
                    "name": "amount"
                },
                {
                    "type": "byte[]",
                    "name": "data"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "Redeem",
                    "args": [
                        {
                            "type": "(address,address,uint256,byte[])",
                            "name": "0",
                            "struct": "arc1410_partition_redeem"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "bootstrap",
            "args": [
                {
                    "type": "byte[]",
                    "name": "name"
                },
                {
                    "type": "byte[]",
                    "name": "symbol"
                },
                {
                    "type": "uint8",
                    "name": "decimals"
                },
                {
                    "type": "uint256",
                    "name": "totalSupply"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "arc200_Transfer",
                    "args": [
                        {
                            "type": "address",
                            "name": "from"
                        },
                        {
                            "type": "address",
                            "name": "to"
                        },
                        {
                            "type": "uint256",
                            "name": "value"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc200_name",
            "args": [],
            "returns": {
                "type": "byte[32]",
                "desc": "The name of the token"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the name of the token",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc200_symbol",
            "args": [],
            "returns": {
                "type": "byte[8]",
                "desc": "The symbol of the token"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the symbol of the token",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc200_decimals",
            "args": [],
            "returns": {
                "type": "uint8",
                "desc": "The decimals of the token"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the decimals of the token",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc200_totalSupply",
            "args": [],
            "returns": {
                "type": "uint256",
                "desc": "The total supply of the token"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the total supply of the token",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc200_balanceOf",
            "args": [
                {
                    "type": "address",
                    "name": "owner",
                    "desc": "The address of the owner of the token"
                }
            ],
            "returns": {
                "type": "uint256",
                "desc": "The current balance of the holder of the token"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the current balance of the owner of the token",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc200_transferFrom",
            "args": [
                {
                    "type": "address",
                    "name": "from",
                    "desc": "The source of the transfer"
                },
                {
                    "type": "address",
                    "name": "to",
                    "desc": "The destination of the transfer"
                },
                {
                    "type": "uint256",
                    "name": "value",
                    "desc": "Amount of tokens to transfer"
                }
            ],
            "returns": {
                "type": "bool",
                "desc": "Success"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Transfers tokens from source to destination as approved spender",
            "events": [
                {
                    "name": "arc200_Approval",
                    "args": [
                        {
                            "type": "address",
                            "name": "owner"
                        },
                        {
                            "type": "address",
                            "name": "spender"
                        },
                        {
                            "type": "uint256",
                            "name": "value"
                        }
                    ]
                },
                {
                    "name": "arc200_Transfer",
                    "args": [
                        {
                            "type": "address",
                            "name": "from"
                        },
                        {
                            "type": "address",
                            "name": "to"
                        },
                        {
                            "type": "uint256",
                            "name": "value"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc200_approve",
            "args": [
                {
                    "type": "address",
                    "name": "spender",
                    "desc": "Who is allowed to take tokens on owner's behalf"
                },
                {
                    "type": "uint256",
                    "name": "value",
                    "desc": "Amount of tokens to be taken by spender"
                }
            ],
            "returns": {
                "type": "bool",
                "desc": "Success"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Approve spender for a token",
            "events": [
                {
                    "name": "arc200_Approval",
                    "args": [
                        {
                            "type": "address",
                            "name": "owner"
                        },
                        {
                            "type": "address",
                            "name": "spender"
                        },
                        {
                            "type": "uint256",
                            "name": "value"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc200_allowance",
            "args": [
                {
                    "type": "address",
                    "name": "owner",
                    "desc": "Owner's account"
                },
                {
                    "type": "address",
                    "name": "spender",
                    "desc": "Who is allowed to take tokens on owner's behalf"
                }
            ],
            "returns": {
                "type": "uint256",
                "desc": "The remaining allowance"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the current allowance of the spender of the tokens of the owner",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc88_owner",
            "args": [],
            "returns": {
                "type": "address"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc88_is_owner",
            "args": [
                {
                    "type": "address",
                    "name": "query"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc88_initialize_owner",
            "args": [
                {
                    "type": "address",
                    "name": "new_owner"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Explicit initialization override (creation group recommended). Fails if already initialized.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc88_transfer_ownership",
            "args": [
                {
                    "type": "address",
                    "name": "new_owner"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "arc88_OwnershipTransferred",
                    "args": [
                        {
                            "type": "address",
                            "name": "previous_owner"
                        },
                        {
                            "type": "address",
                            "name": "new_owner"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc88_renounce_ownership",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "arc88_OwnershipRenounced",
                    "args": [
                        {
                            "type": "address",
                            "name": "previous_owner"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc88_transfer_ownership_request",
            "args": [
                {
                    "type": "address",
                    "name": "pending"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "arc88_OwnershipTransferRequested",
                    "args": [
                        {
                            "type": "address",
                            "name": "previous_owner"
                        },
                        {
                            "type": "address",
                            "name": "pending_owner"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc88_accept_ownership",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "arc88_OwnershipTransferAccepted",
                    "args": [
                        {
                            "type": "address",
                            "name": "previous_owner"
                        },
                        {
                            "type": "address",
                            "name": "new_owner"
                        }
                    ]
                },
                {
                    "name": "arc88_OwnershipTransferred",
                    "args": [
                        {
                            "type": "address",
                            "name": "previous_owner"
                        },
                        {
                            "type": "address",
                            "name": "new_owner"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "arc88_cancel_ownership_request",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 7
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "name": {
                    "keyType": "AVMString",
                    "valueType": "byte[]",
                    "key": "bg==",
                    "desc": "Name of the asset. Max 32 bytes"
                },
                "symbol": {
                    "keyType": "AVMString",
                    "valueType": "byte[]",
                    "key": "cw==",
                    "desc": "Symbol of the asset. Max 8 bytes"
                },
                "decimals": {
                    "keyType": "AVMString",
                    "valueType": "uint8",
                    "key": "ZA==",
                    "desc": "Decimals of the asset. Recommended is 6 decimal places."
                },
                "totalSupply": {
                    "keyType": "AVMString",
                    "valueType": "uint256",
                    "key": "dA==",
                    "desc": "Minted supply"
                },
                "owner": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YXJjODhfbw=="
                },
                "pendingOwner": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YXJjODhfcG8="
                },
                "initialized": {
                    "keyType": "AVMString",
                    "valueType": "byte",
                    "key": "YXJjODhfb2k="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "partitions": {
                    "keyType": "arc1410_PartitionKey",
                    "valueType": "uint256",
                    "prefix": "cA=="
                },
                "holderPartitionsCurrentPage": {
                    "keyType": "address",
                    "valueType": "uint64",
                    "prefix": "aHBfcA=="
                },
                "holderPartitionsAddresses": {
                    "keyType": "arc1410_HoldingPartitionsPaginatedKey",
                    "valueType": "address[]",
                    "prefix": "aHBfYQ=="
                },
                "operators": {
                    "keyType": "arc1410_OperatorKey",
                    "valueType": "byte",
                    "prefix": "b3A="
                },
                "operatorPortionAllowances": {
                    "keyType": "arc1410_OperatorPortionKey",
                    "valueType": "uint256",
                    "prefix": "b3Bh"
                },
                "balances": {
                    "keyType": "address",
                    "valueType": "uint256",
                    "prefix": "Yg=="
                },
                "approvals": {
                    "keyType": "byte[32]",
                    "valueType": "ApprovalStruct",
                    "prefix": "YQ=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1028,
                        1109,
                        1158,
                        1190,
                        1314,
                        1456,
                        1651,
                        1828,
                        1891,
                        1949,
                        1964,
                        2081,
                        2170,
                        2253,
                        2318,
                        2356,
                        2471,
                        2478,
                        2511,
                        2524,
                        2636,
                        2683,
                        2690,
                        2723,
                        2736,
                        3020,
                        3152
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        1917,
                        3153
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        2519,
                        2731
                    ],
                    "errorMessage": "Insufficient balance"
                },
                {
                    "pc": [
                        3041
                    ],
                    "errorMessage": "Insufficient balance at the sender account"
                },
                {
                    "pc": [
                        2475,
                        2687
                    ],
                    "errorMessage": "Insufficient partition balance"
                },
                {
                    "pc": [
                        2056,
                        2285,
                        2451
                    ],
                    "errorMessage": "Invalid amount"
                },
                {
                    "pc": [
                        2809
                    ],
                    "errorMessage": "Name of the asset must be longer or equal to 1 character"
                },
                {
                    "pc": [
                        2812
                    ],
                    "errorMessage": "Name of the asset must be shorter or equal to 32 characters"
                },
                {
                    "pc": [
                        1341,
                        2445,
                        2663
                    ],
                    "errorMessage": "Not authorized operator"
                },
                {
                    "pc": [
                        367,
                        379,
                        391,
                        406,
                        418,
                        433,
                        448,
                        467,
                        483,
                        505,
                        527,
                        552,
                        571,
                        587,
                        603,
                        619,
                        635,
                        663,
                        687,
                        711,
                        735,
                        760,
                        784,
                        815,
                        846,
                        867,
                        888,
                        913,
                        935,
                        963,
                        985
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        2801
                    ],
                    "errorMessage": "Only deployer of this smart contract can call bootstrap method"
                },
                {
                    "pc": [
                        1215
                    ],
                    "errorMessage": "Only holder can authorize"
                },
                {
                    "pc": [
                        2192
                    ],
                    "errorMessage": "Only holder can authorize portion"
                },
                {
                    "pc": [
                        1240
                    ],
                    "errorMessage": "Only holder can revoke"
                },
                {
                    "pc": [
                        2468,
                        2680
                    ],
                    "errorMessage": "Partition balance missing"
                },
                {
                    "pc": [
                        1319,
                        2641
                    ],
                    "errorMessage": "Portion allowance exceeded"
                },
                {
                    "pc": [
                        2820
                    ],
                    "errorMessage": "Symbol of the asset must be longer or equal to 1 character"
                },
                {
                    "pc": [
                        2823
                    ],
                    "errorMessage": "Symbol of the asset must be shorter or equal to 8 characters"
                },
                {
                    "pc": [
                        2830
                    ],
                    "errorMessage": "This method can be called only once"
                },
                {
                    "pc": [
                        3316
                    ],
                    "errorMessage": "already_initialized"
                },
                {
                    "pc": [
                        1012
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        370,
                        382,
                        394,
                        409,
                        421,
                        436,
                        451,
                        470,
                        486,
                        508,
                        530,
                        555,
                        574,
                        590,
                        606,
                        622,
                        638,
                        666,
                        690,
                        714,
                        738,
                        763,
                        787,
                        818,
                        849,
                        870,
                        891,
                        916,
                        938,
                        966,
                        988
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        2375,
                        2543,
                        2755,
                        2883,
                        2898,
                        2913,
                        2918,
                        3217,
                        3246,
                        3268,
                        3280,
                        3307,
                        3347,
                        3358,
                        3380,
                        3386,
                        3411,
                        3432,
                        3445,
                        3475,
                        3483,
                        3518
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        2945
                    ],
                    "errorMessage": "insufficient approval"
                },
                {
                    "pc": [
                        2891,
                        2906,
                        3122
                    ],
                    "errorMessage": "invalid size"
                },
                {
                    "pc": [
                        3349,
                        3382,
                        3413,
                        3520
                    ],
                    "errorMessage": "not_owner"
                },
                {
                    "pc": [
                        3468,
                        3479
                    ],
                    "errorMessage": "not_pending_owner"
                },
                {
                    "pc": [
                        2279
                    ],
                    "errorMessage": "only_owner"
                },
                {
                    "pc": [
                        1330,
                        2089,
                        2178,
                        2326,
                        2364,
                        2383,
                        2486,
                        2532,
                        2551,
                        2652,
                        2698,
                        2744,
                        2763,
                        2953,
                        3059,
                        3082
                    ],
                    "errorMessage": "overflow"
                },
                {
                    "pc": [
                        3436
                    ],
                    "errorMessage": "pending_transfer_exists"
                },
                {
                    "pc": [
                        3321,
                        3354,
                        3418
                    ],
                    "errorMessage": "zero_address_not_allowed"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxIDMyIDgKICAgIGJ5dGVjYmxvY2sgMHgxNTFmN2M3NSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAgImFyYzg4X28iICJ0IiAicCIgMHg4MCAiYiIgImFyYzg4X3BvIiAweDAwICJhcmM4OF9vaSIgIm9wYSIgImhwX2EiICJvcCIgMHgwMDAyIDB4MDEgMHgwMDAxIDB4MDA2MiAweDAwMDAgMHgwMDAwMDAwMDAwMDAwMDAwIDB4NWMyN2I0ZmMgMHg3OTgzYzM1YyAweDQzNTVkMmFkCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjU2CiAgICAvLyBleHBvcnQgY2xhc3MgQXJjMTQxMCBleHRlbmRzIEFyYzIwMCB7CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdAMzgKICAgIHB1c2hieXRlc3MgMHgzNWY4MTM1ZiAweGRhNzAyNWI5IDB4M2YyNTY3MTMgMHg5NWI0ZjllMyAweDgwY2M0OWFiIDB4MDc5NjIxNjUgMHhlNzg5NjFkYSAweGZkOTQ4MGQ3IDB4YjFiMWQ2OWEgMHhjMWJlZDc4OSAweDNiZmUxODMzIDB4NTk5Y2QxYTUgMHgyMjBmY2Y5OCAweDI4ZjAyM2Q3IDB4OTc1MzgyZTIgMHg2NTdkMTNlYyAweGI2YWUxYTI1IDB4ODRlYzEzZDUgMHhlYzk5NjA0MSAweDgyZTU3M2M0IDB4NGE5NjhmOGYgMHhiNTQyMjEyNSAweGJiYjMxOWYzIDB4MDcwMjY1NGUgMHhkMDE1NzI0ZSAweDAyOWZlY2MwIDB4NzM0OTMzNGUgMHhkYjdjODJlZiAweGZkMmMyYzZlIDB4NDJhNWYwNjUgMHhhZDRmNjhlYSAvLyBtZXRob2QgImFyYzE0MTBfYmFsYW5jZV9vZl9wYXJ0aXRpb24oYWRkcmVzcyxhZGRyZXNzKXVpbnQyNTYiLCBtZXRob2QgImFyYzIwMF90cmFuc2ZlcihhZGRyZXNzLHVpbnQyNTYpYm9vbCIsIG1ldGhvZCAiYXJjMTQxMF90cmFuc2Zlcl9ieV9wYXJ0aXRpb24oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYsYnl0ZVtdKWFkZHJlc3MiLCBtZXRob2QgImFyYzE0MTBfcGFydGl0aW9uc19vZihhZGRyZXNzLHVpbnQ2NClhZGRyZXNzW10iLCBtZXRob2QgImFyYzE0MTBfaXNfb3BlcmF0b3IoYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MpYm9vbCIsIG1ldGhvZCAiYXJjMTQxMF9hdXRob3JpemVfb3BlcmF0b3IoYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3Mpdm9pZCIsIG1ldGhvZCAiYXJjMTQxMF9yZXZva2Vfb3BlcmF0b3IoYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3Mpdm9pZCIsIG1ldGhvZCAiYXJjMTQxMF9vcGVyYXRvcl90cmFuc2Zlcl9ieV9wYXJ0aXRpb24oYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MsdWludDI1NixieXRlW10pYWRkcmVzcyIsIG1ldGhvZCAiYXJjMTQxMF9jYW5fdHJhbnNmZXJfYnlfcGFydGl0aW9uKGFkZHJlc3MsYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYsYnl0ZVtdKShieXRlLHN0cmluZyxhZGRyZXNzKSIsIG1ldGhvZCAiYXJjMTQxMF9hdXRob3JpemVfb3BlcmF0b3JfYnlfcG9ydGlvbihhZGRyZXNzLGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KXZvaWQiLCBtZXRob2QgImFyYzE0MTBfaXNfb3BlcmF0b3JfYnlfcG9ydGlvbihhZGRyZXNzLGFkZHJlc3MsYWRkcmVzcylib29sIiwgbWV0aG9kICJhcmMxNDEwX2lzc3VlX2J5X3BhcnRpdGlvbihhZGRyZXNzLGFkZHJlc3MsdWludDI1NixieXRlW10pdm9pZCIsIG1ldGhvZCAiYXJjMTQxMF9yZWRlZW1fYnlfcGFydGl0aW9uKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2LGJ5dGVbXSl2b2lkIiwgbWV0aG9kICJhcmMxNDEwX29wZXJhdG9yX3JlZGVlbV9ieV9wYXJ0aXRpb24oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYsYnl0ZVtdKXZvaWQiLCBtZXRob2QgImJvb3RzdHJhcChieXRlW10sYnl0ZVtdLHVpbnQ4LHVpbnQyNTYpYm9vbCIsIG1ldGhvZCAiYXJjMjAwX25hbWUoKWJ5dGVbMzJdIiwgbWV0aG9kICJhcmMyMDBfc3ltYm9sKClieXRlWzhdIiwgbWV0aG9kICJhcmMyMDBfZGVjaW1hbHMoKXVpbnQ4IiwgbWV0aG9kICJhcmMyMDBfdG90YWxTdXBwbHkoKXVpbnQyNTYiLCBtZXRob2QgImFyYzIwMF9iYWxhbmNlT2YoYWRkcmVzcyl1aW50MjU2IiwgbWV0aG9kICJhcmMyMDBfdHJhbnNmZXJGcm9tKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KWJvb2wiLCBtZXRob2QgImFyYzIwMF9hcHByb3ZlKGFkZHJlc3MsdWludDI1Nilib29sIiwgbWV0aG9kICJhcmMyMDBfYWxsb3dhbmNlKGFkZHJlc3MsYWRkcmVzcyl1aW50MjU2IiwgbWV0aG9kICJhcmM4OF9vd25lcigpYWRkcmVzcyIsIG1ldGhvZCAiYXJjODhfaXNfb3duZXIoYWRkcmVzcylib29sIiwgbWV0aG9kICJhcmM4OF9pbml0aWFsaXplX293bmVyKGFkZHJlc3Mpdm9pZCIsIG1ldGhvZCAiYXJjODhfdHJhbnNmZXJfb3duZXJzaGlwKGFkZHJlc3Mpdm9pZCIsIG1ldGhvZCAiYXJjODhfcmVub3VuY2Vfb3duZXJzaGlwKCl2b2lkIiwgbWV0aG9kICJhcmM4OF90cmFuc2Zlcl9vd25lcnNoaXBfcmVxdWVzdChhZGRyZXNzKXZvaWQiLCBtZXRob2QgImFyYzg4X2FjY2VwdF9vd25lcnNoaXAoKXZvaWQiLCBtZXRob2QgImFyYzg4X2NhbmNlbF9vd25lcnNoaXBfcmVxdWVzdCgpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fYXJjMTQxMF9iYWxhbmNlX29mX3BhcnRpdGlvbl9yb3V0ZUA1IG1haW5fYXJjMjAwX3RyYW5zZmVyX3JvdXRlQDYgbWFpbl9hcmMxNDEwX3RyYW5zZmVyX2J5X3BhcnRpdGlvbl9yb3V0ZUA3IG1haW5fYXJjMTQxMF9wYXJ0aXRpb25zX29mX3JvdXRlQDggbWFpbl9hcmMxNDEwX2lzX29wZXJhdG9yX3JvdXRlQDkgbWFpbl9hcmMxNDEwX2F1dGhvcml6ZV9vcGVyYXRvcl9yb3V0ZUAxMCBtYWluX2FyYzE0MTBfcmV2b2tlX29wZXJhdG9yX3JvdXRlQDExIG1haW5fYXJjMTQxMF9vcGVyYXRvcl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fcm91dGVAMTIgbWFpbl9hcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fcm91dGVAMTMgbWFpbl9hcmMxNDEwX2F1dGhvcml6ZV9vcGVyYXRvcl9ieV9wb3J0aW9uX3JvdXRlQDE0IG1haW5fYXJjMTQxMF9pc19vcGVyYXRvcl9ieV9wb3J0aW9uX3JvdXRlQDE1IG1haW5fYXJjMTQxMF9pc3N1ZV9ieV9wYXJ0aXRpb25fcm91dGVAMTYgbWFpbl9hcmMxNDEwX3JlZGVlbV9ieV9wYXJ0aXRpb25fcm91dGVAMTcgbWFpbl9hcmMxNDEwX29wZXJhdG9yX3JlZGVlbV9ieV9wYXJ0aXRpb25fcm91dGVAMTggbWFpbl9ib290c3RyYXBfcm91dGVAMTkgbWFpbl9hcmMyMDBfbmFtZV9yb3V0ZUAyMCBtYWluX2FyYzIwMF9zeW1ib2xfcm91dGVAMjEgbWFpbl9hcmMyMDBfZGVjaW1hbHNfcm91dGVAMjIgbWFpbl9hcmMyMDBfdG90YWxTdXBwbHlfcm91dGVAMjMgbWFpbl9hcmMyMDBfYmFsYW5jZU9mX3JvdXRlQDI0IG1haW5fYXJjMjAwX3RyYW5zZmVyRnJvbV9yb3V0ZUAyNSBtYWluX2FyYzIwMF9hcHByb3ZlX3JvdXRlQDI2IG1haW5fYXJjMjAwX2FsbG93YW5jZV9yb3V0ZUAyNyBtYWluX2FyYzg4X293bmVyX3JvdXRlQDI4IG1haW5fYXJjODhfaXNfb3duZXJfcm91dGVAMjkgbWFpbl9hcmM4OF9pbml0aWFsaXplX293bmVyX3JvdXRlQDMwIG1haW5fYXJjODhfdHJhbnNmZXJfb3duZXJzaGlwX3JvdXRlQDMxIG1haW5fYXJjODhfcmVub3VuY2Vfb3duZXJzaGlwX3JvdXRlQDMyIG1haW5fYXJjODhfdHJhbnNmZXJfb3duZXJzaGlwX3JlcXVlc3Rfcm91dGVAMzMgbWFpbl9hcmM4OF9hY2NlcHRfb3duZXJzaGlwX3JvdXRlQDM0IG1haW5fYXJjODhfY2FuY2VsX293bmVyc2hpcF9yZXF1ZXN0X3JvdXRlQDM1CgptYWluX2FmdGVyX2lmX2Vsc2VANDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjU2CiAgICAvLyBleHBvcnQgY2xhc3MgQXJjMTQxMCBleHRlbmRzIEFyYzIwMCB7CiAgICBpbnRjXzAgLy8gMAogICAgcmV0dXJuCgptYWluX2FyYzg4X2NhbmNlbF9vd25lcnNoaXBfcmVxdWVzdF9yb3V0ZUAzNToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjEwMwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBhcmM4OF9jYW5jZWxfb3duZXJzaGlwX3JlcXVlc3QKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjODhfYWNjZXB0X293bmVyc2hpcF9yb3V0ZUAzNDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjkwCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGFyYzg4X2FjY2VwdF9vd25lcnNoaXAKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjODhfdHJhbnNmZXJfb3duZXJzaGlwX3JlcXVlc3Rfcm91dGVAMzM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo3OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo1NgogICAgLy8gZXhwb3J0IGNsYXNzIEFyYzE0MTAgZXh0ZW5kcyBBcmMyMDAgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6NzgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGFyYzg4X3RyYW5zZmVyX293bmVyc2hpcF9yZXF1ZXN0CiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FyYzg4X3Jlbm91bmNlX293bmVyc2hpcF9yb3V0ZUAzMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjY4CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGFyYzg4X3Jlbm91bmNlX293bmVyc2hpcAogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9hcmM4OF90cmFuc2Zlcl9vd25lcnNoaXBfcm91dGVAMzE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo1OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo1NgogICAgLy8gZXhwb3J0IGNsYXNzIEFyYzE0MTAgZXh0ZW5kcyBBcmMyMDAgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6NTgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGFyYzg4X3RyYW5zZmVyX293bmVyc2hpcAogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9hcmM4OF9pbml0aWFsaXplX293bmVyX3JvdXRlQDMwOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6NTAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NTYKICAgIC8vIGV4cG9ydCBjbGFzcyBBcmMxNDEwIGV4dGVuZHMgQXJjMjAwIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjUwCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBhcmM4OF9pbml0aWFsaXplX293bmVyCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FyYzg4X2lzX293bmVyX3JvdXRlQDI5OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6NDEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NTYKICAgIC8vIGV4cG9ydCBjbGFzcyBBcmMxNDEwIGV4dGVuZHMgQXJjMjAwIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjQxCiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgY2FsbHN1YiBhcmM4OF9pc19vd25lcgogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9hcmM4OF9vd25lcl9yb3V0ZUAyODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjM1CiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGFyYzg4X293bmVyCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FyYzIwMF9hbGxvd2FuY2Vfcm91dGVAMjc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MTc3CiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjU2CiAgICAvLyBleHBvcnQgY2xhc3MgQXJjMTQxMCBleHRlbmRzIEFyYzIwMCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MTc3CiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgY2FsbHN1YiBhcmMyMDBfYWxsb3dhbmNlCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FyYzIwMF9hcHByb3ZlX3JvdXRlQDI2OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjE2NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo1NgogICAgLy8gZXhwb3J0IGNsYXNzIEFyYzE0MTAgZXh0ZW5kcyBBcmMyMDAgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjE2NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgYXJjMjAwX2FwcHJvdmUKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjMjAwX3RyYW5zZmVyRnJvbV9yb3V0ZUAyNToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoxNDgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NTYKICAgIC8vIGV4cG9ydCBjbGFzcyBBcmMxNDEwIGV4dGVuZHMgQXJjMjAwIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoxNDgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGFyYzIwMF90cmFuc2ZlckZyb20KICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjMjAwX2JhbGFuY2VPZl9yb3V0ZUAyNDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoxMjMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NTYKICAgIC8vIGV4cG9ydCBjbGFzcyBBcmMxNDEwIGV4dGVuZHMgQXJjMjAwIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoxMjMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICBjYWxsc3ViIGFyYzIwMF9iYWxhbmNlT2YKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjMjAwX3RvdGFsU3VwcGx5X3JvdXRlQDIzOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjExMgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBhcmMyMDBfdG90YWxTdXBwbHkKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjMjAwX2RlY2ltYWxzX3JvdXRlQDIyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjEwMgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBhcmMyMDBfZGVjaW1hbHMKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjMjAwX3N5bWJvbF9yb3V0ZUAyMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo5MgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBhcmMyMDBfc3ltYm9sCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FyYzIwMF9uYW1lX3JvdXRlQDIwOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjgyCiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGFyYzIwMF9uYW1lCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2Jvb3RzdHJhcF9yb3V0ZUAxOToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo1NgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo1NgogICAgLy8gZXhwb3J0IGNsYXNzIEFyYzE0MTAgZXh0ZW5kcyBBcmMyMDAgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjU2CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBib290c3RyYXAKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjMTQxMF9vcGVyYXRvcl9yZWRlZW1fYnlfcGFydGl0aW9uX3JvdXRlQDE4OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo0MzIKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NTYKICAgIC8vIGV4cG9ydCBjbGFzcyBBcmMxNDEwIGV4dGVuZHMgQXJjMjAwIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NDMyCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBhcmMxNDEwX29wZXJhdG9yX3JlZGVlbV9ieV9wYXJ0aXRpb24KICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjMTQxMF9yZWRlZW1fYnlfcGFydGl0aW9uX3JvdXRlQDE3OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo0MDgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NTYKICAgIC8vIGV4cG9ydCBjbGFzcyBBcmMxNDEwIGV4dGVuZHMgQXJjMjAwIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NDA4CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBhcmMxNDEwX3JlZGVlbV9ieV9wYXJ0aXRpb24KICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjMTQxMF9pc3N1ZV9ieV9wYXJ0aXRpb25fcm91dGVAMTY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjM4MwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo1NgogICAgLy8gZXhwb3J0IGNsYXNzIEFyYzE0MTAgZXh0ZW5kcyBBcmMyMDAgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czozODMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGFyYzE0MTBfaXNzdWVfYnlfcGFydGl0aW9uCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FyYzE0MTBfaXNfb3BlcmF0b3JfYnlfcG9ydGlvbl9yb3V0ZUAxNToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MzcxCiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjU2CiAgICAvLyBleHBvcnQgY2xhc3MgQXJjMTQxMCBleHRlbmRzIEFyYzIwMCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjM3MQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIGNhbGxzdWIgYXJjMTQxMF9pc19vcGVyYXRvcl9ieV9wb3J0aW9uCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FyYzE0MTBfYXV0aG9yaXplX29wZXJhdG9yX2J5X3BvcnRpb25fcm91dGVAMTQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjM1OQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo1NgogICAgLy8gZXhwb3J0IGNsYXNzIEFyYzE0MTAgZXh0ZW5kcyBBcmMyMDAgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czozNTkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGFyYzE0MTBfYXV0aG9yaXplX29wZXJhdG9yX2J5X3BvcnRpb24KICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjMTQxMF9jYW5fdHJhbnNmZXJfYnlfcGFydGl0aW9uX3JvdXRlQDEzOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxNzQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NTYKICAgIC8vIGV4cG9ydCBjbGFzcyBBcmMxNDEwIGV4dGVuZHMgQXJjMjAwIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTc0CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBhcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb24KICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjMTQxMF9vcGVyYXRvcl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fcm91dGVAMTI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjE0NAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo1NgogICAgLy8gZXhwb3J0IGNsYXNzIEFyYzE0MTAgZXh0ZW5kcyBBcmMyMDAgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxNDQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGFyYzE0MTBfb3BlcmF0b3JfdHJhbnNmZXJfYnlfcGFydGl0aW9uCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FyYzE0MTBfcmV2b2tlX29wZXJhdG9yX3JvdXRlQDExOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxMzUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NTYKICAgIC8vIGV4cG9ydCBjbGFzcyBBcmMxNDEwIGV4dGVuZHMgQXJjMjAwIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTM1CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBhcmMxNDEwX3Jldm9rZV9vcGVyYXRvcgogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9hcmMxNDEwX2F1dGhvcml6ZV9vcGVyYXRvcl9yb3V0ZUAxMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTI4CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjU2CiAgICAvLyBleHBvcnQgY2xhc3MgQXJjMTQxMCBleHRlbmRzIEFyYzIwMCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjEyOAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgYXJjMTQxMF9hdXRob3JpemVfb3BlcmF0b3IKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjMTQxMF9pc19vcGVyYXRvcl9yb3V0ZUA5OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxMTQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NTYKICAgIC8vIGV4cG9ydCBjbGFzcyBBcmMxNDEwIGV4dGVuZHMgQXJjMjAwIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTE0CiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgY2FsbHN1YiBhcmMxNDEwX2lzX29wZXJhdG9yCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FyYzE0MTBfcGFydGl0aW9uc19vZl9yb3V0ZUA4OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxMDcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NTYKICAgIC8vIGV4cG9ydCBjbGFzcyBBcmMxNDEwIGV4dGVuZHMgQXJjMjAwIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTA3CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBhcmMxNDEwX3BhcnRpdGlvbnNfb2YKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjMTQxMF90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fcm91dGVANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6OTMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NTYKICAgIC8vIGV4cG9ydCBjbGFzcyBBcmMxNDEwIGV4dGVuZHMgQXJjMjAwIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6OTMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGFyYzE0MTBfdHJhbnNmZXJfYnlfcGFydGl0aW9uCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FyYzIwMF90cmFuc2Zlcl9yb3V0ZUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo3OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo1NgogICAgLy8gZXhwb3J0IGNsYXNzIEFyYzE0MTAgZXh0ZW5kcyBBcmMyMDAgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo3OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgYXJjMjAwX3RyYW5zZmVyCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FyYzE0MTBfYmFsYW5jZV9vZl9wYXJ0aXRpb25fcm91dGVANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NjkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NTYKICAgIC8vIGV4cG9ydCBjbGFzcyBBcmMxNDEwIGV4dGVuZHMgQXJjMjAwIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NjkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICBjYWxsc3ViIGFyYzE0MTBfYmFsYW5jZV9vZl9wYXJ0aXRpb24KICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDM4OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo1NgogICAgLy8gZXhwb3J0IGNsYXNzIEFyYzE0MTAgZXh0ZW5kcyBBcmMyMDAgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUA0MgogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjpBcmMxNDEwLmFyYzE0MTBfYmFsYW5jZV9vZl9wYXJ0aXRpb24oaG9sZGVyOiBieXRlcywgcGFydGl0aW9uOiBieXRlcykgLT4gYnl0ZXM6CmFyYzE0MTBfYmFsYW5jZV9vZl9wYXJ0aXRpb246CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjY5LTcwCiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgLy8gcHVibGljIGFyYzE0MTBfYmFsYW5jZV9vZl9wYXJ0aXRpb24oaG9sZGVyOiBhcmM0LkFkZHJlc3MsIHBhcnRpdGlvbjogYXJjNC5BZGRyZXNzKTogYXJjNC5VaW50TjI1NiB7CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NzEtNzQKICAgIC8vIGNvbnN0IGtleSA9IG5ldyBhcmMxNDEwX1BhcnRpdGlvbktleSh7CiAgICAvLyAgIGhvbGRlcjogaG9sZGVyLAogICAgLy8gICBwYXJ0aXRpb246IHBhcnRpdGlvbiwKICAgIC8vIH0pCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjU3CiAgICAvLyBwdWJsaWMgcGFydGl0aW9ucyA9IEJveE1hcDxhcmMxNDEwX1BhcnRpdGlvbktleSwgYXJjNC5VaW50TjI1Nj4oeyBrZXlQcmVmaXg6ICdwJyB9KQogICAgYnl0ZWMgNCAvLyAicCIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo3NQogICAgLy8gcmV0dXJuIHRoaXMucGFydGl0aW9ucyhrZXkpLnZhbHVlCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo6QXJjMTQxMC5hcmMyMDBfdHJhbnNmZXIodG86IGJ5dGVzLCB2YWx1ZTogYnl0ZXMpIC0+IGJ5dGVzOgphcmMyMDBfdHJhbnNmZXI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjc4LTc5CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gcHVibGljIG92ZXJyaWRlIGFyYzIwMF90cmFuc2Zlcih0bzogYXJjNC5BZGRyZXNzLCB2YWx1ZTogYXJjNC5VaW50TjI1Nik6IGFyYzQuQm9vbCB7CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6ODEKICAgIC8vIG5ldyBhcmM0LkFkZHJlc3MoVHhuLnNlbmRlciksCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjgyCiAgICAvLyBuZXcgYXJjNC5BZGRyZXNzKCksCiAgICBieXRlY18xIC8vIGFkZHIgQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVk1SEZLUQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo4MC04NwogICAgLy8gdGhpcy5fdHJhbnNmZXJfcGFydGl0aW9uKAogICAgLy8gICBuZXcgYXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpLAogICAgLy8gICBuZXcgYXJjNC5BZGRyZXNzKCksCiAgICAvLyAgIHRvLAogICAgLy8gICBuZXcgYXJjNC5BZGRyZXNzKCksCiAgICAvLyAgIHZhbHVlLAogICAgLy8gICBuZXcgYXJjNC5EeW5hbWljQnl0ZXMoKSwKICAgIC8vICkKICAgIGZyYW1lX2RpZyAtMgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo4NAogICAgLy8gbmV3IGFyYzQuQWRkcmVzcygpLAogICAgYnl0ZWNfMSAvLyBhZGRyIEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFZNUhGS1EKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6ODAtODcKICAgIC8vIHRoaXMuX3RyYW5zZmVyX3BhcnRpdGlvbigKICAgIC8vICAgbmV3IGFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKSwKICAgIC8vICAgbmV3IGFyYzQuQWRkcmVzcygpLAogICAgLy8gICB0bywKICAgIC8vICAgbmV3IGFyYzQuQWRkcmVzcygpLAogICAgLy8gICB2YWx1ZSwKICAgIC8vICAgbmV3IGFyYzQuRHluYW1pY0J5dGVzKCksCiAgICAvLyApCiAgICBmcmFtZV9kaWcgLTEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6ODYKICAgIC8vIG5ldyBhcmM0LkR5bmFtaWNCeXRlcygpLAogICAgYnl0ZWMgMTcgLy8gMHgwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjgwLTg3CiAgICAvLyB0aGlzLl90cmFuc2Zlcl9wYXJ0aXRpb24oCiAgICAvLyAgIG5ldyBhcmM0LkFkZHJlc3MoVHhuLnNlbmRlciksCiAgICAvLyAgIG5ldyBhcmM0LkFkZHJlc3MoKSwKICAgIC8vICAgdG8sCiAgICAvLyAgIG5ldyBhcmM0LkFkZHJlc3MoKSwKICAgIC8vICAgdmFsdWUsCiAgICAvLyAgIG5ldyBhcmM0LkR5bmFtaWNCeXRlcygpLAogICAgLy8gKQogICAgY2FsbHN1YiBfdHJhbnNmZXJfcGFydGl0aW9uCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjg4CiAgICAvLyByZXR1cm4gdGhpcy5fdHJhbnNmZXIobmV3IGFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKSwgdG8sIHZhbHVlKQogICAgdHhuIFNlbmRlcgogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgX3RyYW5zZmVyCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjpBcmMxNDEwLmFyYzE0MTBfdHJhbnNmZXJfYnlfcGFydGl0aW9uKHBhcnRpdGlvbjogYnl0ZXMsIHRvOiBieXRlcywgYW1vdW50OiBieXRlcywgZGF0YTogYnl0ZXMpIC0+IGJ5dGVzOgphcmMxNDEwX3RyYW5zZmVyX2J5X3BhcnRpdGlvbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6OTMtOTkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBwdWJsaWMgYXJjMTQxMF90cmFuc2Zlcl9ieV9wYXJ0aXRpb24oCiAgICAvLyAgIHBhcnRpdGlvbjogYXJjNC5BZGRyZXNzLAogICAgLy8gICB0bzogYXJjNC5BZGRyZXNzLAogICAgLy8gICBhbW91bnQ6IGFyYzQuVWludE4yNTYsCiAgICAvLyAgIGRhdGE6IGFyYzQuRHluYW1pY0J5dGVzLAogICAgLy8gKTogYXJjNC5BZGRyZXNzIHsKICAgIHByb3RvIDQgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxMDAKICAgIC8vIGNvbnN0IHNlbmRlciA9IG5ldyBhcmM0LkFkZHJlc3MoVHhuLnNlbmRlcikKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTAyCiAgICAvLyBsZXQgcmVjZWl2ZXJQYXJ0aXRpb24gPSB0aGlzLl9yZWNlaXZlclBhcnRpdGlvbih0bywgcGFydGl0aW9uKQogICAgZnJhbWVfZGlnIC0zCiAgICBmcmFtZV9kaWcgLTQKICAgIGNhbGxzdWIgX3JlY2VpdmVyUGFydGl0aW9uCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjEwMwogICAgLy8gdGhpcy5fdHJhbnNmZXJfcGFydGl0aW9uKHNlbmRlciwgcGFydGl0aW9uLCB0bywgcmVjZWl2ZXJQYXJ0aXRpb24sIGFtb3VudCwgZGF0YSkKICAgIHN3YXAKICAgIGZyYW1lX2RpZyAtNAogICAgZnJhbWVfZGlnIC0zCiAgICBkaWcgMwogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgX3RyYW5zZmVyX3BhcnRpdGlvbgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxMDQKICAgIC8vIHJldHVybiByZWNlaXZlclBhcnRpdGlvbgogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo6QXJjMTQxMC5hcmMxNDEwX3BhcnRpdGlvbnNfb2YoaG9sZGVyOiBieXRlcywgcGFnZTogYnl0ZXMpIC0+IGJ5dGVzOgphcmMxNDEwX3BhcnRpdGlvbnNfb2Y6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjEwNy0xMDgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBwdWJsaWMgYXJjMTQxMF9wYXJ0aXRpb25zX29mKGhvbGRlcjogYXJjNC5BZGRyZXNzLCBwYWdlOiBhcmM0LlVpbnRONjQpOiBhcmM0LkFkZHJlc3NbXSB7CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTA5CiAgICAvLyBjb25zdCBrZXkgPSBuZXcgYXJjMTQxMF9Ib2xkaW5nUGFydGl0aW9uc1BhZ2luYXRlZEtleSh7IGhvbGRlcjogaG9sZGVyLCBwYWdlOiBwYWdlIH0pCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjYwCiAgICAvLyBrZXlQcmVmaXg6ICdocF9hJywKICAgIGJ5dGVjIDExIC8vICJocF9hIgogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTEwCiAgICAvLyBpZiAoIXRoaXMuaG9sZGVyUGFydGl0aW9uc0FkZHJlc3NlcyhrZXkpLmV4aXN0cykgcmV0dXJuIFtdCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJueiBhcmMxNDEwX3BhcnRpdGlvbnNfb2ZfYWZ0ZXJfaWZfZWxzZUAyCiAgICBieXRlYyAxNyAvLyAweDAwMDAKICAgIHN3YXAKICAgIHJldHN1YgoKYXJjMTQxMF9wYXJ0aXRpb25zX29mX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTExCiAgICAvLyByZXR1cm4gdGhpcy5ob2xkZXJQYXJ0aXRpb25zQWRkcmVzc2VzKGtleSkudmFsdWUKICAgIGZyYW1lX2RpZyAwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgc3dhcAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo6QXJjMTQxMC5hcmMxNDEwX2lzX29wZXJhdG9yKGhvbGRlcjogYnl0ZXMsIG9wZXJhdG9yOiBieXRlcywgcGFydGl0aW9uOiBieXRlcykgLT4gYnl0ZXM6CmFyYzE0MTBfaXNfb3BlcmF0b3I6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjExNC0xMTUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICAvLyBwdWJsaWMgYXJjMTQxMF9pc19vcGVyYXRvcihob2xkZXI6IGFyYzQuQWRkcmVzcywgb3BlcmF0b3I6IGFyYzQuQWRkcmVzcywgcGFydGl0aW9uOiBhcmM0LkFkZHJlc3MpOiBhcmM0LkJvb2wgewogICAgcHJvdG8gMyAxCiAgICBpbnRjXzAgLy8gMAogICAgZHVwbiAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjExNgogICAgLy8gaWYgKG9wZXJhdG9yID09PSBob2xkZXIpIHJldHVybiBuZXcgYXJjNC5Cb29sKHRydWUpCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMwogICAgPT0KICAgIGJ6IGFyYzE0MTBfaXNfb3BlcmF0b3JfYWZ0ZXJfaWZfZWxzZUAyCiAgICBieXRlYyA1IC8vIDB4ODAKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgphcmMxNDEwX2lzX29wZXJhdG9yX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTE3CiAgICAvLyBjb25zdCBzcGVjaWZpYyA9IG5ldyBhcmMxNDEwX09wZXJhdG9yS2V5KHsgaG9sZGVyOiBob2xkZXIsIG9wZXJhdG9yOiBvcGVyYXRvciwgcGFydGl0aW9uOiBwYXJ0aXRpb24gfSkKICAgIGZyYW1lX2RpZyAtMwogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIGR1cAogICAgZnJhbWVfYnVyeSAwCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo2MgogICAgLy8gcHVibGljIG9wZXJhdG9ycyA9IEJveE1hcDxhcmMxNDEwX09wZXJhdG9yS2V5LCBhcmM0LkJ5dGU+KHsga2V5UHJlZml4OiAnb3AnIH0pIC8vIHZhbHVlID0gMSBhdXRob3JpemVkCiAgICBieXRlYyAxMiAvLyAib3AiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgZnJhbWVfYnVyeSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjExOAogICAgLy8gaWYgKHRoaXMub3BlcmF0b3JzKHNwZWNpZmljKS5leGlzdHMgJiYgdGhpcy5vcGVyYXRvcnMoc3BlY2lmaWMpLnZhbHVlLm5hdGl2ZSA9PT0gMSkgewogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBieiBhcmMxNDEwX2lzX29wZXJhdG9yX2FmdGVyX2lmX2Vsc2VANQogICAgZnJhbWVfZGlnIDEKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBidG9pCiAgICBpbnRjXzEgLy8gMQogICAgPT0KICAgIGJ6IGFyYzE0MTBfaXNfb3BlcmF0b3JfYWZ0ZXJfaWZfZWxzZUA1CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjExOQogICAgLy8gcmV0dXJuIG5ldyBhcmM0LkJvb2wodHJ1ZSkKICAgIGJ5dGVjIDUgLy8gMHg4MAogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCmFyYzE0MTBfaXNfb3BlcmF0b3JfYWZ0ZXJfaWZfZWxzZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxMjEKICAgIC8vIGNvbnN0IGdsb2JhbEtleSA9IG5ldyBhcmMxNDEwX09wZXJhdG9yS2V5KHsgaG9sZGVyOiBob2xkZXIsIG9wZXJhdG9yOiBvcGVyYXRvciwgcGFydGl0aW9uOiBuZXcgYXJjNC5BZGRyZXNzKCkgfSkKICAgIGZyYW1lX2RpZyAwCiAgICBieXRlY18xIC8vIGFkZHIgQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVk1SEZLUQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjYyCiAgICAvLyBwdWJsaWMgb3BlcmF0b3JzID0gQm94TWFwPGFyYzE0MTBfT3BlcmF0b3JLZXksIGFyYzQuQnl0ZT4oeyBrZXlQcmVmaXg6ICdvcCcgfSkgLy8gdmFsdWUgPSAxIGF1dGhvcml6ZWQKICAgIGJ5dGVjIDEyIC8vICJvcCIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTIyCiAgICAvLyBpZiAodGhpcy5vcGVyYXRvcnMoZ2xvYmFsS2V5KS5leGlzdHMgJiYgdGhpcy5vcGVyYXRvcnMoZ2xvYmFsS2V5KS52YWx1ZS5uYXRpdmUgPT09IDEpIHsKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYnogYXJjMTQxMF9pc19vcGVyYXRvcl9hZnRlcl9pZl9lbHNlQDgKICAgIGZyYW1lX2RpZyAyCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgYnRvaQogICAgaW50Y18xIC8vIDEKICAgID09CiAgICBieiBhcmMxNDEwX2lzX29wZXJhdG9yX2FmdGVyX2lmX2Vsc2VAOAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxMjMKICAgIC8vIHJldHVybiBuZXcgYXJjNC5Cb29sKHRydWUpCiAgICBieXRlYyA1IC8vIDB4ODAKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgphcmMxNDEwX2lzX29wZXJhdG9yX2FmdGVyX2lmX2Vsc2VAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTI1CiAgICAvLyByZXR1cm4gbmV3IGFyYzQuQm9vbChmYWxzZSkKICAgIGJ5dGVjIDggLy8gMHgwMAogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjpBcmMxNDEwLmFyYzE0MTBfYXV0aG9yaXplX29wZXJhdG9yKGhvbGRlcjogYnl0ZXMsIG9wZXJhdG9yOiBieXRlcywgcGFydGl0aW9uOiBieXRlcykgLT4gdm9pZDoKYXJjMTQxMF9hdXRob3JpemVfb3BlcmF0b3I6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjEyOC0xMjkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBwdWJsaWMgYXJjMTQxMF9hdXRob3JpemVfb3BlcmF0b3IoaG9sZGVyOiBhcmM0LkFkZHJlc3MsIG9wZXJhdG9yOiBhcmM0LkFkZHJlc3MsIHBhcnRpdGlvbjogYXJjNC5BZGRyZXNzKTogdm9pZCB7CiAgICBwcm90byAzIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTMwCiAgICAvLyBhc3NlcnQobmV3IGFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKSA9PT0gaG9sZGVyLCAnT25seSBob2xkZXIgY2FuIGF1dGhvcml6ZScpCiAgICB0eG4gU2VuZGVyCiAgICBmcmFtZV9kaWcgLTMKICAgID09CiAgICBhc3NlcnQgLy8gT25seSBob2xkZXIgY2FuIGF1dGhvcml6ZQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxMzEKICAgIC8vIGNvbnN0IGtleSA9IG5ldyBhcmMxNDEwX09wZXJhdG9yS2V5KHsgaG9sZGVyOiBob2xkZXIsIG9wZXJhdG9yOiBvcGVyYXRvciwgcGFydGl0aW9uOiBwYXJ0aXRpb24gfSkKICAgIGZyYW1lX2RpZyAtMwogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjYyCiAgICAvLyBwdWJsaWMgb3BlcmF0b3JzID0gQm94TWFwPGFyYzE0MTBfT3BlcmF0b3JLZXksIGFyYzQuQnl0ZT4oeyBrZXlQcmVmaXg6ICdvcCcgfSkgLy8gdmFsdWUgPSAxIGF1dGhvcml6ZWQKICAgIGJ5dGVjIDEyIC8vICJvcCIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxMzIKICAgIC8vIHRoaXMub3BlcmF0b3JzKGtleSkudmFsdWUgPSBuZXcgYXJjNC5CeXRlKDEpCiAgICBieXRlYyAxNCAvLyAweDAxCiAgICBib3hfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjpBcmMxNDEwLmFyYzE0MTBfcmV2b2tlX29wZXJhdG9yKGhvbGRlcjogYnl0ZXMsIG9wZXJhdG9yOiBieXRlcywgcGFydGl0aW9uOiBieXRlcykgLT4gdm9pZDoKYXJjMTQxMF9yZXZva2Vfb3BlcmF0b3I6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjEzNS0xMzYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBwdWJsaWMgYXJjMTQxMF9yZXZva2Vfb3BlcmF0b3IoaG9sZGVyOiBhcmM0LkFkZHJlc3MsIG9wZXJhdG9yOiBhcmM0LkFkZHJlc3MsIHBhcnRpdGlvbjogYXJjNC5BZGRyZXNzKTogdm9pZCB7CiAgICBwcm90byAzIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTM3CiAgICAvLyBhc3NlcnQobmV3IGFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKSA9PT0gaG9sZGVyLCAnT25seSBob2xkZXIgY2FuIHJldm9rZScpCiAgICB0eG4gU2VuZGVyCiAgICBmcmFtZV9kaWcgLTMKICAgID09CiAgICBhc3NlcnQgLy8gT25seSBob2xkZXIgY2FuIHJldm9rZQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxMzgKICAgIC8vIGNvbnN0IGtleSA9IG5ldyBhcmMxNDEwX09wZXJhdG9yS2V5KHsgaG9sZGVyOiBob2xkZXIsIG9wZXJhdG9yOiBvcGVyYXRvciwgcGFydGl0aW9uOiBwYXJ0aXRpb24gfSkKICAgIGZyYW1lX2RpZyAtMwogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjYyCiAgICAvLyBwdWJsaWMgb3BlcmF0b3JzID0gQm94TWFwPGFyYzE0MTBfT3BlcmF0b3JLZXksIGFyYzQuQnl0ZT4oeyBrZXlQcmVmaXg6ICdvcCcgfSkgLy8gdmFsdWUgPSAxIGF1dGhvcml6ZWQKICAgIGJ5dGVjIDEyIC8vICJvcCIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjEzOQogICAgLy8gaWYgKHRoaXMub3BlcmF0b3JzKGtleSkuZXhpc3RzKSB7CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJ6IGFyYzE0MTBfcmV2b2tlX29wZXJhdG9yX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxNDAKICAgIC8vIHRoaXMub3BlcmF0b3JzKGtleSkuZGVsZXRlKCkKICAgIGZyYW1lX2RpZyAwCiAgICBib3hfZGVsCiAgICBwb3AKCmFyYzE0MTBfcmV2b2tlX29wZXJhdG9yX2FmdGVyX2lmX2Vsc2VAMjoKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6OkFyYzE0MTAuYXJjMTQxMF9vcGVyYXRvcl90cmFuc2Zlcl9ieV9wYXJ0aXRpb24oZnJvbTogYnl0ZXMsIHBhcnRpdGlvbjogYnl0ZXMsIHRvOiBieXRlcywgYW1vdW50OiBieXRlcywgZGF0YTogYnl0ZXMpIC0+IGJ5dGVzOgphcmMxNDEwX29wZXJhdG9yX3RyYW5zZmVyX2J5X3BhcnRpdGlvbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTQ0LTE1MQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIHB1YmxpYyBhcmMxNDEwX29wZXJhdG9yX3RyYW5zZmVyX2J5X3BhcnRpdGlvbigKICAgIC8vICAgZnJvbTogYXJjNC5BZGRyZXNzLAogICAgLy8gICBwYXJ0aXRpb246IGFyYzQuQWRkcmVzcywKICAgIC8vICAgdG86IGFyYzQuQWRkcmVzcywKICAgIC8vICAgYW1vdW50OiBhcmM0LlVpbnROMjU2LAogICAgLy8gICBkYXRhOiBhcmM0LkR5bmFtaWNCeXRlcywKICAgIC8vICk6IGFyYzQuQWRkcmVzcyB7CiAgICBwcm90byA1IDEKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjE1MgogICAgLy8gY29uc3Qgc2VuZGVyID0gbmV3IGFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKQogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxNTQKICAgIC8vIGxldCBhdXRob3JpemVkID0gdGhpcy5hcmMxNDEwX2lzX29wZXJhdG9yKGZyb20sIHNlbmRlciwgcGFydGl0aW9uKS5uYXRpdmUgPT09IHRydWUKICAgIGZyYW1lX2RpZyAtNQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxNTIKICAgIC8vIGNvbnN0IHNlbmRlciA9IG5ldyBhcmM0LkFkZHJlc3MoVHhuLnNlbmRlcikKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTU0CiAgICAvLyBsZXQgYXV0aG9yaXplZCA9IHRoaXMuYXJjMTQxMF9pc19vcGVyYXRvcihmcm9tLCBzZW5kZXIsIHBhcnRpdGlvbikubmF0aXZlID09PSB0cnVlCiAgICBmcmFtZV9kaWcgLTQKICAgIGNhbGxzdWIgYXJjMTQxMF9pc19vcGVyYXRvcgogICAgaW50Y18wIC8vIDAKICAgIGdldGJpdAogICAgaW50Y18xIC8vIDEKICAgID09CiAgICBkdXBuIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTU2CiAgICAvLyBpZiAoIWF1dGhvcml6ZWQpIHsKICAgIGJueiBhcmMxNDEwX29wZXJhdG9yX3RyYW5zZmVyX2J5X3BhcnRpdGlvbl9hZnRlcl9pZl9lbHNlQDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTU4CiAgICAvLyBjb25zdCBwS2V5ID0gbmV3IGFyYzE0MTBfT3BlcmF0b3JQb3J0aW9uS2V5KHsgaG9sZGVyOiBmcm9tLCBvcGVyYXRvcjogc2VuZGVyLCBwYXJ0aXRpb24gfSkKICAgIGZyYW1lX2RpZyAtNQogICAgZnJhbWVfZGlnIDEKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC00CiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NjMKICAgIC8vIHB1YmxpYyBvcGVyYXRvclBvcnRpb25BbGxvd2FuY2VzID0gQm94TWFwPGFyYzE0MTBfT3BlcmF0b3JQb3J0aW9uS2V5LCBhcmM0LlVpbnROMjU2Pih7IGtleVByZWZpeDogJ29wYScgfSkKICAgIGJ5dGVjIDEwIC8vICJvcGEiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgZnJhbWVfYnVyeSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjE1OQogICAgLy8gaWYgKHRoaXMub3BlcmF0b3JQb3J0aW9uQWxsb3dhbmNlcyhwS2V5KS5leGlzdHMpIHsKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYnogYXJjMTQxMF9vcGVyYXRvcl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjE2MAogICAgLy8gY29uc3QgcmVtYWluaW5nID0gdGhpcy5vcGVyYXRvclBvcnRpb25BbGxvd2FuY2VzKHBLZXkpLnZhbHVlCiAgICBmcmFtZV9kaWcgMAogICAgZHVwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxNjEKICAgIC8vIGFzc2VydChyZW1haW5pbmcubmF0aXZlID49IGFtb3VudC5uYXRpdmUsICdQb3J0aW9uIGFsbG93YW5jZSBleGNlZWRlZCcpCiAgICBkdXAKICAgIGZyYW1lX2RpZyAtMgogICAgYj49CiAgICBhc3NlcnQgLy8gUG9ydGlvbiBhbGxvd2FuY2UgZXhjZWVkZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTYyCiAgICAvLyBhdXRob3JpemVkID0gdHJ1ZQogICAgaW50Y18xIC8vIDEKICAgIGZyYW1lX2J1cnkgMgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxNjUKICAgIC8vIHRoaXMub3BlcmF0b3JQb3J0aW9uQWxsb3dhbmNlcyhwS2V5KS52YWx1ZSA9IG5ldyBhcmM0LlVpbnROMjU2KHJlbWFpbmluZy5uYXRpdmUgLSBhbW91bnQubmF0aXZlKQogICAgZnJhbWVfZGlnIC0yCiAgICBiLQogICAgZHVwCiAgICBsZW4KICAgIGludGNfMiAvLyAzMgogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgaW50Y18yIC8vIDMyCiAgICBiemVybwogICAgYnwKICAgIGJveF9wdXQKCmFyYzE0MTBfb3BlcmF0b3JfdHJhbnNmZXJfYnlfcGFydGl0aW9uX2FmdGVyX2lmX2Vsc2VAMzoKICAgIGZyYW1lX2RpZyAyCiAgICBmcmFtZV9idXJ5IDMKCmFyYzE0MTBfb3BlcmF0b3JfdHJhbnNmZXJfYnlfcGFydGl0aW9uX2FmdGVyX2lmX2Vsc2VANDoKICAgIGZyYW1lX2RpZyAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjE2OAogICAgLy8gYXNzZXJ0KGF1dGhvcml6ZWQsICdOb3QgYXV0aG9yaXplZCBvcGVyYXRvcicpCiAgICBhc3NlcnQgLy8gTm90IGF1dGhvcml6ZWQgb3BlcmF0b3IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTY5CiAgICAvLyBsZXQgcmVjZWl2ZXJQYXJ0aXRpb24gPSB0aGlzLl9yZWNlaXZlclBhcnRpdGlvbih0bywgcGFydGl0aW9uKQogICAgZnJhbWVfZGlnIC0zCiAgICBmcmFtZV9kaWcgLTQKICAgIGNhbGxzdWIgX3JlY2VpdmVyUGFydGl0aW9uCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjE3MAogICAgLy8gdGhpcy5fdHJhbnNmZXJfcGFydGl0aW9uKGZyb20sIHBhcnRpdGlvbiwgdG8sIHJlY2VpdmVyUGFydGl0aW9uLCBhbW91bnQsIGRhdGEpCiAgICBmcmFtZV9kaWcgLTUKICAgIGZyYW1lX2RpZyAtNAogICAgZnJhbWVfZGlnIC0zCiAgICBkaWcgMwogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgX3RyYW5zZmVyX3BhcnRpdGlvbgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxNzEKICAgIC8vIHJldHVybiByZWNlaXZlclBhcnRpdGlvbgogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjpBcmMxNDEwLmFyYzE0MTBfY2FuX3RyYW5zZmVyX2J5X3BhcnRpdGlvbihmcm9tOiBieXRlcywgcGFydGl0aW9uOiBieXRlcywgdG86IGJ5dGVzLCBhbW91bnQ6IGJ5dGVzLCBkYXRhOiBieXRlcykgLT4gYnl0ZXM6CmFyYzE0MTBfY2FuX3RyYW5zZmVyX2J5X3BhcnRpdGlvbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTc0LTE4MQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIHB1YmxpYyBhcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb24oCiAgICAvLyAgIGZyb206IGFyYzQuQWRkcmVzcywKICAgIC8vICAgcGFydGl0aW9uOiBhcmM0LkFkZHJlc3MsCiAgICAvLyAgIHRvOiBhcmM0LkFkZHJlc3MsCiAgICAvLyAgIGFtb3VudDogYXJjNC5VaW50TjI1NiwKICAgIC8vICAgZGF0YTogYXJjNC5EeW5hbWljQnl0ZXMsCiAgICAvLyApOiBhcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fcmV0dXJuIHsKICAgIHByb3RvIDUgMQogICAgaW50Y18wIC8vIDAKICAgIGR1cAogICAgcHVzaGJ5dGVzICIiCiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MjUxCiAgICAvLyByZXR1cm4gdGhpcy5wYXJ0aXRpb25zKG5ldyBhcmMxNDEwX1BhcnRpdGlvbktleSh7IGhvbGRlcjogaG9sZGVyLCBwYXJ0aXRpb246IHBhcnRpdGlvbiB9KSkuZXhpc3RzCiAgICBmcmFtZV9kaWcgLTUKICAgIGZyYW1lX2RpZyAtNAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjU3CiAgICAvLyBwdWJsaWMgcGFydGl0aW9ucyA9IEJveE1hcDxhcmMxNDEwX1BhcnRpdGlvbktleSwgYXJjNC5VaW50TjI1Nj4oeyBrZXlQcmVmaXg6ICdwJyB9KQogICAgYnl0ZWMgNCAvLyAicCIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI1MQogICAgLy8gcmV0dXJuIHRoaXMucGFydGl0aW9ucyhuZXcgYXJjMTQxMF9QYXJ0aXRpb25LZXkoeyBob2xkZXI6IGhvbGRlciwgcGFydGl0aW9uOiBwYXJ0aXRpb24gfSkpLmV4aXN0cwogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjE4MgogICAgLy8gaWYgKCF0aGlzLl92YWxpZFBhcnRpdGlvbihmcm9tLCBwYXJ0aXRpb24pKSB7CiAgICBibnogYXJjMTQxMF9jYW5fdHJhbnNmZXJfYnlfcGFydGl0aW9uX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxODMtMTg3CiAgICAvLyByZXR1cm4gbmV3IGFyYzE0MTBfY2FuX3RyYW5zZmVyX2J5X3BhcnRpdGlvbl9yZXR1cm4oewogICAgLy8gICBjb2RlOiBuZXcgYXJjNC5CeXRlKDB4NTApLAogICAgLy8gICBzdGF0dXM6IG5ldyBhcmM0LlN0cignUGFydGl0aW9uIG5vdCBleGlzdHMnKSwKICAgIC8vICAgcmVjZWl2ZXJQYXJ0aXRpb246IG5ldyBhcmM0LkFkZHJlc3MoKSwKICAgIC8vIH0pCiAgICBwdXNoYnl0ZXMgYmFzZTMyKEtBQUNHQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFLRkFZTFNPUlVYSTJMUE5ZUUc0MzNVRUJTWFEyTFRPUlpRKQogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCmFyYzE0MTBfY2FuX3RyYW5zZmVyX2J5X3BhcnRpdGlvbl9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjE5MAogICAgLy8gdGhpcy5wYXJ0aXRpb25zKG5ldyBhcmMxNDEwX1BhcnRpdGlvbktleSh7IGhvbGRlcjogZnJvbSwgcGFydGl0aW9uOiBwYXJ0aXRpb24gfSkpLnZhbHVlLm5hdGl2ZSA8IGFtb3VudC5uYXRpdmUKICAgIGZyYW1lX2RpZyA0CiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgZnJhbWVfZGlnIC0yCiAgICBiPAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxODktMTkxCiAgICAvLyBpZiAoCiAgICAvLyAgIHRoaXMucGFydGl0aW9ucyhuZXcgYXJjMTQxMF9QYXJ0aXRpb25LZXkoeyBob2xkZXI6IGZyb20sIHBhcnRpdGlvbjogcGFydGl0aW9uIH0pKS52YWx1ZS5uYXRpdmUgPCBhbW91bnQubmF0aXZlCiAgICAvLyApIHsKICAgIGJ6IGFyYzE0MTBfY2FuX3RyYW5zZmVyX2J5X3BhcnRpdGlvbl9hZnRlcl9pZl9lbHNlQDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MTkyLTE5NgogICAgLy8gcmV0dXJuIG5ldyBhcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fcmV0dXJuKHsKICAgIC8vICAgY29kZTogbmV3IGFyYzQuQnl0ZSgweDUyKSwKICAgIC8vICAgc3RhdHVzOiBuZXcgYXJjNC5TdHIoJ0luc3VmZmljaWVudCBiYWxhbmNlJyksCiAgICAvLyAgIHJlY2VpdmVyUGFydGl0aW9uOiBuZXcgYXJjNC5BZGRyZXNzKCksCiAgICAvLyB9KQogICAgcHVzaGJ5dGVzIGJhc2UzMihLSUFDR0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBS0VTM1RUT1ZUR00yTERORlNXNDVCQU1KUVdZWUxPTU5TUSkKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgphcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoxOTkKICAgIC8vIGlmICh0byA9PT0gbmV3IGFyYzQuQWRkcmVzcygpKSB7CiAgICBmcmFtZV9kaWcgLTMKICAgIGJ5dGVjXzEgLy8gYWRkciBBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBWTVIRktRCiAgICA9PQogICAgYnogYXJjMTQxMF9jYW5fdHJhbnNmZXJfYnlfcGFydGl0aW9uX2FmdGVyX2lmX2Vsc2VANgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyMDAtMjA0CiAgICAvLyByZXR1cm4gbmV3IGFyYzE0MTBfY2FuX3RyYW5zZmVyX2J5X3BhcnRpdGlvbl9yZXR1cm4oewogICAgLy8gICBjb2RlOiBuZXcgYXJjNC5CeXRlKDB4NTcpLAogICAgLy8gICBzdGF0dXM6IG5ldyBhcmM0LlN0cignSW52YWxpZCByZWNlaXZlcicpLAogICAgLy8gICByZWNlaXZlclBhcnRpdGlvbjogbmV3IGFyYzQuQWRkcmVzcygpLAogICAgLy8gfSkKICAgIHB1c2hieXRlcyBiYXNlMzIoSzRBQ0dBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUlFUzNUV01GV0dTWkJBT0pTV0daTEpPWlNYRSkKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgphcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyMDgKICAgIC8vIGNvbnN0IHNlbmRlckFkZHIgPSBuZXcgYXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpCiAgICB0eG4gU2VuZGVyCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyMDkKICAgIC8vIGlmIChzZW5kZXJBZGRyICE9PSBmcm9tKSB7CiAgICBmcmFtZV9kaWcgLTUKICAgICE9CiAgICBieiBhcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUAxNgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyMTAKICAgIC8vIGxldCBhdXRob3JpemVkID0gdGhpcy5hcmMxNDEwX2lzX29wZXJhdG9yKGZyb20sIHNlbmRlckFkZHIsIHBhcnRpdGlvbikubmF0aXZlID09PSB0cnVlCiAgICBmcmFtZV9kaWcgLTUKICAgIGZyYW1lX2RpZyAwCiAgICBmcmFtZV9kaWcgLTQKICAgIGNhbGxzdWIgYXJjMTQxMF9pc19vcGVyYXRvcgogICAgaW50Y18wIC8vIDAKICAgIGdldGJpdAogICAgaW50Y18xIC8vIDEKICAgID09CiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMgogICAgZHVwCiAgICBmcmFtZV9idXJ5IDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MjExCiAgICAvLyBpZiAoIWF1dGhvcml6ZWQpIHsKICAgIGJueiBhcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUAxMwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyMTIKICAgIC8vIGNvbnN0IHBLZXkgPSBuZXcgYXJjMTQxMF9PcGVyYXRvclBvcnRpb25LZXkoeyBob2xkZXI6IGZyb20sIG9wZXJhdG9yOiBzZW5kZXJBZGRyLCBwYXJ0aXRpb24gfSkKICAgIGZyYW1lX2RpZyAtNQogICAgZnJhbWVfZGlnIDAKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC00CiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NjMKICAgIC8vIHB1YmxpYyBvcGVyYXRvclBvcnRpb25BbGxvd2FuY2VzID0gQm94TWFwPGFyYzE0MTBfT3BlcmF0b3JQb3J0aW9uS2V5LCBhcmM0LlVpbnROMjU2Pih7IGtleVByZWZpeDogJ29wYScgfSkKICAgIGJ5dGVjIDEwIC8vICJvcGEiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgZnJhbWVfYnVyeSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjIxMwogICAgLy8gaWYgKHRoaXMub3BlcmF0b3JQb3J0aW9uQWxsb3dhbmNlcyhwS2V5KS5leGlzdHMpIHsKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgZnJhbWVfZGlnIDIKICAgIGZyYW1lX2J1cnkgMwogICAgYnogYXJjMTQxMF9jYW5fdHJhbnNmZXJfYnlfcGFydGl0aW9uX2FmdGVyX2lmX2Vsc2VAMTMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MjE0CiAgICAvLyBjb25zdCByZW1haW5pbmcgPSB0aGlzLm9wZXJhdG9yUG9ydGlvbkFsbG93YW5jZXMocEtleSkudmFsdWUKICAgIGZyYW1lX2RpZyAxCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyMTUKICAgIC8vIGlmIChyZW1haW5pbmcubmF0aXZlID49IGFtb3VudC5uYXRpdmUpIHsKICAgIGZyYW1lX2RpZyAtMgogICAgYj49CiAgICBieiBhcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUAxMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyMTYKICAgIC8vIGF1dGhvcml6ZWQgPSB0cnVlCiAgICBpbnRjXzEgLy8gMQogICAgZnJhbWVfYnVyeSAyCgphcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUAxMToKICAgIGZyYW1lX2RpZyAyCiAgICBmcmFtZV9idXJ5IDMKCmFyYzE0MTBfY2FuX3RyYW5zZmVyX2J5X3BhcnRpdGlvbl9hZnRlcl9pZl9lbHNlQDEzOgogICAgZnJhbWVfZGlnIDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MjIwCiAgICAvLyBpZiAoIWF1dGhvcml6ZWQpIHsKICAgIGJueiBhcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUAxNgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyMjEtMjI1CiAgICAvLyByZXR1cm4gbmV3IGFyYzE0MTBfY2FuX3RyYW5zZmVyX2J5X3BhcnRpdGlvbl9yZXR1cm4oewogICAgLy8gICBjb2RlOiBuZXcgYXJjNC5CeXRlKDB4NTgpLAogICAgLy8gICBzdGF0dXM6IG5ldyBhcmM0LlN0cignT3BlcmF0b3Igbm90IGF1dGhvcml6ZWQnKSwKICAgIC8vICAgcmVjZWl2ZXJQYXJ0aXRpb246IG5ldyBhcmM0LkFkZHJlc3MoKSwKICAgIC8vIH0pCiAgICBwdXNoYnl0ZXMgYmFzZTMyKExBQUNHQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFMVTY0REZPSlFYSTMzU0VCWEc2NUJBTUYyWEkyRFBPSlVYVVpMRSkKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgphcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUAxNjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MjI5CiAgICAvLyBsZXQgcmVjZWl2ZXJQYXJ0aXRpb24gPSB0aGlzLl9yZWNlaXZlclBhcnRpdGlvbih0bywgcGFydGl0aW9uKQogICAgZnJhbWVfZGlnIC0zCiAgICBmcmFtZV9kaWcgLTQKICAgIGNhbGxzdWIgX3JlY2VpdmVyUGFydGl0aW9uCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjIzMS0yMzUKICAgIC8vIHJldHVybiBuZXcgYXJjMTQxMF9jYW5fdHJhbnNmZXJfYnlfcGFydGl0aW9uX3JldHVybih7CiAgICAvLyAgIGNvZGU6IG5ldyBhcmM0LkJ5dGUoMHg1MSksCiAgICAvLyAgIHN0YXR1czogbmV3IGFyYzQuU3RyKCdTdWNjZXNzJyksCiAgICAvLyAgIHJlY2VpdmVyUGFydGl0aW9uOiByZWNlaXZlclBhcnRpdGlvbiwKICAgIC8vIH0pCiAgICBwdXNoYnl0ZXMgMHg1MTAwMjMKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyMzMKICAgIC8vIHN0YXR1czogbmV3IGFyYzQuU3RyKCdTdWNjZXNzJyksCiAgICBwdXNoYnl0ZXMgMHgwMDA3NTM3NTYzNjM2NTczNzMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MjMxLTIzNQogICAgLy8gcmV0dXJuIG5ldyBhcmMxNDEwX2Nhbl90cmFuc2Zlcl9ieV9wYXJ0aXRpb25fcmV0dXJuKHsKICAgIC8vICAgY29kZTogbmV3IGFyYzQuQnl0ZSgweDUxKSwKICAgIC8vICAgc3RhdHVzOiBuZXcgYXJjNC5TdHIoJ1N1Y2Nlc3MnKSwKICAgIC8vICAgcmVjZWl2ZXJQYXJ0aXRpb246IHJlY2VpdmVyUGFydGl0aW9uLAogICAgLy8gfSkKICAgIGNvbmNhdAogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjpBcmMxNDEwLl9yZWNlaXZlclBhcnRpdGlvbihyZWNlaXZlcjogYnl0ZXMsIHBhcnRpdGlvbjogYnl0ZXMpIC0+IGJ5dGVzOgpfcmVjZWl2ZXJQYXJ0aXRpb246CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI0MwogICAgLy8gcHJvdGVjdGVkIF9yZWNlaXZlclBhcnRpdGlvbihyZWNlaXZlcjogYXJjNC5BZGRyZXNzLCBwYXJ0aXRpb246IGFyYzQuQWRkcmVzcyk6IGFyYzQuQWRkcmVzcyB7CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MjQ0CiAgICAvLyBsZXQgcmVjZWl2ZXJQYXJ0aXRpb24gPSBuZXcgYXJjNC5BZGRyZXNzKCkKICAgIGJ5dGVjXzEgLy8gYWRkciBBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBWTVIRktRCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI0NQogICAgLy8gaWYgKHRoaXMucGFydGl0aW9ucyhuZXcgYXJjMTQxMF9QYXJ0aXRpb25LZXkoeyBob2xkZXI6IHJlY2VpdmVyLCBwYXJ0aXRpb246IHBhcnRpdGlvbiB9KSkuZXhpc3RzKSB7CiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjU3CiAgICAvLyBwdWJsaWMgcGFydGl0aW9ucyA9IEJveE1hcDxhcmMxNDEwX1BhcnRpdGlvbktleSwgYXJjNC5VaW50TjI1Nj4oeyBrZXlQcmVmaXg6ICdwJyB9KQogICAgYnl0ZWMgNCAvLyAicCIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyNDUKICAgIC8vIGlmICh0aGlzLnBhcnRpdGlvbnMobmV3IGFyYzE0MTBfUGFydGl0aW9uS2V5KHsgaG9sZGVyOiByZWNlaXZlciwgcGFydGl0aW9uOiBwYXJ0aXRpb24gfSkpLmV4aXN0cykgewogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBieiBfcmVjZWl2ZXJQYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUAyCiAgICBmcmFtZV9kaWcgLTEKICAgIGZyYW1lX2J1cnkgMAoKX3JlY2VpdmVyUGFydGl0aW9uX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MjQ4CiAgICAvLyByZXR1cm4gcmVjZWl2ZXJQYXJ0aXRpb24KICAgIGZyYW1lX2RpZyAwCiAgICBzd2FwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjpBcmMxNDEwLl9hZGRfcGFydGljaXBhdGlvbl90b19ob2xkZXIoaG9sZGVyOiBieXRlcywgcGFydGljaXBhdGlvbjogYnl0ZXMpIC0+IHZvaWQ6Cl9hZGRfcGFydGljaXBhdGlvbl90b19ob2xkZXI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI2NAogICAgLy8gcHJvdGVjdGVkIF9hZGRfcGFydGljaXBhdGlvbl90b19ob2xkZXIoaG9sZGVyOiBhcmM0LkFkZHJlc3MsIHBhcnRpY2lwYXRpb246IGFyYzQuQWRkcmVzcyk6IHZvaWQgewogICAgcHJvdG8gMiAwCiAgICBpbnRjXzAgLy8gMAogICAgZHVwbiA0CiAgICBwdXNoYnl0ZXMgIiIKICAgIGR1cG4gNAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo1OAogICAgLy8gcHVibGljIGhvbGRlclBhcnRpdGlvbnNDdXJyZW50UGFnZSA9IEJveE1hcDxhcmM0LkFkZHJlc3MsIGFyYzQuVWludE42ND4oeyBrZXlQcmVmaXg6ICdocF9wJyB9KQogICAgcHVzaGJ5dGVzICJocF9wIgogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyNjYKICAgIC8vIGlmICghdGhpcy5ob2xkZXJQYXJ0aXRpb25zQ3VycmVudFBhZ2UoaG9sZGVyKS5leGlzdHMpIHsKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYm56IF9hZGRfcGFydGljaXBhdGlvbl90b19ob2xkZXJfYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI2NwogICAgLy8gdGhpcy5ob2xkZXJQYXJ0aXRpb25zQ3VycmVudFBhZ2UoaG9sZGVyKS52YWx1ZSA9IHBhZ2UKICAgIGZyYW1lX2RpZyAxMAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyNjUKICAgIC8vIGxldCBwYWdlID0gbmV3IGFyYzQuVWludE42NCgwKQogICAgYnl0ZWMgMTggLy8gMHgwMDAwMDAwMDAwMDAwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI2NwogICAgLy8gdGhpcy5ob2xkZXJQYXJ0aXRpb25zQ3VycmVudFBhZ2UoaG9sZGVyKS52YWx1ZSA9IHBhZ2UKICAgIGJveF9wdXQKCl9hZGRfcGFydGljaXBhdGlvbl90b19ob2xkZXJfYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyNjkKICAgIC8vIGNvbnN0IGxhc3RQYWdlID0gdGhpcy5ob2xkZXJQYXJ0aXRpb25zQ3VycmVudFBhZ2UoaG9sZGVyKS52YWx1ZQogICAgZnJhbWVfZGlnIDEwCiAgICBib3hfZ2V0CiAgICBzd2FwCiAgICBmcmFtZV9idXJ5IDIKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI3MAogICAgLy8gbGV0IGZvdW5kID0gZmFsc2UKICAgIGludGNfMCAvLyAwCiAgICBmcmFtZV9idXJ5IDYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MjY1CiAgICAvLyBsZXQgcGFnZSA9IG5ldyBhcmM0LlVpbnRONjQoMCkKICAgIGJ5dGVjIDE4IC8vIDB4MDAwMDAwMDAwMDAwMDAwMAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyNzEKICAgIC8vIGZvciAobGV0IGN1clBhZ2UgPSBwYWdlOyBjdXJQYWdlLm5hdGl2ZSA8IGxhc3RQYWdlLm5hdGl2ZTsgY3VyUGFnZSA9IG5ldyBhcmM0LlVpbnRONjQoY3VyUGFnZS5uYXRpdmUgKyAxKSkgewogICAgZnJhbWVfYnVyeSAxCgpfYWRkX3BhcnRpY2lwYXRpb25fdG9faG9sZGVyX3doaWxlX3RvcEAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyNzEKICAgIC8vIGZvciAobGV0IGN1clBhZ2UgPSBwYWdlOyBjdXJQYWdlLm5hdGl2ZSA8IGxhc3RQYWdlLm5hdGl2ZTsgY3VyUGFnZSA9IG5ldyBhcmM0LlVpbnRONjQoY3VyUGFnZS5uYXRpdmUgKyAxKSkgewogICAgZnJhbWVfZGlnIDEKICAgIGJ0b2kKICAgIGR1cAogICAgZnJhbWVfYnVyeSA4CiAgICBmcmFtZV9kaWcgMgogICAgYnRvaQogICAgZHVwCiAgICBmcmFtZV9idXJ5IDkKICAgIDwKICAgIGJ6IF9hZGRfcGFydGljaXBhdGlvbl90b19ob2xkZXJfYmxvY2tAMTAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MjcyLTI3NQogICAgLy8gY29uc3QgcGFnaW5hdGVkS2V5ID0gbmV3IGFyYzE0MTBfSG9sZGluZ1BhcnRpdGlvbnNQYWdpbmF0ZWRLZXkoewogICAgLy8gICBob2xkZXI6IGhvbGRlciwKICAgIC8vICAgcGFnZTogY3VyUGFnZSwKICAgIC8vIH0pCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAxCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NjAKICAgIC8vIGtleVByZWZpeDogJ2hwX2EnLAogICAgYnl0ZWMgMTEgLy8gImhwX2EiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgZnJhbWVfYnVyeSA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI3NgogICAgLy8gaWYgKCF0aGlzLmhvbGRlclBhcnRpdGlvbnNBZGRyZXNzZXMocGFnaW5hdGVkS2V5KS5leGlzdHMpIHsKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYm56IF9hZGRfcGFydGljaXBhdGlvbl90b19ob2xkZXJfYWZ0ZXJfaWZfZWxzZUA2CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI3NwogICAgLy8gdGhpcy5ob2xkZXJQYXJ0aXRpb25zQWRkcmVzc2VzKHBhZ2luYXRlZEtleSkudmFsdWUgPSBbcGFydGljaXBhdGlvbl0KICAgIGJ5dGVjIDE1IC8vIDB4MDAwMQogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyA0CiAgICBkdXAKICAgIGJveF9kZWwKICAgIHBvcAogICAgc3dhcAogICAgYm94X3B1dAoKX2FkZF9wYXJ0aWNpcGF0aW9uX3RvX2hvbGRlcl9hZnRlcl9pZl9lbHNlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI4MAogICAgLy8gaWYgKHRoaXMuY29udGFpbnNBZGRyZXNzKHRoaXMuaG9sZGVyUGFydGl0aW9uc0FkZHJlc3NlcyhwYWdpbmF0ZWRLZXkpLnZhbHVlLCBwYXJ0aWNpcGF0aW9uKSkgewogICAgZnJhbWVfZGlnIDQKICAgIGJveF9nZXQKICAgIHN3YXAKICAgIGR1cAogICAgY292ZXIgMgogICAgZnJhbWVfYnVyeSAwCiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyNTQKICAgIC8vIGZvciAoY29uc3QgdiBvZiBhKSB7CiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGZyYW1lX2J1cnkgNQogICAgaW50Y18wIC8vIDAKICAgIGZyYW1lX2J1cnkgNwoKX2FkZF9wYXJ0aWNpcGF0aW9uX3RvX2hvbGRlcl9mb3JfaGVhZGVyQDE3OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyNTQKICAgIC8vIGZvciAoY29uc3QgdiBvZiBhKSB7CiAgICBmcmFtZV9kaWcgNwogICAgZnJhbWVfZGlnIDUKICAgIDwKICAgIGJ6IF9hZGRfcGFydGljaXBhdGlvbl90b19ob2xkZXJfYWZ0ZXJfZm9yQDIxCiAgICBmcmFtZV9kaWcgMAogICAgZXh0cmFjdCAyIDAKICAgIGZyYW1lX2RpZyA3CiAgICBpbnRjXzIgLy8gMzIKICAgICoKICAgIGludGNfMiAvLyAzMgogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI1NQogICAgLy8gaWYgKHYgPT09IHgpIHJldHVybiB0cnVlCiAgICBmcmFtZV9kaWcgLTEKICAgID09CiAgICBieiBfYWRkX3BhcnRpY2lwYXRpb25fdG9faG9sZGVyX2FmdGVyX2lmX2Vsc2VAMjAKICAgIGludGNfMSAvLyAxCgpfYWRkX3BhcnRpY2lwYXRpb25fdG9faG9sZGVyX2FmdGVyX2lubGluZWRfc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo6QXJjMTQxMC5jb250YWluc0FkZHJlc3NAMjI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI4MAogICAgLy8gaWYgKHRoaXMuY29udGFpbnNBZGRyZXNzKHRoaXMuaG9sZGVyUGFydGl0aW9uc0FkZHJlc3NlcyhwYWdpbmF0ZWRLZXkpLnZhbHVlLCBwYXJ0aWNpcGF0aW9uKSkgewogICAgYnogX2FkZF9wYXJ0aWNpcGF0aW9uX3RvX2hvbGRlcl9hZnRlcl9pZl9lbHNlQDgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MjgxCiAgICAvLyBmb3VuZCA9IHRydWUKICAgIGludGNfMSAvLyAxCiAgICBmcmFtZV9idXJ5IDYKCl9hZGRfcGFydGljaXBhdGlvbl90b19ob2xkZXJfYmxvY2tAMTA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI4NQogICAgLy8gaWYgKCFmb3VuZCkgewogICAgZnJhbWVfZGlnIDYKICAgIGJueiBfYWRkX3BhcnRpY2lwYXRpb25fdG9faG9sZGVyX2FmdGVyX2lmX2Vsc2VAMTUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6Mjg2LTI4OQogICAgLy8gY29uc3QgcGFnaW5hdGVkS2V5ID0gbmV3IGFyYzE0MTBfSG9sZGluZ1BhcnRpdGlvbnNQYWdpbmF0ZWRLZXkoewogICAgLy8gICBob2xkZXI6IGhvbGRlciwKICAgIC8vICAgcGFnZTogbGFzdFBhZ2UsCiAgICAvLyB9KQogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgMgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjYwCiAgICAvLyBrZXlQcmVmaXg6ICdocF9hJywKICAgIGJ5dGVjIDExIC8vICJocF9hIgogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyOTAKICAgIC8vIGNvbnN0IGl0ZW1zQ291bnQgPSBuZXcgYXJjNC5VaW50TjY0KHRoaXMuaG9sZGVyUGFydGl0aW9uc0FkZHJlc3NlcyhwYWdpbmF0ZWRLZXkpLnZhbHVlLmxlbmd0aCkKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MjkxCiAgICAvLyBpZiAoaXRlbXNDb3VudC5uYXRpdmUgPCAxMCkgewogICAgYnRvaQogICAgcHVzaGludCAxMCAvLyAxMAogICAgPAogICAgYnogX2FkZF9wYXJ0aWNpcGF0aW9uX3RvX2hvbGRlcl9lbHNlX2JvZHlAMTMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6Mjk0CiAgICAvLyAuLi50aGlzLmhvbGRlclBhcnRpdGlvbnNBZGRyZXNzZXMocGFnaW5hdGVkS2V5KS52YWx1ZSwKICAgIGZyYW1lX2RpZyAzCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI5My0yOTYKICAgIC8vIHRoaXMuaG9sZGVyUGFydGl0aW9uc0FkZHJlc3NlcyhwYWdpbmF0ZWRLZXkpLnZhbHVlID0gWwogICAgLy8gICAuLi50aGlzLmhvbGRlclBhcnRpdGlvbnNBZGRyZXNzZXMocGFnaW5hdGVkS2V5KS52YWx1ZSwKICAgIC8vICAgcGFydGljaXBhdGlvbiwKICAgIC8vIF0KICAgIGV4dHJhY3QgMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI5NQogICAgLy8gcGFydGljaXBhdGlvbiwKICAgIGJ5dGVjIDE1IC8vIDB4MDAwMQogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MjkzLTI5NgogICAgLy8gdGhpcy5ob2xkZXJQYXJ0aXRpb25zQWRkcmVzc2VzKHBhZ2luYXRlZEtleSkudmFsdWUgPSBbCiAgICAvLyAgIC4uLnRoaXMuaG9sZGVyUGFydGl0aW9uc0FkZHJlc3NlcyhwYWdpbmF0ZWRLZXkpLnZhbHVlLAogICAgLy8gICBwYXJ0aWNpcGF0aW9uLAogICAgLy8gXQogICAgZXh0cmFjdCAyIDAKICAgIGNvbmNhdAogICAgZHVwCiAgICBsZW4KICAgIGludGNfMiAvLyAzMgogICAgLwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZGlnIDEKICAgIGJveF9kZWwKICAgIHBvcAogICAgYm94X3B1dAoKX2FkZF9wYXJ0aWNpcGF0aW9uX3RvX2hvbGRlcl9hZnRlcl9pZl9lbHNlQDE1OgogICAgcmV0c3ViCgpfYWRkX3BhcnRpY2lwYXRpb25fdG9faG9sZGVyX2Vsc2VfYm9keUAxMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6Mjk4CiAgICAvLyBjb25zdCBuZXdMYXN0UGFnZSA9IG5ldyBhcmM0LlVpbnRONjQobGFzdFBhZ2UubmF0aXZlICsgMSkKICAgIGZyYW1lX2RpZyA5CiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyOTkKICAgIC8vIHRoaXMuaG9sZGVyUGFydGl0aW9uc0N1cnJlbnRQYWdlKGhvbGRlcikudmFsdWUgPSBuZXdMYXN0UGFnZQogICAgZnJhbWVfZGlnIDEwCiAgICBkaWcgMQogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czozMDAtMzAzCiAgICAvLyBjb25zdCBuZXdQYWdpbmF0ZWRLZXkgPSBuZXcgYXJjMTQxMF9Ib2xkaW5nUGFydGl0aW9uc1BhZ2luYXRlZEtleSh7CiAgICAvLyAgIGhvbGRlcjogaG9sZGVyLAogICAgLy8gICBwYWdlOiBuZXdMYXN0UGFnZSwKICAgIC8vIH0pCiAgICBmcmFtZV9kaWcgLTIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czozMDQKICAgIC8vIHRoaXMuaG9sZGVyUGFydGl0aW9uc0FkZHJlc3NlcyhuZXdQYWdpbmF0ZWRLZXkpLnZhbHVlID0gW3BhcnRpY2lwYXRpb25dCiAgICBieXRlYyAxNSAvLyAweDAwMDEKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjYwCiAgICAvLyBrZXlQcmVmaXg6ICdocF9hJywKICAgIGJ5dGVjIDExIC8vICJocF9hIgogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MzA0CiAgICAvLyB0aGlzLmhvbGRlclBhcnRpdGlvbnNBZGRyZXNzZXMobmV3UGFnaW5hdGVkS2V5KS52YWx1ZSA9IFtwYXJ0aWNpcGF0aW9uXQogICAgZHVwCiAgICBib3hfZGVsCiAgICBwb3AKICAgIHN3YXAKICAgIGJveF9wdXQKICAgIHJldHN1YgoKX2FkZF9wYXJ0aWNpcGF0aW9uX3RvX2hvbGRlcl9hZnRlcl9pZl9lbHNlQDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjI3MQogICAgLy8gZm9yIChsZXQgY3VyUGFnZSA9IHBhZ2U7IGN1clBhZ2UubmF0aXZlIDwgbGFzdFBhZ2UubmF0aXZlOyBjdXJQYWdlID0gbmV3IGFyYzQuVWludE42NChjdXJQYWdlLm5hdGl2ZSArIDEpKSB7CiAgICBmcmFtZV9kaWcgOAogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGl0b2IKICAgIGZyYW1lX2J1cnkgMQogICAgYiBfYWRkX3BhcnRpY2lwYXRpb25fdG9faG9sZGVyX3doaWxlX3RvcEAzCgpfYWRkX3BhcnRpY2lwYXRpb25fdG9faG9sZGVyX2FmdGVyX2lmX2Vsc2VAMjA6CiAgICBmcmFtZV9kaWcgNwogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgNwogICAgYiBfYWRkX3BhcnRpY2lwYXRpb25fdG9faG9sZGVyX2Zvcl9oZWFkZXJAMTcKCl9hZGRfcGFydGljaXBhdGlvbl90b19ob2xkZXJfYWZ0ZXJfZm9yQDIxOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czoyNTcKICAgIC8vIHJldHVybiBmYWxzZQogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MjgwCiAgICAvLyBpZiAodGhpcy5jb250YWluc0FkZHJlc3ModGhpcy5ob2xkZXJQYXJ0aXRpb25zQWRkcmVzc2VzKHBhZ2luYXRlZEtleSkudmFsdWUsIHBhcnRpY2lwYXRpb24pKSB7CiAgICBiIF9hZGRfcGFydGljaXBhdGlvbl90b19ob2xkZXJfYWZ0ZXJfaW5saW5lZF9zbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjpBcmMxNDEwLmNvbnRhaW5zQWRkcmVzc0AyMgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6OkFyYzE0MTAuX3RyYW5zZmVyX3BhcnRpdGlvbihmcm9tOiBieXRlcywgZnJvbVBhcnRpdGlvbjogYnl0ZXMsIHRvOiBieXRlcywgdG9QYXJ0aXRpb246IGJ5dGVzLCBhbW91bnQ6IGJ5dGVzLCBkYXRhOiBieXRlcykgLT4gdm9pZDoKX3RyYW5zZmVyX3BhcnRpdGlvbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MzE4LTMyNQogICAgLy8gcHJvdGVjdGVkIF90cmFuc2Zlcl9wYXJ0aXRpb24oCiAgICAvLyAgIGZyb206IGFyYzQuQWRkcmVzcywKICAgIC8vICAgZnJvbVBhcnRpdGlvbjogYXJjNC5BZGRyZXNzLAogICAgLy8gICB0bzogYXJjNC5BZGRyZXNzLAogICAgLy8gICB0b1BhcnRpdGlvbjogYXJjNC5BZGRyZXNzLAogICAgLy8gICBhbW91bnQ6IGFyYzQuVWludE4yNTYsCiAgICAvLyAgIGRhdGE6IGFyYzQuRHluYW1pY0J5dGVzLAogICAgLy8gKTogdm9pZCB7CiAgICBwcm90byA2IDAKICAgIGludGNfMCAvLyAwCiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MzI2CiAgICAvLyBhc3NlcnQoYW1vdW50Lm5hdGl2ZSA+IDAsICdJbnZhbGlkIGFtb3VudCcpCiAgICBmcmFtZV9kaWcgLTIKICAgIHB1c2hieXRlcyAweAogICAgYj4KICAgIGFzc2VydCAvLyBJbnZhbGlkIGFtb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czozMjgKICAgIC8vIGNvbnN0IGZyb21LZXkgPSBuZXcgYXJjMTQxMF9QYXJ0aXRpb25LZXkoeyBob2xkZXI6IGZyb20sIHBhcnRpdGlvbjogZnJvbVBhcnRpdGlvbiB9KQogICAgZnJhbWVfZGlnIC02CiAgICBmcmFtZV9kaWcgLTUKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo1NwogICAgLy8gcHVibGljIHBhcnRpdGlvbnMgPSBCb3hNYXA8YXJjMTQxMF9QYXJ0aXRpb25LZXksIGFyYzQuVWludE4yNTY+KHsga2V5UHJlZml4OiAncCcgfSkKICAgIGJ5dGVjIDQgLy8gInAiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czozMjkKICAgIC8vIGlmICghdGhpcy5wYXJ0aXRpb25zKGZyb21LZXkpLmV4aXN0cykgewogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBibnogX3RyYW5zZmVyX3BhcnRpdGlvbl9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MzMwCiAgICAvLyB0aGlzLnBhcnRpdGlvbnMoZnJvbUtleSkudmFsdWUgPSBuZXcgYXJjNC5VaW50TjI1NigwKQogICAgZnJhbWVfZGlnIDIKICAgIGJ5dGVjXzEgLy8gMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICBib3hfcHV0CgpfdHJhbnNmZXJfcGFydGl0aW9uX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MzMyCiAgICAvLyB0aGlzLnBhcnRpdGlvbnMoZnJvbUtleSkudmFsdWUgPSBuZXcgYXJjNC5VaW50TjI1Nih0aGlzLnBhcnRpdGlvbnMoZnJvbUtleSkudmFsdWUubmF0aXZlIC0gYW1vdW50Lm5hdGl2ZSkKICAgIGZyYW1lX2RpZyAyCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBmcmFtZV9kaWcgLTIKICAgIGItCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18yIC8vIDMyCiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBpbnRjXzIgLy8gMzIKICAgIGJ6ZXJvCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMAogICAgYnwKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MzM3LTM0MwogICAgLy8gbmV3IGFyYzE0MTBfcGFydGl0aW9uX3RyYW5zZmVyKHsKICAgIC8vICAgZnJvbTogZnJvbSwKICAgIC8vICAgdG86IHRvLAogICAgLy8gICBwYXJ0aXRpb246IGZyb21QYXJ0aXRpb24sCiAgICAvLyAgIGFtb3VudDogYW1vdW50LAogICAgLy8gICBkYXRhOiBkYXRhLAogICAgLy8gfSksCiAgICBmcmFtZV9kaWcgLTYKICAgIGZyYW1lX2RpZyAtNAogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTUKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAweDAwODIKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MzM1LTM0NAogICAgLy8gZW1pdCgKICAgIC8vICAgJ1RyYW5zZmVyJywKICAgIC8vICAgbmV3IGFyYzE0MTBfcGFydGl0aW9uX3RyYW5zZmVyKHsKICAgIC8vICAgICBmcm9tOiBmcm9tLAogICAgLy8gICAgIHRvOiB0bywKICAgIC8vICAgICBwYXJ0aXRpb246IGZyb21QYXJ0aXRpb24sCiAgICAvLyAgICAgYW1vdW50OiBhbW91bnQsCiAgICAvLyAgICAgZGF0YTogZGF0YSwKICAgIC8vICAgfSksCiAgICAvLyApCiAgICBieXRlYyAxMyAvLyAweDAwMDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzIDB4MjA2Yjc5NDAgLy8gbWV0aG9kICJUcmFuc2ZlcigoYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MsdWludDI1NixieXRlW10pKSIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjM0NwogICAgLy8gaWYgKHRvUGFydGl0aW9uICE9PSBmcm9tUGFydGl0aW9uKSB7CiAgICBmcmFtZV9kaWcgLTMKICAgIGZyYW1lX2RpZyAtNQogICAgIT0KICAgIGJ6IF90cmFuc2Zlcl9wYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjM0OAogICAgLy8gdGhpcy5fYWRkX3BhcnRpY2lwYXRpb25fdG9faG9sZGVyKHRvLCB0b1BhcnRpdGlvbikKICAgIGZyYW1lX2RpZyAtNAogICAgZnJhbWVfZGlnIC0zCiAgICBjYWxsc3ViIF9hZGRfcGFydGljaXBhdGlvbl90b19ob2xkZXIKCl90cmFuc2Zlcl9wYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czozNTIKICAgIC8vIGNvbnN0IHRvS2V5ID0gbmV3IGFyYzE0MTBfUGFydGl0aW9uS2V5KHsgaG9sZGVyOiB0bywgcGFydGl0aW9uOiB0b1BhcnRpdGlvbiB9KQogICAgZnJhbWVfZGlnIC00CiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo1NwogICAgLy8gcHVibGljIHBhcnRpdGlvbnMgPSBCb3hNYXA8YXJjMTQxMF9QYXJ0aXRpb25LZXksIGFyYzQuVWludE4yNTY+KHsga2V5UHJlZml4OiAncCcgfSkKICAgIGJ5dGVjIDQgLy8gInAiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgZnJhbWVfYnVyeSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjM1MwogICAgLy8gaWYgKCF0aGlzLnBhcnRpdGlvbnModG9LZXkpLmV4aXN0cykgewogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBibnogX3RyYW5zZmVyX3BhcnRpdGlvbl9hZnRlcl9pZl9lbHNlQDYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MzU0CiAgICAvLyB0aGlzLnBhcnRpdGlvbnModG9LZXkpLnZhbHVlID0gbmV3IGFyYzQuVWludE4yNTYoMCkKICAgIGZyYW1lX2RpZyAxCiAgICBieXRlY18xIC8vIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAogICAgYm94X3B1dAoKX3RyYW5zZmVyX3BhcnRpdGlvbl9hZnRlcl9pZl9lbHNlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjM1NgogICAgLy8gdGhpcy5wYXJ0aXRpb25zKHRvS2V5KS52YWx1ZSA9IG5ldyBhcmM0LlVpbnROMjU2KHRoaXMucGFydGl0aW9ucyh0b0tleSkudmFsdWUubmF0aXZlICsgYW1vdW50Lm5hdGl2ZSkKICAgIGZyYW1lX2RpZyAxCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBmcmFtZV9kaWcgLTIKICAgIGIrCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18yIC8vIDMyCiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBmcmFtZV9kaWcgMAogICAgYnwKICAgIGJveF9wdXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6OkFyYzE0MTAuYXJjMTQxMF9hdXRob3JpemVfb3BlcmF0b3JfYnlfcG9ydGlvbihob2xkZXI6IGJ5dGVzLCBvcGVyYXRvcjogYnl0ZXMsIHBhcnRpdGlvbjogYnl0ZXMsIGFtb3VudDogYnl0ZXMpIC0+IHZvaWQ6CmFyYzE0MTBfYXV0aG9yaXplX29wZXJhdG9yX2J5X3BvcnRpb246CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjM1OS0zNjUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBwdWJsaWMgYXJjMTQxMF9hdXRob3JpemVfb3BlcmF0b3JfYnlfcG9ydGlvbigKICAgIC8vICAgaG9sZGVyOiBhcmM0LkFkZHJlc3MsCiAgICAvLyAgIG9wZXJhdG9yOiBhcmM0LkFkZHJlc3MsCiAgICAvLyAgIHBhcnRpdGlvbjogYXJjNC5BZGRyZXNzLAogICAgLy8gICBhbW91bnQ6IGFyYzQuVWludE4yNTYsCiAgICAvLyApOiB2b2lkIHsKICAgIHByb3RvIDQgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czozNjYKICAgIC8vIGFzc2VydChuZXcgYXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpID09PSBob2xkZXIsICdPbmx5IGhvbGRlciBjYW4gYXV0aG9yaXplIHBvcnRpb24nKQogICAgdHhuIFNlbmRlcgogICAgZnJhbWVfZGlnIC00CiAgICA9PQogICAgYXNzZXJ0IC8vIE9ubHkgaG9sZGVyIGNhbiBhdXRob3JpemUgcG9ydGlvbgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czozNjcKICAgIC8vIGNvbnN0IGtleSA9IG5ldyBhcmMxNDEwX09wZXJhdG9yUG9ydGlvbktleSh7IGhvbGRlciwgb3BlcmF0b3IsIHBhcnRpdGlvbiB9KQogICAgZnJhbWVfZGlnIC00CiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NjMKICAgIC8vIHB1YmxpYyBvcGVyYXRvclBvcnRpb25BbGxvd2FuY2VzID0gQm94TWFwPGFyYzE0MTBfT3BlcmF0b3JQb3J0aW9uS2V5LCBhcmM0LlVpbnROMjU2Pih7IGtleVByZWZpeDogJ29wYScgfSkKICAgIGJ5dGVjIDEwIC8vICJvcGEiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MzY4CiAgICAvLyB0aGlzLm9wZXJhdG9yUG9ydGlvbkFsbG93YW5jZXMoa2V5KS52YWx1ZSA9IGFtb3VudAogICAgZnJhbWVfZGlnIC0xCiAgICBib3hfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjpBcmMxNDEwLmFyYzE0MTBfaXNfb3BlcmF0b3JfYnlfcG9ydGlvbihob2xkZXI6IGJ5dGVzLCBvcGVyYXRvcjogYnl0ZXMsIHBhcnRpdGlvbjogYnl0ZXMpIC0+IGJ5dGVzOgphcmMxNDEwX2lzX29wZXJhdG9yX2J5X3BvcnRpb246CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjM3MS0zNzYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICAvLyBwdWJsaWMgYXJjMTQxMF9pc19vcGVyYXRvcl9ieV9wb3J0aW9uKAogICAgLy8gICBob2xkZXI6IGFyYzQuQWRkcmVzcywKICAgIC8vICAgb3BlcmF0b3I6IGFyYzQuQWRkcmVzcywKICAgIC8vICAgcGFydGl0aW9uOiBhcmM0LkFkZHJlc3MsCiAgICAvLyApOiBhcmM0LkJvb2wgewogICAgcHJvdG8gMyAxCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czozNzcKICAgIC8vIGlmIChvcGVyYXRvciA9PT0gaG9sZGVyKSByZXR1cm4gbmV3IGFyYzQuQm9vbCh0cnVlKQogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTMKICAgID09CiAgICBieiBhcmMxNDEwX2lzX29wZXJhdG9yX2J5X3BvcnRpb25fYWZ0ZXJfaWZfZWxzZUAyCiAgICBieXRlYyA1IC8vIDB4ODAKICAgIHN3YXAKICAgIHJldHN1YgoKYXJjMTQxMF9pc19vcGVyYXRvcl9ieV9wb3J0aW9uX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6Mzc4CiAgICAvLyBjb25zdCBrZXkgPSBuZXcgYXJjMTQxMF9PcGVyYXRvclBvcnRpb25LZXkoeyBob2xkZXIsIG9wZXJhdG9yLCBwYXJ0aXRpb24gfSkKICAgIGZyYW1lX2RpZyAtMwogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjYzCiAgICAvLyBwdWJsaWMgb3BlcmF0b3JQb3J0aW9uQWxsb3dhbmNlcyA9IEJveE1hcDxhcmMxNDEwX09wZXJhdG9yUG9ydGlvbktleSwgYXJjNC5VaW50TjI1Nj4oeyBrZXlQcmVmaXg6ICdvcGEnIH0pCiAgICBieXRlYyAxMCAvLyAib3BhIgogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czozNzkKICAgIC8vIGlmICghdGhpcy5vcGVyYXRvclBvcnRpb25BbGxvd2FuY2VzKGtleSkuZXhpc3RzKSByZXR1cm4gbmV3IGFyYzQuQm9vbChmYWxzZSkKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYm56IGFyYzE0MTBfaXNfb3BlcmF0b3JfYnlfcG9ydGlvbl9hZnRlcl9pZl9lbHNlQDQKICAgIGJ5dGVjIDggLy8gMHgwMAogICAgc3dhcAogICAgcmV0c3ViCgphcmMxNDEwX2lzX29wZXJhdG9yX2J5X3BvcnRpb25fYWZ0ZXJfaWZfZWxzZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czozODAKICAgIC8vIHJldHVybiBuZXcgYXJjNC5Cb29sKHRoaXMub3BlcmF0b3JQb3J0aW9uQWxsb3dhbmNlcyhrZXkpLnZhbHVlLm5hdGl2ZSA+IDApCiAgICBmcmFtZV9kaWcgMAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIHB1c2hieXRlcyAweAogICAgYj4KICAgIGJ5dGVjIDggLy8gMHgwMAogICAgaW50Y18wIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBzd2FwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjpBcmMxNDEwLmFyYzE0MTBfaXNzdWVfYnlfcGFydGl0aW9uKHRvOiBieXRlcywgcGFydGl0aW9uOiBieXRlcywgYW1vdW50OiBieXRlcywgZGF0YTogYnl0ZXMpIC0+IHZvaWQ6CmFyYzE0MTBfaXNzdWVfYnlfcGFydGl0aW9uOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czozODMtMzg5CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gcHVibGljIGFyYzE0MTBfaXNzdWVfYnlfcGFydGl0aW9uKAogICAgLy8gICB0bzogYXJjNC5BZGRyZXNzLAogICAgLy8gICBwYXJ0aXRpb246IGFyYzQuQWRkcmVzcywKICAgIC8vICAgYW1vdW50OiBhcmM0LlVpbnROMjU2LAogICAgLy8gICBkYXRhOiBhcmM0LkR5bmFtaWNCeXRlcywKICAgIC8vICk6IHZvaWQgewogICAgcHJvdG8gNCAwCiAgICBpbnRjXzAgLy8gMAogICAgZHVwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjM5MAogICAgLy8gYXNzZXJ0KHRoaXMuYXJjODhfaXNfb3duZXIobmV3IGFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKSkubmF0aXZlID09PSB0cnVlLCAnb25seV9vd25lcicpCiAgICB0eG4gU2VuZGVyCiAgICBjYWxsc3ViIGFyYzg4X2lzX293bmVyCiAgICBpbnRjXzAgLy8gMAogICAgZ2V0Yml0CiAgICBpbnRjXzEgLy8gMQogICAgPT0KICAgIGFzc2VydCAvLyBvbmx5X293bmVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjM5MQogICAgLy8gYXNzZXJ0KGFtb3VudC5uYXRpdmUgPiAwLCAnSW52YWxpZCBhbW91bnQnKQogICAgZnJhbWVfZGlnIC0yCiAgICBwdXNoYnl0ZXMgMHgKICAgIGI+CiAgICBhc3NlcnQgLy8gSW52YWxpZCBhbW91bnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6MzkzCiAgICAvLyBjb25zdCB0b0tleSA9IG5ldyBhcmMxNDEwX1BhcnRpdGlvbktleSh7IGhvbGRlcjogdG8sIHBhcnRpdGlvbiB9KQogICAgZnJhbWVfZGlnIC00CiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgZHVwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjU3CiAgICAvLyBwdWJsaWMgcGFydGl0aW9ucyA9IEJveE1hcDxhcmMxNDEwX1BhcnRpdGlvbktleSwgYXJjNC5VaW50TjI1Nj4oeyBrZXlQcmVmaXg6ICdwJyB9KQogICAgYnl0ZWMgNCAvLyAicCIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjM5NAogICAgLy8gaWYgKCF0aGlzLnBhcnRpdGlvbnModG9LZXkpLmV4aXN0cykgewogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBibnogYXJjMTQxMF9pc3N1ZV9ieV9wYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjM5NQogICAgLy8gdGhpcy5wYXJ0aXRpb25zKHRvS2V5KS52YWx1ZSA9IG5ldyBhcmM0LlVpbnROMjU2KDApCiAgICBmcmFtZV9kaWcgMwogICAgYnl0ZWNfMSAvLyAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6Mzk2CiAgICAvLyB0aGlzLl9hZGRfcGFydGljaXBhdGlvbl90b19ob2xkZXIodG8sIHBhcnRpdGlvbikKICAgIGZyYW1lX2RpZyAtNAogICAgZnJhbWVfZGlnIC0zCiAgICBjYWxsc3ViIF9hZGRfcGFydGljaXBhdGlvbl90b19ob2xkZXIKCmFyYzE0MTBfaXNzdWVfYnlfcGFydGl0aW9uX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6Mzk4CiAgICAvLyB0aGlzLnBhcnRpdGlvbnModG9LZXkpLnZhbHVlID0gbmV3IGFyYzQuVWludE4yNTYodGhpcy5wYXJ0aXRpb25zKHRvS2V5KS52YWx1ZS5uYXRpdmUgKyBhbW91bnQubmF0aXZlKQogICAgZnJhbWVfZGlnIDMKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGZyYW1lX2RpZyAtMgogICAgYisKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzIgLy8gMzIKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGludGNfMiAvLyAzMgogICAgYnplcm8KICAgIGR1cAogICAgZnJhbWVfYnVyeSAwCiAgICBifAogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjUzCiAgICAvLyBwdWJsaWMgYmFsYW5jZXMgPSBCb3hNYXA8QWRkcmVzcywgVWludE4yNTY+KHsga2V5UHJlZml4OiAnYicgfSkKICAgIGJ5dGVjIDYgLy8gImIiCiAgICBmcmFtZV9kaWcgLTQKICAgIGNvbmNhdAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NDAwCiAgICAvLyBpZiAoIXRoaXMuYmFsYW5jZXModG8pLmV4aXN0cykgewogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBibnogYXJjMTQxMF9pc3N1ZV9ieV9wYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjQwMQogICAgLy8gdGhpcy5iYWxhbmNlcyh0bykudmFsdWUgPSBuZXcgYXJjNC5VaW50TjI1NigwKQogICAgZnJhbWVfZGlnIDEKICAgIGJ5dGVjXzEgLy8gMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICBib3hfcHV0CgphcmMxNDEwX2lzc3VlX2J5X3BhcnRpdGlvbl9hZnRlcl9pZl9lbHNlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjQwMwogICAgLy8gdGhpcy5iYWxhbmNlcyh0bykudmFsdWUgPSBuZXcgYXJjNC5VaW50TjI1Nih0aGlzLmJhbGFuY2VzKHRvKS52YWx1ZS5uYXRpdmUgKyBhbW91bnQubmF0aXZlKQogICAgZnJhbWVfZGlnIDEKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGZyYW1lX2RpZyAtMgogICAgYisKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzIgLy8gMzIKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGZyYW1lX2RpZyAwCiAgICBkdXAKICAgIGNvdmVyIDMKICAgIGJ8CiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NTEKICAgIC8vIHB1YmxpYyB0b3RhbFN1cHBseSA9IEdsb2JhbFN0YXRlPFVpbnROMjU2Pih7IGtleTogJ3QnIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAidCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjQwNAogICAgLy8gdGhpcy50b3RhbFN1cHBseS52YWx1ZSA9IG5ldyBhcmM0LlVpbnROMjU2KHRoaXMudG90YWxTdXBwbHkudmFsdWUubmF0aXZlICsgYW1vdW50Lm5hdGl2ZSkKICAgIGZyYW1lX2RpZyAtMgogICAgYisKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzIgLy8gMzIKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGJ8CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NTEKICAgIC8vIHB1YmxpYyB0b3RhbFN1cHBseSA9IEdsb2JhbFN0YXRlPFVpbnROMjU2Pih7IGtleTogJ3QnIH0pCiAgICBieXRlY18zIC8vICJ0IgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo0MDQKICAgIC8vIHRoaXMudG90YWxTdXBwbHkudmFsdWUgPSBuZXcgYXJjNC5VaW50TjI1Nih0aGlzLnRvdGFsU3VwcGx5LnZhbHVlLm5hdGl2ZSArIGFtb3VudC5uYXRpdmUpCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo0MDUKICAgIC8vIGVtaXQoJ0lzc3VlJywgbmV3IGFyYzE0MTBfcGFydGl0aW9uX2lzc3VlKHsgdG8sIHBhcnRpdGlvbiwgYW1vdW50LCBkYXRhIH0pKQogICAgZnJhbWVfZGlnIDIKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBieXRlYyAxNiAvLyAweDAwNjIKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIGJ5dGVjIDEzIC8vIDB4MDAwMgogICAgc3dhcAogICAgY29uY2F0CiAgICBwdXNoYnl0ZXMgMHhmYTQ0M2IxYiAvLyBtZXRob2QgIklzc3VlKChhZGRyZXNzLGFkZHJlc3MsdWludDI1NixieXRlW10pKSIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjpBcmMxNDEwLmFyYzE0MTBfcmVkZWVtX2J5X3BhcnRpdGlvbihmcm9tOiBieXRlcywgcGFydGl0aW9uOiBieXRlcywgYW1vdW50OiBieXRlcywgZGF0YTogYnl0ZXMpIC0+IHZvaWQ6CmFyYzE0MTBfcmVkZWVtX2J5X3BhcnRpdGlvbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NDA4LTQxNAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIHB1YmxpYyBhcmMxNDEwX3JlZGVlbV9ieV9wYXJ0aXRpb24oCiAgICAvLyAgIGZyb206IGFyYzQuQWRkcmVzcywKICAgIC8vICAgcGFydGl0aW9uOiBhcmM0LkFkZHJlc3MsCiAgICAvLyAgIGFtb3VudDogYXJjNC5VaW50TjI1NiwKICAgIC8vICAgZGF0YTogYXJjNC5EeW5hbWljQnl0ZXMsCiAgICAvLyApOiB2b2lkIHsKICAgIHByb3RvIDQgMAogICAgaW50Y18wIC8vIDAKICAgIGR1cG4gMgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo0MTUKICAgIC8vIGNvbnN0IHNlbmRlciA9IG5ldyBhcmM0LkFkZHJlc3MoVHhuLnNlbmRlcikKICAgIHR4biBTZW5kZXIKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo0MTcKICAgIC8vIHNlbmRlciA9PT0gZnJvbSB8fCB0aGlzLmFyYzE0MTBfaXNfb3BlcmF0b3IoZnJvbSwgc2VuZGVyLCBwYXJ0aXRpb24pLm5hdGl2ZSA9PT0gdHJ1ZSwKICAgIGZyYW1lX2RpZyAtNAogICAgPT0KICAgIGJueiBhcmMxNDEwX3JlZGVlbV9ieV9wYXJ0aXRpb25fYm9vbF90cnVlQDIKICAgIGZyYW1lX2RpZyAtNAogICAgZnJhbWVfZGlnIDMKICAgIGZyYW1lX2RpZyAtMwogICAgY2FsbHN1YiBhcmMxNDEwX2lzX29wZXJhdG9yCiAgICBpbnRjXzAgLy8gMAogICAgZ2V0Yml0CiAgICBpbnRjXzEgLy8gMQogICAgPT0KICAgIGJ6IGFyYzE0MTBfcmVkZWVtX2J5X3BhcnRpdGlvbl9ib29sX2ZhbHNlQDMKCmFyYzE0MTBfcmVkZWVtX2J5X3BhcnRpdGlvbl9ib29sX3RydWVAMjoKICAgIGludGNfMSAvLyAxCgphcmMxNDEwX3JlZGVlbV9ieV9wYXJ0aXRpb25fYm9vbF9tZXJnZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo0MTYtNDE5CiAgICAvLyBhc3NlcnQoCiAgICAvLyAgIHNlbmRlciA9PT0gZnJvbSB8fCB0aGlzLmFyYzE0MTBfaXNfb3BlcmF0b3IoZnJvbSwgc2VuZGVyLCBwYXJ0aXRpb24pLm5hdGl2ZSA9PT0gdHJ1ZSwKICAgIC8vICAgJ05vdCBhdXRob3JpemVkIG9wZXJhdG9yJywKICAgIC8vICkKICAgIGFzc2VydCAvLyBOb3QgYXV0aG9yaXplZCBvcGVyYXRvcgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo0MjAKICAgIC8vIGFzc2VydChhbW91bnQubmF0aXZlID4gMCwgJ0ludmFsaWQgYW1vdW50JykKICAgIGZyYW1lX2RpZyAtMgogICAgcHVzaGJ5dGVzIDB4CiAgICBiPgogICAgYXNzZXJ0IC8vIEludmFsaWQgYW1vdW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjQyMQogICAgLy8gY29uc3QgZnJvbUtleSA9IG5ldyBhcmMxNDEwX1BhcnRpdGlvbktleSh7IGhvbGRlcjogZnJvbSwgcGFydGl0aW9uIH0pCiAgICBmcmFtZV9kaWcgLTQKICAgIGZyYW1lX2RpZyAtMwogICAgY29uY2F0CiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo1NwogICAgLy8gcHVibGljIHBhcnRpdGlvbnMgPSBCb3hNYXA8YXJjMTQxMF9QYXJ0aXRpb25LZXksIGFyYzQuVWludE4yNTY+KHsga2V5UHJlZml4OiAncCcgfSkKICAgIGJ5dGVjIDQgLy8gInAiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NDIyCiAgICAvLyBhc3NlcnQodGhpcy5wYXJ0aXRpb25zKGZyb21LZXkpLmV4aXN0cywgJ1BhcnRpdGlvbiBiYWxhbmNlIG1pc3NpbmcnKQogICAgZHVwCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBQYXJ0aXRpb24gYmFsYW5jZSBtaXNzaW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjQyMwogICAgLy8gYXNzZXJ0KHRoaXMucGFydGl0aW9ucyhmcm9tS2V5KS52YWx1ZS5uYXRpdmUgPj0gYW1vdW50Lm5hdGl2ZSwgJ0luc3VmZmljaWVudCBwYXJ0aXRpb24gYmFsYW5jZScpCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBmcmFtZV9kaWcgLTIKICAgIGI+PQogICAgYXNzZXJ0IC8vIEluc3VmZmljaWVudCBwYXJ0aXRpb24gYmFsYW5jZQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo0MjQKICAgIC8vIHRoaXMucGFydGl0aW9ucyhmcm9tS2V5KS52YWx1ZSA9IG5ldyBhcmM0LlVpbnROMjU2KHRoaXMucGFydGl0aW9ucyhmcm9tS2V5KS52YWx1ZS5uYXRpdmUgLSBhbW91bnQubmF0aXZlKQogICAgZHVwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgZnJhbWVfZGlnIC0yCiAgICBiLQogICAgZHVwCiAgICBsZW4KICAgIGludGNfMiAvLyAzMgogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgaW50Y18yIC8vIDMyCiAgICBiemVybwogICAgZHVwCiAgICBmcmFtZV9idXJ5IDAKICAgIGJ8CiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NTMKICAgIC8vIHB1YmxpYyBiYWxhbmNlcyA9IEJveE1hcDxBZGRyZXNzLCBVaW50TjI1Nj4oeyBrZXlQcmVmaXg6ICdiJyB9KQogICAgYnl0ZWMgNiAvLyAiYiIKICAgIGZyYW1lX2RpZyAtNAogICAgY29uY2F0CiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo0MjYKICAgIC8vIGFzc2VydCh0aGlzLmJhbGFuY2VzKGZyb20pLmV4aXN0cyAmJiB0aGlzLmJhbGFuY2VzKGZyb20pLnZhbHVlLm5hdGl2ZSA+PSBhbW91bnQubmF0aXZlLCAnSW5zdWZmaWNpZW50IGJhbGFuY2UnKQogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBieiBhcmMxNDEwX3JlZGVlbV9ieV9wYXJ0aXRpb25fYm9vbF9mYWxzZUA3CiAgICBmcmFtZV9kaWcgMgogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGZyYW1lX2RpZyAtMgogICAgYj49CiAgICBieiBhcmMxNDEwX3JlZGVlbV9ieV9wYXJ0aXRpb25fYm9vbF9mYWxzZUA3CiAgICBpbnRjXzEgLy8gMQoKYXJjMTQxMF9yZWRlZW1fYnlfcGFydGl0aW9uX2Jvb2xfbWVyZ2VAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NDI2CiAgICAvLyBhc3NlcnQodGhpcy5iYWxhbmNlcyhmcm9tKS5leGlzdHMgJiYgdGhpcy5iYWxhbmNlcyhmcm9tKS52YWx1ZS5uYXRpdmUgPj0gYW1vdW50Lm5hdGl2ZSwgJ0luc3VmZmljaWVudCBiYWxhbmNlJykKICAgIGFzc2VydCAvLyBJbnN1ZmZpY2llbnQgYmFsYW5jZQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo0MjcKICAgIC8vIHRoaXMuYmFsYW5jZXMoZnJvbSkudmFsdWUgPSBuZXcgYXJjNC5VaW50TjI1Nih0aGlzLmJhbGFuY2VzKGZyb20pLnZhbHVlLm5hdGl2ZSAtIGFtb3VudC5uYXRpdmUpCiAgICBmcmFtZV9kaWcgMgogICAgZHVwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgZnJhbWVfZGlnIC0yCiAgICBiLQogICAgZHVwCiAgICBsZW4KICAgIGludGNfMiAvLyAzMgogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgZnJhbWVfZGlnIDAKICAgIGR1cAogICAgY292ZXIgMwogICAgYnwKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo1MQogICAgLy8gcHVibGljIHRvdGFsU3VwcGx5ID0gR2xvYmFsU3RhdGU8VWludE4yNTY+KHsga2V5OiAndCcgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18zIC8vICJ0IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NDI4CiAgICAvLyB0aGlzLnRvdGFsU3VwcGx5LnZhbHVlID0gbmV3IGFyYzQuVWludE4yNTYodGhpcy50b3RhbFN1cHBseS52YWx1ZS5uYXRpdmUgLSBhbW91bnQubmF0aXZlKQogICAgZnJhbWVfZGlnIC0yCiAgICBiLQogICAgZHVwCiAgICBsZW4KICAgIGludGNfMiAvLyAzMgogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgYnwKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo1MQogICAgLy8gcHVibGljIHRvdGFsU3VwcGx5ID0gR2xvYmFsU3RhdGU8VWludE4yNTY+KHsga2V5OiAndCcgfSkKICAgIGJ5dGVjXzMgLy8gInQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjQyOAogICAgLy8gdGhpcy50b3RhbFN1cHBseS52YWx1ZSA9IG5ldyBhcmM0LlVpbnROMjU2KHRoaXMudG90YWxTdXBwbHkudmFsdWUubmF0aXZlIC0gYW1vdW50Lm5hdGl2ZSkKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjQyOQogICAgLy8gZW1pdCgnUmVkZWVtJywgbmV3IGFyYzE0MTBfcGFydGl0aW9uX3JlZGVlbSh7IGZyb20sIHBhcnRpdGlvbiwgYW1vdW50LCBkYXRhIH0pKQogICAgZnJhbWVfZGlnIDEKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBieXRlYyAxNiAvLyAweDAwNjIKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIGJ5dGVjIDEzIC8vIDB4MDAwMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlYyAxOSAvLyBtZXRob2QgIlJlZGVlbSgoYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYsYnl0ZVtdKSkiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgcmV0c3ViCgphcmMxNDEwX3JlZGVlbV9ieV9wYXJ0aXRpb25fYm9vbF9mYWxzZUA3OgogICAgaW50Y18wIC8vIDAKICAgIGIgYXJjMTQxMF9yZWRlZW1fYnlfcGFydGl0aW9uX2Jvb2xfbWVyZ2VAOAoKYXJjMTQxMF9yZWRlZW1fYnlfcGFydGl0aW9uX2Jvb2xfZmFsc2VAMzoKICAgIGludGNfMCAvLyAwCiAgICBiIGFyYzE0MTBfcmVkZWVtX2J5X3BhcnRpdGlvbl9ib29sX21lcmdlQDQKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjpBcmMxNDEwLmFyYzE0MTBfb3BlcmF0b3JfcmVkZWVtX2J5X3BhcnRpdGlvbihmcm9tOiBieXRlcywgcGFydGl0aW9uOiBieXRlcywgYW1vdW50OiBieXRlcywgZGF0YTogYnl0ZXMpIC0+IHZvaWQ6CmFyYzE0MTBfb3BlcmF0b3JfcmVkZWVtX2J5X3BhcnRpdGlvbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NDMyLTQzOAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIHB1YmxpYyBhcmMxNDEwX29wZXJhdG9yX3JlZGVlbV9ieV9wYXJ0aXRpb24oCiAgICAvLyAgIGZyb206IGFyYzQuQWRkcmVzcywKICAgIC8vICAgcGFydGl0aW9uOiBhcmM0LkFkZHJlc3MsCiAgICAvLyAgIGFtb3VudDogYXJjNC5VaW50TjI1NiwKICAgIC8vICAgZGF0YTogYXJjNC5EeW5hbWljQnl0ZXMsCiAgICAvLyApOiB2b2lkIHsKICAgIHByb3RvIDQgMAogICAgaW50Y18wIC8vIDAKICAgIGR1cG4gMwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo0MzkKICAgIC8vIGNvbnN0IHNlbmRlciA9IG5ldyBhcmM0LkFkZHJlc3MoVHhuLnNlbmRlcikKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NDQxCiAgICAvLyBsZXQgYXV0aG9yaXplZCA9IHRoaXMuYXJjMTQxMF9pc19vcGVyYXRvcihmcm9tLCBzZW5kZXIsIHBhcnRpdGlvbikubmF0aXZlID09PSB0cnVlCiAgICBmcmFtZV9kaWcgLTQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NDM5CiAgICAvLyBjb25zdCBzZW5kZXIgPSBuZXcgYXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjQ0MQogICAgLy8gbGV0IGF1dGhvcml6ZWQgPSB0aGlzLmFyYzE0MTBfaXNfb3BlcmF0b3IoZnJvbSwgc2VuZGVyLCBwYXJ0aXRpb24pLm5hdGl2ZSA9PT0gdHJ1ZQogICAgZnJhbWVfZGlnIC0zCiAgICBjYWxsc3ViIGFyYzE0MTBfaXNfb3BlcmF0b3IKICAgIGludGNfMCAvLyAwCiAgICBnZXRiaXQKICAgIGludGNfMSAvLyAxCiAgICA9PQogICAgZHVwbiAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjQ0MgogICAgLy8gaWYgKCFhdXRob3JpemVkKSB7CiAgICBibnogYXJjMTQxMF9vcGVyYXRvcl9yZWRlZW1fYnlfcGFydGl0aW9uX2FmdGVyX2lmX2Vsc2VANAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo0NDMKICAgIC8vIGNvbnN0IHBLZXkgPSBuZXcgYXJjMTQxMF9PcGVyYXRvclBvcnRpb25LZXkoeyBob2xkZXI6IGZyb20sIG9wZXJhdG9yOiBzZW5kZXIsIHBhcnRpdGlvbiB9KQogICAgZnJhbWVfZGlnIC00CiAgICBmcmFtZV9kaWcgNAogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo2MwogICAgLy8gcHVibGljIG9wZXJhdG9yUG9ydGlvbkFsbG93YW5jZXMgPSBCb3hNYXA8YXJjMTQxMF9PcGVyYXRvclBvcnRpb25LZXksIGFyYzQuVWludE4yNTY+KHsga2V5UHJlZml4OiAnb3BhJyB9KQogICAgYnl0ZWMgMTAgLy8gIm9wYSIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NDQ0CiAgICAvLyBpZiAodGhpcy5vcGVyYXRvclBvcnRpb25BbGxvd2FuY2VzKHBLZXkpLmV4aXN0cykgewogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBieiBhcmMxNDEwX29wZXJhdG9yX3JlZGVlbV9ieV9wYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjQ0NQogICAgLy8gY29uc3QgcmVtYWluaW5nID0gdGhpcy5vcGVyYXRvclBvcnRpb25BbGxvd2FuY2VzKHBLZXkpLnZhbHVlCiAgICBmcmFtZV9kaWcgMwogICAgZHVwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo0NDYKICAgIC8vIGFzc2VydChyZW1haW5pbmcubmF0aXZlID49IGFtb3VudC5uYXRpdmUsICdQb3J0aW9uIGFsbG93YW5jZSBleGNlZWRlZCcpCiAgICBkdXAKICAgIGZyYW1lX2RpZyAtMgogICAgYj49CiAgICBhc3NlcnQgLy8gUG9ydGlvbiBhbGxvd2FuY2UgZXhjZWVkZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NDQ3CiAgICAvLyBhdXRob3JpemVkID0gdHJ1ZQogICAgaW50Y18xIC8vIDEKICAgIGZyYW1lX2J1cnkgNQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo0NDgKICAgIC8vIHRoaXMub3BlcmF0b3JQb3J0aW9uQWxsb3dhbmNlcyhwS2V5KS52YWx1ZSA9IG5ldyBhcmM0LlVpbnROMjU2KHJlbWFpbmluZy5uYXRpdmUgLSBhbW91bnQubmF0aXZlKQogICAgZnJhbWVfZGlnIC0yCiAgICBiLQogICAgZHVwCiAgICBsZW4KICAgIGludGNfMiAvLyAzMgogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgaW50Y18yIC8vIDMyCiAgICBiemVybwogICAgYnwKICAgIGJveF9wdXQKCmFyYzE0MTBfb3BlcmF0b3JfcmVkZWVtX2J5X3BhcnRpdGlvbl9hZnRlcl9pZl9lbHNlQDM6CiAgICBmcmFtZV9kaWcgNQogICAgZnJhbWVfYnVyeSA2CgphcmMxNDEwX29wZXJhdG9yX3JlZGVlbV9ieV9wYXJ0aXRpb25fYWZ0ZXJfaWZfZWxzZUA0OgogICAgZnJhbWVfZGlnIDYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NDUxCiAgICAvLyBhc3NlcnQoYXV0aG9yaXplZCwgJ05vdCBhdXRob3JpemVkIG9wZXJhdG9yJykKICAgIGFzc2VydCAvLyBOb3QgYXV0aG9yaXplZCBvcGVyYXRvcgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo0NTMKICAgIC8vIGNvbnN0IGZyb21LZXkgPSBuZXcgYXJjMTQxMF9QYXJ0aXRpb25LZXkoeyBob2xkZXI6IGZyb20sIHBhcnRpdGlvbiB9KQogICAgZnJhbWVfZGlnIC00CiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NTcKICAgIC8vIHB1YmxpYyBwYXJ0aXRpb25zID0gQm94TWFwPGFyYzE0MTBfUGFydGl0aW9uS2V5LCBhcmM0LlVpbnROMjU2Pih7IGtleVByZWZpeDogJ3AnIH0pCiAgICBieXRlYyA0IC8vICJwIgogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjQ1NAogICAgLy8gYXNzZXJ0KHRoaXMucGFydGl0aW9ucyhmcm9tS2V5KS5leGlzdHMsICdQYXJ0aXRpb24gYmFsYW5jZSBtaXNzaW5nJykKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gUGFydGl0aW9uIGJhbGFuY2UgbWlzc2luZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo0NTUKICAgIC8vIGFzc2VydCh0aGlzLnBhcnRpdGlvbnMoZnJvbUtleSkudmFsdWUubmF0aXZlID49IGFtb3VudC5uYXRpdmUsICdJbnN1ZmZpY2llbnQgcGFydGl0aW9uIGJhbGFuY2UnKQogICAgZHVwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgZnJhbWVfZGlnIC0yCiAgICBiPj0KICAgIGFzc2VydCAvLyBJbnN1ZmZpY2llbnQgcGFydGl0aW9uIGJhbGFuY2UKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NDU2CiAgICAvLyB0aGlzLnBhcnRpdGlvbnMoZnJvbUtleSkudmFsdWUgPSBuZXcgYXJjNC5VaW50TjI1Nih0aGlzLnBhcnRpdGlvbnMoZnJvbUtleSkudmFsdWUubmF0aXZlIC0gYW1vdW50Lm5hdGl2ZSkKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGZyYW1lX2RpZyAtMgogICAgYi0KICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzIgLy8gMzIKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGludGNfMiAvLyAzMgogICAgYnplcm8KICAgIGR1cAogICAgZnJhbWVfYnVyeSAwCiAgICBifAogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjUzCiAgICAvLyBwdWJsaWMgYmFsYW5jZXMgPSBCb3hNYXA8QWRkcmVzcywgVWludE4yNTY+KHsga2V5UHJlZml4OiAnYicgfSkKICAgIGJ5dGVjIDYgLy8gImIiCiAgICBmcmFtZV9kaWcgLTQKICAgIGNvbmNhdAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NDU3CiAgICAvLyBhc3NlcnQodGhpcy5iYWxhbmNlcyhmcm9tKS5leGlzdHMgJiYgdGhpcy5iYWxhbmNlcyhmcm9tKS52YWx1ZS5uYXRpdmUgPj0gYW1vdW50Lm5hdGl2ZSwgJ0luc3VmZmljaWVudCBiYWxhbmNlJykKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYnogYXJjMTQxMF9vcGVyYXRvcl9yZWRlZW1fYnlfcGFydGl0aW9uX2Jvb2xfZmFsc2VANwogICAgZnJhbWVfZGlnIDIKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBmcmFtZV9kaWcgLTIKICAgIGI+PQogICAgYnogYXJjMTQxMF9vcGVyYXRvcl9yZWRlZW1fYnlfcGFydGl0aW9uX2Jvb2xfZmFsc2VANwogICAgaW50Y18xIC8vIDEKCmFyYzE0MTBfb3BlcmF0b3JfcmVkZWVtX2J5X3BhcnRpdGlvbl9ib29sX21lcmdlQDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjQ1NwogICAgLy8gYXNzZXJ0KHRoaXMuYmFsYW5jZXMoZnJvbSkuZXhpc3RzICYmIHRoaXMuYmFsYW5jZXMoZnJvbSkudmFsdWUubmF0aXZlID49IGFtb3VudC5uYXRpdmUsICdJbnN1ZmZpY2llbnQgYmFsYW5jZScpCiAgICBhc3NlcnQgLy8gSW5zdWZmaWNpZW50IGJhbGFuY2UKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMxNDEwLmFsZ28udHM6NDU4CiAgICAvLyB0aGlzLmJhbGFuY2VzKGZyb20pLnZhbHVlID0gbmV3IGFyYzQuVWludE4yNTYodGhpcy5iYWxhbmNlcyhmcm9tKS52YWx1ZS5uYXRpdmUgLSBhbW91bnQubmF0aXZlKQogICAgZnJhbWVfZGlnIDIKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGZyYW1lX2RpZyAtMgogICAgYi0KICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzIgLy8gMzIKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGZyYW1lX2RpZyAwCiAgICBkdXAKICAgIGNvdmVyIDMKICAgIGJ8CiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NTEKICAgIC8vIHB1YmxpYyB0b3RhbFN1cHBseSA9IEdsb2JhbFN0YXRlPFVpbnROMjU2Pih7IGtleTogJ3QnIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAidCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMTQxMC5hbGdvLnRzOjQ1OQogICAgLy8gdGhpcy50b3RhbFN1cHBseS52YWx1ZSA9IG5ldyBhcmM0LlVpbnROMjU2KHRoaXMudG90YWxTdXBwbHkudmFsdWUubmF0aXZlIC0gYW1vdW50Lm5hdGl2ZSkKICAgIGZyYW1lX2RpZyAtMgogICAgYi0KICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzIgLy8gMzIKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGJ8CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NTEKICAgIC8vIHB1YmxpYyB0b3RhbFN1cHBseSA9IEdsb2JhbFN0YXRlPFVpbnROMjU2Pih7IGtleTogJ3QnIH0pCiAgICBieXRlY18zIC8vICJ0IgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo0NTkKICAgIC8vIHRoaXMudG90YWxTdXBwbHkudmFsdWUgPSBuZXcgYXJjNC5VaW50TjI1Nih0aGlzLnRvdGFsU3VwcGx5LnZhbHVlLm5hdGl2ZSAtIGFtb3VudC5uYXRpdmUpCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzE0MTAuYWxnby50czo0NjAKICAgIC8vIGVtaXQoJ1JlZGVlbScsIG5ldyBhcmMxNDEwX3BhcnRpdGlvbl9yZWRlZW0oeyBmcm9tLCBwYXJ0aXRpb24sIGFtb3VudCwgZGF0YSB9KSkKICAgIGZyYW1lX2RpZyAxCiAgICBmcmFtZV9kaWcgLTIKICAgIGNvbmNhdAogICAgYnl0ZWMgMTYgLy8gMHgwMDYyCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICBieXRlYyAxMyAvLyAweDAwMDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZWMgMTkgLy8gbWV0aG9kICJSZWRlZW0oKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2LGJ5dGVbXSkpIgogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIHJldHN1YgoKYXJjMTQxMF9vcGVyYXRvcl9yZWRlZW1fYnlfcGFydGl0aW9uX2Jvb2xfZmFsc2VANzoKICAgIGludGNfMCAvLyAwCiAgICBiIGFyYzE0MTBfb3BlcmF0b3JfcmVkZWVtX2J5X3BhcnRpdGlvbl9ib29sX21lcmdlQDgKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6OkFyYzIwMC5ib290c3RyYXAobmFtZTogYnl0ZXMsIHN5bWJvbDogYnl0ZXMsIGRlY2ltYWxzOiBieXRlcywgdG90YWxTdXBwbHk6IGJ5dGVzKSAtPiBieXRlczoKYm9vdHN0cmFwOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjU2LTU3CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gcHVibGljIGJvb3RzdHJhcChuYW1lOiBEeW5hbWljQnl0ZXMsIHN5bWJvbDogRHluYW1pY0J5dGVzLCBkZWNpbWFsczogVWludE44LCB0b3RhbFN1cHBseTogVWludE4yNTYpOiBCb29sIHsKICAgIHByb3RvIDQgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjU4CiAgICAvLyBhc3NlcnQoVHhuLnNlbmRlciA9PT0gR2xvYmFsLmNyZWF0b3JBZGRyZXNzLCAnT25seSBkZXBsb3llciBvZiB0aGlzIHNtYXJ0IGNvbnRyYWN0IGNhbiBjYWxsIGJvb3RzdHJhcCBtZXRob2QnKQogICAgdHhuIFNlbmRlcgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIE9ubHkgZGVwbG95ZXIgb2YgdGhpcyBzbWFydCBjb250cmFjdCBjYW4gY2FsbCBib290c3RyYXAgbWV0aG9kCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NTkKICAgIC8vIGFzc2VydChuYW1lLm5hdGl2ZS5sZW5ndGggPiAwLCAnTmFtZSBvZiB0aGUgYXNzZXQgbXVzdCBiZSBsb25nZXIgb3IgZXF1YWwgdG8gMSBjaGFyYWN0ZXInKQogICAgZnJhbWVfZGlnIC00CiAgICBleHRyYWN0IDIgMAogICAgbGVuCiAgICBkdXAKICAgIGFzc2VydCAvLyBOYW1lIG9mIHRoZSBhc3NldCBtdXN0IGJlIGxvbmdlciBvciBlcXVhbCB0byAxIGNoYXJhY3RlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjYwCiAgICAvLyBhc3NlcnQobmFtZS5uYXRpdmUubGVuZ3RoIDw9IDMyLCAnTmFtZSBvZiB0aGUgYXNzZXQgbXVzdCBiZSBzaG9ydGVyIG9yIGVxdWFsIHRvIDMyIGNoYXJhY3RlcnMnKQogICAgaW50Y18yIC8vIDMyCiAgICA8PQogICAgYXNzZXJ0IC8vIE5hbWUgb2YgdGhlIGFzc2V0IG11c3QgYmUgc2hvcnRlciBvciBlcXVhbCB0byAzMiBjaGFyYWN0ZXJzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NjEKICAgIC8vIGFzc2VydChzeW1ib2wubmF0aXZlLmxlbmd0aCA+IDAsICdTeW1ib2wgb2YgdGhlIGFzc2V0IG11c3QgYmUgbG9uZ2VyIG9yIGVxdWFsIHRvIDEgY2hhcmFjdGVyJykKICAgIGZyYW1lX2RpZyAtMwogICAgZXh0cmFjdCAyIDAKICAgIGxlbgogICAgZHVwCiAgICBhc3NlcnQgLy8gU3ltYm9sIG9mIHRoZSBhc3NldCBtdXN0IGJlIGxvbmdlciBvciBlcXVhbCB0byAxIGNoYXJhY3RlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjYyCiAgICAvLyBhc3NlcnQoc3ltYm9sLm5hdGl2ZS5sZW5ndGggPD0gOCwgJ1N5bWJvbCBvZiB0aGUgYXNzZXQgbXVzdCBiZSBzaG9ydGVyIG9yIGVxdWFsIHRvIDggY2hhcmFjdGVycycpCiAgICBpbnRjXzMgLy8gOAogICAgPD0KICAgIGFzc2VydCAvLyBTeW1ib2wgb2YgdGhlIGFzc2V0IG11c3QgYmUgc2hvcnRlciBvciBlcXVhbCB0byA4IGNoYXJhY3RlcnMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo1MQogICAgLy8gcHVibGljIHRvdGFsU3VwcGx5ID0gR2xvYmFsU3RhdGU8VWludE4yNTY+KHsga2V5OiAndCcgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18zIC8vICJ0IgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjYzCiAgICAvLyBhc3NlcnQoIXRoaXMudG90YWxTdXBwbHkuaGFzVmFsdWUsICdUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIG9ubHkgb25jZScpCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYnVyeSAxCiAgICAhCiAgICBhc3NlcnQgLy8gVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCBvbmx5IG9uY2UKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czozOQogICAgLy8gcHVibGljIG5hbWUgPSBHbG9iYWxTdGF0ZTxEeW5hbWljQnl0ZXM+KHsga2V5OiAnbicgfSkKICAgIHB1c2hieXRlcyAibiIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo2NQogICAgLy8gdGhpcy5uYW1lLnZhbHVlID0gbmFtZQogICAgZnJhbWVfZGlnIC00CiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjQzCiAgICAvLyBwdWJsaWMgc3ltYm9sID0gR2xvYmFsU3RhdGU8RHluYW1pY0J5dGVzPih7IGtleTogJ3MnIH0pCiAgICBwdXNoYnl0ZXMgInMiCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NjYKICAgIC8vIHRoaXMuc3ltYm9sLnZhbHVlID0gc3ltYm9sCiAgICBmcmFtZV9kaWcgLTMKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NTEKICAgIC8vIHB1YmxpYyB0b3RhbFN1cHBseSA9IEdsb2JhbFN0YXRlPFVpbnROMjU2Pih7IGtleTogJ3QnIH0pCiAgICBieXRlY18zIC8vICJ0IgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjY3CiAgICAvLyB0aGlzLnRvdGFsU3VwcGx5LnZhbHVlID0gdG90YWxTdXBwbHkKICAgIGZyYW1lX2RpZyAtMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo0NwogICAgLy8gcHVibGljIGRlY2ltYWxzID0gR2xvYmFsU3RhdGU8VWludE44Pih7IGtleTogJ2QnIH0pCiAgICBwdXNoYnl0ZXMgImQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NjgKICAgIC8vIHRoaXMuZGVjaW1hbHMudmFsdWUgPSBkZWNpbWFscwogICAgZnJhbWVfZGlnIC0yCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjY5CiAgICAvLyBjb25zdCBzZW5kZXIgPSBuZXcgQWRkcmVzcyhUeG4uc2VuZGVyKQogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjUzCiAgICAvLyBwdWJsaWMgYmFsYW5jZXMgPSBCb3hNYXA8QWRkcmVzcywgVWludE4yNTY+KHsga2V5UHJlZml4OiAnYicgfSkKICAgIGJ5dGVjIDYgLy8gImIiCiAgICBkaWcgMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NzEKICAgIC8vIHRoaXMuYmFsYW5jZXMoc2VuZGVyKS52YWx1ZSA9IHRvdGFsU3VwcGx5CiAgICBmcmFtZV9kaWcgLTEKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo3MwogICAgLy8gZW1pdChuZXcgYXJjMjAwX1RyYW5zZmVyKHsgZnJvbTogbmV3IEFkZHJlc3MoR2xvYmFsLnplcm9BZGRyZXNzKSwgdG86IHNlbmRlciwgdmFsdWU6IHRvdGFsU3VwcGx5IH0pKQogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICBieXRlYyAyMCAvLyBtZXRob2QgImFyYzIwMF9UcmFuc2ZlcihhZGRyZXNzLGFkZHJlc3MsdWludDI1NikiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjc0CiAgICAvLyByZXR1cm4gbmV3IEJvb2wodHJ1ZSkKICAgIGJ5dGVjIDUgLy8gMHg4MAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjpBcmMyMDAuYXJjMjAwX25hbWUoKSAtPiBieXRlczoKYXJjMjAwX25hbWU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MzkKICAgIC8vIHB1YmxpYyBuYW1lID0gR2xvYmFsU3RhdGU8RHluYW1pY0J5dGVzPih7IGtleTogJ24nIH0pCiAgICBpbnRjXzAgLy8gMAogICAgcHVzaGJ5dGVzICJuIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo4NAogICAgLy8gcmV0dXJuIG5ldyBTdGF0aWNCeXRlczwzMj4odGhpcy5uYW1lLnZhbHVlLm5hdGl2ZSkKICAgIGV4dHJhY3QgMiAwCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18yIC8vIDMyCiAgICA9PQogICAgYXNzZXJ0IC8vIGludmFsaWQgc2l6ZQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjpBcmMyMDAuYXJjMjAwX3N5bWJvbCgpIC0+IGJ5dGVzOgphcmMyMDBfc3ltYm9sOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjQzCiAgICAvLyBwdWJsaWMgc3ltYm9sID0gR2xvYmFsU3RhdGU8RHluYW1pY0J5dGVzPih7IGtleTogJ3MnIH0pCiAgICBpbnRjXzAgLy8gMAogICAgcHVzaGJ5dGVzICJzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo5NAogICAgLy8gcmV0dXJuIG5ldyBTdGF0aWNCeXRlczw4Pih0aGlzLnN5bWJvbC52YWx1ZS5uYXRpdmUpCiAgICBleHRyYWN0IDIgMAogICAgZHVwCiAgICBsZW4KICAgIGludGNfMyAvLyA4CiAgICA9PQogICAgYXNzZXJ0IC8vIGludmFsaWQgc2l6ZQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjpBcmMyMDAuYXJjMjAwX2RlY2ltYWxzKCkgLT4gYnl0ZXM6CmFyYzIwMF9kZWNpbWFsczoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo0NwogICAgLy8gcHVibGljIGRlY2ltYWxzID0gR2xvYmFsU3RhdGU8VWludE44Pih7IGtleTogJ2QnIH0pCiAgICBpbnRjXzAgLy8gMAogICAgcHVzaGJ5dGVzICJkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoxMDQKICAgIC8vIHJldHVybiB0aGlzLmRlY2ltYWxzLnZhbHVlCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6OkFyYzIwMC5hcmMyMDBfdG90YWxTdXBwbHkoKSAtPiBieXRlczoKYXJjMjAwX3RvdGFsU3VwcGx5OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjUxCiAgICAvLyBwdWJsaWMgdG90YWxTdXBwbHkgPSBHbG9iYWxTdGF0ZTxVaW50TjI1Nj4oeyBrZXk6ICd0JyB9KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzMgLy8gInQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjExNAogICAgLy8gcmV0dXJuIHRoaXMudG90YWxTdXBwbHkudmFsdWUKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo6QXJjMjAwLmFyYzIwMF9iYWxhbmNlT2Yob3duZXI6IGJ5dGVzKSAtPiBieXRlczoKYXJjMjAwX2JhbGFuY2VPZjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoxMjMtMTI0CiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgLy8gcHVibGljIGFyYzIwMF9iYWxhbmNlT2Yob3duZXI6IEFkZHJlc3MpOiBhcmM0LlVpbnROMjU2IHsKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjEyNQogICAgLy8gcmV0dXJuIHRoaXMuX2JhbGFuY2VPZihvd25lcikKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBfYmFsYW5jZU9mCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6OkFyYzIwMC5hcmMyMDBfdHJhbnNmZXJGcm9tKGZyb206IGJ5dGVzLCB0bzogYnl0ZXMsIHZhbHVlOiBieXRlcykgLT4gYnl0ZXM6CmFyYzIwMF90cmFuc2ZlckZyb206CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MTQ4LTE0OQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIHB1YmxpYyBhcmMyMDBfdHJhbnNmZXJGcm9tKGZyb206IEFkZHJlc3MsIHRvOiBBZGRyZXNzLCB2YWx1ZTogYXJjNC5VaW50TjI1Nik6IGFyYzQuQm9vbCB7CiAgICBwcm90byAzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoxNTAKICAgIC8vIGNvbnN0IHNwZW5kZXIgPSBuZXcgQWRkcmVzcyhUeG4uc2VuZGVyKQogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjE1MQogICAgLy8gY29uc3Qgc3BlbmRlcl9hbGxvd2FuY2UgPSB0aGlzLl9hbGxvd2FuY2UoZnJvbSwgc3BlbmRlcikKICAgIGZyYW1lX2RpZyAtMwogICAgZGlnIDEKICAgIGNhbGxzdWIgX2FsbG93YW5jZQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjE1MgogICAgLy8gYXNzZXJ0KHNwZW5kZXJfYWxsb3dhbmNlLm5hdGl2ZSA+PSB2YWx1ZS5uYXRpdmUsICdpbnN1ZmZpY2llbnQgYXBwcm92YWwnKQogICAgZHVwCiAgICBmcmFtZV9kaWcgLTEKICAgIGI+PQogICAgYXNzZXJ0IC8vIGluc3VmZmljaWVudCBhcHByb3ZhbAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjE1MwogICAgLy8gY29uc3QgbmV3X3NwZW5kZXJfYWxsb3dhbmNlID0gbmV3IFVpbnROMjU2KHNwZW5kZXJfYWxsb3dhbmNlLm5hdGl2ZSAtIHZhbHVlLm5hdGl2ZSkKICAgIGZyYW1lX2RpZyAtMQogICAgYi0KICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzIgLy8gMzIKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGludGNfMiAvLyAzMgogICAgYnplcm8KICAgIGJ8CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MTU0CiAgICAvLyB0aGlzLl9hcHByb3ZlKGZyb20sIHNwZW5kZXIsIG5ld19zcGVuZGVyX2FsbG93YW5jZSkKICAgIGZyYW1lX2RpZyAtMwogICAgY292ZXIgMgogICAgY2FsbHN1YiBfYXBwcm92ZQogICAgcG9wCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MTU1CiAgICAvLyByZXR1cm4gdGhpcy5fdHJhbnNmZXIoZnJvbSwgdG8sIHZhbHVlKQogICAgZnJhbWVfZGlnIC0zCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBfdHJhbnNmZXIKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo6QXJjMjAwLmFyYzIwMF9hcHByb3ZlKHNwZW5kZXI6IGJ5dGVzLCB2YWx1ZTogYnl0ZXMpIC0+IGJ5dGVzOgphcmMyMDBfYXBwcm92ZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoxNjUtMTY2CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gcHVibGljIGFyYzIwMF9hcHByb3ZlKHNwZW5kZXI6IEFkZHJlc3MsIHZhbHVlOiBhcmM0LlVpbnROMjU2KTogQm9vbCB7CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoxNjcKICAgIC8vIGNvbnN0IG93bmVyID0gbmV3IEFkZHJlc3MoVHhuLnNlbmRlcikKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoxNjgKICAgIC8vIHJldHVybiB0aGlzLl9hcHByb3ZlKG93bmVyLCBzcGVuZGVyLCB2YWx1ZSkKICAgIGZyYW1lX2RpZyAtMgogICAgZnJhbWVfZGlnIC0xCiAgICBjYWxsc3ViIF9hcHByb3ZlCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6OkFyYzIwMC5hcmMyMDBfYWxsb3dhbmNlKG93bmVyOiBieXRlcywgc3BlbmRlcjogYnl0ZXMpIC0+IGJ5dGVzOgphcmMyMDBfYWxsb3dhbmNlOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjE3Ny0xNzgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICAvLyBwdWJsaWMgYXJjMjAwX2FsbG93YW5jZShvd25lcjogQWRkcmVzcywgc3BlbmRlcjogQWRkcmVzcyk6IGFyYzQuVWludE4yNTYgewogICAgcHJvdG8gMiAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MTc5CiAgICAvLyByZXR1cm4gdGhpcy5fYWxsb3dhbmNlKG93bmVyLCBzcGVuZGVyKQogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgX2FsbG93YW5jZQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjpBcmMyMDAuX2JhbGFuY2VPZihvd25lcjogYnl0ZXMpIC0+IGJ5dGVzOgpfYmFsYW5jZU9mOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjE4MgogICAgLy8gcHJvdGVjdGVkIF9iYWxhbmNlT2Yob3duZXI6IEFkZHJlc3MpOiBVaW50TjI1NiB7CiAgICBwcm90byAxIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo1MwogICAgLy8gcHVibGljIGJhbGFuY2VzID0gQm94TWFwPEFkZHJlc3MsIFVpbnROMjU2Pih7IGtleVByZWZpeDogJ2InIH0pCiAgICBieXRlYyA2IC8vICJiIgogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjE4MwogICAgLy8gaWYgKCF0aGlzLmJhbGFuY2VzKG93bmVyKS5leGlzdHMpIHJldHVybiBuZXcgVWludE4yNTYoMCkKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYm56IF9iYWxhbmNlT2ZfYWZ0ZXJfaWZfZWxzZUAyCiAgICBieXRlY18xIC8vIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAogICAgc3dhcAogICAgcmV0c3ViCgpfYmFsYW5jZU9mX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoxODQKICAgIC8vIHJldHVybiB0aGlzLmJhbGFuY2VzKG93bmVyKS52YWx1ZQogICAgZnJhbWVfZGlnIDAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBzd2FwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6OkFyYzIwMC5fdHJhbnNmZXIoc2VuZGVyOiBieXRlcywgcmVjaXBpZW50OiBieXRlcywgYW1vdW50OiBieXRlcykgLT4gYnl0ZXM6Cl90cmFuc2ZlcjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoxODcKICAgIC8vIHByb3RlY3RlZCBfdHJhbnNmZXIoc2VuZGVyOiBBZGRyZXNzLCByZWNpcGllbnQ6IEFkZHJlc3MsIGFtb3VudDogVWludE4yNTYpOiBCb29sIHsKICAgIHByb3RvIDMgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjE4OAogICAgLy8gY29uc3Qgc2VuZGVyX2JhbGFuY2UgPSB0aGlzLl9iYWxhbmNlT2Yoc2VuZGVyKQogICAgZnJhbWVfZGlnIC0zCiAgICBjYWxsc3ViIF9iYWxhbmNlT2YKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjE4OQogICAgLy8gY29uc3QgcmVjaXBpZW50X2JhbGFuY2UgPSB0aGlzLl9iYWxhbmNlT2YocmVjaXBpZW50KQogICAgZnJhbWVfZGlnIC0yCiAgICBjYWxsc3ViIF9iYWxhbmNlT2YKICAgIHN3YXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoxOTAKICAgIC8vIGFzc2VydChzZW5kZXJfYmFsYW5jZS5uYXRpdmUgPj0gYW1vdW50Lm5hdGl2ZSwgJ0luc3VmZmljaWVudCBiYWxhbmNlIGF0IHRoZSBzZW5kZXIgYWNjb3VudCcpCiAgICBmcmFtZV9kaWcgLTEKICAgIGI+PQogICAgYXNzZXJ0IC8vIEluc3VmZmljaWVudCBiYWxhbmNlIGF0IHRoZSBzZW5kZXIgYWNjb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjE5MgogICAgLy8gaWYgKHNlbmRlciAhPT0gcmVjaXBpZW50KSB7CiAgICBmcmFtZV9kaWcgLTMKICAgIGZyYW1lX2RpZyAtMgogICAgIT0KICAgIGJ6IF90cmFuc2Zlcl9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoxOTQKICAgIC8vIHRoaXMuYmFsYW5jZXMoc2VuZGVyKS52YWx1ZSA9IG5ldyBVaW50TjI1NihzZW5kZXJfYmFsYW5jZS5uYXRpdmUgLSBhbW91bnQubmF0aXZlKQogICAgZnJhbWVfZGlnIDAKICAgIGZyYW1lX2RpZyAtMQogICAgYi0KICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzIgLy8gMzIKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGludGNfMiAvLyAzMgogICAgYnplcm8KICAgIHN3YXAKICAgIGRpZyAxCiAgICBifAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjUzCiAgICAvLyBwdWJsaWMgYmFsYW5jZXMgPSBCb3hNYXA8QWRkcmVzcywgVWludE4yNTY+KHsga2V5UHJlZml4OiAnYicgfSkKICAgIGJ5dGVjIDYgLy8gImIiCiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjE5NAogICAgLy8gdGhpcy5iYWxhbmNlcyhzZW5kZXIpLnZhbHVlID0gbmV3IFVpbnROMjU2KHNlbmRlcl9iYWxhbmNlLm5hdGl2ZSAtIGFtb3VudC5uYXRpdmUpCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MTk1CiAgICAvLyB0aGlzLmJhbGFuY2VzKHJlY2lwaWVudCkudmFsdWUgPSBuZXcgVWludE4yNTYocmVjaXBpZW50X2JhbGFuY2UubmF0aXZlICsgYW1vdW50Lm5hdGl2ZSkKICAgIGZyYW1lX2RpZyAxCiAgICBmcmFtZV9kaWcgLTEKICAgIGIrCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18yIC8vIDMyCiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBifAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjUzCiAgICAvLyBwdWJsaWMgYmFsYW5jZXMgPSBCb3hNYXA8QWRkcmVzcywgVWludE4yNTY+KHsga2V5UHJlZml4OiAnYicgfSkKICAgIGJ5dGVjIDYgLy8gImIiCiAgICBmcmFtZV9kaWcgLTIKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjE5NQogICAgLy8gdGhpcy5iYWxhbmNlcyhyZWNpcGllbnQpLnZhbHVlID0gbmV3IFVpbnROMjU2KHJlY2lwaWVudF9iYWxhbmNlLm5hdGl2ZSArIGFtb3VudC5uYXRpdmUpCiAgICBzd2FwCiAgICBib3hfcHV0CgpfdHJhbnNmZXJfYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjE5NwogICAgLy8gZW1pdChuZXcgYXJjMjAwX1RyYW5zZmVyKHsgZnJvbTogc2VuZGVyLCB0bzogcmVjaXBpZW50LCB2YWx1ZTogYW1vdW50IH0pKQogICAgZnJhbWVfZGlnIC0zCiAgICBmcmFtZV9kaWcgLTIKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIGJ5dGVjIDIwIC8vIG1ldGhvZCAiYXJjMjAwX1RyYW5zZmVyKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KSIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MTk4CiAgICAvLyByZXR1cm4gbmV3IEJvb2wodHJ1ZSkKICAgIGJ5dGVjIDUgLy8gMHg4MAogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6OkFyYzIwMC5fYXBwcm92YWxLZXkob3duZXI6IGJ5dGVzLCBzcGVuZGVyOiBieXRlcykgLT4gYnl0ZXM6Cl9hcHByb3ZhbEtleToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoyMDAKICAgIC8vIHByb3RlY3RlZCBfYXBwcm92YWxLZXkob3duZXI6IEFkZHJlc3MsIHNwZW5kZXI6IEFkZHJlc3MpOiBTdGF0aWNCeXRlczwzMj4gewogICAgcHJvdG8gMiAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MjAxCiAgICAvLyByZXR1cm4gbmV3IFN0YXRpY0J5dGVzPDMyPihvcC5zaGEyNTYob3AuY29uY2F0KG93bmVyLmJ5dGVzLCBzcGVuZGVyLmJ5dGVzKSkpCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICBzaGEyNTYKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzIgLy8gMzIKICAgID09CiAgICBhc3NlcnQgLy8gaW52YWxpZCBzaXplCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6OkFyYzIwMC5fYWxsb3dhbmNlKG93bmVyOiBieXRlcywgc3BlbmRlcjogYnl0ZXMpIC0+IGJ5dGVzOgpfYWxsb3dhbmNlOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjIwNAogICAgLy8gcHJvdGVjdGVkIF9hbGxvd2FuY2Uob3duZXI6IEFkZHJlc3MsIHNwZW5kZXI6IEFkZHJlc3MpOiBVaW50TjI1NiB7CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoyMDUKICAgIC8vIGNvbnN0IGtleSA9IHRoaXMuX2FwcHJvdmFsS2V5KG93bmVyLCBzcGVuZGVyKQogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgX2FwcHJvdmFsS2V5CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6NTUKICAgIC8vIHB1YmxpYyBhcHByb3ZhbHMgPSBCb3hNYXA8U3RhdGljQnl0ZXM8MzI+LCBBcHByb3ZhbFN0cnVjdD4oeyBrZXlQcmVmaXg6ICdhJyB9KQogICAgcHVzaGJ5dGVzICJhIgogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoyMDYKICAgIC8vIGlmICghdGhpcy5hcHByb3ZhbHMoa2V5KS5leGlzdHMpIHJldHVybiBuZXcgVWludE4yNTYoMCkKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYm56IF9hbGxvd2FuY2VfYWZ0ZXJfaWZfZWxzZUAyCiAgICBieXRlY18xIC8vIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAogICAgc3dhcAogICAgcmV0c3ViCgpfYWxsb3dhbmNlX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoyMDcKICAgIC8vIHJldHVybiB0aGlzLmFwcHJvdmFscyhrZXkpLnZhbHVlLmFwcHJvdmFsQW1vdW50CiAgICBmcmFtZV9kaWcgMAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGV4dHJhY3QgMCAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIHN3YXAKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czo6QXJjMjAwLl9hcHByb3ZlKG93bmVyOiBieXRlcywgc3BlbmRlcjogYnl0ZXMsIGFtb3VudDogYnl0ZXMpIC0+IGJ5dGVzOgpfYXBwcm92ZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoyMTAKICAgIC8vIHByb3RlY3RlZCBfYXBwcm92ZShvd25lcjogQWRkcmVzcywgc3BlbmRlcjogQWRkcmVzcywgYW1vdW50OiBVaW50TjI1Nik6IEJvb2wgewogICAgcHJvdG8gMyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MjExCiAgICAvLyBjb25zdCBrZXkgPSB0aGlzLl9hcHByb3ZhbEtleShvd25lciwgc3BlbmRlcikKICAgIGZyYW1lX2RpZyAtMwogICAgZnJhbWVfZGlnIC0yCiAgICBjYWxsc3ViIF9hcHByb3ZhbEtleQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjIxMi0yMTYKICAgIC8vIGNvbnN0IGFwcHJvdmFsQm94OiBBcHByb3ZhbFN0cnVjdCA9IG5ldyBBcHByb3ZhbFN0cnVjdCh7CiAgICAvLyAgIGFwcHJvdmFsQW1vdW50OiBhbW91bnQsCiAgICAvLyAgIG93bmVyOiBvd25lciwKICAgIC8vICAgc3BlbmRlcjogc3BlbmRlciwKICAgIC8vIH0pCiAgICBmcmFtZV9kaWcgLTEKICAgIGZyYW1lX2RpZyAtMwogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTIKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzIwMC5hbGdvLnRzOjU1CiAgICAvLyBwdWJsaWMgYXBwcm92YWxzID0gQm94TWFwPFN0YXRpY0J5dGVzPDMyPiwgQXBwcm92YWxTdHJ1Y3Q+KHsga2V5UHJlZml4OiAnYScgfSkKICAgIHB1c2hieXRlcyAiYSIKICAgIHVuY292ZXIgMgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MjE3CiAgICAvLyB0aGlzLmFwcHJvdmFscyhrZXkpLnZhbHVlID0gYXBwcm92YWxCb3guY29weSgpCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjMjAwLmFsZ28udHM6MjE4CiAgICAvLyBlbWl0KG5ldyBhcmMyMDBfQXBwcm92YWwoeyBvd25lcjogb3duZXIsIHNwZW5kZXI6IHNwZW5kZXIsIHZhbHVlOiBhbW91bnQgfSkpCiAgICBmcmFtZV9kaWcgLTMKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzIDB4MTk2OWY4NjUgLy8gbWV0aG9kICJhcmMyMDBfQXBwcm92YWwoYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpIgogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmMyMDAuYWxnby50czoyMTkKICAgIC8vIHJldHVybiBuZXcgQm9vbCh0cnVlKQogICAgYnl0ZWMgNSAvLyAweDgwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo6QXJjODguX2Vuc3VyZURlZmF1bHRPd25lcigpIC0+IHZvaWQ6Cl9lbnN1cmVEZWZhdWx0T3duZXI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czoxOQogICAgLy8gcHVibGljIGluaXRpYWxpemVkID0gR2xvYmFsU3RhdGU8YXJjNC5CeXRlPih7IGtleTogJ2FyYzg4X29pJyB9KSAvLyAxIGlmIGluaXRpYWxpemVkIChleHBsaWNpdCBvciBpbXBsaWNpdCkKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA5IC8vICJhcmM4OF9vaSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjI3CiAgICAvLyBpZiAoIXRoaXMuaW5pdGlhbGl6ZWQuaGFzVmFsdWUgfHwgdGhpcy5pbml0aWFsaXplZC52YWx1ZS5uYXRpdmUgPT09IDApIHsKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBidXJ5IDEKICAgIGJ6IF9lbnN1cmVEZWZhdWx0T3duZXJfaWZfYm9keUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czoxOQogICAgLy8gcHVibGljIGluaXRpYWxpemVkID0gR2xvYmFsU3RhdGU8YXJjNC5CeXRlPih7IGtleTogJ2FyYzg4X29pJyB9KSAvLyAxIGlmIGluaXRpYWxpemVkIChleHBsaWNpdCBvciBpbXBsaWNpdCkKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA5IC8vICJhcmM4OF9vaSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czoyNwogICAgLy8gaWYgKCF0aGlzLmluaXRpYWxpemVkLmhhc1ZhbHVlIHx8IHRoaXMuaW5pdGlhbGl6ZWQudmFsdWUubmF0aXZlID09PSAwKSB7CiAgICBidG9pCiAgICBibnogX2Vuc3VyZURlZmF1bHRPd25lcl9hZnRlcl9pZl9lbHNlQDUKCl9lbnN1cmVEZWZhdWx0T3duZXJfaWZfYm9keUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6MTcKICAgIC8vIHB1YmxpYyBvd25lciA9IEdsb2JhbFN0YXRlPGFyYzQuQWRkcmVzcz4oeyBrZXk6ICdhcmM4OF9vJyB9KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzIgLy8gImFyYzg4X28iCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czoyOAogICAgLy8gaWYgKCF0aGlzLm93bmVyLmhhc1ZhbHVlKSB7CiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYnVyeSAxCiAgICBibnogX2Vuc3VyZURlZmF1bHRPd25lcl9hZnRlcl9pZl9lbHNlQDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjE3CiAgICAvLyBwdWJsaWMgb3duZXIgPSBHbG9iYWxTdGF0ZTxhcmM0LkFkZHJlc3M+KHsga2V5OiAnYXJjODhfbycgfSkKICAgIGJ5dGVjXzIgLy8gImFyYzg4X28iCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czoyOQogICAgLy8gdGhpcy5vd25lci52YWx1ZSA9IG5ldyBhcmM0LkFkZHJlc3MoR2xvYmFsLmNyZWF0b3JBZGRyZXNzKQogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICBhcHBfZ2xvYmFsX3B1dAoKX2Vuc3VyZURlZmF1bHRPd25lcl9hZnRlcl9pZl9lbHNlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czoxOQogICAgLy8gcHVibGljIGluaXRpYWxpemVkID0gR2xvYmFsU3RhdGU8YXJjNC5CeXRlPih7IGtleTogJ2FyYzg4X29pJyB9KSAvLyAxIGlmIGluaXRpYWxpemVkIChleHBsaWNpdCBvciBpbXBsaWNpdCkKICAgIGJ5dGVjIDkgLy8gImFyYzg4X29pIgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6MzEKICAgIC8vIHRoaXMuaW5pdGlhbGl6ZWQudmFsdWUgPSBuZXcgYXJjNC5CeXRlKDEpCiAgICBieXRlYyAxNCAvLyAweDAxCiAgICBhcHBfZ2xvYmFsX3B1dAoKX2Vuc3VyZURlZmF1bHRPd25lcl9hZnRlcl9pZl9lbHNlQDU6CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo6QXJjODguYXJjODhfb3duZXIoKSAtPiBieXRlczoKYXJjODhfb3duZXI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czozNwogICAgLy8gdGhpcy5fZW5zdXJlRGVmYXVsdE93bmVyKCkKICAgIGNhbGxzdWIgX2Vuc3VyZURlZmF1bHRPd25lcgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6MTcKICAgIC8vIHB1YmxpYyBvd25lciA9IEdsb2JhbFN0YXRlPGFyYzQuQWRkcmVzcz4oeyBrZXk6ICdhcmM4OF9vJyB9KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzIgLy8gImFyYzg4X28iCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6MzgKICAgIC8vIHJldHVybiB0aGlzLm93bmVyLnZhbHVlCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo6QXJjODguYXJjODhfaXNfb3duZXIocXVlcnk6IGJ5dGVzKSAtPiBieXRlczoKYXJjODhfaXNfb3duZXI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo0MS00MgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIC8vIHB1YmxpYyBhcmM4OF9pc19vd25lcihxdWVyeTogYXJjNC5BZGRyZXNzKTogYXJjNC5Cb29sIHsKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6NDMKICAgIC8vIHRoaXMuX2Vuc3VyZURlZmF1bHRPd25lcigpCiAgICBjYWxsc3ViIF9lbnN1cmVEZWZhdWx0T3duZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjE3CiAgICAvLyBwdWJsaWMgb3duZXIgPSBHbG9iYWxTdGF0ZTxhcmM0LkFkZHJlc3M+KHsga2V5OiAnYXJjODhfbycgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJhcmM4OF9vIgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6NDQKICAgIC8vIGlmICghdGhpcy5vd25lci5oYXNWYWx1ZSkgcmV0dXJuIG5ldyBhcmM0LkJvb2woZmFsc2UpCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYnVyeSAxCiAgICBibnogYXJjODhfaXNfb3duZXJfYWZ0ZXJfaWZfZWxzZUAyCiAgICBieXRlYyA4IC8vIDB4MDAKICAgIHJldHN1YgoKYXJjODhfaXNfb3duZXJfYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6MTcKICAgIC8vIHB1YmxpYyBvd25lciA9IEdsb2JhbFN0YXRlPGFyYzQuQWRkcmVzcz4oeyBrZXk6ICdhcmM4OF9vJyB9KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzIgLy8gImFyYzg4X28iCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6NDUKICAgIC8vIGlmICh0aGlzLm93bmVyLnZhbHVlID09PSBuZXcgYXJjNC5BZGRyZXNzKCkpIHJldHVybiBuZXcgYXJjNC5Cb29sKGZhbHNlKQogICAgYnl0ZWNfMSAvLyBhZGRyIEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFZNUhGS1EKICAgID09CiAgICBieiBhcmM4OF9pc19vd25lcl9hZnRlcl9pZl9lbHNlQDQKICAgIGJ5dGVjIDggLy8gMHgwMAogICAgcmV0c3ViCgphcmM4OF9pc19vd25lcl9hZnRlcl9pZl9lbHNlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czoxNwogICAgLy8gcHVibGljIG93bmVyID0gR2xvYmFsU3RhdGU8YXJjNC5BZGRyZXNzPih7IGtleTogJ2FyYzg4X28nIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAiYXJjODhfbyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo0NgogICAgLy8gcmV0dXJuIG5ldyBhcmM0LkJvb2wodGhpcy5vd25lci52YWx1ZSA9PT0gcXVlcnkpCiAgICBmcmFtZV9kaWcgLTEKICAgID09CiAgICBieXRlYyA4IC8vIDB4MDAKICAgIGludGNfMCAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6OkFyYzg4LmFyYzg4X2luaXRpYWxpemVfb3duZXIobmV3X293bmVyOiBieXRlcykgLT4gdm9pZDoKYXJjODhfaW5pdGlhbGl6ZV9vd25lcjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjUwLTUxCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gcHVibGljIGFyYzg4X2luaXRpYWxpemVfb3duZXIobmV3X293bmVyOiBhcmM0LkFkZHJlc3MpOiB2b2lkIHsKICAgIHByb3RvIDEgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6MTkKICAgIC8vIHB1YmxpYyBpbml0aWFsaXplZCA9IEdsb2JhbFN0YXRlPGFyYzQuQnl0ZT4oeyBrZXk6ICdhcmM4OF9vaScgfSkgLy8gMSBpZiBpbml0aWFsaXplZCAoZXhwbGljaXQgb3IgaW1wbGljaXQpCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgOSAvLyAiYXJjODhfb2kiCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo1MgogICAgLy8gYXNzZXJ0KCEodGhpcy5pbml0aWFsaXplZC5oYXNWYWx1ZSAmJiB0aGlzLmluaXRpYWxpemVkLnZhbHVlLm5hdGl2ZSA9PT0gMSksICdhbHJlYWR5X2luaXRpYWxpemVkJykKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBidXJ5IDEKICAgIGJ6IGFyYzg4X2luaXRpYWxpemVfb3duZXJfYm9vbF9mYWxzZUAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czoxOQogICAgLy8gcHVibGljIGluaXRpYWxpemVkID0gR2xvYmFsU3RhdGU8YXJjNC5CeXRlPih7IGtleTogJ2FyYzg4X29pJyB9KSAvLyAxIGlmIGluaXRpYWxpemVkIChleHBsaWNpdCBvciBpbXBsaWNpdCkKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA5IC8vICJhcmM4OF9vaSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo1MgogICAgLy8gYXNzZXJ0KCEodGhpcy5pbml0aWFsaXplZC5oYXNWYWx1ZSAmJiB0aGlzLmluaXRpYWxpemVkLnZhbHVlLm5hdGl2ZSA9PT0gMSksICdhbHJlYWR5X2luaXRpYWxpemVkJykKICAgIGJ0b2kKICAgIGludGNfMSAvLyAxCiAgICA9PQogICAgYnogYXJjODhfaW5pdGlhbGl6ZV9vd25lcl9ib29sX2ZhbHNlQDMKICAgIGludGNfMSAvLyAxCgphcmM4OF9pbml0aWFsaXplX293bmVyX2Jvb2xfbWVyZ2VANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjUyCiAgICAvLyBhc3NlcnQoISh0aGlzLmluaXRpYWxpemVkLmhhc1ZhbHVlICYmIHRoaXMuaW5pdGlhbGl6ZWQudmFsdWUubmF0aXZlID09PSAxKSwgJ2FscmVhZHlfaW5pdGlhbGl6ZWQnKQogICAgIQogICAgYXNzZXJ0IC8vIGFscmVhZHlfaW5pdGlhbGl6ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjUzCiAgICAvLyBhc3NlcnQobmV3X293bmVyICE9PSBuZXcgYXJjNC5BZGRyZXNzKCksICd6ZXJvX2FkZHJlc3Nfbm90X2FsbG93ZWQnKQogICAgZnJhbWVfZGlnIC0xCiAgICBieXRlY18xIC8vIGFkZHIgQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVk1SEZLUQogICAgIT0KICAgIGFzc2VydCAvLyB6ZXJvX2FkZHJlc3Nfbm90X2FsbG93ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjE3CiAgICAvLyBwdWJsaWMgb3duZXIgPSBHbG9iYWxTdGF0ZTxhcmM0LkFkZHJlc3M+KHsga2V5OiAnYXJjODhfbycgfSkKICAgIGJ5dGVjXzIgLy8gImFyYzg4X28iCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo1NAogICAgLy8gdGhpcy5vd25lci52YWx1ZSA9IG5ld19vd25lcgogICAgZnJhbWVfZGlnIC0xCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6MTkKICAgIC8vIHB1YmxpYyBpbml0aWFsaXplZCA9IEdsb2JhbFN0YXRlPGFyYzQuQnl0ZT4oeyBrZXk6ICdhcmM4OF9vaScgfSkgLy8gMSBpZiBpbml0aWFsaXplZCAoZXhwbGljaXQgb3IgaW1wbGljaXQpCiAgICBieXRlYyA5IC8vICJhcmM4OF9vaSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjU1CiAgICAvLyB0aGlzLmluaXRpYWxpemVkLnZhbHVlID0gbmV3IGFyYzQuQnl0ZSgxKQogICAgYnl0ZWMgMTQgLy8gMHgwMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKYXJjODhfaW5pdGlhbGl6ZV9vd25lcl9ib29sX2ZhbHNlQDM6CiAgICBpbnRjXzAgLy8gMAogICAgYiBhcmM4OF9pbml0aWFsaXplX293bmVyX2Jvb2xfbWVyZ2VANAoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjpBcmM4OC5hcmM4OF90cmFuc2Zlcl9vd25lcnNoaXAobmV3X293bmVyOiBieXRlcykgLT4gdm9pZDoKYXJjODhfdHJhbnNmZXJfb3duZXJzaGlwOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6NTgtNTkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBwdWJsaWMgYXJjODhfdHJhbnNmZXJfb3duZXJzaGlwKG5ld19vd25lcjogYXJjNC5BZGRyZXNzKTogdm9pZCB7CiAgICBwcm90byAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjYwCiAgICAvLyB0aGlzLl9lbnN1cmVEZWZhdWx0T3duZXIoKQogICAgY2FsbHN1YiBfZW5zdXJlRGVmYXVsdE93bmVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo2MQogICAgLy8gYXNzZXJ0KG5ldyBhcmM0LkFkZHJlc3MoVHhuLnNlbmRlcikgPT09IHRoaXMub3duZXIudmFsdWUsICdub3Rfb3duZXInKQogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6MTcKICAgIC8vIHB1YmxpYyBvd25lciA9IEdsb2JhbFN0YXRlPGFyYzQuQWRkcmVzcz4oeyBrZXk6ICdhcmM4OF9vJyB9KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzIgLy8gImFyYzg4X28iCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6NjEKICAgIC8vIGFzc2VydChuZXcgYXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpID09PSB0aGlzLm93bmVyLnZhbHVlLCAnbm90X293bmVyJykKICAgID09CiAgICBhc3NlcnQgLy8gbm90X293bmVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo2MgogICAgLy8gYXNzZXJ0KG5ld19vd25lciAhPT0gbmV3IGFyYzQuQWRkcmVzcygpLCAnemVyb19hZGRyZXNzX25vdF9hbGxvd2VkJykKICAgIGZyYW1lX2RpZyAtMQogICAgYnl0ZWNfMSAvLyBhZGRyIEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFZNUhGS1EKICAgICE9CiAgICBhc3NlcnQgLy8gemVyb19hZGRyZXNzX25vdF9hbGxvd2VkCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czoxNwogICAgLy8gcHVibGljIG93bmVyID0gR2xvYmFsU3RhdGU8YXJjNC5BZGRyZXNzPih7IGtleTogJ2FyYzg4X28nIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAiYXJjODhfbyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICBieXRlY18yIC8vICJhcmM4OF9vIgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6NjQKICAgIC8vIHRoaXMub3duZXIudmFsdWUgPSBuZXdfb3duZXIKICAgIGZyYW1lX2RpZyAtMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjY1CiAgICAvLyBlbWl0KG5ldyBhcmM4OF9Pd25lcnNoaXBUcmFuc2ZlcnJlZCh7IHByZXZpb3VzX293bmVyOiBwcmV2aW91cywgbmV3X293bmVyIH0pKQogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIGJ5dGVjIDIxIC8vIG1ldGhvZCAiYXJjODhfT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyxhZGRyZXNzKSIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo6QXJjODguYXJjODhfcmVub3VuY2Vfb3duZXJzaGlwKCkgLT4gdm9pZDoKYXJjODhfcmVub3VuY2Vfb3duZXJzaGlwOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6NzAKICAgIC8vIHRoaXMuX2Vuc3VyZURlZmF1bHRPd25lcigpCiAgICBjYWxsc3ViIF9lbnN1cmVEZWZhdWx0T3duZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjcxCiAgICAvLyBhc3NlcnQobmV3IGFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKSA9PT0gdGhpcy5vd25lci52YWx1ZSwgJ25vdF9vd25lcicpCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czoxNwogICAgLy8gcHVibGljIG93bmVyID0gR2xvYmFsU3RhdGU8YXJjNC5BZGRyZXNzPih7IGtleTogJ2FyYzg4X28nIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAiYXJjODhfbyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo3MQogICAgLy8gYXNzZXJ0KG5ldyBhcmM0LkFkZHJlc3MoVHhuLnNlbmRlcikgPT09IHRoaXMub3duZXIudmFsdWUsICdub3Rfb3duZXInKQogICAgPT0KICAgIGFzc2VydCAvLyBub3Rfb3duZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjE3CiAgICAvLyBwdWJsaWMgb3duZXIgPSBHbG9iYWxTdGF0ZTxhcmM0LkFkZHJlc3M+KHsga2V5OiAnYXJjODhfbycgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJhcmM4OF9vIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIGJ5dGVjXzIgLy8gImFyYzg4X28iCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo3MwogICAgLy8gdGhpcy5vd25lci52YWx1ZSA9IG5ldyBhcmM0LkFkZHJlc3MoKQogICAgYnl0ZWNfMSAvLyBhZGRyIEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFZNUhGS1EKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo3NAogICAgLy8gZW1pdChuZXcgYXJjODhfT3duZXJzaGlwUmVub3VuY2VkKHsgcHJldmlvdXNfb3duZXI6IHByZXZpb3VzIH0pKQogICAgcHVzaGJ5dGVzIDB4MzQ2YWExNjYgLy8gbWV0aG9kICJhcmM4OF9Pd25lcnNoaXBSZW5vdW5jZWQoYWRkcmVzcykiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6OkFyYzg4LmFyYzg4X3RyYW5zZmVyX293bmVyc2hpcF9yZXF1ZXN0KHBlbmRpbmc6IGJ5dGVzKSAtPiB2b2lkOgphcmM4OF90cmFuc2Zlcl9vd25lcnNoaXBfcmVxdWVzdDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjc4LTc5CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gcHVibGljIGFyYzg4X3RyYW5zZmVyX293bmVyc2hpcF9yZXF1ZXN0KHBlbmRpbmc6IGFyYzQuQWRkcmVzcyk6IHZvaWQgewogICAgcHJvdG8gMSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo4MAogICAgLy8gdGhpcy5fZW5zdXJlRGVmYXVsdE93bmVyKCkKICAgIGNhbGxzdWIgX2Vuc3VyZURlZmF1bHRPd25lcgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6ODEKICAgIC8vIGFzc2VydChuZXcgYXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpID09PSB0aGlzLm93bmVyLnZhbHVlLCAnbm90X293bmVyJykKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjE3CiAgICAvLyBwdWJsaWMgb3duZXIgPSBHbG9iYWxTdGF0ZTxhcmM0LkFkZHJlc3M+KHsga2V5OiAnYXJjODhfbycgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJhcmM4OF9vIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjgxCiAgICAvLyBhc3NlcnQobmV3IGFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKSA9PT0gdGhpcy5vd25lci52YWx1ZSwgJ25vdF9vd25lcicpCiAgICA9PQogICAgYXNzZXJ0IC8vIG5vdF9vd25lcgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6ODIKICAgIC8vIGFzc2VydChwZW5kaW5nICE9PSBuZXcgYXJjNC5BZGRyZXNzKCksICd6ZXJvX2FkZHJlc3Nfbm90X2FsbG93ZWQnKQogICAgZnJhbWVfZGlnIC0xCiAgICBieXRlY18xIC8vIGFkZHIgQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVk1SEZLUQogICAgIT0KICAgIGFzc2VydCAvLyB6ZXJvX2FkZHJlc3Nfbm90X2FsbG93ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjE4CiAgICAvLyBwdWJsaWMgcGVuZGluZ093bmVyID0gR2xvYmFsU3RhdGU8YXJjNC5BZGRyZXNzPih7IGtleTogJ2FyYzg4X3BvJyB9KSAvLyBvcHRpb25hbCB0d28tc3RlcAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDcgLy8gImFyYzg4X3BvIgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6ODMKICAgIC8vIGlmICh0aGlzLnBlbmRpbmdPd25lci5oYXNWYWx1ZSAmJiB0aGlzLnBlbmRpbmdPd25lci52YWx1ZSAhPT0gbmV3IGFyYzQuQWRkcmVzcygpKSB7CiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYnVyeSAxCiAgICBieiBhcmM4OF90cmFuc2Zlcl9vd25lcnNoaXBfcmVxdWVzdF9hZnRlcl9pZl9lbHNlQDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjE4CiAgICAvLyBwdWJsaWMgcGVuZGluZ093bmVyID0gR2xvYmFsU3RhdGU8YXJjNC5BZGRyZXNzPih7IGtleTogJ2FyYzg4X3BvJyB9KSAvLyBvcHRpb25hbCB0d28tc3RlcAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDcgLy8gImFyYzg4X3BvIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjgzCiAgICAvLyBpZiAodGhpcy5wZW5kaW5nT3duZXIuaGFzVmFsdWUgJiYgdGhpcy5wZW5kaW5nT3duZXIudmFsdWUgIT09IG5ldyBhcmM0LkFkZHJlc3MoKSkgewogICAgYnl0ZWNfMSAvLyBhZGRyIEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFZNUhGS1EKICAgICE9CiAgICAhCiAgICBhc3NlcnQgLy8gcGVuZGluZ190cmFuc2Zlcl9leGlzdHMKCmFyYzg4X3RyYW5zZmVyX293bmVyc2hpcF9yZXF1ZXN0X2FmdGVyX2lmX2Vsc2VAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjE4CiAgICAvLyBwdWJsaWMgcGVuZGluZ093bmVyID0gR2xvYmFsU3RhdGU8YXJjNC5BZGRyZXNzPih7IGtleTogJ2FyYzg4X3BvJyB9KSAvLyBvcHRpb25hbCB0d28tc3RlcAogICAgYnl0ZWMgNyAvLyAiYXJjODhfcG8iCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo4NgogICAgLy8gdGhpcy5wZW5kaW5nT3duZXIudmFsdWUgPSBwZW5kaW5nCiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czoxNwogICAgLy8gcHVibGljIG93bmVyID0gR2xvYmFsU3RhdGU8YXJjNC5BZGRyZXNzPih7IGtleTogJ2FyYzg4X28nIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAiYXJjODhfbyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo4NwogICAgLy8gZW1pdChuZXcgYXJjODhfT3duZXJzaGlwVHJhbnNmZXJSZXF1ZXN0ZWQoeyBwcmV2aW91c19vd25lcjogdGhpcy5vd25lci52YWx1ZSwgcGVuZGluZ19vd25lcjogcGVuZGluZyB9KSkKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICBwdXNoYnl0ZXMgMHgxNmJmMWY5MSAvLyBtZXRob2QgImFyYzg4X093bmVyc2hpcFRyYW5zZmVyUmVxdWVzdGVkKGFkZHJlc3MsYWRkcmVzcykiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6OkFyYzg4LmFyYzg4X2FjY2VwdF9vd25lcnNoaXAoKSAtPiB2b2lkOgphcmM4OF9hY2NlcHRfb3duZXJzaGlwOgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6OTIKICAgIC8vIHRoaXMuX2Vuc3VyZURlZmF1bHRPd25lcigpCiAgICBjYWxsc3ViIF9lbnN1cmVEZWZhdWx0T3duZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjE4CiAgICAvLyBwdWJsaWMgcGVuZGluZ093bmVyID0gR2xvYmFsU3RhdGU8YXJjNC5BZGRyZXNzPih7IGtleTogJ2FyYzg4X3BvJyB9KSAvLyBvcHRpb25hbCB0d28tc3RlcAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDcgLy8gImFyYzg4X3BvIgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6OTMKICAgIC8vIGFzc2VydCh0aGlzLnBlbmRpbmdPd25lci5oYXNWYWx1ZSwgJ25vdF9wZW5kaW5nX293bmVyJykKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBub3RfcGVuZGluZ19vd25lcgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6OTQKICAgIC8vIGNvbnN0IHNlbmRlciA9IG5ldyBhcmM0LkFkZHJlc3MoVHhuLnNlbmRlcikKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjE4CiAgICAvLyBwdWJsaWMgcGVuZGluZ093bmVyID0gR2xvYmFsU3RhdGU8YXJjNC5BZGRyZXNzPih7IGtleTogJ2FyYzg4X3BvJyB9KSAvLyBvcHRpb25hbCB0d28tc3RlcAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDcgLy8gImFyYzg4X3BvIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjk1CiAgICAvLyBhc3NlcnQoc2VuZGVyID09PSB0aGlzLnBlbmRpbmdPd25lci52YWx1ZSwgJ25vdF9wZW5kaW5nX293bmVyJykKICAgIGRpZyAxCiAgICA9PQogICAgYXNzZXJ0IC8vIG5vdF9wZW5kaW5nX293bmVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czoxNwogICAgLy8gcHVibGljIG93bmVyID0gR2xvYmFsU3RhdGU8YXJjNC5BZGRyZXNzPih7IGtleTogJ2FyYzg4X28nIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAiYXJjODhfbyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICBieXRlY18yIC8vICJhcmM4OF9vIgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6OTcKICAgIC8vIHRoaXMub3duZXIudmFsdWUgPSBzZW5kZXIKICAgIGRpZyAyCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6MTgKICAgIC8vIHB1YmxpYyBwZW5kaW5nT3duZXIgPSBHbG9iYWxTdGF0ZTxhcmM0LkFkZHJlc3M+KHsga2V5OiAnYXJjODhfcG8nIH0pIC8vIG9wdGlvbmFsIHR3by1zdGVwCiAgICBieXRlYyA3IC8vICJhcmM4OF9wbyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjk4CiAgICAvLyB0aGlzLnBlbmRpbmdPd25lci52YWx1ZSA9IG5ldyBhcmM0LkFkZHJlc3MoKQogICAgYnl0ZWNfMSAvLyBhZGRyIEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFZNUhGS1EKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo5OQogICAgLy8gZW1pdChuZXcgYXJjODhfT3duZXJzaGlwVHJhbnNmZXJBY2NlcHRlZCh7IHByZXZpb3VzX293bmVyOiBwcmV2aW91cywgbmV3X293bmVyOiBzZW5kZXIgfSkpCiAgICBzd2FwCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAweGY3ZTM2YjM3IC8vIG1ldGhvZCAiYXJjODhfT3duZXJzaGlwVHJhbnNmZXJBY2NlcHRlZChhZGRyZXNzLGFkZHJlc3MpIgogICAgZGlnIDEKICAgIGNvbmNhdAogICAgbG9nCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czoxMDAKICAgIC8vIGVtaXQobmV3IGFyYzg4X093bmVyc2hpcFRyYW5zZmVycmVkKHsgcHJldmlvdXNfb3duZXI6IHByZXZpb3VzLCBuZXdfb3duZXI6IHNlbmRlciB9KSkKICAgIGJ5dGVjIDIxIC8vIG1ldGhvZCAiYXJjODhfT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyxhZGRyZXNzKSIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czo6QXJjODguYXJjODhfY2FuY2VsX293bmVyc2hpcF9yZXF1ZXN0KCkgLT4gdm9pZDoKYXJjODhfY2FuY2VsX293bmVyc2hpcF9yZXF1ZXN0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3NlY3VyaXR5X3Rva2VuL2FyYzg4LmFsZ28udHM6MTA1CiAgICAvLyB0aGlzLl9lbnN1cmVEZWZhdWx0T3duZXIoKQogICAgY2FsbHN1YiBfZW5zdXJlRGVmYXVsdE93bmVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czoxMDYKICAgIC8vIGFzc2VydChuZXcgYXJjNC5BZGRyZXNzKFR4bi5zZW5kZXIpID09PSB0aGlzLm93bmVyLnZhbHVlLCAnbm90X293bmVyJykKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjE3CiAgICAvLyBwdWJsaWMgb3duZXIgPSBHbG9iYWxTdGF0ZTxhcmM0LkFkZHJlc3M+KHsga2V5OiAnYXJjODhfbycgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJhcmM4OF9vIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjEwNgogICAgLy8gYXNzZXJ0KG5ldyBhcmM0LkFkZHJlc3MoVHhuLnNlbmRlcikgPT09IHRoaXMub3duZXIudmFsdWUsICdub3Rfb3duZXInKQogICAgPT0KICAgIGFzc2VydCAvLyBub3Rfb3duZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zZWN1cml0eV90b2tlbi9hcmM4OC5hbGdvLnRzOjE4CiAgICAvLyBwdWJsaWMgcGVuZGluZ093bmVyID0gR2xvYmFsU3RhdGU8YXJjNC5BZGRyZXNzPih7IGtleTogJ2FyYzg4X3BvJyB9KSAvLyBvcHRpb25hbCB0d28tc3RlcAogICAgYnl0ZWMgNyAvLyAiYXJjODhfcG8iCiAgICAvLyBzbWFydF9jb250cmFjdHMvc2VjdXJpdHlfdG9rZW4vYXJjODguYWxnby50czoxMDcKICAgIC8vIHRoaXMucGVuZGluZ093bmVyLnZhbHVlID0gbmV3IGFyYzQuQWRkcmVzcygpCiAgICBieXRlY18xIC8vIGFkZHIgQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVk1SEZLUQogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1Ygo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEgCCYWBBUffHUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHYXJjODhfbwF0AXABgAFiCGFyYzg4X3BvAQAIYXJjODhfb2kDb3BhBGhwX2ECb3ACAAIBAQIAAQIAYgIAAAgAAAAAAAAAAARcJ7T8BHmDw1wEQ1XSrTEbQQNigh8ENfgTXwTacCW5BD8lZxMElbT54wSAzEmrBAeWIWUE54lh2gT9lIDXBLGx1poEwb7XiQQ7/hgzBFmc0aUEIg/PmAQo8CPXBJdTguIEZX0T7AS2rholBITsE9UE7JlgQQSC5XPEBEqWj48EtUIhJQS7sxnzBAcCZU4E0BVyTgQCn+zABHNJM04E23yC7wT9LCxuBEKl8GUErU9o6jYaAI4fAmwCVgI6AiQCCwH2AeEBwgGjAYsBcgFaAUIBKgEOAP4A7gDeAM4AuwCiAIwAdgBmAFMARAA1ACkAGgAOAAIiQzEZFEQxGESIDEAjQzEZFEQxGESIDAEjQzEZFEQxGEQ2GgGIC7cjQzEZFEQxGESIC48jQzEZFEQxGEQ2GgGIC1wjQzEZFEQxGEQ2GgGICyAjQzEZFEQxGEQ2GgGICuYoTFCwI0MxGRREMRhEiArOKExQsCNDMRkURDEYRDYaATYaAogJvChMULAjQzEZFEQxGEQ2GgE2GgKICZkoTFCwI0MxGRREMRhENhoBNhoCNhoDiAlSKExQsCNDMRkURDEYRDYaAYgJNihMULAjQzEZFEQxGESICSEoTFCwI0MxGRREMRhEiAkKKExQsCNDMRkURDEYRIgI6yhMULAjQzEZFEQxGESICMwoTFCwI0MxGRREMRhENhoBNhoCNhoDNhoEiAhbKExQsCNDMRkURDEYRDYaATYaAjYaAzYaBIgHbyNDMRkURDEYRDYaATYaAjYaAzYaBIgGqyNDMRkURDEYRDYaATYaAjYaAzYaBIgF/yNDMRkURDEYRDYaATYaAjYaA4gFsihMULAjQzEZFEQxGEQ2GgE2GgI2GgM2GgSIBX0jQzEZFEQxGEQ2GgE2GgI2GgM2GgQ2GgWIAjEoTFCwI0MxGRREMRhENhoBNhoCNhoDNhoENhoFiAGsKExQsCNDMRkURDEYRDYaATYaAjYaA4gBciNDMRkURDEYRDYaATYaAjYaA4gBRCNDMRkURDEYRDYaATYaAjYaA4gA0ChMULAjQzEZFEQxGEQ2GgE2GgKIAJ0oTFCwI0MxGRREMRhENhoBNhoCNhoDNhoEiABmKExQsCNDMRkURDEYRDYaATYaAogANihMULAjQzEZFEQxGEQ2GgE2GgKIABEoTFCwI0MxGUD9eTEYFEQjQ4oCAYv+i/9QJwRMUL5EiYoCATEAKYv+KYv/JxGIA+gxAIv+i/+IB7CJigQBMQCL/Yv8iAK4TIv8i/1LA4v+i/+IA8SJigIBi/6L/1AnC0xQSb1FAUAABCcRTImLAL5ETImKAwEiRwKL/ov9EkEABScFjACJi/2L/lBJjACL/1AnDExQSYwBvUUBQQAPiwG+RBcjEkEABScFjACJiwApUCcMTFBJjAK9RQFBAA+LAr5EFyMSQQAFJwWMAIknCIwAiYoDADEAi/0SRIv9i/5Qi/9QJwxMUCcOv4mKAwAxAIv9EkSL/Yv+UIv/UCcMTFBJvUUBQQAEiwC8SImKBQEiMQCL+zEAi/yI/1giUyMSRwJAADKL+4sBUIv8UCcKTFBJjAC9RQFBABmLAEm+REmL/qdEI4wCi/6hSRUkDkQkr6u/iwKMA4sDRIv9i/yIAZ+L+4v8i/1LA4v+i/+IAqqMAImKBQEiSYAASYv7i/xQJwRMUEm9RQFAAD6AOVAAIwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABRQYXJ0aXRpb24gbm90IGV4aXN0c4wAiYsEvkSL/qRBAD6AOVIAIwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABRJbnN1ZmZpY2llbnQgYmFsYW5jZYwAiYv9KRJBADqANVcAIwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBJbnZhbGlkIHJlY2VpdmVyjACJMQBJjACL+xNBAIaL+4sAi/yI/g4iUyMSSYwCSYwDQAAqi/uLAFCL/FAnCkxQSYwBvUUBiwKMA0EAEYsBvkSL/qdBAAMjjAKLAowDiwNAAEGAPFgAIwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABdPcGVyYXRvciBub3QgYXV0aG9yaXplZIwAiYv9i/yIABaAA1EAI0xQgAkAB1N1Y2Nlc3NQjACJigIBKYv+i/9QJwRMUL1FAUEABIv/jACLAEyJigIAIkcEgABHBIAEaHBfcIv+UEm9RQFAAAWLCicSv4sKvkyMAkQijAYnEowBiwEXSYwIiwIXSYwJDEEAT4v+iwFQJwtMUEmMBL1FAUAADCcPi/9QiwRJvEhMv4sEvkxJTgKMAEQiWYwFIowHiweLBQxBAIeLAFcCAIsHJAskWIv/EkEAbSNBAF8jjAaLBkAAOIv+iwJQJwtMUEmMA75EIlkWF4EKDEEAIYsDSb5EVwIAJw+L/1BXAgBQSRUkChZXBgJMUEsBvEi/iYsJIwgWiwpLAb+L/kxQJw+L/1AnC08CUEm8SEy/iYsIIwgWjAFC/zuLByMIjAdC/3EiQv+HigYAIkmL/oAApUSL+ov7UCcETFBJvUUBQAAEiwIpv4sCSb5Ei/6hSRUkDkQkr0mMAKu/i/qL/FCL+1CL/lCAAgCCUIv/UCcNTFCABCBreUBMULCL/Yv7E0EAB4v8i/2I/p+L/Iv9UCcETFBJjAG9RQFAAASLASm/iwFJvkSL/qBJFSQORIsAq7+JigQAMQCL/BJEi/yL/VCL/lAnCkxQi/+/iYoDASKL/ov9EkEABCcFTImL/Yv+UIv/UCcKTFBJjAC9RQFAAAQnCEyJiwC+RIAApScIIk8CVEyJigQAIkkxAIgDzSJTIxJEi/6AAKVEi/yL/VBJJwRMUEm9RQFAAAuLAym/i/yL/Yj99YsDSb5Ei/6gSRUkDkQkr0mMAKu/JwaL/FBJjAG9RQFAAASLASm/iwFJvkSL/qBJFSQORIsASU4Dq78iK2VEi/6gSRUkDkSrK0xniwKL/lAnEFCL/1AnDUxQgAT6RDsbTFCwiYoEACJHAjEASYv8EkAAEIv8iwOL/Yj60yJTIxJBAIkjRIv+gAClRIv8i/1QSYwBJwRMUEm9RQFESb5Ei/6nREm+RIv+oUkVJA5EJK9JjACrvycGi/xQSYwCvUUBQQBFiwK+RIv+p0EAOyNEiwJJvkSL/qFJFSQORIsASU4Dq78iK2VEi/6hSRUkDkSrK0xniwGL/lAnEFCL/1AnDUxQJxNMULCJIkL/wiJC/3SKBAAiRwMxAIv8MQCL/Yj6LiJTIxJHAkAAMov8iwRQi/1QJwpMUEmMA71FAUEAGYsDSb5ESYv+p0QjjAWL/qFJFSQORCSvq7+LBYwGiwZEi/yL/VBJjAEnBExQSb1FAURJvkSL/qdESb5Ei/6hSRUkDkQkr0mMAKu/JwaL/FBJjAK9RQFBAEWLAr5Ei/6nQQA7I0SLAkm+RIv+oUkVJA5EiwBJTgOrvyIrZUSL/qFJFSQORKsrTGeLAYv+UCcQUIv/UCcNTFAnE0xQsIkiQv/CigQBMQAyCRJEi/xXAgAVSUQkDkSL/VcCABVJRCUORCIrZUUBFESAAW6L/GeAAXOL/Wcri/9ngAFki/5nMQAnBksBUIv/vzIDTFCL/1AnFExQsCcFiSKAAW5lRFcCAEkVJBJEiSKAAXNlRFcCAEkVJRJEiSKAAWRlRIkiK2VEiYoBAYv/iABHiYoDATEAi/1LAYgAt0mL/6dEi/+hSRUkDkQkr6uL/U4CiADCSIv9i/6L/4gAMYmKAgExAIv+i/+IAKuJigIBi/6L/4gAfomKAQEnBov/UEm9RQFAAAMpTImLAL5ETImKAwGL/Yj/4EmL/oj/2kyL/6dEi/2L/hNBACmLAIv/oUkVJA5EJK9MSwGrJwaL/VBMv4sBi/+gSRUkDkSrJwaL/lBMv4v9i/5Qi/9QJxRMULAnBYwAiYoCAYv+i/9QAUkVJBJEiYoCAYv+i/+I/+eAAWFMUEm9RQFAAAMpTImLAL5EVwAgTImKAwGL/Yv+iP/Fi/+L/VCL/lCAAWFPAlBMv4v9i/5Qi/9QgAQZafhlTFCwJwWJIicJZUUBQQAJIicJZUQXQAARIiplRQFAAAQqMglnJwknDmeJiP/ZIiplRImKAQGI/84iKmVFAUAAAycIiSIqZUQpEkEAAycIiSIqZUSL/xInCCJPAlSJigEAIicJZUUBQQAdIicJZUQXIxJBABIjFESL/ykTRCqL/2cnCScOZ4kiQv/rigEAiP92MQAiKmVEEkSL/ykTRCIqZUQqi/9ni/9QJxVMULCJiP9VMQAiKmVEEkQiKmVEKilngAQ0aqFmTFCwiYoBAIj/NjEAIiplRBJEi/8pE0QiJwdlRQFBAAkiJwdlRCkTFEQnB4v/ZyIqZUSL/1CABBa/H5FMULCJiP7+IicHZUUBRDEAIicHZURLARJEIiplRCpLAmcnBylnTFCABPfjazdLAVCwJxVMULCJiP7LMQAiKmVEEkQnBylniQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [
        {
            "name": "Transfer",
            "args": [
                {
                    "type": "(address,address,address,uint256,byte[])",
                    "name": "0",
                    "struct": "arc1410_partition_transfer"
                }
            ]
        },
        {
            "name": "arc200_Transfer",
            "args": [
                {
                    "type": "address",
                    "name": "from"
                },
                {
                    "type": "address",
                    "name": "to"
                },
                {
                    "type": "uint256",
                    "name": "value"
                }
            ]
        },
        {
            "name": "Issue",
            "args": [
                {
                    "type": "(address,address,uint256,byte[])",
                    "name": "0",
                    "struct": "arc1410_partition_issue"
                }
            ]
        },
        {
            "name": "Redeem",
            "args": [
                {
                    "type": "(address,address,uint256,byte[])",
                    "name": "0",
                    "struct": "arc1410_partition_redeem"
                }
            ]
        },
        {
            "name": "arc200_Approval",
            "args": [
                {
                    "type": "address",
                    "name": "owner"
                },
                {
                    "type": "address",
                    "name": "spender"
                },
                {
                    "type": "uint256",
                    "name": "value"
                }
            ]
        },
        {
            "name": "arc88_OwnershipTransferred",
            "args": [
                {
                    "type": "address",
                    "name": "previous_owner"
                },
                {
                    "type": "address",
                    "name": "new_owner"
                }
            ]
        },
        {
            "name": "arc88_OwnershipRenounced",
            "args": [
                {
                    "type": "address",
                    "name": "previous_owner"
                }
            ]
        },
        {
            "name": "arc88_OwnershipTransferRequested",
            "args": [
                {
                    "type": "address",
                    "name": "previous_owner"
                },
                {
                    "type": "address",
                    "name": "pending_owner"
                }
            ]
        },
        {
            "name": "arc88_OwnershipTransferAccepted",
            "args": [
                {
                    "type": "address",
                    "name": "previous_owner"
                },
                {
                    "type": "address",
                    "name": "new_owner"
                }
            ]
        }
    ],
    "templateVariables": {}
}