/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"Arc1400","structs":{"ApprovalStruct":[{"name":"approvalAmount","type":"uint256"},{"name":"owner","type":"address"},{"name":"spender","type":"address"}],"arc1410_HoldingPartitionsPaginatedKey":[{"name":"holder","type":"address"},{"name":"page","type":"uint64"}],"arc1410_OperatorKey":[{"name":"holder","type":"address"},{"name":"operator","type":"address"},{"name":"partition","type":"address"}],"arc1410_OperatorPortionKey":[{"name":"holder","type":"address"},{"name":"operator","type":"address"},{"name":"partition","type":"address"}],"arc1410_PartitionKey":[{"name":"holder","type":"address"},{"name":"partition","type":"address"}],"arc1410_can_transfer_by_partition_return":[{"name":"code","type":"byte"},{"name":"status","type":"string"},{"name":"receiverPartition","type":"address"}],"arc1410_partition_issue":[{"name":"to","type":"address"},{"name":"partition","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"byte[]"}],"arc1410_partition_redeem":[{"name":"from","type":"address"},{"name":"partition","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"byte[]"}],"arc1410_partition_transfer":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"partition","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"byte[]"}],"arc1594_issue_event":[{"name":"to","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"byte[]"}],"arc1594_redeem_event":[{"name":"from","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"byte[]"}],"arc1643_document_record":[{"name":"uri","type":"string"},{"name":"hash","type":"byte[]"},{"name":"timestamp","type":"uint64"}],"arc1643_document_removed_event":[{"name":"name","type":"byte[]"},{"name":"uri","type":"string"},{"name":"hash","type":"byte[]"}],"arc1643_document_updated_event":[{"name":"name","type":"byte[]"},{"name":"uri","type":"string"},{"name":"hash","type":"byte[]"}],"arc1644_controller_changed_event":[{"name":"old","type":"address"},{"name":"neu","type":"address"}],"arc1644_controller_redeem_event":[{"name":"controller","type":"address"},{"name":"from","type":"address"},{"name":"amount","type":"uint256"},{"name":"code","type":"byte"},{"name":"operatorData","type":"byte[]"}],"arc1644_controller_transfer_event":[{"name":"controller","type":"address"},{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"amount","type":"uint256"},{"name":"code","type":"byte"},{"name":"data","type":"byte[]"},{"name":"operatorData","type":"byte[]"}]},"methods":[{"name":"bootstrap","args":[{"type":"byte[]","name":"name"},{"type":"byte[]","name":"symbol"},{"type":"uint8","name":"decimals"},{"type":"uint256","name":"totalSupply"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"arc200_Transfer","args":[{"type":"address","name":"from"},{"type":"address","name":"to"},{"type":"uint256","name":"value"}]},{"name":"arc88_OwnershipTransferred","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"new_owner"}]}],"recommendations":{}},{"name":"bootstrap1400","args":[{"type":"byte[]","name":"name"},{"type":"byte[]","name":"symbol"},{"type":"uint8","name":"decimals"},{"type":"uint256","name":"totalSupply"},{"type":"address","name":"owner"},{"type":"address","name":"controller"},{"type":"bool","name":"controllable"},{"type":"bool","name":"requireJustification"},{"type":"uint64","name":"minControllerActionInterval"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"arc200_Transfer","args":[{"type":"address","name":"from"},{"type":"address","name":"to"},{"type":"uint256","name":"value"}]},{"name":"arc88_OwnershipTransferred","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"new_owner"}]}],"recommendations":{}},{"name":"arc1644_set_controller","args":[{"type":"address","name":"new_controller"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"ControllerChanged","args":[{"type":"(address,address)","name":"0","struct":"arc1644_controller_changed_event"}]}],"recommendations":{}},{"name":"arc1644_set_controllable","args":[{"type":"bool","name":"flag"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc1644_set_require_justification","args":[{"type":"bool","name":"flag"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc1644_set_min_action_interval","args":[{"type":"uint64","name":"interval"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc1644_is_controllable","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"arc1644_controller_transfer","args":[{"type":"address","name":"from"},{"type":"address","name":"to"},{"type":"uint256","name":"amount"},{"type":"byte[]","name":"data"},{"type":"byte[]","name":"operator_data"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"ControllerTransfer","args":[{"type":"(address,address,address,uint256,byte,byte[],byte[])","name":"0","struct":"arc1644_controller_transfer_event"}]}],"recommendations":{}},{"name":"arc1644_controller_redeem","args":[{"type":"address","name":"from"},{"type":"uint256","name":"amount"},{"type":"byte[]","name":"operator_data"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"ControllerRedeem","args":[{"type":"(address,address,uint256,byte,byte[])","name":"0","struct":"arc1644_controller_redeem_event"}]}],"recommendations":{}},{"name":"arc1643_set_document","args":[{"type":"byte[]","name":"name"},{"type":"string","name":"uri"},{"type":"byte[]","name":"hash"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"DocumentUpdated","args":[{"type":"(byte[],string,byte[])","name":"0","struct":"arc1643_document_updated_event"}]}],"recommendations":{}},{"name":"arc1643_get_document","args":[{"type":"byte[]","name":"name"}],"returns":{"type":"(string,byte[],uint64)","struct":"arc1643_document_record"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"arc1643_remove_document","args":[{"type":"byte[]","name":"name"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"DocumentRemoved","args":[{"type":"(byte[],string,byte[])","name":"0","struct":"arc1643_document_removed_event"}]}],"recommendations":{}},{"name":"arc1643_get_all_documents","args":[],"returns":{"type":"byte[][]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"arc1594_set_issuable","args":[{"type":"bool","name":"flag"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc1594_issue","args":[{"type":"address","name":"to"},{"type":"uint256","name":"amount"},{"type":"byte[]","name":"data"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"Issue","args":[{"type":"(address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_issue"}]},{"name":"Issue","args":[{"type":"(address,uint256,byte[])","name":"0","struct":"arc1594_issue_event"}]}],"recommendations":{}},{"name":"arc1594_redeemFrom","args":[{"type":"address","name":"from"},{"type":"uint256","name":"amount"},{"type":"byte[]","name":"data"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"Redeem","args":[{"type":"(address,uint256,byte[])","name":"0","struct":"arc1594_redeem_event"}]}],"recommendations":{}},{"name":"arc1594_redeem","args":[{"type":"uint256","name":"amount"},{"type":"byte[]","name":"data"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"Redeem","args":[{"type":"(address,uint256,byte[])","name":"0","struct":"arc1594_redeem_event"}]}],"recommendations":{}},{"name":"arc1594_transfer_with_data","args":[{"type":"address","name":"to"},{"type":"uint256","name":"amount"},{"type":"byte[]","name":"data"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"Transfer","args":[{"type":"(address,address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_transfer"}]},{"name":"arc200_Transfer","args":[{"type":"address","name":"from"},{"type":"address","name":"to"},{"type":"uint256","name":"value"}]}],"recommendations":{}},{"name":"arc1594_transfer_from_with_data","args":[{"type":"address","name":"from"},{"type":"address","name":"to"},{"type":"uint256","name":"amount"},{"type":"byte[]","name":"data"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"arc200_Approval","args":[{"type":"address","name":"owner"},{"type":"address","name":"spender"},{"type":"uint256","name":"value"}]},{"name":"arc200_Transfer","args":[{"type":"address","name":"from"},{"type":"address","name":"to"},{"type":"uint256","name":"value"}]}],"recommendations":{}},{"name":"arc1594_is_issuable","args":[],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"arc1410_balance_of_partition","args":[{"type":"address","name":"holder"},{"type":"address","name":"partition"}],"returns":{"type":"uint256"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"arc200_transfer","args":[{"type":"address","name":"to"},{"type":"uint256","name":"value"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"Transfer","args":[{"type":"(address,address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_transfer"}]},{"name":"arc200_Transfer","args":[{"type":"address","name":"from"},{"type":"address","name":"to"},{"type":"uint256","name":"value"}]}],"recommendations":{}},{"name":"arc1410_transfer_by_partition","args":[{"type":"address","name":"partition"},{"type":"address","name":"to"},{"type":"uint256","name":"amount"},{"type":"byte[]","name":"data"}],"returns":{"type":"address"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Transfer an amount of tokens from partition to receiver. Sender must be msg.sender or authorized operator.","events":[{"name":"Transfer","args":[{"type":"(address,address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_transfer"}]}],"recommendations":{}},{"name":"arc1410_partitions_of","args":[{"type":"address","name":"holder"},{"type":"uint64","name":"page"}],"returns":{"type":"address[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc1410_is_operator","args":[{"type":"address","name":"holder"},{"type":"address","name":"operator"},{"type":"address","name":"partition"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"arc1410_authorize_operator","args":[{"type":"address","name":"holder"},{"type":"address","name":"operator"},{"type":"address","name":"partition"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc1410_revoke_operator","args":[{"type":"address","name":"holder"},{"type":"address","name":"operator"},{"type":"address","name":"partition"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc1410_operator_transfer_by_partition","args":[{"type":"address","name":"from"},{"type":"address","name":"partition"},{"type":"address","name":"to"},{"type":"uint256","name":"amount"},{"type":"byte[]","name":"data"}],"returns":{"type":"address"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"Transfer","args":[{"type":"(address,address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_transfer"}]}],"recommendations":{}},{"name":"arc1410_can_transfer_by_partition","args":[{"type":"address","name":"from"},{"type":"address","name":"partition"},{"type":"address","name":"to"},{"type":"uint256","name":"amount"},{"type":"byte[]","name":"data"}],"returns":{"type":"(byte,string,address)","struct":"arc1410_can_transfer_by_partition_return"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc1410_authorize_operator_by_portion","args":[{"type":"address","name":"holder"},{"type":"address","name":"operator"},{"type":"address","name":"partition"},{"type":"uint256","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc1410_is_operator_by_portion","args":[{"type":"address","name":"holder"},{"type":"address","name":"operator"},{"type":"address","name":"partition"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"arc1410_issue_by_partition","args":[{"type":"address","name":"to"},{"type":"address","name":"partition"},{"type":"uint256","name":"amount"},{"type":"byte[]","name":"data"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"Issue","args":[{"type":"(address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_issue"}]}],"recommendations":{}},{"name":"arc1410_redeem_by_partition","args":[{"type":"address","name":"partition"},{"type":"uint256","name":"amount"},{"type":"byte[]","name":"data"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"Redeem","args":[{"type":"(address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_redeem"}]}],"recommendations":{}},{"name":"arc1410_operator_redeem_by_partition","args":[{"type":"address","name":"from"},{"type":"address","name":"partition"},{"type":"uint256","name":"amount"},{"type":"byte[]","name":"data"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"Redeem","args":[{"type":"(address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_redeem"}]}],"recommendations":{}},{"name":"arc200_name","args":[],"returns":{"type":"byte[32]","desc":"The name of the token"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Returns the name of the token","events":[],"recommendations":{}},{"name":"arc200_symbol","args":[],"returns":{"type":"byte[8]","desc":"The symbol of the token"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Returns the symbol of the token","events":[],"recommendations":{}},{"name":"arc200_decimals","args":[],"returns":{"type":"uint8","desc":"The decimals of the token"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Returns the decimals of the token","events":[],"recommendations":{}},{"name":"arc200_totalSupply","args":[],"returns":{"type":"uint256","desc":"The total supply of the token"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Returns the total supply of the token","events":[],"recommendations":{}},{"name":"arc200_balanceOf","args":[{"type":"address","name":"owner","desc":"The address of the owner of the token"}],"returns":{"type":"uint256","desc":"The current balance of the holder of the token"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Returns the current balance of the owner of the token","events":[],"recommendations":{}},{"name":"arc200_transferFrom","args":[{"type":"address","name":"from","desc":"The source of the transfer"},{"type":"address","name":"to","desc":"The destination of the transfer"},{"type":"uint256","name":"value","desc":"Amount of tokens to transfer"}],"returns":{"type":"bool","desc":"Success"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Transfers tokens from source to destination as approved spender","events":[{"name":"arc200_Approval","args":[{"type":"address","name":"owner"},{"type":"address","name":"spender"},{"type":"uint256","name":"value"}]},{"name":"arc200_Transfer","args":[{"type":"address","name":"from"},{"type":"address","name":"to"},{"type":"uint256","name":"value"}]}],"recommendations":{}},{"name":"arc200_approve","args":[{"type":"address","name":"spender","desc":"Who is allowed to take tokens on owner's behalf"},{"type":"uint256","name":"value","desc":"Amount of tokens to be taken by spender"}],"returns":{"type":"bool","desc":"Success"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Approve spender for a token","events":[{"name":"arc200_Approval","args":[{"type":"address","name":"owner"},{"type":"address","name":"spender"},{"type":"uint256","name":"value"}]}],"recommendations":{}},{"name":"arc200_allowance","args":[{"type":"address","name":"owner","desc":"Owner's account"},{"type":"address","name":"spender","desc":"Who is allowed to take tokens on owner's behalf"}],"returns":{"type":"uint256","desc":"The remaining allowance"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Returns the current allowance of the spender of the tokens of the owner","events":[],"recommendations":{}},{"name":"arc88_owner","args":[],"returns":{"type":"address"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"arc88_is_owner","args":[{"type":"address","name":"query"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"arc88_initialize_owner","args":[{"type":"address","name":"new_owner"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Explicit initialization override (creation group recommended). Fails if already initialized.","events":[],"recommendations":{}},{"name":"arc88_transfer_ownership","args":[{"type":"address","name":"new_owner"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"arc88_OwnershipTransferred","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"new_owner"}]}],"recommendations":{}},{"name":"arc88_renounce_ownership","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"arc88_OwnershipRenounced","args":[{"type":"address","name":"previous_owner"}]}],"recommendations":{}},{"name":"arc88_transfer_ownership_request","args":[{"type":"address","name":"pending"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"arc88_OwnershipTransferRequested","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"pending_owner"}]}],"recommendations":{}},{"name":"arc88_accept_ownership","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"arc88_OwnershipTransferAccepted","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"new_owner"}]},{"name":"arc88_OwnershipTransferred","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"new_owner"}]}],"recommendations":{}},{"name":"arc88_cancel_ownership_request","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":13},"local":{"ints":0,"bytes":0}},"keys":{"global":{"arc1644_controller":{"keyType":"AVMString","valueType":"address","key":"YXJjMTY0NF9jdHJs"},"arc1644_controllable":{"keyType":"AVMString","valueType":"bool","key":"YXJjMTY0NF9jdHJsZW4="},"arc1644_requireJustification":{"keyType":"AVMString","valueType":"bool","key":"YXJjMTY0NF9yanVzdA=="},"arc1644_lastControllerActionRound":{"keyType":"AVMString","valueType":"uint64","key":"YXJjMTY0NF9sY2Fy"},"arc1644_minControllerActionInterval":{"keyType":"AVMString","valueType":"uint64","key":"YXJjMTY0NF9tY2Fp"},"arc1594_issuable":{"keyType":"AVMString","valueType":"bool","key":"YXJjMTU5NF9pc3M="},"name":{"keyType":"AVMString","valueType":"byte[]","key":"bg==","desc":"Name of the asset. Max 32 bytes"},"symbol":{"keyType":"AVMString","valueType":"byte[]","key":"cw==","desc":"Symbol of the asset. Max 8 bytes"},"decimals":{"keyType":"AVMString","valueType":"uint8","key":"ZA==","desc":"Decimals of the asset. Recommended is 6 decimal places."},"totalSupply":{"keyType":"AVMString","valueType":"uint256","key":"dA==","desc":"Minted supply"},"owner":{"keyType":"AVMString","valueType":"address","key":"YXJjODhfbw=="},"pendingOwner":{"keyType":"AVMString","valueType":"address","key":"YXJjODhfcG8="},"initialized":{"keyType":"AVMString","valueType":"byte","key":"YXJjODhfb2k="}},"local":{},"box":{"documentKeys":{"keyType":"AVMString","valueType":"byte[][]","key":"YXJjMTY0M19kb2Nz"}}},"maps":{"global":{},"local":{},"box":{"documents":{"keyType":"byte[]","valueType":"arc1643_document_record","prefix":"YXJjMTY0M19kb2M="},"partitions":{"keyType":"arc1410_PartitionKey","valueType":"uint256","prefix":"YXJjMTQxMF9w"},"holderPartitionsCurrentPage":{"keyType":"address","valueType":"uint64","prefix":"YXJjMTQxMF9ocF9w"},"holderPartitionsAddresses":{"keyType":"arc1410_HoldingPartitionsPaginatedKey","valueType":"address[]","prefix":"YXJjMTQxMF9ocF9h"},"operators":{"keyType":"arc1410_OperatorKey","valueType":"byte","prefix":"YXJjMTQxMF9vcA=="},"operatorPortionAllowances":{"keyType":"arc1410_OperatorPortionKey","valueType":"uint256","prefix":"YXJjMTQxMF9vcGE="},"balances":{"keyType":"address","valueType":"uint256","prefix":"Yg=="},"approvals":{"keyType":"byte[32]","valueType":"ApprovalStruct","prefix":"YQ=="}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[2630,2683,2703,2782,2931,2944,3034,3047,3150,3231,3280,3312,3436,3578,3773,3958,4021,4079,4094,4211,4300,4383,4448,4486,4572,4579,4609,4622,4730,4777,4784,4817,4830,5030,5162],"errorMessage":"Box must have value"},{"pc":[4047,5163],"errorMessage":"Index access is out of bounds"},{"pc":[4617,4825],"errorMessage":"Insufficient balance"},{"pc":[5051],"errorMessage":"Insufficient balance at the sender account"},{"pc":[4576,4781],"errorMessage":"Insufficient partition balance"},{"pc":[4186,4415,4553],"errorMessage":"Invalid amount"},{"pc":[1832],"errorMessage":"Name of the asset must be longer or equal to 1 character"},{"pc":[1835],"errorMessage":"Name of the asset must be shorter or equal to 32 characters"},{"pc":[3463,4757],"errorMessage":"Not authorized operator"},{"pc":[648,660,672,687,699,714,729,748,764,786,808,833,852,868,884,900,916,940,961,985,1010,1034,1065,1096,1117,1138,1163,1185,1213,1235,1257,1273,1301,1326,1344,1365,1386,1401,1417,1432,1451,1472,1497,1528,1544,1559,1574,1589,1604,1647],"errorMessage":"OnCompletion is not NoOp"},{"pc":[1824],"errorMessage":"Only deployer of this smart contract can call bootstrap method"},{"pc":[3337],"errorMessage":"Only holder can authorize"},{"pc":[4322],"errorMessage":"Only holder can authorize portion"},{"pc":[3362],"errorMessage":"Only holder can revoke"},{"pc":[4569,4774],"errorMessage":"Partition balance missing"},{"pc":[3441,4735],"errorMessage":"Portion allowance exceeded"},{"pc":[1843],"errorMessage":"Symbol of the asset must be longer or equal to 1 character"},{"pc":[1847],"errorMessage":"Symbol of the asset must be shorter or equal to 8 characters"},{"pc":[1854],"errorMessage":"This method can be called only once"},{"pc":[5326],"errorMessage":"already_initialized"},{"pc":[1680],"errorMessage":"can only call when creating"},{"pc":[651,663,675,690,702,717,732,751,767,789,811,836,855,871,887,903,919,943,964,988,1013,1037,1068,1099,1120,1141,1166,1188,1216,1238,1260,1276,1304,1329,1347,1368,1389,1404,1420,1435,1454,1475,1500,1531,1547,1562,1577,1592,1607,1650],"errorMessage":"can only call when not creating"},{"pc":[1974,1990,2021,2050,2068,2074,2113,2188,2239,2445,2832,2966,3069,3135,4505,4641,4849,4892,4907,4923,4928,5227,5256,5278,5290,5317,5357,5368,5390,5396,5421,5442,5455,5485,5493,5528],"errorMessage":"check GlobalState exists"},{"pc":[1999],"errorMessage":"controller_disabled"},{"pc":[2516],"errorMessage":"empty_name"},{"pc":[2299,2420],"errorMessage":"insufficient"},{"pc":[4955],"errorMessage":"insufficient approval"},{"pc":[2939,3042],"errorMessage":"insufficient_balance"},{"pc":[4900,4916,5132],"errorMessage":"invalid size"},{"pc":[2818,2913,3019],"errorMessage":"invalid_amount"},{"pc":[2841],"errorMessage":"issuance_disabled"},{"pc":[2035],"errorMessage":"justification_required"},{"pc":[1967],"errorMessage":"no_controller"},{"pc":[2907],"errorMessage":"not_auth"},{"pc":[1976],"errorMessage":"not_controller"},{"pc":[2681,2700],"errorMessage":"not_found"},{"pc":[5359,5392,5423,5530],"errorMessage":"not_owner"},{"pc":[5478,5489],"errorMessage":"not_pending_owner"},{"pc":[1959,2504,2793,4409],"errorMessage":"only_owner"},{"pc":[2307,2333,2428,2453,2952,2974,3055,3077,3452,4219,4308,4456,4494,4513,4587,4630,4649,4746,4792,4838,4857,4963,5069,5092],"errorMessage":"overflow"},{"pc":[5446],"errorMessage":"pending_transfer_exists"},{"pc":[2084],"errorMessage":"rate_limited"},{"pc":[2289],"errorMessage":"same_addr"},{"pc":[5331,5364,5428],"errorMessage":"zero_address_not_allowed"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAAEgAiYhBBUffHUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHYXJjODhfbwF0AWIOYXJjMTY0NF9jdHJsZW4CAAIBgAlhcmMxNDEwX3AMYXJjMTY0NF9jdHJsDGFyYzE2NDNfZG9jcwhhcmM4OF9wbwEACGFyYzg4X29pCAAAAAAAAAAAC2FyYzE1OTRfaXNzDGFyYzE2NDRfbWNhaQthcmMxNDEwX29wYQ1hcmMxNjQ0X3JqdXN0DGFyYzE2NDRfbGNhcgIAAAxhcmMxNDEwX2hwX2EKYXJjMTQxMF9vcAthcmMxNjQzX2RvYwIAQgEBAgABAgBiBHmDw1wCAAYE1/xKmARcJ7T8BENV0q0xG0EFaoIyBJdTguIEpOdBqwQEVHLQBH15BKQE5vT4YQQuvS00BO5vLQ4EHVx6FwTlem4YBBHLNvUEsW16jASnyzSCBOy2NsgEZbFoKgQBMFmbBBQrX8sE+IOOuQQxiCv6BKnMoW8EJmWXwAQ1+BNfBNpwJbkEPyVnEwSVtPnjBIDMSasEB5YhZQTniWHaBP2UgNcEsbHWmgTBvteJBDv+GDMEWZzRpQRt6UFmBCjwI9cEZX0T7AS2rholBITsE9UE7JlgQQSC5XPEBEqWj48EtUIhJQS7sxnzBAcCZU4E0BVyTgQCn+zABHNJM04E23yC7wT9LCxuBEKl8GUErU9o6jYaAI4yA+kDvgOvA6ADkQOCA3IDUwM6AyUDEgMDAvMC5ALPAroCqAKPAnMCYwJNAjcCGwIFAewB1wHCAaMBhAFsAVMBOwEmAQ4A/gDuAN4AzgC7AKIAjAB2AGYAUwBEADUAKQAaAA4AAiJDMRkURDEYRIgTASNDMRkURDEYRIgSwiNDMRkURDEYRDYaAYgSeCNDMRkURDEYRIgSUCNDMRkURDEYRDYaAYgSHSNDMRkURDEYRDYaAYgR4SNDMRkURDEYRDYaAYgRpyhMULAjQzEZFEQxGESIEY8oTFCwI0MxGRREMRhENhoBNhoCiBB9KExQsCNDMRkURDEYRDYaATYaAogQWihMULAjQzEZFEQxGEQ2GgE2GgI2GgOIEBMoTFCwI0MxGRREMRhENhoBiA/3KExQsCNDMRkURDEYRIgP4ihMULAjQzEZFEQxGESID8soTFCwI0MxGRREMRhEiA+rKExQsCNDMRkURDEYRIgPjChMULAjQzEZFEQxGEQ2GgE2GgI2GgM2GgSIDqAjQzEZFEQxGEQ2GgE2GgI2GgOIDgMjQzEZFEQxGEQ2GgE2GgI2GgM2GgSIDVcjQzEZFEQxGEQ2GgE2GgI2GgOIDQooTFCwI0MxGRREMRhENhoBNhoCNhoDNhoEiAzVI0MxGRREMRhENhoBNhoCNhoDNhoENhoFiAmBKExQsCNDMRkURDEYRDYaATYaAjYaAzYaBDYaBYgI/ChMULAjQzEZFEQxGEQ2GgE2GgI2GgOICMIjQzEZFEQxGEQ2GgE2GgI2GgOICJQjQzEZFEQxGEQ2GgE2GgI2GgOICCAoTFCwI0MxGRREMRhENhoBNhoCiAftKExQsCNDMRkURDEYRDYaATYaAjYaAzYaBIgHtihMULAjQzEZFEQxGEQ2GgE2GgKIB4YoTFCwI0MxGRREMRhENhoBNhoCiAdhKExQsCNDMRkURDEYRIgHSyhMULAjQzEZFEQxGEQ2GgE2GgI2GgM2GgSIByIoTFCwI0MxGRREMRhENhoBNhoCNhoDiAb+KExQsCNDMRkURDEYRDYaATYaAogGhSNDMRkURDEYRDYaATYaAjYaA4gF8SNDMRkURDEYRDYaATYaAjYaA4gFkiNDMRkURDEYRDYaAYgFdyNDMRkURDEYRIgFWyhMULAjQzEZFEQxGEQ2GgGIBOojQzEZFEQxGEQ2GgGIBMsoTFCwI0MxGRREMRhENhoBNhoCNhoDiAQPI0MxGRREMRhENhoBNhoCNhoDiAONKExQsCNDMRkURDEYRDYaATYaAjYaAzYaBDYaBYgC7yhMULAjQzEZFEQxGESIArMoTFCwI0MxGRREMRhENhoBiAKUI0MxGRREMRhENhoBiAJ5I0MxGRREMRhENhoBiAI8I0MxGRREMRhENhoBiAHuI0MxGRREMRhENhoBNhoCNhoDNhoENhoFNhoGNhoHNhoINhoJiACyKExQsCNDMRkURDEYRDYaATYaAjYaAzYaBIgAfChMULAjQzEZQPv2MRgURCNDigMBi/0iWUmL/whMJQslCEsBFlcGAk4Ci/0lSwJSi/8lC69Qi/0Vi/1PA08CUlCL/lBMJQtJIkyLA4sCDEEAI4sESRZXBgKLAYsDSU4ETwJdSYwBSwFZJQgIjAQlCIwDQv/ViwCLAVCMAImKBAExAIv8i/2L/ov/SwRPBScHSScOiAABiYoJATEAMgkSRIv3VwIAFUlEJA5Ei/hXAgAVSUSBCA5EIitlRQEURDEAiA1xgAFui/dngAFzi/hnK4v6Z4ABZIv5ZycPJwdnMQAnBEsBUIv6vzIDTFCL+lAnHExQsCcJi/xnJwWL/WcnEov+ZycTJw5nJxCL/2cxAIv7E0EABYv7iA1HJweJMQCIDOciUyMSRIkiJwllRQFEMQAiJwllRBJEIicFZUUBQQAPIicFZUQiUyMSQQADI0SJIkL/+ooBACInEmVFAUEAEyInEmVEIlMjEkEAB4v/VwIAFUSJIicQZUUBQQAuIicQZUQXQQAlIicTZUUBQQAVIicTZUQXIicQZUQXMgYWF04CCA9EMgYWJxNMZ4mKAQAiiP9qIicJZUUBQQApIicJZUSMACcJi/9nIicFZUUBQAAFJwUnB2eLAIv/UIAEQJzFcExQsIkpjABC/9iKAQCI/yyL/yJTQAAGJwWL/2eJIicFZUUBQQAMIicFZUQiUyMSQf/qJwWL/2eJigEAiP7+JxKL/2eJigEAiP7yJxCL/2eJIicFZUUBQQAgIicFZUQiUyMSQQAUIicJZUUBQQALgAgAAAAAAAAAAYknDomKBQGI/sWL/4j+7Ij/CYv7i/wTRIv7iAqaSYv9p0SL/aFJFSQORCSvTEsBqycEi/tQTL+L/IgKe4v9oEkVJA5EqycEi/xQTL8xAIv7UIv8UIv9UIABUVCAAgCFUIv+FYGFAQgWVwYCUIv+UIv/UCcGTFCABDRup5VMULCBURaJigMBiP5Gi/+I/m2I/oqL/YgKIUmL/qdEi/6hSRUkDkQkr0xLAasnBIv9UEy/IitlRIv+oUkVJA5EqytMZzEAi/1Qi/5QgAFRUIACAGNQi/9QJwZMUIAEDe4U9UxQsIFRFokxAIgKxiJTIxJEiYoDAIj/74v9FUlEMgYWi/4VSU4CgQwIFlcGAoACAAxMUExQi/5Qi/9QJxeL/VBJvEhMvycKvUUBQAA+JxSL/SOI/IYnCrxIJwpMv4EGiwAISRZXBgInHUxQTIsBCBZXBgJQi/1Qi/5Qi/9QJwZMUIAELcA8NkxQsIknCr5EJxSL/SOI/ERJIllMVwIASwElC0sBFVJMiPwxJwq8SCcKTL9C/6iKAQEnF4v/UEm9RQFEvkSJigEAiP88JxeL/1BJvUUBREm+REy8SEkiWUsBJVlLAk8CSwJSSwIVTwNPA08CUov/FYEGCEkWVwYCJx1MUEsDFU8CCBZXBgJQi/9QTwJQTFAnBkxQgASuek+gTFCwiScKvkSJMQCICaUiUyMSRImKAQCI/+8nD4v/Z4mKAwCI/+OL/oAApUQiJw9lRQFBADEiJw9lRCJTIxJBACUjRIv9KYv+i/+IBgeL/Yv+UCcYUIv/UCcGTFCABPLpmK9MULCJIkL/2IoDACIxAEmL/RJAAAyLAYgJNyJTIxJBAGIjRIv+gAClRCcEi/1QSYwAvUUBQQBIiwC+RIv+p0EAPiNEiwBJvkSL/qFJFSQORCSvTEsBq08CTL8iK2VEi/6hSRUkDkSrK0xni/2L/lAnGFCL/1AnBkxQJx5MULCJIkL/vyJC/5uKAgAxAEmL/oAApUQnBExQSb1FAUEASIsBvkSL/qdBAD4jRIsBSb5Ei/6hSRUkDkQkr0xLAatPAky/IitlRIv+oUkVJA5EqytMZ4sAi/5QJxhQi/9QJwZMUCceTFCwiSJC/7+KAwGL/Yv+iAAjiYoEAYv8i/2L/ogHEYkiJw9lRImKAgGL/ov/UCcITFC+RImKAgExACmL/imL/ycUiAPwMQCL/ov/iAdAiYoEATEAi/2L/IgCuEyL/Iv9SwOL/ov/iAPMiYoCAYv+i/9QJxVMUEm9RQFAAAQnFEyJiwC+REyJigMBIkcCi/6L/RJBAAUnB4wAiYv9i/5QSYwAi/9QJxZMUEmMAb1FAUEAD4sBvkQXIxJBAAUnB4wAiYsAKVAnFkxQSYwCvUUBQQAPiwK+RBcjEkEABScHjACJJwyMAImKAwAxAIv9EkSL/Yv+UIv/UCcWTFAnGb+JigMAMQCL/RJEi/2L/lCL/1AnFkxQSb1FAUEABIsAvEiJigUBIjEAi/sxAIv8iP9YIlMjEkcCQAAyi/uLAVCL/FAnEUxQSYwAvUUBQQAZiwBJvkRJi/6nRCOMAov+oUkVJA5EJK+rv4sCjAOLA0SL/Yv8iAGfi/uL/Iv9SwOL/ov/iAKyjACJigUBIkmAAEmL+4v8UCcITFBJvUUBQAA+gDlQACMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUUGFydGl0aW9uIG5vdCBleGlzdHOMAImLBL5Ei/6kQQA+gDlSACMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUSW5zdWZmaWNpZW50IGJhbGFuY2WMAImL/SkSQQA6gDVXACMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQSW52YWxpZCByZWNlaXZlcowAiTEASYwAi/sTQQCGi/uLAIv8iP4OIlMjEkmMAkmMA0AAKov7iwBQi/xQJxFMUEmMAb1FAYsCjANBABGLAb5Ei/6nQQADI4wCiwKMA4sDQABBgDxYACMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXT3BlcmF0b3Igbm90IGF1dGhvcml6ZWSMAImL/Yv8iAAWgANRACNMUIAJAAdTdWNjZXNzUIwAiYoCASmL/ov/UCcITFC9RQFBAASL/4wAiwBMiYoCACJHBIAARwSADGFyYzE0MTBfaHBfcIv+UEm9RQFAAAWLCicOv4sKvkyMAkQijAYnDowBiwEXSYwIiwIXSYwJDEEAT4v+iwFQJxVMUEmMBL1FAUAADCcai/9QiwRJvEhMv4sEvkxJTgKMAEQiWYwFIowHiweLBQxBAIeLAFcCAIsHJAskWIv/EkEAbSNBAF8jjAaLBkAAOIv+iwJQJxVMUEmMA75EIlkWF4EKDEEAIYsDSb5EVwIAJxqL/1BXAgBQSRUkChZXBgJMUEsBvEi/iYsJIwgWiwpLAb+L/kxQJxqL/1AnFU8CUEm8SEy/iYsIIwgWjAFC/zuLByMIjAdC/3EiQv+HigYAIkmL/oAApUSL+ov7UCcITFBJvUUBQAAEiwIpv4sCSb5Ei/6hSRUkDkQkr0mMAKu/i/qL/FCL+1CL/lCAAgCCUIv/UCcGTFCABCBreUBMULCL/Yv7E0EAB4v8i/2I/peL/Iv9UCcITFBJjAG9RQFAAASLASm/iwFJvkSL/qBJFSQORIsAq7+JigQAMQCL/BJEi/yL/VCL/lAnEUxQi/+/iYoDASKL/ov9EkEABCcHTImL/Yv+UIv/UCcRTFBJjAC9RQFAAAQnDEyJiwC+RIAApScMIk8CVEyJigQAIkkxAIgDVSJTIxJEi/6AAKVEi/yL/VBJJwhMUEm9RQFAAAuLAym/i/yL/Yj97YsDSb5Ei/6gSRUkDkQkr0mMAKu/JwSL/FBJjAG9RQFAAASLASm/iwFJvkSL/qBJFSQORIsASU4Dq78iK2VEi/6gSRUkDkSrK0xniwKL/lAnG1CL/1AnBkxQgAT6RDsbTFCwiYoDADEAi/6AAKVESYv9UElOAicITFBJvUUBREm+RIv+p0RJvkSL/qFJFSQORCSvSU4Eq78nBExQSb1FAUEARYsCvkSL/qdBADsjRIsCSb5Ei/6hSRUkDkSLAUlOA6u/IitlRIv+oUkVJA5EqytMZ4sAi/5QJxtQi/9QJwZMUCcfTFCwiSJC/8KKBAAiRwMxAIv8MQCL/Yj6SiJTIxJHAkAAMov8iwRQi/1QJxFMUEmMA71FAUEAGYsDSb5ESYv+p0QjjAWL/qFJFSQORCSvq7+LBYwGiwZEi/yL/VBJjAEnCExQSb1FAURJvkSL/qdESb5Ei/6hSRUkDkQkr0mMAKu/JwSL/FBJjAK9RQFBAEWLAr5Ei/6nQQA7I0SLAkm+RIv+oUkVJA5EiwBJTgOrvyIrZUSL/qFJFSQORKsrTGeLAYv+UCcbUIv/UCcGTFAnH0xQsIkiQv/CIoABbmVEVwIASRUkEkSJIoABc2VEVwIASRWBCBJEiSKAAWRlRIkiK2VEiYoBAYv/iABHiYoDATEAi/1LAYgAt0mL/6dEi/+hSRUkDkQkr6uL/U4CiADCSIv9i/6L/4gAMYmKAgExAIv+i/+IAKuJigIBi/6L/4gAfomKAQEnBIv/UEm9RQFAAAMpTImLAL5ETImKAwGL/Yj/4EmL/oj/2kyL/6dEi/2L/hNBACmLAIv/oUkVJA5EJK9MSwGrJwSL/VBMv4sBi/+gSRUkDkSrJwSL/lBMv4v9i/5Qi/9QJxxMULAnB4wAiYoCAYv+i/9QAUkVJBJEiYoCAYv+i/+I/+eAAWFMUEm9RQFAAAMpTImLAL5EVwAgTImKAwGL/Yv+iP/Fi/+L/VCL/lCAAWFPAlBMv4v9i/5Qi/9QgAQZafhlTFCwJweJIicNZUUBQQAJIicNZUQXQAARIiplRQFAAAQqMglnJw0nGWeJiP/ZIiplRImKAQGI/84iKmVFAUAAAycMiSIqZUQpEkEAAycMiSIqZUSL/xInDCJPAlSJigEAIicNZUUBQQAdIicNZUQXIxJBABIjFESL/ykTRCqL/2cnDScZZ4kiQv/rigEAiP92MQAiKmVEEkSL/ykTRCIqZUQqi/9ni/9QJyBMULCJiP9VMQAiKmVEEkQiKmVEKilngAQ0aqFmTFCwiYoBAIj/NjEAIiplRBJEi/8pE0QiJwtlRQFBAAkiJwtlRCkTFEQnC4v/ZyIqZUSL/1CABBa/H5FMULCJiP7+IicLZUUBRDEAIicLZURLARJEIiplRCpLAmcnCylnTFCABPfjazdLAVCwJyBMULCJiP7LMQAiKmVEEkQnCylniQ==","clear":"CoEBQw=="},"events":[{"name":"arc200_Transfer","args":[{"type":"address","name":"from"},{"type":"address","name":"to"},{"type":"uint256","name":"value"}]},{"name":"arc88_OwnershipTransferred","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"new_owner"}]},{"name":"ControllerChanged","args":[{"type":"(address,address)","name":"0","struct":"arc1644_controller_changed_event"}]},{"name":"ControllerTransfer","args":[{"type":"(address,address,address,uint256,byte,byte[],byte[])","name":"0","struct":"arc1644_controller_transfer_event"}]},{"name":"ControllerRedeem","args":[{"type":"(address,address,uint256,byte,byte[])","name":"0","struct":"arc1644_controller_redeem_event"}]},{"name":"DocumentUpdated","args":[{"type":"(byte[],string,byte[])","name":"0","struct":"arc1643_document_updated_event"}]},{"name":"DocumentRemoved","args":[{"type":"(byte[],string,byte[])","name":"0","struct":"arc1643_document_removed_event"}]},{"name":"Issue","args":[{"type":"(address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_issue"}]},{"name":"Issue","args":[{"type":"(address,uint256,byte[])","name":"0","struct":"arc1594_issue_event"}]},{"name":"Redeem","args":[{"type":"(address,uint256,byte[])","name":"0","struct":"arc1594_redeem_event"}]},{"name":"Transfer","args":[{"type":"(address,address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_transfer"}]},{"name":"arc200_Approval","args":[{"type":"address","name":"owner"},{"type":"address","name":"spender"},{"type":"uint256","name":"value"}]},{"name":"Redeem","args":[{"type":"(address,address,uint256,byte[])","name":"0","struct":"arc1410_partition_redeem"}]},{"name":"arc88_OwnershipRenounced","args":[{"type":"address","name":"previous_owner"}]},{"name":"arc88_OwnershipTransferRequested","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"pending_owner"}]},{"name":"arc88_OwnershipTransferAccepted","args":[{"type":"address","name":"previous_owner"},{"type":"address","name":"new_owner"}]}],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type ApprovalStruct = {
  approvalAmount: bigint,
  owner: string,
  spender: string
}


/**
 * Converts the ABI tuple representation of a ApprovalStruct to the struct representation
 */
export function ApprovalStructFromTuple(abiTuple: [bigint, string, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ApprovalStruct, APP_SPEC.structs) as ApprovalStruct
}

export type Arc1410HoldingPartitionsPaginatedKey = {
  holder: string,
  page: bigint
}


/**
 * Converts the ABI tuple representation of a arc1410_HoldingPartitionsPaginatedKey to the struct representation
 */
export function Arc1410HoldingPartitionsPaginatedKeyFromTuple(abiTuple: [string, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1410_HoldingPartitionsPaginatedKey, APP_SPEC.structs) as Arc1410HoldingPartitionsPaginatedKey
}

export type Arc1410OperatorKey = {
  holder: string,
  operator: string,
  partition: string
}


/**
 * Converts the ABI tuple representation of a arc1410_OperatorKey to the struct representation
 */
export function Arc1410OperatorKeyFromTuple(abiTuple: [string, string, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1410_OperatorKey, APP_SPEC.structs) as Arc1410OperatorKey
}

export type Arc1410OperatorPortionKey = {
  holder: string,
  operator: string,
  partition: string
}


/**
 * Converts the ABI tuple representation of a arc1410_OperatorPortionKey to the struct representation
 */
export function Arc1410OperatorPortionKeyFromTuple(abiTuple: [string, string, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1410_OperatorPortionKey, APP_SPEC.structs) as Arc1410OperatorPortionKey
}

export type Arc1410PartitionKey = {
  holder: string,
  partition: string
}


/**
 * Converts the ABI tuple representation of a arc1410_PartitionKey to the struct representation
 */
export function Arc1410PartitionKeyFromTuple(abiTuple: [string, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1410_PartitionKey, APP_SPEC.structs) as Arc1410PartitionKey
}

export type Arc1410CanTransferByPartitionReturn = {
  code: number,
  status: string,
  receiverPartition: string
}


/**
 * Converts the ABI tuple representation of a arc1410_can_transfer_by_partition_return to the struct representation
 */
export function Arc1410CanTransferByPartitionReturnFromTuple(abiTuple: [number, string, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1410_can_transfer_by_partition_return, APP_SPEC.structs) as Arc1410CanTransferByPartitionReturn
}

export type Arc1410PartitionIssue = {
  to: string,
  partition: string,
  amount: bigint,
  data: Uint8Array
}


/**
 * Converts the ABI tuple representation of a arc1410_partition_issue to the struct representation
 */
export function Arc1410PartitionIssueFromTuple(abiTuple: [string, string, bigint, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1410_partition_issue, APP_SPEC.structs) as Arc1410PartitionIssue
}

export type Arc1410PartitionRedeem = {
  from: string,
  partition: string,
  amount: bigint,
  data: Uint8Array
}


/**
 * Converts the ABI tuple representation of a arc1410_partition_redeem to the struct representation
 */
export function Arc1410PartitionRedeemFromTuple(abiTuple: [string, string, bigint, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1410_partition_redeem, APP_SPEC.structs) as Arc1410PartitionRedeem
}

export type Arc1410PartitionTransfer = {
  from: string,
  to: string,
  partition: string,
  amount: bigint,
  data: Uint8Array
}


/**
 * Converts the ABI tuple representation of a arc1410_partition_transfer to the struct representation
 */
export function Arc1410PartitionTransferFromTuple(abiTuple: [string, string, string, bigint, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1410_partition_transfer, APP_SPEC.structs) as Arc1410PartitionTransfer
}

export type Arc1594IssueEvent = {
  to: string,
  amount: bigint,
  data: Uint8Array
}


/**
 * Converts the ABI tuple representation of a arc1594_issue_event to the struct representation
 */
export function Arc1594IssueEventFromTuple(abiTuple: [string, bigint, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1594_issue_event, APP_SPEC.structs) as Arc1594IssueEvent
}

export type Arc1594RedeemEvent = {
  from: string,
  amount: bigint,
  data: Uint8Array
}


/**
 * Converts the ABI tuple representation of a arc1594_redeem_event to the struct representation
 */
export function Arc1594RedeemEventFromTuple(abiTuple: [string, bigint, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1594_redeem_event, APP_SPEC.structs) as Arc1594RedeemEvent
}

export type Arc1643DocumentRecord = {
  uri: string,
  hash: Uint8Array,
  timestamp: bigint
}


/**
 * Converts the ABI tuple representation of a arc1643_document_record to the struct representation
 */
export function Arc1643DocumentRecordFromTuple(abiTuple: [string, Uint8Array, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1643_document_record, APP_SPEC.structs) as Arc1643DocumentRecord
}

export type Arc1643DocumentRemovedEvent = {
  name: Uint8Array,
  uri: string,
  hash: Uint8Array
}


/**
 * Converts the ABI tuple representation of a arc1643_document_removed_event to the struct representation
 */
export function Arc1643DocumentRemovedEventFromTuple(abiTuple: [Uint8Array, string, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1643_document_removed_event, APP_SPEC.structs) as Arc1643DocumentRemovedEvent
}

export type Arc1643DocumentUpdatedEvent = {
  name: Uint8Array,
  uri: string,
  hash: Uint8Array
}


/**
 * Converts the ABI tuple representation of a arc1643_document_updated_event to the struct representation
 */
export function Arc1643DocumentUpdatedEventFromTuple(abiTuple: [Uint8Array, string, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1643_document_updated_event, APP_SPEC.structs) as Arc1643DocumentUpdatedEvent
}

export type Arc1644ControllerChangedEvent = {
  old: string,
  neu: string
}


/**
 * Converts the ABI tuple representation of a arc1644_controller_changed_event to the struct representation
 */
export function Arc1644ControllerChangedEventFromTuple(abiTuple: [string, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1644_controller_changed_event, APP_SPEC.structs) as Arc1644ControllerChangedEvent
}

export type Arc1644ControllerRedeemEvent = {
  controller: string,
  from: string,
  amount: bigint,
  code: number,
  operatorData: Uint8Array
}


/**
 * Converts the ABI tuple representation of a arc1644_controller_redeem_event to the struct representation
 */
export function Arc1644ControllerRedeemEventFromTuple(abiTuple: [string, string, bigint, number, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1644_controller_redeem_event, APP_SPEC.structs) as Arc1644ControllerRedeemEvent
}

export type Arc1644ControllerTransferEvent = {
  controller: string,
  from: string,
  to: string,
  amount: bigint,
  code: number,
  data: Uint8Array,
  operatorData: Uint8Array
}


/**
 * Converts the ABI tuple representation of a arc1644_controller_transfer_event to the struct representation
 */
export function Arc1644ControllerTransferEventFromTuple(abiTuple: [string, string, string, bigint, number, Uint8Array, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc1644_controller_transfer_event, APP_SPEC.structs) as Arc1644ControllerTransferEvent
}

/**
 * The argument types for the Arc1400 contract
 */
export type Arc1400Args = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'bootstrap(byte[],byte[],uint8,uint256)bool': {
      name: Uint8Array
      symbol: Uint8Array
      decimals: bigint | number
      totalSupply: bigint | number
    }
    'bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool': {
      name: Uint8Array
      symbol: Uint8Array
      decimals: bigint | number
      totalSupply: bigint | number
      owner: string
      controller: string
      controllable: boolean
      requireJustification: boolean
      minControllerActionInterval: bigint | number
    }
    'arc1644_set_controller(address)void': {
      newController: string
    }
    'arc1644_set_controllable(bool)void': {
      flag: boolean
    }
    'arc1644_set_require_justification(bool)void': {
      flag: boolean
    }
    'arc1644_set_min_action_interval(uint64)void': {
      interval: bigint | number
    }
    'arc1644_is_controllable()uint64': Record<string, never>
    'arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64': {
      from: string
      to: string
      amount: bigint | number
      data: Uint8Array
      operatorData: Uint8Array
    }
    'arc1644_controller_redeem(address,uint256,byte[])uint64': {
      from: string
      amount: bigint | number
      operatorData: Uint8Array
    }
    'arc1643_set_document(byte[],string,byte[])void': {
      name: Uint8Array
      uri: string
      hash: Uint8Array
    }
    'arc1643_get_document(byte[])(string,byte[],uint64)': {
      name: Uint8Array
    }
    'arc1643_remove_document(byte[])void': {
      name: Uint8Array
    }
    'arc1643_get_all_documents()byte[][]': Record<string, never>
    'arc1594_set_issuable(bool)void': {
      flag: boolean
    }
    'arc1594_issue(address,uint256,byte[])void': {
      to: string
      amount: bigint | number
      data: Uint8Array
    }
    'arc1594_redeemFrom(address,uint256,byte[])void': {
      from: string
      amount: bigint | number
      data: Uint8Array
    }
    'arc1594_redeem(uint256,byte[])void': {
      amount: bigint | number
      data: Uint8Array
    }
    'arc1594_transfer_with_data(address,uint256,byte[])bool': {
      to: string
      amount: bigint | number
      data: Uint8Array
    }
    'arc1594_transfer_from_with_data(address,address,uint256,byte[])bool': {
      from: string
      to: string
      amount: bigint | number
      data: Uint8Array
    }
    'arc1594_is_issuable()bool': Record<string, never>
    'arc1410_balance_of_partition(address,address)uint256': {
      holder: string
      partition: string
    }
    'arc200_transfer(address,uint256)bool': {
      to: string
      value: bigint | number
    }
    'arc1410_transfer_by_partition(address,address,uint256,byte[])address': {
      partition: string
      to: string
      amount: bigint | number
      data: Uint8Array
    }
    'arc1410_partitions_of(address,uint64)address[]': {
      holder: string
      page: bigint | number
    }
    'arc1410_is_operator(address,address,address)bool': {
      holder: string
      operator: string
      partition: string
    }
    'arc1410_authorize_operator(address,address,address)void': {
      holder: string
      operator: string
      partition: string
    }
    'arc1410_revoke_operator(address,address,address)void': {
      holder: string
      operator: string
      partition: string
    }
    'arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address': {
      from: string
      partition: string
      to: string
      amount: bigint | number
      data: Uint8Array
    }
    'arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)': {
      from: string
      partition: string
      to: string
      amount: bigint | number
      data: Uint8Array
    }
    'arc1410_authorize_operator_by_portion(address,address,address,uint256)void': {
      holder: string
      operator: string
      partition: string
      amount: bigint | number
    }
    'arc1410_is_operator_by_portion(address,address,address)bool': {
      holder: string
      operator: string
      partition: string
    }
    'arc1410_issue_by_partition(address,address,uint256,byte[])void': {
      to: string
      partition: string
      amount: bigint | number
      data: Uint8Array
    }
    'arc1410_redeem_by_partition(address,uint256,byte[])void': {
      partition: string
      amount: bigint | number
      data: Uint8Array
    }
    'arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void': {
      from: string
      partition: string
      amount: bigint | number
      data: Uint8Array
    }
    'arc200_name()byte[32]': Record<string, never>
    'arc200_symbol()byte[8]': Record<string, never>
    'arc200_decimals()uint8': Record<string, never>
    'arc200_totalSupply()uint256': Record<string, never>
    'arc200_balanceOf(address)uint256': {
      /**
       * The address of the owner of the token
       */
      owner: string
    }
    'arc200_transferFrom(address,address,uint256)bool': {
      /**
       * The source of the transfer
       */
      from: string
      /**
       * The destination of the transfer
       */
      to: string
      /**
       * Amount of tokens to transfer
       */
      value: bigint | number
    }
    'arc200_approve(address,uint256)bool': {
      /**
       * Who is allowed to take tokens on owner's behalf
       */
      spender: string
      /**
       * Amount of tokens to be taken by spender
       */
      value: bigint | number
    }
    'arc200_allowance(address,address)uint256': {
      /**
       * Owner's account
       */
      owner: string
      /**
       * Who is allowed to take tokens on owner's behalf
       */
      spender: string
    }
    'arc88_owner()address': Record<string, never>
    'arc88_is_owner(address)bool': {
      query: string
    }
    'arc88_initialize_owner(address)void': {
      newOwner: string
    }
    'arc88_transfer_ownership(address)void': {
      newOwner: string
    }
    'arc88_renounce_ownership()void': Record<string, never>
    'arc88_transfer_ownership_request(address)void': {
      pending: string
    }
    'arc88_accept_ownership()void': Record<string, never>
    'arc88_cancel_ownership_request()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'bootstrap(byte[],byte[],uint8,uint256)bool': [name: Uint8Array, symbol: Uint8Array, decimals: bigint | number, totalSupply: bigint | number]
    'bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool': [name: Uint8Array, symbol: Uint8Array, decimals: bigint | number, totalSupply: bigint | number, owner: string, controller: string, controllable: boolean, requireJustification: boolean, minControllerActionInterval: bigint | number]
    'arc1644_set_controller(address)void': [newController: string]
    'arc1644_set_controllable(bool)void': [flag: boolean]
    'arc1644_set_require_justification(bool)void': [flag: boolean]
    'arc1644_set_min_action_interval(uint64)void': [interval: bigint | number]
    'arc1644_is_controllable()uint64': []
    'arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64': [from: string, to: string, amount: bigint | number, data: Uint8Array, operatorData: Uint8Array]
    'arc1644_controller_redeem(address,uint256,byte[])uint64': [from: string, amount: bigint | number, operatorData: Uint8Array]
    'arc1643_set_document(byte[],string,byte[])void': [name: Uint8Array, uri: string, hash: Uint8Array]
    'arc1643_get_document(byte[])(string,byte[],uint64)': [name: Uint8Array]
    'arc1643_remove_document(byte[])void': [name: Uint8Array]
    'arc1643_get_all_documents()byte[][]': []
    'arc1594_set_issuable(bool)void': [flag: boolean]
    'arc1594_issue(address,uint256,byte[])void': [to: string, amount: bigint | number, data: Uint8Array]
    'arc1594_redeemFrom(address,uint256,byte[])void': [from: string, amount: bigint | number, data: Uint8Array]
    'arc1594_redeem(uint256,byte[])void': [amount: bigint | number, data: Uint8Array]
    'arc1594_transfer_with_data(address,uint256,byte[])bool': [to: string, amount: bigint | number, data: Uint8Array]
    'arc1594_transfer_from_with_data(address,address,uint256,byte[])bool': [from: string, to: string, amount: bigint | number, data: Uint8Array]
    'arc1594_is_issuable()bool': []
    'arc1410_balance_of_partition(address,address)uint256': [holder: string, partition: string]
    'arc200_transfer(address,uint256)bool': [to: string, value: bigint | number]
    'arc1410_transfer_by_partition(address,address,uint256,byte[])address': [partition: string, to: string, amount: bigint | number, data: Uint8Array]
    'arc1410_partitions_of(address,uint64)address[]': [holder: string, page: bigint | number]
    'arc1410_is_operator(address,address,address)bool': [holder: string, operator: string, partition: string]
    'arc1410_authorize_operator(address,address,address)void': [holder: string, operator: string, partition: string]
    'arc1410_revoke_operator(address,address,address)void': [holder: string, operator: string, partition: string]
    'arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address': [from: string, partition: string, to: string, amount: bigint | number, data: Uint8Array]
    'arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)': [from: string, partition: string, to: string, amount: bigint | number, data: Uint8Array]
    'arc1410_authorize_operator_by_portion(address,address,address,uint256)void': [holder: string, operator: string, partition: string, amount: bigint | number]
    'arc1410_is_operator_by_portion(address,address,address)bool': [holder: string, operator: string, partition: string]
    'arc1410_issue_by_partition(address,address,uint256,byte[])void': [to: string, partition: string, amount: bigint | number, data: Uint8Array]
    'arc1410_redeem_by_partition(address,uint256,byte[])void': [partition: string, amount: bigint | number, data: Uint8Array]
    'arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void': [from: string, partition: string, amount: bigint | number, data: Uint8Array]
    'arc200_name()byte[32]': []
    'arc200_symbol()byte[8]': []
    'arc200_decimals()uint8': []
    'arc200_totalSupply()uint256': []
    'arc200_balanceOf(address)uint256': [owner: string]
    'arc200_transferFrom(address,address,uint256)bool': [from: string, to: string, value: bigint | number]
    'arc200_approve(address,uint256)bool': [spender: string, value: bigint | number]
    'arc200_allowance(address,address)uint256': [owner: string, spender: string]
    'arc88_owner()address': []
    'arc88_is_owner(address)bool': [query: string]
    'arc88_initialize_owner(address)void': [newOwner: string]
    'arc88_transfer_ownership(address)void': [newOwner: string]
    'arc88_renounce_ownership()void': []
    'arc88_transfer_ownership_request(address)void': [pending: string]
    'arc88_accept_ownership()void': []
    'arc88_cancel_ownership_request()void': []
  }
}

/**
 * The return type for each method
 */
export type Arc1400Returns = {
  'bootstrap(byte[],byte[],uint8,uint256)bool': boolean
  'bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool': boolean
  'arc1644_set_controller(address)void': void
  'arc1644_set_controllable(bool)void': void
  'arc1644_set_require_justification(bool)void': void
  'arc1644_set_min_action_interval(uint64)void': void
  'arc1644_is_controllable()uint64': bigint
  'arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64': bigint
  'arc1644_controller_redeem(address,uint256,byte[])uint64': bigint
  'arc1643_set_document(byte[],string,byte[])void': void
  'arc1643_get_document(byte[])(string,byte[],uint64)': Arc1643DocumentRecord
  'arc1643_remove_document(byte[])void': void
  'arc1643_get_all_documents()byte[][]': Uint8Array[]
  'arc1594_set_issuable(bool)void': void
  'arc1594_issue(address,uint256,byte[])void': void
  'arc1594_redeemFrom(address,uint256,byte[])void': void
  'arc1594_redeem(uint256,byte[])void': void
  'arc1594_transfer_with_data(address,uint256,byte[])bool': boolean
  'arc1594_transfer_from_with_data(address,address,uint256,byte[])bool': boolean
  'arc1594_is_issuable()bool': boolean
  'arc1410_balance_of_partition(address,address)uint256': bigint
  'arc200_transfer(address,uint256)bool': boolean
  'arc1410_transfer_by_partition(address,address,uint256,byte[])address': string
  'arc1410_partitions_of(address,uint64)address[]': string[]
  'arc1410_is_operator(address,address,address)bool': boolean
  'arc1410_authorize_operator(address,address,address)void': void
  'arc1410_revoke_operator(address,address,address)void': void
  'arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address': string
  'arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)': Arc1410CanTransferByPartitionReturn
  'arc1410_authorize_operator_by_portion(address,address,address,uint256)void': void
  'arc1410_is_operator_by_portion(address,address,address)bool': boolean
  'arc1410_issue_by_partition(address,address,uint256,byte[])void': void
  'arc1410_redeem_by_partition(address,uint256,byte[])void': void
  'arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void': void
  'arc200_name()byte[32]': Uint8Array
  'arc200_symbol()byte[8]': Uint8Array
  'arc200_decimals()uint8': number
  'arc200_totalSupply()uint256': bigint
  'arc200_balanceOf(address)uint256': bigint
  'arc200_transferFrom(address,address,uint256)bool': boolean
  'arc200_approve(address,uint256)bool': boolean
  'arc200_allowance(address,address)uint256': bigint
  'arc88_owner()address': string
  'arc88_is_owner(address)bool': boolean
  'arc88_initialize_owner(address)void': void
  'arc88_transfer_ownership(address)void': void
  'arc88_renounce_ownership()void': void
  'arc88_transfer_ownership_request(address)void': void
  'arc88_accept_ownership()void': void
  'arc88_cancel_ownership_request()void': void
}

/**
 * Defines the types of available calls and state of the Arc1400 smart contract.
 */
export type Arc1400Types = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'bootstrap(byte[],byte[],uint8,uint256)bool' | 'bootstrap', {
      argsObj: Arc1400Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool']
      argsTuple: Arc1400Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']
      returns: Arc1400Returns['bootstrap(byte[],byte[],uint8,uint256)bool']
    }>
    & Record<'bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool' | 'bootstrap1400', {
      argsObj: Arc1400Args['obj']['bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool']
      argsTuple: Arc1400Args['tuple']['bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool']
      returns: Arc1400Returns['bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool']
    }>
    & Record<'arc1644_set_controller(address)void' | 'arc1644_set_controller', {
      argsObj: Arc1400Args['obj']['arc1644_set_controller(address)void']
      argsTuple: Arc1400Args['tuple']['arc1644_set_controller(address)void']
      returns: Arc1400Returns['arc1644_set_controller(address)void']
    }>
    & Record<'arc1644_set_controllable(bool)void' | 'arc1644_set_controllable', {
      argsObj: Arc1400Args['obj']['arc1644_set_controllable(bool)void']
      argsTuple: Arc1400Args['tuple']['arc1644_set_controllable(bool)void']
      returns: Arc1400Returns['arc1644_set_controllable(bool)void']
    }>
    & Record<'arc1644_set_require_justification(bool)void' | 'arc1644_set_require_justification', {
      argsObj: Arc1400Args['obj']['arc1644_set_require_justification(bool)void']
      argsTuple: Arc1400Args['tuple']['arc1644_set_require_justification(bool)void']
      returns: Arc1400Returns['arc1644_set_require_justification(bool)void']
    }>
    & Record<'arc1644_set_min_action_interval(uint64)void' | 'arc1644_set_min_action_interval', {
      argsObj: Arc1400Args['obj']['arc1644_set_min_action_interval(uint64)void']
      argsTuple: Arc1400Args['tuple']['arc1644_set_min_action_interval(uint64)void']
      returns: Arc1400Returns['arc1644_set_min_action_interval(uint64)void']
    }>
    & Record<'arc1644_is_controllable()uint64' | 'arc1644_is_controllable', {
      argsObj: Arc1400Args['obj']['arc1644_is_controllable()uint64']
      argsTuple: Arc1400Args['tuple']['arc1644_is_controllable()uint64']
      returns: Arc1400Returns['arc1644_is_controllable()uint64']
    }>
    & Record<'arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64' | 'arc1644_controller_transfer', {
      argsObj: Arc1400Args['obj']['arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64']
      argsTuple: Arc1400Args['tuple']['arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64']
      returns: Arc1400Returns['arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64']
    }>
    & Record<'arc1644_controller_redeem(address,uint256,byte[])uint64' | 'arc1644_controller_redeem', {
      argsObj: Arc1400Args['obj']['arc1644_controller_redeem(address,uint256,byte[])uint64']
      argsTuple: Arc1400Args['tuple']['arc1644_controller_redeem(address,uint256,byte[])uint64']
      returns: Arc1400Returns['arc1644_controller_redeem(address,uint256,byte[])uint64']
    }>
    & Record<'arc1643_set_document(byte[],string,byte[])void' | 'arc1643_set_document', {
      argsObj: Arc1400Args['obj']['arc1643_set_document(byte[],string,byte[])void']
      argsTuple: Arc1400Args['tuple']['arc1643_set_document(byte[],string,byte[])void']
      returns: Arc1400Returns['arc1643_set_document(byte[],string,byte[])void']
    }>
    & Record<'arc1643_get_document(byte[])(string,byte[],uint64)' | 'arc1643_get_document', {
      argsObj: Arc1400Args['obj']['arc1643_get_document(byte[])(string,byte[],uint64)']
      argsTuple: Arc1400Args['tuple']['arc1643_get_document(byte[])(string,byte[],uint64)']
      returns: Arc1400Returns['arc1643_get_document(byte[])(string,byte[],uint64)']
    }>
    & Record<'arc1643_remove_document(byte[])void' | 'arc1643_remove_document', {
      argsObj: Arc1400Args['obj']['arc1643_remove_document(byte[])void']
      argsTuple: Arc1400Args['tuple']['arc1643_remove_document(byte[])void']
      returns: Arc1400Returns['arc1643_remove_document(byte[])void']
    }>
    & Record<'arc1643_get_all_documents()byte[][]' | 'arc1643_get_all_documents', {
      argsObj: Arc1400Args['obj']['arc1643_get_all_documents()byte[][]']
      argsTuple: Arc1400Args['tuple']['arc1643_get_all_documents()byte[][]']
      returns: Arc1400Returns['arc1643_get_all_documents()byte[][]']
    }>
    & Record<'arc1594_set_issuable(bool)void' | 'arc1594_set_issuable', {
      argsObj: Arc1400Args['obj']['arc1594_set_issuable(bool)void']
      argsTuple: Arc1400Args['tuple']['arc1594_set_issuable(bool)void']
      returns: Arc1400Returns['arc1594_set_issuable(bool)void']
    }>
    & Record<'arc1594_issue(address,uint256,byte[])void' | 'arc1594_issue', {
      argsObj: Arc1400Args['obj']['arc1594_issue(address,uint256,byte[])void']
      argsTuple: Arc1400Args['tuple']['arc1594_issue(address,uint256,byte[])void']
      returns: Arc1400Returns['arc1594_issue(address,uint256,byte[])void']
    }>
    & Record<'arc1594_redeemFrom(address,uint256,byte[])void' | 'arc1594_redeemFrom', {
      argsObj: Arc1400Args['obj']['arc1594_redeemFrom(address,uint256,byte[])void']
      argsTuple: Arc1400Args['tuple']['arc1594_redeemFrom(address,uint256,byte[])void']
      returns: Arc1400Returns['arc1594_redeemFrom(address,uint256,byte[])void']
    }>
    & Record<'arc1594_redeem(uint256,byte[])void' | 'arc1594_redeem', {
      argsObj: Arc1400Args['obj']['arc1594_redeem(uint256,byte[])void']
      argsTuple: Arc1400Args['tuple']['arc1594_redeem(uint256,byte[])void']
      returns: Arc1400Returns['arc1594_redeem(uint256,byte[])void']
    }>
    & Record<'arc1594_transfer_with_data(address,uint256,byte[])bool' | 'arc1594_transfer_with_data', {
      argsObj: Arc1400Args['obj']['arc1594_transfer_with_data(address,uint256,byte[])bool']
      argsTuple: Arc1400Args['tuple']['arc1594_transfer_with_data(address,uint256,byte[])bool']
      returns: Arc1400Returns['arc1594_transfer_with_data(address,uint256,byte[])bool']
    }>
    & Record<'arc1594_transfer_from_with_data(address,address,uint256,byte[])bool' | 'arc1594_transfer_from_with_data', {
      argsObj: Arc1400Args['obj']['arc1594_transfer_from_with_data(address,address,uint256,byte[])bool']
      argsTuple: Arc1400Args['tuple']['arc1594_transfer_from_with_data(address,address,uint256,byte[])bool']
      returns: Arc1400Returns['arc1594_transfer_from_with_data(address,address,uint256,byte[])bool']
    }>
    & Record<'arc1594_is_issuable()bool' | 'arc1594_is_issuable', {
      argsObj: Arc1400Args['obj']['arc1594_is_issuable()bool']
      argsTuple: Arc1400Args['tuple']['arc1594_is_issuable()bool']
      returns: Arc1400Returns['arc1594_is_issuable()bool']
    }>
    & Record<'arc1410_balance_of_partition(address,address)uint256' | 'arc1410_balance_of_partition', {
      argsObj: Arc1400Args['obj']['arc1410_balance_of_partition(address,address)uint256']
      argsTuple: Arc1400Args['tuple']['arc1410_balance_of_partition(address,address)uint256']
      returns: Arc1400Returns['arc1410_balance_of_partition(address,address)uint256']
    }>
    & Record<'arc200_transfer(address,uint256)bool' | 'arc200_transfer', {
      argsObj: Arc1400Args['obj']['arc200_transfer(address,uint256)bool']
      argsTuple: Arc1400Args['tuple']['arc200_transfer(address,uint256)bool']
      returns: Arc1400Returns['arc200_transfer(address,uint256)bool']
    }>
    & Record<'arc1410_transfer_by_partition(address,address,uint256,byte[])address' | 'arc1410_transfer_by_partition', {
      argsObj: Arc1400Args['obj']['arc1410_transfer_by_partition(address,address,uint256,byte[])address']
      argsTuple: Arc1400Args['tuple']['arc1410_transfer_by_partition(address,address,uint256,byte[])address']
      returns: Arc1400Returns['arc1410_transfer_by_partition(address,address,uint256,byte[])address']
    }>
    & Record<'arc1410_partitions_of(address,uint64)address[]' | 'arc1410_partitions_of', {
      argsObj: Arc1400Args['obj']['arc1410_partitions_of(address,uint64)address[]']
      argsTuple: Arc1400Args['tuple']['arc1410_partitions_of(address,uint64)address[]']
      returns: Arc1400Returns['arc1410_partitions_of(address,uint64)address[]']
    }>
    & Record<'arc1410_is_operator(address,address,address)bool' | 'arc1410_is_operator', {
      argsObj: Arc1400Args['obj']['arc1410_is_operator(address,address,address)bool']
      argsTuple: Arc1400Args['tuple']['arc1410_is_operator(address,address,address)bool']
      returns: Arc1400Returns['arc1410_is_operator(address,address,address)bool']
    }>
    & Record<'arc1410_authorize_operator(address,address,address)void' | 'arc1410_authorize_operator', {
      argsObj: Arc1400Args['obj']['arc1410_authorize_operator(address,address,address)void']
      argsTuple: Arc1400Args['tuple']['arc1410_authorize_operator(address,address,address)void']
      returns: Arc1400Returns['arc1410_authorize_operator(address,address,address)void']
    }>
    & Record<'arc1410_revoke_operator(address,address,address)void' | 'arc1410_revoke_operator', {
      argsObj: Arc1400Args['obj']['arc1410_revoke_operator(address,address,address)void']
      argsTuple: Arc1400Args['tuple']['arc1410_revoke_operator(address,address,address)void']
      returns: Arc1400Returns['arc1410_revoke_operator(address,address,address)void']
    }>
    & Record<'arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address' | 'arc1410_operator_transfer_by_partition', {
      argsObj: Arc1400Args['obj']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address']
      argsTuple: Arc1400Args['tuple']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address']
      returns: Arc1400Returns['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address']
    }>
    & Record<'arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)' | 'arc1410_can_transfer_by_partition', {
      argsObj: Arc1400Args['obj']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)']
      argsTuple: Arc1400Args['tuple']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)']
      returns: Arc1400Returns['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)']
    }>
    & Record<'arc1410_authorize_operator_by_portion(address,address,address,uint256)void' | 'arc1410_authorize_operator_by_portion', {
      argsObj: Arc1400Args['obj']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void']
      argsTuple: Arc1400Args['tuple']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void']
      returns: Arc1400Returns['arc1410_authorize_operator_by_portion(address,address,address,uint256)void']
    }>
    & Record<'arc1410_is_operator_by_portion(address,address,address)bool' | 'arc1410_is_operator_by_portion', {
      argsObj: Arc1400Args['obj']['arc1410_is_operator_by_portion(address,address,address)bool']
      argsTuple: Arc1400Args['tuple']['arc1410_is_operator_by_portion(address,address,address)bool']
      returns: Arc1400Returns['arc1410_is_operator_by_portion(address,address,address)bool']
    }>
    & Record<'arc1410_issue_by_partition(address,address,uint256,byte[])void' | 'arc1410_issue_by_partition', {
      argsObj: Arc1400Args['obj']['arc1410_issue_by_partition(address,address,uint256,byte[])void']
      argsTuple: Arc1400Args['tuple']['arc1410_issue_by_partition(address,address,uint256,byte[])void']
      returns: Arc1400Returns['arc1410_issue_by_partition(address,address,uint256,byte[])void']
    }>
    & Record<'arc1410_redeem_by_partition(address,uint256,byte[])void' | 'arc1410_redeem_by_partition', {
      argsObj: Arc1400Args['obj']['arc1410_redeem_by_partition(address,uint256,byte[])void']
      argsTuple: Arc1400Args['tuple']['arc1410_redeem_by_partition(address,uint256,byte[])void']
      returns: Arc1400Returns['arc1410_redeem_by_partition(address,uint256,byte[])void']
    }>
    & Record<'arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void' | 'arc1410_operator_redeem_by_partition', {
      argsObj: Arc1400Args['obj']['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void']
      argsTuple: Arc1400Args['tuple']['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void']
      returns: Arc1400Returns['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void']
    }>
    & Record<'arc200_name()byte[32]' | 'arc200_name', {
      argsObj: Arc1400Args['obj']['arc200_name()byte[32]']
      argsTuple: Arc1400Args['tuple']['arc200_name()byte[32]']
      /**
       * The name of the token
       */
      returns: Arc1400Returns['arc200_name()byte[32]']
    }>
    & Record<'arc200_symbol()byte[8]' | 'arc200_symbol', {
      argsObj: Arc1400Args['obj']['arc200_symbol()byte[8]']
      argsTuple: Arc1400Args['tuple']['arc200_symbol()byte[8]']
      /**
       * The symbol of the token
       */
      returns: Arc1400Returns['arc200_symbol()byte[8]']
    }>
    & Record<'arc200_decimals()uint8' | 'arc200_decimals', {
      argsObj: Arc1400Args['obj']['arc200_decimals()uint8']
      argsTuple: Arc1400Args['tuple']['arc200_decimals()uint8']
      /**
       * The decimals of the token
       */
      returns: Arc1400Returns['arc200_decimals()uint8']
    }>
    & Record<'arc200_totalSupply()uint256' | 'arc200_totalSupply', {
      argsObj: Arc1400Args['obj']['arc200_totalSupply()uint256']
      argsTuple: Arc1400Args['tuple']['arc200_totalSupply()uint256']
      /**
       * The total supply of the token
       */
      returns: Arc1400Returns['arc200_totalSupply()uint256']
    }>
    & Record<'arc200_balanceOf(address)uint256' | 'arc200_balanceOf', {
      argsObj: Arc1400Args['obj']['arc200_balanceOf(address)uint256']
      argsTuple: Arc1400Args['tuple']['arc200_balanceOf(address)uint256']
      /**
       * The current balance of the holder of the token
       */
      returns: Arc1400Returns['arc200_balanceOf(address)uint256']
    }>
    & Record<'arc200_transferFrom(address,address,uint256)bool' | 'arc200_transferFrom', {
      argsObj: Arc1400Args['obj']['arc200_transferFrom(address,address,uint256)bool']
      argsTuple: Arc1400Args['tuple']['arc200_transferFrom(address,address,uint256)bool']
      /**
       * Success
       */
      returns: Arc1400Returns['arc200_transferFrom(address,address,uint256)bool']
    }>
    & Record<'arc200_approve(address,uint256)bool' | 'arc200_approve', {
      argsObj: Arc1400Args['obj']['arc200_approve(address,uint256)bool']
      argsTuple: Arc1400Args['tuple']['arc200_approve(address,uint256)bool']
      /**
       * Success
       */
      returns: Arc1400Returns['arc200_approve(address,uint256)bool']
    }>
    & Record<'arc200_allowance(address,address)uint256' | 'arc200_allowance', {
      argsObj: Arc1400Args['obj']['arc200_allowance(address,address)uint256']
      argsTuple: Arc1400Args['tuple']['arc200_allowance(address,address)uint256']
      /**
       * The remaining allowance
       */
      returns: Arc1400Returns['arc200_allowance(address,address)uint256']
    }>
    & Record<'arc88_owner()address' | 'arc88_owner', {
      argsObj: Arc1400Args['obj']['arc88_owner()address']
      argsTuple: Arc1400Args['tuple']['arc88_owner()address']
      returns: Arc1400Returns['arc88_owner()address']
    }>
    & Record<'arc88_is_owner(address)bool' | 'arc88_is_owner', {
      argsObj: Arc1400Args['obj']['arc88_is_owner(address)bool']
      argsTuple: Arc1400Args['tuple']['arc88_is_owner(address)bool']
      returns: Arc1400Returns['arc88_is_owner(address)bool']
    }>
    & Record<'arc88_initialize_owner(address)void' | 'arc88_initialize_owner', {
      argsObj: Arc1400Args['obj']['arc88_initialize_owner(address)void']
      argsTuple: Arc1400Args['tuple']['arc88_initialize_owner(address)void']
      returns: Arc1400Returns['arc88_initialize_owner(address)void']
    }>
    & Record<'arc88_transfer_ownership(address)void' | 'arc88_transfer_ownership', {
      argsObj: Arc1400Args['obj']['arc88_transfer_ownership(address)void']
      argsTuple: Arc1400Args['tuple']['arc88_transfer_ownership(address)void']
      returns: Arc1400Returns['arc88_transfer_ownership(address)void']
    }>
    & Record<'arc88_renounce_ownership()void' | 'arc88_renounce_ownership', {
      argsObj: Arc1400Args['obj']['arc88_renounce_ownership()void']
      argsTuple: Arc1400Args['tuple']['arc88_renounce_ownership()void']
      returns: Arc1400Returns['arc88_renounce_ownership()void']
    }>
    & Record<'arc88_transfer_ownership_request(address)void' | 'arc88_transfer_ownership_request', {
      argsObj: Arc1400Args['obj']['arc88_transfer_ownership_request(address)void']
      argsTuple: Arc1400Args['tuple']['arc88_transfer_ownership_request(address)void']
      returns: Arc1400Returns['arc88_transfer_ownership_request(address)void']
    }>
    & Record<'arc88_accept_ownership()void' | 'arc88_accept_ownership', {
      argsObj: Arc1400Args['obj']['arc88_accept_ownership()void']
      argsTuple: Arc1400Args['tuple']['arc88_accept_ownership()void']
      returns: Arc1400Returns['arc88_accept_ownership()void']
    }>
    & Record<'arc88_cancel_ownership_request()void' | 'arc88_cancel_ownership_request', {
      argsObj: Arc1400Args['obj']['arc88_cancel_ownership_request()void']
      argsTuple: Arc1400Args['tuple']['arc88_cancel_ownership_request()void']
      returns: Arc1400Returns['arc88_cancel_ownership_request()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        arc1644Controller: string
        arc1644Controllable: boolean
        arc1644RequireJustification: boolean
        arc1644LastControllerActionRound: bigint
        arc1644MinControllerActionInterval: bigint
        arc1594Issuable: boolean
        /**
         * Name of the asset. Max 32 bytes
         */
        name: Uint8Array
        /**
         * Symbol of the asset. Max 8 bytes
         */
        symbol: Uint8Array
        /**
         * Decimals of the asset. Recommended is 6 decimal places.
         */
        decimals: number
        /**
         * Minted supply
         */
        totalSupply: bigint
        owner: string
        pendingOwner: string
        initialized: number
      }
      maps: {}
    }
    box: {
      keys: {
        documentKeys: Uint8Array[]
      }
      maps: {
        documents: Map<Uint8Array, Arc1643DocumentRecord>
        partitions: Map<Arc1410PartitionKey, bigint>
        holderPartitionsCurrentPage: Map<string, bigint>
        holderPartitionsAddresses: Map<Arc1410HoldingPartitionsPaginatedKey, string[]>
        operators: Map<Arc1410OperatorKey, number>
        operatorPortionAllowances: Map<Arc1410OperatorPortionKey, bigint>
        balances: Map<string, bigint>
        approvals: Map<Uint8Array, ApprovalStruct>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type Arc1400Signatures = keyof Arc1400Types['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Arc1400NonVoidMethodSignatures = keyof Arc1400Types['methods'] extends infer T ? T extends keyof Arc1400Types['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Arc1400 smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Arc1400Signatures> = Arc1400Types['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Arc1400 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc1400Signatures> = Arc1400Types['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = Arc1400Types['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = Arc1400Types['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type Arc1400CreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type Arc1400DeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: Arc1400CreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Arc1400 smart contract
 */
export abstract class Arc1400ParamsFactory {
  /**
   * Constructs a no op call for the bootstrap(byte[],byte[],uint8,uint256)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrap(params: CallParams<Arc1400Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool'] | Arc1400Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrap(byte[],byte[],uint8,uint256)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.symbol, params.args.decimals, params.args.totalSupply],
    }
  }
  /**
   * Constructs a no op call for the bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrap1400(params: CallParams<Arc1400Args['obj']['bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool'] | Arc1400Args['tuple']['bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.symbol, params.args.decimals, params.args.totalSupply, params.args.owner, params.args.controller, params.args.controllable, params.args.requireJustification, params.args.minControllerActionInterval],
    }
  }
  /**
   * Constructs a no op call for the arc1644_set_controller(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1644SetController(params: CallParams<Arc1400Args['obj']['arc1644_set_controller(address)void'] | Arc1400Args['tuple']['arc1644_set_controller(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1644_set_controller(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newController],
    }
  }
  /**
   * Constructs a no op call for the arc1644_set_controllable(bool)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1644SetControllable(params: CallParams<Arc1400Args['obj']['arc1644_set_controllable(bool)void'] | Arc1400Args['tuple']['arc1644_set_controllable(bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1644_set_controllable(bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.flag],
    }
  }
  /**
   * Constructs a no op call for the arc1644_set_require_justification(bool)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1644SetRequireJustification(params: CallParams<Arc1400Args['obj']['arc1644_set_require_justification(bool)void'] | Arc1400Args['tuple']['arc1644_set_require_justification(bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1644_set_require_justification(bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.flag],
    }
  }
  /**
   * Constructs a no op call for the arc1644_set_min_action_interval(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1644SetMinActionInterval(params: CallParams<Arc1400Args['obj']['arc1644_set_min_action_interval(uint64)void'] | Arc1400Args['tuple']['arc1644_set_min_action_interval(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1644_set_min_action_interval(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.interval],
    }
  }
  /**
   * Constructs a no op call for the arc1644_is_controllable()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1644IsControllable(params: CallParams<Arc1400Args['obj']['arc1644_is_controllable()uint64'] | Arc1400Args['tuple']['arc1644_is_controllable()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1644_is_controllable()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1644ControllerTransfer(params: CallParams<Arc1400Args['obj']['arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64'] | Arc1400Args['tuple']['arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.from, params.args.to, params.args.amount, params.args.data, params.args.operatorData],
    }
  }
  /**
   * Constructs a no op call for the arc1644_controller_redeem(address,uint256,byte[])uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1644ControllerRedeem(params: CallParams<Arc1400Args['obj']['arc1644_controller_redeem(address,uint256,byte[])uint64'] | Arc1400Args['tuple']['arc1644_controller_redeem(address,uint256,byte[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1644_controller_redeem(address,uint256,byte[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.from, params.args.amount, params.args.operatorData],
    }
  }
  /**
   * Constructs a no op call for the arc1643_set_document(byte[],string,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1643SetDocument(params: CallParams<Arc1400Args['obj']['arc1643_set_document(byte[],string,byte[])void'] | Arc1400Args['tuple']['arc1643_set_document(byte[],string,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1643_set_document(byte[],string,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.uri, params.args.hash],
    }
  }
  /**
   * Constructs a no op call for the arc1643_get_document(byte[])(string,byte[],uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1643GetDocument(params: CallParams<Arc1400Args['obj']['arc1643_get_document(byte[])(string,byte[],uint64)'] | Arc1400Args['tuple']['arc1643_get_document(byte[])(string,byte[],uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1643_get_document(byte[])(string,byte[],uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the arc1643_remove_document(byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1643RemoveDocument(params: CallParams<Arc1400Args['obj']['arc1643_remove_document(byte[])void'] | Arc1400Args['tuple']['arc1643_remove_document(byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1643_remove_document(byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the arc1643_get_all_documents()byte[][] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1643GetAllDocuments(params: CallParams<Arc1400Args['obj']['arc1643_get_all_documents()byte[][]'] | Arc1400Args['tuple']['arc1643_get_all_documents()byte[][]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1643_get_all_documents()byte[][]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc1594_set_issuable(bool)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1594SetIssuable(params: CallParams<Arc1400Args['obj']['arc1594_set_issuable(bool)void'] | Arc1400Args['tuple']['arc1594_set_issuable(bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1594_set_issuable(bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.flag],
    }
  }
  /**
   * Constructs a no op call for the arc1594_issue(address,uint256,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1594Issue(params: CallParams<Arc1400Args['obj']['arc1594_issue(address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1594_issue(address,uint256,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1594_issue(address,uint256,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.to, params.args.amount, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc1594_redeemFrom(address,uint256,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1594RedeemFrom(params: CallParams<Arc1400Args['obj']['arc1594_redeemFrom(address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1594_redeemFrom(address,uint256,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1594_redeemFrom(address,uint256,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.from, params.args.amount, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc1594_redeem(uint256,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1594Redeem(params: CallParams<Arc1400Args['obj']['arc1594_redeem(uint256,byte[])void'] | Arc1400Args['tuple']['arc1594_redeem(uint256,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1594_redeem(uint256,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc1594_transfer_with_data(address,uint256,byte[])bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1594TransferWithData(params: CallParams<Arc1400Args['obj']['arc1594_transfer_with_data(address,uint256,byte[])bool'] | Arc1400Args['tuple']['arc1594_transfer_with_data(address,uint256,byte[])bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1594_transfer_with_data(address,uint256,byte[])bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.to, params.args.amount, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc1594_transfer_from_with_data(address,address,uint256,byte[])bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1594TransferFromWithData(params: CallParams<Arc1400Args['obj']['arc1594_transfer_from_with_data(address,address,uint256,byte[])bool'] | Arc1400Args['tuple']['arc1594_transfer_from_with_data(address,address,uint256,byte[])bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1594_transfer_from_with_data(address,address,uint256,byte[])bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.from, params.args.to, params.args.amount, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc1594_is_issuable()bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1594IsIssuable(params: CallParams<Arc1400Args['obj']['arc1594_is_issuable()bool'] | Arc1400Args['tuple']['arc1594_is_issuable()bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1594_is_issuable()bool' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc1410_balance_of_partition(address,address)uint256 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410BalanceOfPartition(params: CallParams<Arc1400Args['obj']['arc1410_balance_of_partition(address,address)uint256'] | Arc1400Args['tuple']['arc1410_balance_of_partition(address,address)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_balance_of_partition(address,address)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder, params.args.partition],
    }
  }
  /**
   * Constructs a no op call for the arc200_transfer(address,uint256)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Transfer(params: CallParams<Arc1400Args['obj']['arc200_transfer(address,uint256)bool'] | Arc1400Args['tuple']['arc200_transfer(address,uint256)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_transfer(address,uint256)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.to, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the arc1410_transfer_by_partition(address,address,uint256,byte[])address ABI method
   *
   * Transfer an amount of tokens from partition to receiver. Sender must be msg.sender or authorized operator.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410TransferByPartition(params: CallParams<Arc1400Args['obj']['arc1410_transfer_by_partition(address,address,uint256,byte[])address'] | Arc1400Args['tuple']['arc1410_transfer_by_partition(address,address,uint256,byte[])address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_transfer_by_partition(address,address,uint256,byte[])address' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.partition, params.args.to, params.args.amount, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc1410_partitions_of(address,uint64)address[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410PartitionsOf(params: CallParams<Arc1400Args['obj']['arc1410_partitions_of(address,uint64)address[]'] | Arc1400Args['tuple']['arc1410_partitions_of(address,uint64)address[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_partitions_of(address,uint64)address[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder, params.args.page],
    }
  }
  /**
   * Constructs a no op call for the arc1410_is_operator(address,address,address)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410IsOperator(params: CallParams<Arc1400Args['obj']['arc1410_is_operator(address,address,address)bool'] | Arc1400Args['tuple']['arc1410_is_operator(address,address,address)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_is_operator(address,address,address)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder, params.args.operator, params.args.partition],
    }
  }
  /**
   * Constructs a no op call for the arc1410_authorize_operator(address,address,address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410AuthorizeOperator(params: CallParams<Arc1400Args['obj']['arc1410_authorize_operator(address,address,address)void'] | Arc1400Args['tuple']['arc1410_authorize_operator(address,address,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_authorize_operator(address,address,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder, params.args.operator, params.args.partition],
    }
  }
  /**
   * Constructs a no op call for the arc1410_revoke_operator(address,address,address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410RevokeOperator(params: CallParams<Arc1400Args['obj']['arc1410_revoke_operator(address,address,address)void'] | Arc1400Args['tuple']['arc1410_revoke_operator(address,address,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_revoke_operator(address,address,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder, params.args.operator, params.args.partition],
    }
  }
  /**
   * Constructs a no op call for the arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410OperatorTransferByPartition(params: CallParams<Arc1400Args['obj']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address'] | Arc1400Args['tuple']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.from, params.args.partition, params.args.to, params.args.amount, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410CanTransferByPartition(params: CallParams<Arc1400Args['obj']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)'] | Arc1400Args['tuple']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.from, params.args.partition, params.args.to, params.args.amount, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc1410_authorize_operator_by_portion(address,address,address,uint256)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410AuthorizeOperatorByPortion(params: CallParams<Arc1400Args['obj']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void'] | Arc1400Args['tuple']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_authorize_operator_by_portion(address,address,address,uint256)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder, params.args.operator, params.args.partition, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the arc1410_is_operator_by_portion(address,address,address)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410IsOperatorByPortion(params: CallParams<Arc1400Args['obj']['arc1410_is_operator_by_portion(address,address,address)bool'] | Arc1400Args['tuple']['arc1410_is_operator_by_portion(address,address,address)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_is_operator_by_portion(address,address,address)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder, params.args.operator, params.args.partition],
    }
  }
  /**
   * Constructs a no op call for the arc1410_issue_by_partition(address,address,uint256,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410IssueByPartition(params: CallParams<Arc1400Args['obj']['arc1410_issue_by_partition(address,address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1410_issue_by_partition(address,address,uint256,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_issue_by_partition(address,address,uint256,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.to, params.args.partition, params.args.amount, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc1410_redeem_by_partition(address,uint256,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410RedeemByPartition(params: CallParams<Arc1400Args['obj']['arc1410_redeem_by_partition(address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1410_redeem_by_partition(address,uint256,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_redeem_by_partition(address,uint256,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.partition, params.args.amount, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1410OperatorRedeemByPartition(params: CallParams<Arc1400Args['obj']['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.from, params.args.partition, params.args.amount, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc200_name()byte[32] ABI method
   *
   * Returns the name of the token
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Name(params: CallParams<Arc1400Args['obj']['arc200_name()byte[32]'] | Arc1400Args['tuple']['arc200_name()byte[32]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_name()byte[32]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc200_symbol()byte[8] ABI method
   *
   * Returns the symbol of the token
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Symbol(params: CallParams<Arc1400Args['obj']['arc200_symbol()byte[8]'] | Arc1400Args['tuple']['arc200_symbol()byte[8]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_symbol()byte[8]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc200_decimals()uint8 ABI method
   *
   * Returns the decimals of the token
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Decimals(params: CallParams<Arc1400Args['obj']['arc200_decimals()uint8'] | Arc1400Args['tuple']['arc200_decimals()uint8']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_decimals()uint8' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc200_totalSupply()uint256 ABI method
   *
   * Returns the total supply of the token
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200TotalSupply(params: CallParams<Arc1400Args['obj']['arc200_totalSupply()uint256'] | Arc1400Args['tuple']['arc200_totalSupply()uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_totalSupply()uint256' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc200_balanceOf(address)uint256 ABI method
   *
   * Returns the current balance of the owner of the token
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200BalanceOf(params: CallParams<Arc1400Args['obj']['arc200_balanceOf(address)uint256'] | Arc1400Args['tuple']['arc200_balanceOf(address)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_balanceOf(address)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.owner],
    }
  }
  /**
   * Constructs a no op call for the arc200_transferFrom(address,address,uint256)bool ABI method
   *
   * Transfers tokens from source to destination as approved spender
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200TransferFrom(params: CallParams<Arc1400Args['obj']['arc200_transferFrom(address,address,uint256)bool'] | Arc1400Args['tuple']['arc200_transferFrom(address,address,uint256)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_transferFrom(address,address,uint256)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.from, params.args.to, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the arc200_approve(address,uint256)bool ABI method
   *
   * Approve spender for a token
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Approve(params: CallParams<Arc1400Args['obj']['arc200_approve(address,uint256)bool'] | Arc1400Args['tuple']['arc200_approve(address,uint256)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_approve(address,uint256)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.spender, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the arc200_allowance(address,address)uint256 ABI method
   *
   * Returns the current allowance of the spender of the tokens of the owner
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Allowance(params: CallParams<Arc1400Args['obj']['arc200_allowance(address,address)uint256'] | Arc1400Args['tuple']['arc200_allowance(address,address)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_allowance(address,address)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.owner, params.args.spender],
    }
  }
  /**
   * Constructs a no op call for the arc88_owner()address ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88Owner(params: CallParams<Arc1400Args['obj']['arc88_owner()address'] | Arc1400Args['tuple']['arc88_owner()address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_owner()address' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc88_is_owner(address)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88IsOwner(params: CallParams<Arc1400Args['obj']['arc88_is_owner(address)bool'] | Arc1400Args['tuple']['arc88_is_owner(address)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_is_owner(address)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.query],
    }
  }
  /**
   * Constructs a no op call for the arc88_initialize_owner(address)void ABI method
   *
   * Explicit initialization override (creation group recommended). Fails if already initialized.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88InitializeOwner(params: CallParams<Arc1400Args['obj']['arc88_initialize_owner(address)void'] | Arc1400Args['tuple']['arc88_initialize_owner(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_initialize_owner(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newOwner],
    }
  }
  /**
   * Constructs a no op call for the arc88_transfer_ownership(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88TransferOwnership(params: CallParams<Arc1400Args['obj']['arc88_transfer_ownership(address)void'] | Arc1400Args['tuple']['arc88_transfer_ownership(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_transfer_ownership(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newOwner],
    }
  }
  /**
   * Constructs a no op call for the arc88_renounce_ownership()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88RenounceOwnership(params: CallParams<Arc1400Args['obj']['arc88_renounce_ownership()void'] | Arc1400Args['tuple']['arc88_renounce_ownership()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_renounce_ownership()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc88_transfer_ownership_request(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88TransferOwnershipRequest(params: CallParams<Arc1400Args['obj']['arc88_transfer_ownership_request(address)void'] | Arc1400Args['tuple']['arc88_transfer_ownership_request(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_transfer_ownership_request(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.pending],
    }
  }
  /**
   * Constructs a no op call for the arc88_accept_ownership()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88AcceptOwnership(params: CallParams<Arc1400Args['obj']['arc88_accept_ownership()void'] | Arc1400Args['tuple']['arc88_accept_ownership()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_accept_ownership()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc88_cancel_ownership_request()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc88CancelOwnershipRequest(params: CallParams<Arc1400Args['obj']['arc88_cancel_ownership_request()void'] | Arc1400Args['tuple']['arc88_cancel_ownership_request()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc88_cancel_ownership_request()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Arc1400 smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Arc1400Factory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `Arc1400Factory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Arc1400Client(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new Arc1400Client(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Arc1400 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Arc1400DeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new Arc1400Client(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Arc1400 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Arc1400 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Arc1400 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new Arc1400Client(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Arc1400 smart contract
 */
export class Arc1400Client {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `Arc1400Client`
   *
   * @param appClient An `AppClient` instance which has been created with the Arc1400 app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `Arc1400Client`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Arc1400NonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `Arc1400Client` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<Arc1400Client> {
    return new Arc1400Client(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `Arc1400Client` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<Arc1400Client> {
    return new Arc1400Client(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Arc1400 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `bootstrap(byte[],byte[],uint8,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrap: (params: CallParams<Arc1400Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool'] | Arc1400Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrap1400: (params: CallParams<Arc1400Args['obj']['bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool'] | Arc1400Args['tuple']['bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.bootstrap1400(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1644_set_controller(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1644SetController: (params: CallParams<Arc1400Args['obj']['arc1644_set_controller(address)void'] | Arc1400Args['tuple']['arc1644_set_controller(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1644SetController(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1644_set_controllable(bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1644SetControllable: (params: CallParams<Arc1400Args['obj']['arc1644_set_controllable(bool)void'] | Arc1400Args['tuple']['arc1644_set_controllable(bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1644SetControllable(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1644_set_require_justification(bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1644SetRequireJustification: (params: CallParams<Arc1400Args['obj']['arc1644_set_require_justification(bool)void'] | Arc1400Args['tuple']['arc1644_set_require_justification(bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1644SetRequireJustification(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1644_set_min_action_interval(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1644SetMinActionInterval: (params: CallParams<Arc1400Args['obj']['arc1644_set_min_action_interval(uint64)void'] | Arc1400Args['tuple']['arc1644_set_min_action_interval(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1644SetMinActionInterval(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1644_is_controllable()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1644IsControllable: (params: CallParams<Arc1400Args['obj']['arc1644_is_controllable()uint64'] | Arc1400Args['tuple']['arc1644_is_controllable()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1644IsControllable(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1644ControllerTransfer: (params: CallParams<Arc1400Args['obj']['arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64'] | Arc1400Args['tuple']['arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1644ControllerTransfer(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1644_controller_redeem(address,uint256,byte[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1644ControllerRedeem: (params: CallParams<Arc1400Args['obj']['arc1644_controller_redeem(address,uint256,byte[])uint64'] | Arc1400Args['tuple']['arc1644_controller_redeem(address,uint256,byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1644ControllerRedeem(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1643_set_document(byte[],string,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1643SetDocument: (params: CallParams<Arc1400Args['obj']['arc1643_set_document(byte[],string,byte[])void'] | Arc1400Args['tuple']['arc1643_set_document(byte[],string,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1643SetDocument(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1643_get_document(byte[])(string,byte[],uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1643GetDocument: (params: CallParams<Arc1400Args['obj']['arc1643_get_document(byte[])(string,byte[],uint64)'] | Arc1400Args['tuple']['arc1643_get_document(byte[])(string,byte[],uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1643GetDocument(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1643_remove_document(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1643RemoveDocument: (params: CallParams<Arc1400Args['obj']['arc1643_remove_document(byte[])void'] | Arc1400Args['tuple']['arc1643_remove_document(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1643RemoveDocument(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1643_get_all_documents()byte[][]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1643GetAllDocuments: (params: CallParams<Arc1400Args['obj']['arc1643_get_all_documents()byte[][]'] | Arc1400Args['tuple']['arc1643_get_all_documents()byte[][]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1643GetAllDocuments(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1594_set_issuable(bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1594SetIssuable: (params: CallParams<Arc1400Args['obj']['arc1594_set_issuable(bool)void'] | Arc1400Args['tuple']['arc1594_set_issuable(bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1594SetIssuable(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1594_issue(address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1594Issue: (params: CallParams<Arc1400Args['obj']['arc1594_issue(address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1594_issue(address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1594Issue(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1594_redeemFrom(address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1594RedeemFrom: (params: CallParams<Arc1400Args['obj']['arc1594_redeemFrom(address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1594_redeemFrom(address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1594RedeemFrom(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1594_redeem(uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1594Redeem: (params: CallParams<Arc1400Args['obj']['arc1594_redeem(uint256,byte[])void'] | Arc1400Args['tuple']['arc1594_redeem(uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1594Redeem(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1594_transfer_with_data(address,uint256,byte[])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1594TransferWithData: (params: CallParams<Arc1400Args['obj']['arc1594_transfer_with_data(address,uint256,byte[])bool'] | Arc1400Args['tuple']['arc1594_transfer_with_data(address,uint256,byte[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1594TransferWithData(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1594_transfer_from_with_data(address,address,uint256,byte[])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1594TransferFromWithData: (params: CallParams<Arc1400Args['obj']['arc1594_transfer_from_with_data(address,address,uint256,byte[])bool'] | Arc1400Args['tuple']['arc1594_transfer_from_with_data(address,address,uint256,byte[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1594TransferFromWithData(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1594_is_issuable()bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1594IsIssuable: (params: CallParams<Arc1400Args['obj']['arc1594_is_issuable()bool'] | Arc1400Args['tuple']['arc1594_is_issuable()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1594IsIssuable(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_balance_of_partition(address,address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410BalanceOfPartition: (params: CallParams<Arc1400Args['obj']['arc1410_balance_of_partition(address,address)uint256'] | Arc1400Args['tuple']['arc1410_balance_of_partition(address,address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1410BalanceOfPartition(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc200_transfer(address,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc200Transfer: (params: CallParams<Arc1400Args['obj']['arc200_transfer(address,uint256)bool'] | Arc1400Args['tuple']['arc200_transfer(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc200Transfer(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_transfer_by_partition(address,address,uint256,byte[])address` ABI method.
     *
     * Transfer an amount of tokens from partition to receiver. Sender must be msg.sender or authorized operator.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410TransferByPartition: (params: CallParams<Arc1400Args['obj']['arc1410_transfer_by_partition(address,address,uint256,byte[])address'] | Arc1400Args['tuple']['arc1410_transfer_by_partition(address,address,uint256,byte[])address']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1410TransferByPartition(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_partitions_of(address,uint64)address[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410PartitionsOf: (params: CallParams<Arc1400Args['obj']['arc1410_partitions_of(address,uint64)address[]'] | Arc1400Args['tuple']['arc1410_partitions_of(address,uint64)address[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1410PartitionsOf(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_is_operator(address,address,address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410IsOperator: (params: CallParams<Arc1400Args['obj']['arc1410_is_operator(address,address,address)bool'] | Arc1400Args['tuple']['arc1410_is_operator(address,address,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1410IsOperator(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_authorize_operator(address,address,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410AuthorizeOperator: (params: CallParams<Arc1400Args['obj']['arc1410_authorize_operator(address,address,address)void'] | Arc1400Args['tuple']['arc1410_authorize_operator(address,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1410AuthorizeOperator(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_revoke_operator(address,address,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410RevokeOperator: (params: CallParams<Arc1400Args['obj']['arc1410_revoke_operator(address,address,address)void'] | Arc1400Args['tuple']['arc1410_revoke_operator(address,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1410RevokeOperator(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410OperatorTransferByPartition: (params: CallParams<Arc1400Args['obj']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address'] | Arc1400Args['tuple']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1410OperatorTransferByPartition(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410CanTransferByPartition: (params: CallParams<Arc1400Args['obj']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)'] | Arc1400Args['tuple']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1410CanTransferByPartition(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_authorize_operator_by_portion(address,address,address,uint256)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410AuthorizeOperatorByPortion: (params: CallParams<Arc1400Args['obj']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void'] | Arc1400Args['tuple']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1410AuthorizeOperatorByPortion(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_is_operator_by_portion(address,address,address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410IsOperatorByPortion: (params: CallParams<Arc1400Args['obj']['arc1410_is_operator_by_portion(address,address,address)bool'] | Arc1400Args['tuple']['arc1410_is_operator_by_portion(address,address,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1410IsOperatorByPortion(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_issue_by_partition(address,address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410IssueByPartition: (params: CallParams<Arc1400Args['obj']['arc1410_issue_by_partition(address,address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1410_issue_by_partition(address,address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1410IssueByPartition(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_redeem_by_partition(address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410RedeemByPartition: (params: CallParams<Arc1400Args['obj']['arc1410_redeem_by_partition(address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1410_redeem_by_partition(address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1410RedeemByPartition(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1410OperatorRedeemByPartition: (params: CallParams<Arc1400Args['obj']['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc1410OperatorRedeemByPartition(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc200_name()byte[32]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the name of the token
     *
     * @param params The params for the smart contract call
     * @returns The call params: The name of the token
     */
    arc200Name: (params: CallParams<Arc1400Args['obj']['arc200_name()byte[32]'] | Arc1400Args['tuple']['arc200_name()byte[32]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc200Name(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc200_symbol()byte[8]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the symbol of the token
     *
     * @param params The params for the smart contract call
     * @returns The call params: The symbol of the token
     */
    arc200Symbol: (params: CallParams<Arc1400Args['obj']['arc200_symbol()byte[8]'] | Arc1400Args['tuple']['arc200_symbol()byte[8]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc200Symbol(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc200_decimals()uint8` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the decimals of the token
     *
     * @param params The params for the smart contract call
     * @returns The call params: The decimals of the token
     */
    arc200Decimals: (params: CallParams<Arc1400Args['obj']['arc200_decimals()uint8'] | Arc1400Args['tuple']['arc200_decimals()uint8']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc200Decimals(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc200_totalSupply()uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the total supply of the token
     *
     * @param params The params for the smart contract call
     * @returns The call params: The total supply of the token
     */
    arc200TotalSupply: (params: CallParams<Arc1400Args['obj']['arc200_totalSupply()uint256'] | Arc1400Args['tuple']['arc200_totalSupply()uint256']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc200TotalSupply(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc200_balanceOf(address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the current balance of the owner of the token
     *
     * @param params The params for the smart contract call
     * @returns The call params: The current balance of the holder of the token
     */
    arc200BalanceOf: (params: CallParams<Arc1400Args['obj']['arc200_balanceOf(address)uint256'] | Arc1400Args['tuple']['arc200_balanceOf(address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc200BalanceOf(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc200_transferFrom(address,address,uint256)bool` ABI method.
     *
     * Transfers tokens from source to destination as approved spender
     *
     * @param params The params for the smart contract call
     * @returns The call params: Success
     */
    arc200TransferFrom: (params: CallParams<Arc1400Args['obj']['arc200_transferFrom(address,address,uint256)bool'] | Arc1400Args['tuple']['arc200_transferFrom(address,address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc200TransferFrom(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc200_approve(address,uint256)bool` ABI method.
     *
     * Approve spender for a token
     *
     * @param params The params for the smart contract call
     * @returns The call params: Success
     */
    arc200Approve: (params: CallParams<Arc1400Args['obj']['arc200_approve(address,uint256)bool'] | Arc1400Args['tuple']['arc200_approve(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc200Approve(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc200_allowance(address,address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the current allowance of the spender of the tokens of the owner
     *
     * @param params The params for the smart contract call
     * @returns The call params: The remaining allowance
     */
    arc200Allowance: (params: CallParams<Arc1400Args['obj']['arc200_allowance(address,address)uint256'] | Arc1400Args['tuple']['arc200_allowance(address,address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc200Allowance(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc88_owner()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88Owner: (params: CallParams<Arc1400Args['obj']['arc88_owner()address'] | Arc1400Args['tuple']['arc88_owner()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc88Owner(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc88_is_owner(address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88IsOwner: (params: CallParams<Arc1400Args['obj']['arc88_is_owner(address)bool'] | Arc1400Args['tuple']['arc88_is_owner(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc88IsOwner(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc88_initialize_owner(address)void` ABI method.
     *
     * Explicit initialization override (creation group recommended). Fails if already initialized.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88InitializeOwner: (params: CallParams<Arc1400Args['obj']['arc88_initialize_owner(address)void'] | Arc1400Args['tuple']['arc88_initialize_owner(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc88InitializeOwner(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc88_transfer_ownership(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88TransferOwnership: (params: CallParams<Arc1400Args['obj']['arc88_transfer_ownership(address)void'] | Arc1400Args['tuple']['arc88_transfer_ownership(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc88TransferOwnership(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc88_renounce_ownership()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88RenounceOwnership: (params: CallParams<Arc1400Args['obj']['arc88_renounce_ownership()void'] | Arc1400Args['tuple']['arc88_renounce_ownership()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc88RenounceOwnership(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc88_transfer_ownership_request(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88TransferOwnershipRequest: (params: CallParams<Arc1400Args['obj']['arc88_transfer_ownership_request(address)void'] | Arc1400Args['tuple']['arc88_transfer_ownership_request(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc88TransferOwnershipRequest(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc88_accept_ownership()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88AcceptOwnership: (params: CallParams<Arc1400Args['obj']['arc88_accept_ownership()void'] | Arc1400Args['tuple']['arc88_accept_ownership()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc88AcceptOwnership(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc88_cancel_ownership_request()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc88CancelOwnershipRequest: (params: CallParams<Arc1400Args['obj']['arc88_cancel_ownership_request()void'] | Arc1400Args['tuple']['arc88_cancel_ownership_request()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc1400ParamsFactory.arc88CancelOwnershipRequest(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Arc1400 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `bootstrap(byte[],byte[],uint8,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrap: (params: CallParams<Arc1400Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool'] | Arc1400Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrap1400: (params: CallParams<Arc1400Args['obj']['bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool'] | Arc1400Args['tuple']['bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.bootstrap1400(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1644_set_controller(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1644SetController: (params: CallParams<Arc1400Args['obj']['arc1644_set_controller(address)void'] | Arc1400Args['tuple']['arc1644_set_controller(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1644SetController(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1644_set_controllable(bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1644SetControllable: (params: CallParams<Arc1400Args['obj']['arc1644_set_controllable(bool)void'] | Arc1400Args['tuple']['arc1644_set_controllable(bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1644SetControllable(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1644_set_require_justification(bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1644SetRequireJustification: (params: CallParams<Arc1400Args['obj']['arc1644_set_require_justification(bool)void'] | Arc1400Args['tuple']['arc1644_set_require_justification(bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1644SetRequireJustification(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1644_set_min_action_interval(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1644SetMinActionInterval: (params: CallParams<Arc1400Args['obj']['arc1644_set_min_action_interval(uint64)void'] | Arc1400Args['tuple']['arc1644_set_min_action_interval(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1644SetMinActionInterval(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1644_is_controllable()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1644IsControllable: (params: CallParams<Arc1400Args['obj']['arc1644_is_controllable()uint64'] | Arc1400Args['tuple']['arc1644_is_controllable()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1644IsControllable(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1644ControllerTransfer: (params: CallParams<Arc1400Args['obj']['arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64'] | Arc1400Args['tuple']['arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1644ControllerTransfer(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1644_controller_redeem(address,uint256,byte[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1644ControllerRedeem: (params: CallParams<Arc1400Args['obj']['arc1644_controller_redeem(address,uint256,byte[])uint64'] | Arc1400Args['tuple']['arc1644_controller_redeem(address,uint256,byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1644ControllerRedeem(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1643_set_document(byte[],string,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1643SetDocument: (params: CallParams<Arc1400Args['obj']['arc1643_set_document(byte[],string,byte[])void'] | Arc1400Args['tuple']['arc1643_set_document(byte[],string,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1643SetDocument(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1643_get_document(byte[])(string,byte[],uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1643GetDocument: (params: CallParams<Arc1400Args['obj']['arc1643_get_document(byte[])(string,byte[],uint64)'] | Arc1400Args['tuple']['arc1643_get_document(byte[])(string,byte[],uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1643GetDocument(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1643_remove_document(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1643RemoveDocument: (params: CallParams<Arc1400Args['obj']['arc1643_remove_document(byte[])void'] | Arc1400Args['tuple']['arc1643_remove_document(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1643RemoveDocument(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1643_get_all_documents()byte[][]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1643GetAllDocuments: (params: CallParams<Arc1400Args['obj']['arc1643_get_all_documents()byte[][]'] | Arc1400Args['tuple']['arc1643_get_all_documents()byte[][]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1643GetAllDocuments(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1594_set_issuable(bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1594SetIssuable: (params: CallParams<Arc1400Args['obj']['arc1594_set_issuable(bool)void'] | Arc1400Args['tuple']['arc1594_set_issuable(bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1594SetIssuable(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1594_issue(address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1594Issue: (params: CallParams<Arc1400Args['obj']['arc1594_issue(address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1594_issue(address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1594Issue(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1594_redeemFrom(address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1594RedeemFrom: (params: CallParams<Arc1400Args['obj']['arc1594_redeemFrom(address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1594_redeemFrom(address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1594RedeemFrom(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1594_redeem(uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1594Redeem: (params: CallParams<Arc1400Args['obj']['arc1594_redeem(uint256,byte[])void'] | Arc1400Args['tuple']['arc1594_redeem(uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1594Redeem(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1594_transfer_with_data(address,uint256,byte[])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1594TransferWithData: (params: CallParams<Arc1400Args['obj']['arc1594_transfer_with_data(address,uint256,byte[])bool'] | Arc1400Args['tuple']['arc1594_transfer_with_data(address,uint256,byte[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1594TransferWithData(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1594_transfer_from_with_data(address,address,uint256,byte[])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1594TransferFromWithData: (params: CallParams<Arc1400Args['obj']['arc1594_transfer_from_with_data(address,address,uint256,byte[])bool'] | Arc1400Args['tuple']['arc1594_transfer_from_with_data(address,address,uint256,byte[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1594TransferFromWithData(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1594_is_issuable()bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1594IsIssuable: (params: CallParams<Arc1400Args['obj']['arc1594_is_issuable()bool'] | Arc1400Args['tuple']['arc1594_is_issuable()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1594IsIssuable(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_balance_of_partition(address,address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410BalanceOfPartition: (params: CallParams<Arc1400Args['obj']['arc1410_balance_of_partition(address,address)uint256'] | Arc1400Args['tuple']['arc1410_balance_of_partition(address,address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1410BalanceOfPartition(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc200_transfer(address,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc200Transfer: (params: CallParams<Arc1400Args['obj']['arc200_transfer(address,uint256)bool'] | Arc1400Args['tuple']['arc200_transfer(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc200Transfer(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_transfer_by_partition(address,address,uint256,byte[])address` ABI method.
     *
     * Transfer an amount of tokens from partition to receiver. Sender must be msg.sender or authorized operator.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410TransferByPartition: (params: CallParams<Arc1400Args['obj']['arc1410_transfer_by_partition(address,address,uint256,byte[])address'] | Arc1400Args['tuple']['arc1410_transfer_by_partition(address,address,uint256,byte[])address']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1410TransferByPartition(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_partitions_of(address,uint64)address[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410PartitionsOf: (params: CallParams<Arc1400Args['obj']['arc1410_partitions_of(address,uint64)address[]'] | Arc1400Args['tuple']['arc1410_partitions_of(address,uint64)address[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1410PartitionsOf(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_is_operator(address,address,address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410IsOperator: (params: CallParams<Arc1400Args['obj']['arc1410_is_operator(address,address,address)bool'] | Arc1400Args['tuple']['arc1410_is_operator(address,address,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1410IsOperator(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_authorize_operator(address,address,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410AuthorizeOperator: (params: CallParams<Arc1400Args['obj']['arc1410_authorize_operator(address,address,address)void'] | Arc1400Args['tuple']['arc1410_authorize_operator(address,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1410AuthorizeOperator(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_revoke_operator(address,address,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410RevokeOperator: (params: CallParams<Arc1400Args['obj']['arc1410_revoke_operator(address,address,address)void'] | Arc1400Args['tuple']['arc1410_revoke_operator(address,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1410RevokeOperator(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410OperatorTransferByPartition: (params: CallParams<Arc1400Args['obj']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address'] | Arc1400Args['tuple']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1410OperatorTransferByPartition(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410CanTransferByPartition: (params: CallParams<Arc1400Args['obj']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)'] | Arc1400Args['tuple']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1410CanTransferByPartition(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_authorize_operator_by_portion(address,address,address,uint256)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410AuthorizeOperatorByPortion: (params: CallParams<Arc1400Args['obj']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void'] | Arc1400Args['tuple']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1410AuthorizeOperatorByPortion(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_is_operator_by_portion(address,address,address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410IsOperatorByPortion: (params: CallParams<Arc1400Args['obj']['arc1410_is_operator_by_portion(address,address,address)bool'] | Arc1400Args['tuple']['arc1410_is_operator_by_portion(address,address,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1410IsOperatorByPortion(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_issue_by_partition(address,address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410IssueByPartition: (params: CallParams<Arc1400Args['obj']['arc1410_issue_by_partition(address,address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1410_issue_by_partition(address,address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1410IssueByPartition(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_redeem_by_partition(address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410RedeemByPartition: (params: CallParams<Arc1400Args['obj']['arc1410_redeem_by_partition(address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1410_redeem_by_partition(address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1410RedeemByPartition(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1410OperatorRedeemByPartition: (params: CallParams<Arc1400Args['obj']['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc1410OperatorRedeemByPartition(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc200_name()byte[32]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the name of the token
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The name of the token
     */
    arc200Name: (params: CallParams<Arc1400Args['obj']['arc200_name()byte[32]'] | Arc1400Args['tuple']['arc200_name()byte[32]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc200Name(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc200_symbol()byte[8]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the symbol of the token
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The symbol of the token
     */
    arc200Symbol: (params: CallParams<Arc1400Args['obj']['arc200_symbol()byte[8]'] | Arc1400Args['tuple']['arc200_symbol()byte[8]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc200Symbol(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc200_decimals()uint8` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the decimals of the token
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The decimals of the token
     */
    arc200Decimals: (params: CallParams<Arc1400Args['obj']['arc200_decimals()uint8'] | Arc1400Args['tuple']['arc200_decimals()uint8']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc200Decimals(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc200_totalSupply()uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the total supply of the token
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The total supply of the token
     */
    arc200TotalSupply: (params: CallParams<Arc1400Args['obj']['arc200_totalSupply()uint256'] | Arc1400Args['tuple']['arc200_totalSupply()uint256']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc200TotalSupply(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc200_balanceOf(address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the current balance of the owner of the token
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The current balance of the holder of the token
     */
    arc200BalanceOf: (params: CallParams<Arc1400Args['obj']['arc200_balanceOf(address)uint256'] | Arc1400Args['tuple']['arc200_balanceOf(address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc200BalanceOf(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc200_transferFrom(address,address,uint256)bool` ABI method.
     *
     * Transfers tokens from source to destination as approved spender
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Success
     */
    arc200TransferFrom: (params: CallParams<Arc1400Args['obj']['arc200_transferFrom(address,address,uint256)bool'] | Arc1400Args['tuple']['arc200_transferFrom(address,address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc200TransferFrom(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc200_approve(address,uint256)bool` ABI method.
     *
     * Approve spender for a token
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Success
     */
    arc200Approve: (params: CallParams<Arc1400Args['obj']['arc200_approve(address,uint256)bool'] | Arc1400Args['tuple']['arc200_approve(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc200Approve(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc200_allowance(address,address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the current allowance of the spender of the tokens of the owner
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The remaining allowance
     */
    arc200Allowance: (params: CallParams<Arc1400Args['obj']['arc200_allowance(address,address)uint256'] | Arc1400Args['tuple']['arc200_allowance(address,address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc200Allowance(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc88_owner()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88Owner: (params: CallParams<Arc1400Args['obj']['arc88_owner()address'] | Arc1400Args['tuple']['arc88_owner()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc88Owner(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc88_is_owner(address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88IsOwner: (params: CallParams<Arc1400Args['obj']['arc88_is_owner(address)bool'] | Arc1400Args['tuple']['arc88_is_owner(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc88IsOwner(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc88_initialize_owner(address)void` ABI method.
     *
     * Explicit initialization override (creation group recommended). Fails if already initialized.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88InitializeOwner: (params: CallParams<Arc1400Args['obj']['arc88_initialize_owner(address)void'] | Arc1400Args['tuple']['arc88_initialize_owner(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc88InitializeOwner(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc88_transfer_ownership(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88TransferOwnership: (params: CallParams<Arc1400Args['obj']['arc88_transfer_ownership(address)void'] | Arc1400Args['tuple']['arc88_transfer_ownership(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc88TransferOwnership(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc88_renounce_ownership()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88RenounceOwnership: (params: CallParams<Arc1400Args['obj']['arc88_renounce_ownership()void'] | Arc1400Args['tuple']['arc88_renounce_ownership()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc88RenounceOwnership(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc88_transfer_ownership_request(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88TransferOwnershipRequest: (params: CallParams<Arc1400Args['obj']['arc88_transfer_ownership_request(address)void'] | Arc1400Args['tuple']['arc88_transfer_ownership_request(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc88TransferOwnershipRequest(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc88_accept_ownership()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88AcceptOwnership: (params: CallParams<Arc1400Args['obj']['arc88_accept_ownership()void'] | Arc1400Args['tuple']['arc88_accept_ownership()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc88AcceptOwnership(params))
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc88_cancel_ownership_request()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc88CancelOwnershipRequest: (params: CallParams<Arc1400Args['obj']['arc88_cancel_ownership_request()void'] | Arc1400Args['tuple']['arc88_cancel_ownership_request()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc1400ParamsFactory.arc88CancelOwnershipRequest(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Arc1400 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `bootstrap(byte[],byte[],uint8,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrap: async (params: CallParams<Arc1400Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool'] | Arc1400Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.bootstrap(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['bootstrap(byte[],byte[],uint8,uint256)bool'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrap1400: async (params: CallParams<Arc1400Args['obj']['bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool'] | Arc1400Args['tuple']['bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.bootstrap1400(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1644_set_controller(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1644SetController: async (params: CallParams<Arc1400Args['obj']['arc1644_set_controller(address)void'] | Arc1400Args['tuple']['arc1644_set_controller(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1644SetController(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1644_set_controller(address)void'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1644_set_controllable(bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1644SetControllable: async (params: CallParams<Arc1400Args['obj']['arc1644_set_controllable(bool)void'] | Arc1400Args['tuple']['arc1644_set_controllable(bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1644SetControllable(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1644_set_controllable(bool)void'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1644_set_require_justification(bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1644SetRequireJustification: async (params: CallParams<Arc1400Args['obj']['arc1644_set_require_justification(bool)void'] | Arc1400Args['tuple']['arc1644_set_require_justification(bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1644SetRequireJustification(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1644_set_require_justification(bool)void'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1644_set_min_action_interval(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1644SetMinActionInterval: async (params: CallParams<Arc1400Args['obj']['arc1644_set_min_action_interval(uint64)void'] | Arc1400Args['tuple']['arc1644_set_min_action_interval(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1644SetMinActionInterval(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1644_set_min_action_interval(uint64)void'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1644_is_controllable()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1644IsControllable: async (params: CallParams<Arc1400Args['obj']['arc1644_is_controllable()uint64'] | Arc1400Args['tuple']['arc1644_is_controllable()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1644IsControllable(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1644_is_controllable()uint64'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1644ControllerTransfer: async (params: CallParams<Arc1400Args['obj']['arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64'] | Arc1400Args['tuple']['arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1644ControllerTransfer(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1644_controller_redeem(address,uint256,byte[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1644ControllerRedeem: async (params: CallParams<Arc1400Args['obj']['arc1644_controller_redeem(address,uint256,byte[])uint64'] | Arc1400Args['tuple']['arc1644_controller_redeem(address,uint256,byte[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1644ControllerRedeem(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1644_controller_redeem(address,uint256,byte[])uint64'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1643_set_document(byte[],string,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1643SetDocument: async (params: CallParams<Arc1400Args['obj']['arc1643_set_document(byte[],string,byte[])void'] | Arc1400Args['tuple']['arc1643_set_document(byte[],string,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1643SetDocument(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1643_set_document(byte[],string,byte[])void'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1643_get_document(byte[])(string,byte[],uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1643GetDocument: async (params: CallParams<Arc1400Args['obj']['arc1643_get_document(byte[])(string,byte[],uint64)'] | Arc1400Args['tuple']['arc1643_get_document(byte[])(string,byte[],uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1643GetDocument(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1643_get_document(byte[])(string,byte[],uint64)'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1643_remove_document(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1643RemoveDocument: async (params: CallParams<Arc1400Args['obj']['arc1643_remove_document(byte[])void'] | Arc1400Args['tuple']['arc1643_remove_document(byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1643RemoveDocument(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1643_remove_document(byte[])void'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1643_get_all_documents()byte[][]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1643GetAllDocuments: async (params: CallParams<Arc1400Args['obj']['arc1643_get_all_documents()byte[][]'] | Arc1400Args['tuple']['arc1643_get_all_documents()byte[][]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1643GetAllDocuments(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1643_get_all_documents()byte[][]'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1594_set_issuable(bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1594SetIssuable: async (params: CallParams<Arc1400Args['obj']['arc1594_set_issuable(bool)void'] | Arc1400Args['tuple']['arc1594_set_issuable(bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1594SetIssuable(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1594_set_issuable(bool)void'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1594_issue(address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1594Issue: async (params: CallParams<Arc1400Args['obj']['arc1594_issue(address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1594_issue(address,uint256,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1594Issue(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1594_issue(address,uint256,byte[])void'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1594_redeemFrom(address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1594RedeemFrom: async (params: CallParams<Arc1400Args['obj']['arc1594_redeemFrom(address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1594_redeemFrom(address,uint256,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1594RedeemFrom(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1594_redeemFrom(address,uint256,byte[])void'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1594_redeem(uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1594Redeem: async (params: CallParams<Arc1400Args['obj']['arc1594_redeem(uint256,byte[])void'] | Arc1400Args['tuple']['arc1594_redeem(uint256,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1594Redeem(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1594_redeem(uint256,byte[])void'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1594_transfer_with_data(address,uint256,byte[])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1594TransferWithData: async (params: CallParams<Arc1400Args['obj']['arc1594_transfer_with_data(address,uint256,byte[])bool'] | Arc1400Args['tuple']['arc1594_transfer_with_data(address,uint256,byte[])bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1594TransferWithData(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1594_transfer_with_data(address,uint256,byte[])bool'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1594_transfer_from_with_data(address,address,uint256,byte[])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1594TransferFromWithData: async (params: CallParams<Arc1400Args['obj']['arc1594_transfer_from_with_data(address,address,uint256,byte[])bool'] | Arc1400Args['tuple']['arc1594_transfer_from_with_data(address,address,uint256,byte[])bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1594TransferFromWithData(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1594_transfer_from_with_data(address,address,uint256,byte[])bool'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1594_is_issuable()bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1594IsIssuable: async (params: CallParams<Arc1400Args['obj']['arc1594_is_issuable()bool'] | Arc1400Args['tuple']['arc1594_is_issuable()bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1594IsIssuable(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1594_is_issuable()bool'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_balance_of_partition(address,address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410BalanceOfPartition: async (params: CallParams<Arc1400Args['obj']['arc1410_balance_of_partition(address,address)uint256'] | Arc1400Args['tuple']['arc1410_balance_of_partition(address,address)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1410BalanceOfPartition(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1410_balance_of_partition(address,address)uint256'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc200_transfer(address,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc200Transfer: async (params: CallParams<Arc1400Args['obj']['arc200_transfer(address,uint256)bool'] | Arc1400Args['tuple']['arc200_transfer(address,uint256)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc200Transfer(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc200_transfer(address,uint256)bool'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_transfer_by_partition(address,address,uint256,byte[])address` ABI method.
     *
     * Transfer an amount of tokens from partition to receiver. Sender must be msg.sender or authorized operator.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410TransferByPartition: async (params: CallParams<Arc1400Args['obj']['arc1410_transfer_by_partition(address,address,uint256,byte[])address'] | Arc1400Args['tuple']['arc1410_transfer_by_partition(address,address,uint256,byte[])address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1410TransferByPartition(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1410_transfer_by_partition(address,address,uint256,byte[])address'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_partitions_of(address,uint64)address[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410PartitionsOf: async (params: CallParams<Arc1400Args['obj']['arc1410_partitions_of(address,uint64)address[]'] | Arc1400Args['tuple']['arc1410_partitions_of(address,uint64)address[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1410PartitionsOf(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1410_partitions_of(address,uint64)address[]'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_is_operator(address,address,address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410IsOperator: async (params: CallParams<Arc1400Args['obj']['arc1410_is_operator(address,address,address)bool'] | Arc1400Args['tuple']['arc1410_is_operator(address,address,address)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1410IsOperator(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1410_is_operator(address,address,address)bool'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_authorize_operator(address,address,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410AuthorizeOperator: async (params: CallParams<Arc1400Args['obj']['arc1410_authorize_operator(address,address,address)void'] | Arc1400Args['tuple']['arc1410_authorize_operator(address,address,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1410AuthorizeOperator(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1410_authorize_operator(address,address,address)void'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_revoke_operator(address,address,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410RevokeOperator: async (params: CallParams<Arc1400Args['obj']['arc1410_revoke_operator(address,address,address)void'] | Arc1400Args['tuple']['arc1410_revoke_operator(address,address,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1410RevokeOperator(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1410_revoke_operator(address,address,address)void'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410OperatorTransferByPartition: async (params: CallParams<Arc1400Args['obj']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address'] | Arc1400Args['tuple']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1410OperatorTransferByPartition(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410CanTransferByPartition: async (params: CallParams<Arc1400Args['obj']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)'] | Arc1400Args['tuple']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1410CanTransferByPartition(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_authorize_operator_by_portion(address,address,address,uint256)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410AuthorizeOperatorByPortion: async (params: CallParams<Arc1400Args['obj']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void'] | Arc1400Args['tuple']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1410AuthorizeOperatorByPortion(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1410_authorize_operator_by_portion(address,address,address,uint256)void'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_is_operator_by_portion(address,address,address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410IsOperatorByPortion: async (params: CallParams<Arc1400Args['obj']['arc1410_is_operator_by_portion(address,address,address)bool'] | Arc1400Args['tuple']['arc1410_is_operator_by_portion(address,address,address)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1410IsOperatorByPortion(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1410_is_operator_by_portion(address,address,address)bool'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_issue_by_partition(address,address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410IssueByPartition: async (params: CallParams<Arc1400Args['obj']['arc1410_issue_by_partition(address,address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1410_issue_by_partition(address,address,uint256,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1410IssueByPartition(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1410_issue_by_partition(address,address,uint256,byte[])void'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_redeem_by_partition(address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410RedeemByPartition: async (params: CallParams<Arc1400Args['obj']['arc1410_redeem_by_partition(address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1410_redeem_by_partition(address,uint256,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1410RedeemByPartition(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1410_redeem_by_partition(address,uint256,byte[])void'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1410OperatorRedeemByPartition: async (params: CallParams<Arc1400Args['obj']['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1410OperatorRedeemByPartition(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc200_name()byte[32]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the name of the token
     *
     * @param params The params for the smart contract call
     * @returns The call result: The name of the token
     */
    arc200Name: async (params: CallParams<Arc1400Args['obj']['arc200_name()byte[32]'] | Arc1400Args['tuple']['arc200_name()byte[32]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc200Name(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc200_name()byte[32]'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc200_symbol()byte[8]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the symbol of the token
     *
     * @param params The params for the smart contract call
     * @returns The call result: The symbol of the token
     */
    arc200Symbol: async (params: CallParams<Arc1400Args['obj']['arc200_symbol()byte[8]'] | Arc1400Args['tuple']['arc200_symbol()byte[8]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc200Symbol(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc200_symbol()byte[8]'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc200_decimals()uint8` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the decimals of the token
     *
     * @param params The params for the smart contract call
     * @returns The call result: The decimals of the token
     */
    arc200Decimals: async (params: CallParams<Arc1400Args['obj']['arc200_decimals()uint8'] | Arc1400Args['tuple']['arc200_decimals()uint8']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc200Decimals(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc200_decimals()uint8'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc200_totalSupply()uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the total supply of the token
     *
     * @param params The params for the smart contract call
     * @returns The call result: The total supply of the token
     */
    arc200TotalSupply: async (params: CallParams<Arc1400Args['obj']['arc200_totalSupply()uint256'] | Arc1400Args['tuple']['arc200_totalSupply()uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc200TotalSupply(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc200_totalSupply()uint256'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc200_balanceOf(address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the current balance of the owner of the token
     *
     * @param params The params for the smart contract call
     * @returns The call result: The current balance of the holder of the token
     */
    arc200BalanceOf: async (params: CallParams<Arc1400Args['obj']['arc200_balanceOf(address)uint256'] | Arc1400Args['tuple']['arc200_balanceOf(address)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc200BalanceOf(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc200_balanceOf(address)uint256'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc200_transferFrom(address,address,uint256)bool` ABI method.
     *
     * Transfers tokens from source to destination as approved spender
     *
     * @param params The params for the smart contract call
     * @returns The call result: Success
     */
    arc200TransferFrom: async (params: CallParams<Arc1400Args['obj']['arc200_transferFrom(address,address,uint256)bool'] | Arc1400Args['tuple']['arc200_transferFrom(address,address,uint256)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc200TransferFrom(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc200_transferFrom(address,address,uint256)bool'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc200_approve(address,uint256)bool` ABI method.
     *
     * Approve spender for a token
     *
     * @param params The params for the smart contract call
     * @returns The call result: Success
     */
    arc200Approve: async (params: CallParams<Arc1400Args['obj']['arc200_approve(address,uint256)bool'] | Arc1400Args['tuple']['arc200_approve(address,uint256)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc200Approve(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc200_approve(address,uint256)bool'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc200_allowance(address,address)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the current allowance of the spender of the tokens of the owner
     *
     * @param params The params for the smart contract call
     * @returns The call result: The remaining allowance
     */
    arc200Allowance: async (params: CallParams<Arc1400Args['obj']['arc200_allowance(address,address)uint256'] | Arc1400Args['tuple']['arc200_allowance(address,address)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc200Allowance(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc200_allowance(address,address)uint256'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc88_owner()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88Owner: async (params: CallParams<Arc1400Args['obj']['arc88_owner()address'] | Arc1400Args['tuple']['arc88_owner()address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc88Owner(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc88_owner()address'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc88_is_owner(address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88IsOwner: async (params: CallParams<Arc1400Args['obj']['arc88_is_owner(address)bool'] | Arc1400Args['tuple']['arc88_is_owner(address)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc88IsOwner(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc88_is_owner(address)bool'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc88_initialize_owner(address)void` ABI method.
     *
     * Explicit initialization override (creation group recommended). Fails if already initialized.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88InitializeOwner: async (params: CallParams<Arc1400Args['obj']['arc88_initialize_owner(address)void'] | Arc1400Args['tuple']['arc88_initialize_owner(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc88InitializeOwner(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc88_initialize_owner(address)void'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc88_transfer_ownership(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88TransferOwnership: async (params: CallParams<Arc1400Args['obj']['arc88_transfer_ownership(address)void'] | Arc1400Args['tuple']['arc88_transfer_ownership(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc88TransferOwnership(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc88_transfer_ownership(address)void'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc88_renounce_ownership()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88RenounceOwnership: async (params: CallParams<Arc1400Args['obj']['arc88_renounce_ownership()void'] | Arc1400Args['tuple']['arc88_renounce_ownership()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc88RenounceOwnership(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc88_renounce_ownership()void'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc88_transfer_ownership_request(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88TransferOwnershipRequest: async (params: CallParams<Arc1400Args['obj']['arc88_transfer_ownership_request(address)void'] | Arc1400Args['tuple']['arc88_transfer_ownership_request(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc88TransferOwnershipRequest(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc88_transfer_ownership_request(address)void'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc88_accept_ownership()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88AcceptOwnership: async (params: CallParams<Arc1400Args['obj']['arc88_accept_ownership()void'] | Arc1400Args['tuple']['arc88_accept_ownership()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc88AcceptOwnership(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc88_accept_ownership()void'])}
    },

    /**
     * Makes a call to the Arc1400 smart contract using the `arc88_cancel_ownership_request()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc88CancelOwnershipRequest: async (params: CallParams<Arc1400Args['obj']['arc88_cancel_ownership_request()void'] | Arc1400Args['tuple']['arc88_cancel_ownership_request()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc1400ParamsFactory.arc88CancelOwnershipRequest(params))
      return {...result, return: result.return as unknown as (undefined | Arc1400Returns['arc88_cancel_ownership_request()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Arc1400Client(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the Arc1400 smart contract using the `arc1644_is_controllable()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc1644IsControllable(params: CallParams<Arc1400Args['obj']['arc1644_is_controllable()uint64'] | Arc1400Args['tuple']['arc1644_is_controllable()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1644IsControllable(params))
    return result.return as unknown as Arc1400Returns['arc1644_is_controllable()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1400 smart contract using the `arc1643_get_document(byte[])(string,byte[],uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc1643GetDocument(params: CallParams<Arc1400Args['obj']['arc1643_get_document(byte[])(string,byte[],uint64)'] | Arc1400Args['tuple']['arc1643_get_document(byte[])(string,byte[],uint64)']>) {
    const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1643GetDocument(params))
    return result.return as unknown as Arc1400Returns['arc1643_get_document(byte[])(string,byte[],uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1400 smart contract using the `arc1643_get_all_documents()byte[][]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc1643GetAllDocuments(params: CallParams<Arc1400Args['obj']['arc1643_get_all_documents()byte[][]'] | Arc1400Args['tuple']['arc1643_get_all_documents()byte[][]']> = {args: []}) {
    const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1643GetAllDocuments(params))
    return result.return as unknown as Arc1400Returns['arc1643_get_all_documents()byte[][]']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1400 smart contract using the `arc1594_is_issuable()bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc1594IsIssuable(params: CallParams<Arc1400Args['obj']['arc1594_is_issuable()bool'] | Arc1400Args['tuple']['arc1594_is_issuable()bool']> = {args: []}) {
    const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1594IsIssuable(params))
    return result.return as unknown as Arc1400Returns['arc1594_is_issuable()bool']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1400 smart contract using the `arc1410_balance_of_partition(address,address)uint256` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc1410BalanceOfPartition(params: CallParams<Arc1400Args['obj']['arc1410_balance_of_partition(address,address)uint256'] | Arc1400Args['tuple']['arc1410_balance_of_partition(address,address)uint256']>) {
    const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1410BalanceOfPartition(params))
    return result.return as unknown as Arc1400Returns['arc1410_balance_of_partition(address,address)uint256']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1400 smart contract using the `arc1410_is_operator(address,address,address)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc1410IsOperator(params: CallParams<Arc1400Args['obj']['arc1410_is_operator(address,address,address)bool'] | Arc1400Args['tuple']['arc1410_is_operator(address,address,address)bool']>) {
    const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1410IsOperator(params))
    return result.return as unknown as Arc1400Returns['arc1410_is_operator(address,address,address)bool']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1400 smart contract using the `arc1410_is_operator_by_portion(address,address,address)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc1410IsOperatorByPortion(params: CallParams<Arc1400Args['obj']['arc1410_is_operator_by_portion(address,address,address)bool'] | Arc1400Args['tuple']['arc1410_is_operator_by_portion(address,address,address)bool']>) {
    const result = await this.appClient.send.call(Arc1400ParamsFactory.arc1410IsOperatorByPortion(params))
    return result.return as unknown as Arc1400Returns['arc1410_is_operator_by_portion(address,address,address)bool']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1400 smart contract using the `arc200_name()byte[32]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the name of the token
   *
   * @param params The params for the smart contract call
   * @returns The call result: The name of the token
   */
  async arc200Name(params: CallParams<Arc1400Args['obj']['arc200_name()byte[32]'] | Arc1400Args['tuple']['arc200_name()byte[32]']> = {args: []}) {
    const result = await this.appClient.send.call(Arc1400ParamsFactory.arc200Name(params))
    return result.return as unknown as Arc1400Returns['arc200_name()byte[32]']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1400 smart contract using the `arc200_symbol()byte[8]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the symbol of the token
   *
   * @param params The params for the smart contract call
   * @returns The call result: The symbol of the token
   */
  async arc200Symbol(params: CallParams<Arc1400Args['obj']['arc200_symbol()byte[8]'] | Arc1400Args['tuple']['arc200_symbol()byte[8]']> = {args: []}) {
    const result = await this.appClient.send.call(Arc1400ParamsFactory.arc200Symbol(params))
    return result.return as unknown as Arc1400Returns['arc200_symbol()byte[8]']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1400 smart contract using the `arc200_decimals()uint8` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the decimals of the token
   *
   * @param params The params for the smart contract call
   * @returns The call result: The decimals of the token
   */
  async arc200Decimals(params: CallParams<Arc1400Args['obj']['arc200_decimals()uint8'] | Arc1400Args['tuple']['arc200_decimals()uint8']> = {args: []}) {
    const result = await this.appClient.send.call(Arc1400ParamsFactory.arc200Decimals(params))
    return result.return as unknown as Arc1400Returns['arc200_decimals()uint8']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1400 smart contract using the `arc200_totalSupply()uint256` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the total supply of the token
   *
   * @param params The params for the smart contract call
   * @returns The call result: The total supply of the token
   */
  async arc200TotalSupply(params: CallParams<Arc1400Args['obj']['arc200_totalSupply()uint256'] | Arc1400Args['tuple']['arc200_totalSupply()uint256']> = {args: []}) {
    const result = await this.appClient.send.call(Arc1400ParamsFactory.arc200TotalSupply(params))
    return result.return as unknown as Arc1400Returns['arc200_totalSupply()uint256']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1400 smart contract using the `arc200_balanceOf(address)uint256` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the current balance of the owner of the token
   *
   * @param params The params for the smart contract call
   * @returns The call result: The current balance of the holder of the token
   */
  async arc200BalanceOf(params: CallParams<Arc1400Args['obj']['arc200_balanceOf(address)uint256'] | Arc1400Args['tuple']['arc200_balanceOf(address)uint256']>) {
    const result = await this.appClient.send.call(Arc1400ParamsFactory.arc200BalanceOf(params))
    return result.return as unknown as Arc1400Returns['arc200_balanceOf(address)uint256']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1400 smart contract using the `arc200_allowance(address,address)uint256` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the current allowance of the spender of the tokens of the owner
   *
   * @param params The params for the smart contract call
   * @returns The call result: The remaining allowance
   */
  async arc200Allowance(params: CallParams<Arc1400Args['obj']['arc200_allowance(address,address)uint256'] | Arc1400Args['tuple']['arc200_allowance(address,address)uint256']>) {
    const result = await this.appClient.send.call(Arc1400ParamsFactory.arc200Allowance(params))
    return result.return as unknown as Arc1400Returns['arc200_allowance(address,address)uint256']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1400 smart contract using the `arc88_owner()address` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc88Owner(params: CallParams<Arc1400Args['obj']['arc88_owner()address'] | Arc1400Args['tuple']['arc88_owner()address']> = {args: []}) {
    const result = await this.appClient.send.call(Arc1400ParamsFactory.arc88Owner(params))
    return result.return as unknown as Arc1400Returns['arc88_owner()address']
  }

  /**
   * Makes a readonly (simulated) call to the Arc1400 smart contract using the `arc88_is_owner(address)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc88IsOwner(params: CallParams<Arc1400Args['obj']['arc88_is_owner(address)bool'] | Arc1400Args['tuple']['arc88_is_owner(address)bool']>) {
    const result = await this.appClient.send.call(Arc1400ParamsFactory.arc88IsOwner(params))
    return result.return as unknown as Arc1400Returns['arc88_is_owner(address)bool']
  }

  /**
   * Methods to access state for the current Arc1400 app
   */
  state = {
    /**
     * Methods to access global state for the current Arc1400 app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          arc1644Controller: result.arc1644_controller,
          arc1644Controllable: result.arc1644_controllable,
          arc1644RequireJustification: result.arc1644_requireJustification,
          arc1644LastControllerActionRound: result.arc1644_lastControllerActionRound,
          arc1644MinControllerActionInterval: result.arc1644_minControllerActionInterval,
          arc1594Issuable: result.arc1594_issuable,
          name: result.name,
          symbol: result.symbol,
          decimals: result.decimals,
          totalSupply: result.totalSupply,
          owner: result.owner,
          pendingOwner: result.pendingOwner,
          initialized: result.initialized,
        }
      },
      /**
       * Get the current value of the arc1644_controller key in global state
       */
      arc1644Controller: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("arc1644_controller")) as string | undefined },
      /**
       * Get the current value of the arc1644_controllable key in global state
       */
      arc1644Controllable: async (): Promise<boolean | undefined> => { return (await this.appClient.state.global.getValue("arc1644_controllable")) as boolean | undefined },
      /**
       * Get the current value of the arc1644_requireJustification key in global state
       */
      arc1644RequireJustification: async (): Promise<boolean | undefined> => { return (await this.appClient.state.global.getValue("arc1644_requireJustification")) as boolean | undefined },
      /**
       * Get the current value of the arc1644_lastControllerActionRound key in global state
       */
      arc1644LastControllerActionRound: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("arc1644_lastControllerActionRound")) as bigint | undefined },
      /**
       * Get the current value of the arc1644_minControllerActionInterval key in global state
       */
      arc1644MinControllerActionInterval: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("arc1644_minControllerActionInterval")) as bigint | undefined },
      /**
       * Get the current value of the arc1594_issuable key in global state
       */
      arc1594Issuable: async (): Promise<boolean | undefined> => { return (await this.appClient.state.global.getValue("arc1594_issuable")) as boolean | undefined },
      /**
       * Get the current value of the name key in global state
       */
      name: async (): Promise<Uint8Array | undefined> => { return (await this.appClient.state.global.getValue("name")) as Uint8Array | undefined },
      /**
       * Get the current value of the symbol key in global state
       */
      symbol: async (): Promise<Uint8Array | undefined> => { return (await this.appClient.state.global.getValue("symbol")) as Uint8Array | undefined },
      /**
       * Get the current value of the decimals key in global state
       */
      decimals: async (): Promise<number | undefined> => { return (await this.appClient.state.global.getValue("decimals")) as number | undefined },
      /**
       * Get the current value of the totalSupply key in global state
       */
      totalSupply: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalSupply")) as bigint | undefined },
      /**
       * Get the current value of the owner key in global state
       */
      owner: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("owner")) as string | undefined },
      /**
       * Get the current value of the pendingOwner key in global state
       */
      pendingOwner: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("pendingOwner")) as string | undefined },
      /**
       * Get the current value of the initialized key in global state
       */
      initialized: async (): Promise<number | undefined> => { return (await this.appClient.state.global.getValue("initialized")) as number | undefined },
    },
    /**
     * Methods to access box state for the current Arc1400 app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          documentKeys: result.documentKeys,
        }
      },
      /**
       * Get the current value of the documentKeys key in box state
       */
      documentKeys: async (): Promise<Uint8Array[] | undefined> => { return (await this.appClient.state.box.getValue("documentKeys")) as Uint8Array[] | undefined },
      /**
       * Get values from the documents map in box state
       */
      documents: {
        /**
         * Get all current values of the documents map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, Arc1643DocumentRecord>> => { return (await this.appClient.state.box.getMap("documents")) as Map<Uint8Array, Arc1643DocumentRecord> },
        /**
         * Get a current value of the documents map by key from box state
         */
        value: async (key: Uint8Array): Promise<Arc1643DocumentRecord | undefined> => { return await this.appClient.state.box.getMapValue("documents", key) as Arc1643DocumentRecord | undefined },
      },
      /**
       * Get values from the partitions map in box state
       */
      partitions: {
        /**
         * Get all current values of the partitions map in box state
         */
        getMap: async (): Promise<Map<Arc1410PartitionKey, bigint>> => { return (await this.appClient.state.box.getMap("partitions")) as Map<Arc1410PartitionKey, bigint> },
        /**
         * Get a current value of the partitions map by key from box state
         */
        value: async (key: Arc1410PartitionKey): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("partitions", key) as bigint | undefined },
      },
      /**
       * Get values from the holderPartitionsCurrentPage map in box state
       */
      holderPartitionsCurrentPage: {
        /**
         * Get all current values of the holderPartitionsCurrentPage map in box state
         */
        getMap: async (): Promise<Map<string, bigint>> => { return (await this.appClient.state.box.getMap("holderPartitionsCurrentPage")) as Map<string, bigint> },
        /**
         * Get a current value of the holderPartitionsCurrentPage map by key from box state
         */
        value: async (key: string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("holderPartitionsCurrentPage", key) as bigint | undefined },
      },
      /**
       * Get values from the holderPartitionsAddresses map in box state
       */
      holderPartitionsAddresses: {
        /**
         * Get all current values of the holderPartitionsAddresses map in box state
         */
        getMap: async (): Promise<Map<Arc1410HoldingPartitionsPaginatedKey, string[]>> => { return (await this.appClient.state.box.getMap("holderPartitionsAddresses")) as Map<Arc1410HoldingPartitionsPaginatedKey, string[]> },
        /**
         * Get a current value of the holderPartitionsAddresses map by key from box state
         */
        value: async (key: Arc1410HoldingPartitionsPaginatedKey): Promise<string[] | undefined> => { return await this.appClient.state.box.getMapValue("holderPartitionsAddresses", key) as string[] | undefined },
      },
      /**
       * Get values from the operators map in box state
       */
      operators: {
        /**
         * Get all current values of the operators map in box state
         */
        getMap: async (): Promise<Map<Arc1410OperatorKey, number>> => { return (await this.appClient.state.box.getMap("operators")) as Map<Arc1410OperatorKey, number> },
        /**
         * Get a current value of the operators map by key from box state
         */
        value: async (key: Arc1410OperatorKey): Promise<number | undefined> => { return await this.appClient.state.box.getMapValue("operators", key) as number | undefined },
      },
      /**
       * Get values from the operatorPortionAllowances map in box state
       */
      operatorPortionAllowances: {
        /**
         * Get all current values of the operatorPortionAllowances map in box state
         */
        getMap: async (): Promise<Map<Arc1410OperatorPortionKey, bigint>> => { return (await this.appClient.state.box.getMap("operatorPortionAllowances")) as Map<Arc1410OperatorPortionKey, bigint> },
        /**
         * Get a current value of the operatorPortionAllowances map by key from box state
         */
        value: async (key: Arc1410OperatorPortionKey): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("operatorPortionAllowances", key) as bigint | undefined },
      },
      /**
       * Get values from the balances map in box state
       */
      balances: {
        /**
         * Get all current values of the balances map in box state
         */
        getMap: async (): Promise<Map<string, bigint>> => { return (await this.appClient.state.box.getMap("balances")) as Map<string, bigint> },
        /**
         * Get a current value of the balances map by key from box state
         */
        value: async (key: string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("balances", key) as bigint | undefined },
      },
      /**
       * Get values from the approvals map in box state
       */
      approvals: {
        /**
         * Get all current values of the approvals map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, ApprovalStruct>> => { return (await this.appClient.state.box.getMap("approvals")) as Map<Uint8Array, ApprovalStruct> },
        /**
         * Get a current value of the approvals map by key from box state
         */
        value: async (key: Uint8Array): Promise<ApprovalStruct | undefined> => { return await this.appClient.state.box.getMapValue("approvals", key) as ApprovalStruct | undefined },
      },
    },
  }

  public newGroup(): Arc1400Composer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a bootstrap(byte[],byte[],uint8,uint256)bool method call against the Arc1400 contract
       */
      bootstrap(params: CallParams<Arc1400Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool'] | Arc1400Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrap(params)))
        resultMappers.push((v) => client.decodeReturnValue('bootstrap(byte[],byte[],uint8,uint256)bool', v))
        return this
      },
      /**
       * Add a bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool method call against the Arc1400 contract
       */
      bootstrap1400(params: CallParams<Arc1400Args['obj']['bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool'] | Arc1400Args['tuple']['bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrap1400(params)))
        resultMappers.push((v) => client.decodeReturnValue('bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool', v))
        return this
      },
      /**
       * Add a arc1644_set_controller(address)void method call against the Arc1400 contract
       */
      arc1644SetController(params: CallParams<Arc1400Args['obj']['arc1644_set_controller(address)void'] | Arc1400Args['tuple']['arc1644_set_controller(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1644SetController(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1644_set_controllable(bool)void method call against the Arc1400 contract
       */
      arc1644SetControllable(params: CallParams<Arc1400Args['obj']['arc1644_set_controllable(bool)void'] | Arc1400Args['tuple']['arc1644_set_controllable(bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1644SetControllable(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1644_set_require_justification(bool)void method call against the Arc1400 contract
       */
      arc1644SetRequireJustification(params: CallParams<Arc1400Args['obj']['arc1644_set_require_justification(bool)void'] | Arc1400Args['tuple']['arc1644_set_require_justification(bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1644SetRequireJustification(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1644_set_min_action_interval(uint64)void method call against the Arc1400 contract
       */
      arc1644SetMinActionInterval(params: CallParams<Arc1400Args['obj']['arc1644_set_min_action_interval(uint64)void'] | Arc1400Args['tuple']['arc1644_set_min_action_interval(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1644SetMinActionInterval(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1644_is_controllable()uint64 method call against the Arc1400 contract
       */
      arc1644IsControllable(params: CallParams<Arc1400Args['obj']['arc1644_is_controllable()uint64'] | Arc1400Args['tuple']['arc1644_is_controllable()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1644IsControllable(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1644_is_controllable()uint64', v))
        return this
      },
      /**
       * Add a arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64 method call against the Arc1400 contract
       */
      arc1644ControllerTransfer(params: CallParams<Arc1400Args['obj']['arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64'] | Arc1400Args['tuple']['arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1644ControllerTransfer(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64', v))
        return this
      },
      /**
       * Add a arc1644_controller_redeem(address,uint256,byte[])uint64 method call against the Arc1400 contract
       */
      arc1644ControllerRedeem(params: CallParams<Arc1400Args['obj']['arc1644_controller_redeem(address,uint256,byte[])uint64'] | Arc1400Args['tuple']['arc1644_controller_redeem(address,uint256,byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1644ControllerRedeem(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1644_controller_redeem(address,uint256,byte[])uint64', v))
        return this
      },
      /**
       * Add a arc1643_set_document(byte[],string,byte[])void method call against the Arc1400 contract
       */
      arc1643SetDocument(params: CallParams<Arc1400Args['obj']['arc1643_set_document(byte[],string,byte[])void'] | Arc1400Args['tuple']['arc1643_set_document(byte[],string,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1643SetDocument(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1643_get_document(byte[])(string,byte[],uint64) method call against the Arc1400 contract
       */
      arc1643GetDocument(params: CallParams<Arc1400Args['obj']['arc1643_get_document(byte[])(string,byte[],uint64)'] | Arc1400Args['tuple']['arc1643_get_document(byte[])(string,byte[],uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1643GetDocument(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1643_get_document(byte[])(string,byte[],uint64)', v))
        return this
      },
      /**
       * Add a arc1643_remove_document(byte[])void method call against the Arc1400 contract
       */
      arc1643RemoveDocument(params: CallParams<Arc1400Args['obj']['arc1643_remove_document(byte[])void'] | Arc1400Args['tuple']['arc1643_remove_document(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1643RemoveDocument(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1643_get_all_documents()byte[][] method call against the Arc1400 contract
       */
      arc1643GetAllDocuments(params: CallParams<Arc1400Args['obj']['arc1643_get_all_documents()byte[][]'] | Arc1400Args['tuple']['arc1643_get_all_documents()byte[][]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1643GetAllDocuments(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1643_get_all_documents()byte[][]', v))
        return this
      },
      /**
       * Add a arc1594_set_issuable(bool)void method call against the Arc1400 contract
       */
      arc1594SetIssuable(params: CallParams<Arc1400Args['obj']['arc1594_set_issuable(bool)void'] | Arc1400Args['tuple']['arc1594_set_issuable(bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1594SetIssuable(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1594_issue(address,uint256,byte[])void method call against the Arc1400 contract
       */
      arc1594Issue(params: CallParams<Arc1400Args['obj']['arc1594_issue(address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1594_issue(address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1594Issue(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1594_redeemFrom(address,uint256,byte[])void method call against the Arc1400 contract
       */
      arc1594RedeemFrom(params: CallParams<Arc1400Args['obj']['arc1594_redeemFrom(address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1594_redeemFrom(address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1594RedeemFrom(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1594_redeem(uint256,byte[])void method call against the Arc1400 contract
       */
      arc1594Redeem(params: CallParams<Arc1400Args['obj']['arc1594_redeem(uint256,byte[])void'] | Arc1400Args['tuple']['arc1594_redeem(uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1594Redeem(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1594_transfer_with_data(address,uint256,byte[])bool method call against the Arc1400 contract
       */
      arc1594TransferWithData(params: CallParams<Arc1400Args['obj']['arc1594_transfer_with_data(address,uint256,byte[])bool'] | Arc1400Args['tuple']['arc1594_transfer_with_data(address,uint256,byte[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1594TransferWithData(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1594_transfer_with_data(address,uint256,byte[])bool', v))
        return this
      },
      /**
       * Add a arc1594_transfer_from_with_data(address,address,uint256,byte[])bool method call against the Arc1400 contract
       */
      arc1594TransferFromWithData(params: CallParams<Arc1400Args['obj']['arc1594_transfer_from_with_data(address,address,uint256,byte[])bool'] | Arc1400Args['tuple']['arc1594_transfer_from_with_data(address,address,uint256,byte[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1594TransferFromWithData(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1594_transfer_from_with_data(address,address,uint256,byte[])bool', v))
        return this
      },
      /**
       * Add a arc1594_is_issuable()bool method call against the Arc1400 contract
       */
      arc1594IsIssuable(params: CallParams<Arc1400Args['obj']['arc1594_is_issuable()bool'] | Arc1400Args['tuple']['arc1594_is_issuable()bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1594IsIssuable(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1594_is_issuable()bool', v))
        return this
      },
      /**
       * Add a arc1410_balance_of_partition(address,address)uint256 method call against the Arc1400 contract
       */
      arc1410BalanceOfPartition(params: CallParams<Arc1400Args['obj']['arc1410_balance_of_partition(address,address)uint256'] | Arc1400Args['tuple']['arc1410_balance_of_partition(address,address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410BalanceOfPartition(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1410_balance_of_partition(address,address)uint256', v))
        return this
      },
      /**
       * Add a arc200_transfer(address,uint256)bool method call against the Arc1400 contract
       */
      arc200Transfer(params: CallParams<Arc1400Args['obj']['arc200_transfer(address,uint256)bool'] | Arc1400Args['tuple']['arc200_transfer(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Transfer(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_transfer(address,uint256)bool', v))
        return this
      },
      /**
       * Add a arc1410_transfer_by_partition(address,address,uint256,byte[])address method call against the Arc1400 contract
       */
      arc1410TransferByPartition(params: CallParams<Arc1400Args['obj']['arc1410_transfer_by_partition(address,address,uint256,byte[])address'] | Arc1400Args['tuple']['arc1410_transfer_by_partition(address,address,uint256,byte[])address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410TransferByPartition(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1410_transfer_by_partition(address,address,uint256,byte[])address', v))
        return this
      },
      /**
       * Add a arc1410_partitions_of(address,uint64)address[] method call against the Arc1400 contract
       */
      arc1410PartitionsOf(params: CallParams<Arc1400Args['obj']['arc1410_partitions_of(address,uint64)address[]'] | Arc1400Args['tuple']['arc1410_partitions_of(address,uint64)address[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410PartitionsOf(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1410_partitions_of(address,uint64)address[]', v))
        return this
      },
      /**
       * Add a arc1410_is_operator(address,address,address)bool method call against the Arc1400 contract
       */
      arc1410IsOperator(params: CallParams<Arc1400Args['obj']['arc1410_is_operator(address,address,address)bool'] | Arc1400Args['tuple']['arc1410_is_operator(address,address,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410IsOperator(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1410_is_operator(address,address,address)bool', v))
        return this
      },
      /**
       * Add a arc1410_authorize_operator(address,address,address)void method call against the Arc1400 contract
       */
      arc1410AuthorizeOperator(params: CallParams<Arc1400Args['obj']['arc1410_authorize_operator(address,address,address)void'] | Arc1400Args['tuple']['arc1410_authorize_operator(address,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410AuthorizeOperator(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1410_revoke_operator(address,address,address)void method call against the Arc1400 contract
       */
      arc1410RevokeOperator(params: CallParams<Arc1400Args['obj']['arc1410_revoke_operator(address,address,address)void'] | Arc1400Args['tuple']['arc1410_revoke_operator(address,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410RevokeOperator(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address method call against the Arc1400 contract
       */
      arc1410OperatorTransferByPartition(params: CallParams<Arc1400Args['obj']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address'] | Arc1400Args['tuple']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410OperatorTransferByPartition(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address', v))
        return this
      },
      /**
       * Add a arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address) method call against the Arc1400 contract
       */
      arc1410CanTransferByPartition(params: CallParams<Arc1400Args['obj']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)'] | Arc1400Args['tuple']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410CanTransferByPartition(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)', v))
        return this
      },
      /**
       * Add a arc1410_authorize_operator_by_portion(address,address,address,uint256)void method call against the Arc1400 contract
       */
      arc1410AuthorizeOperatorByPortion(params: CallParams<Arc1400Args['obj']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void'] | Arc1400Args['tuple']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410AuthorizeOperatorByPortion(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1410_is_operator_by_portion(address,address,address)bool method call against the Arc1400 contract
       */
      arc1410IsOperatorByPortion(params: CallParams<Arc1400Args['obj']['arc1410_is_operator_by_portion(address,address,address)bool'] | Arc1400Args['tuple']['arc1410_is_operator_by_portion(address,address,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410IsOperatorByPortion(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc1410_is_operator_by_portion(address,address,address)bool', v))
        return this
      },
      /**
       * Add a arc1410_issue_by_partition(address,address,uint256,byte[])void method call against the Arc1400 contract
       */
      arc1410IssueByPartition(params: CallParams<Arc1400Args['obj']['arc1410_issue_by_partition(address,address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1410_issue_by_partition(address,address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410IssueByPartition(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1410_redeem_by_partition(address,uint256,byte[])void method call against the Arc1400 contract
       */
      arc1410RedeemByPartition(params: CallParams<Arc1400Args['obj']['arc1410_redeem_by_partition(address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1410_redeem_by_partition(address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410RedeemByPartition(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void method call against the Arc1400 contract
       */
      arc1410OperatorRedeemByPartition(params: CallParams<Arc1400Args['obj']['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1410OperatorRedeemByPartition(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc200_name()byte[32] method call against the Arc1400 contract
       */
      arc200Name(params: CallParams<Arc1400Args['obj']['arc200_name()byte[32]'] | Arc1400Args['tuple']['arc200_name()byte[32]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Name(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_name()byte[32]', v))
        return this
      },
      /**
       * Add a arc200_symbol()byte[8] method call against the Arc1400 contract
       */
      arc200Symbol(params: CallParams<Arc1400Args['obj']['arc200_symbol()byte[8]'] | Arc1400Args['tuple']['arc200_symbol()byte[8]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Symbol(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_symbol()byte[8]', v))
        return this
      },
      /**
       * Add a arc200_decimals()uint8 method call against the Arc1400 contract
       */
      arc200Decimals(params: CallParams<Arc1400Args['obj']['arc200_decimals()uint8'] | Arc1400Args['tuple']['arc200_decimals()uint8']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Decimals(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_decimals()uint8', v))
        return this
      },
      /**
       * Add a arc200_totalSupply()uint256 method call against the Arc1400 contract
       */
      arc200TotalSupply(params: CallParams<Arc1400Args['obj']['arc200_totalSupply()uint256'] | Arc1400Args['tuple']['arc200_totalSupply()uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200TotalSupply(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_totalSupply()uint256', v))
        return this
      },
      /**
       * Add a arc200_balanceOf(address)uint256 method call against the Arc1400 contract
       */
      arc200BalanceOf(params: CallParams<Arc1400Args['obj']['arc200_balanceOf(address)uint256'] | Arc1400Args['tuple']['arc200_balanceOf(address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200BalanceOf(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_balanceOf(address)uint256', v))
        return this
      },
      /**
       * Add a arc200_transferFrom(address,address,uint256)bool method call against the Arc1400 contract
       */
      arc200TransferFrom(params: CallParams<Arc1400Args['obj']['arc200_transferFrom(address,address,uint256)bool'] | Arc1400Args['tuple']['arc200_transferFrom(address,address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200TransferFrom(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_transferFrom(address,address,uint256)bool', v))
        return this
      },
      /**
       * Add a arc200_approve(address,uint256)bool method call against the Arc1400 contract
       */
      arc200Approve(params: CallParams<Arc1400Args['obj']['arc200_approve(address,uint256)bool'] | Arc1400Args['tuple']['arc200_approve(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Approve(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_approve(address,uint256)bool', v))
        return this
      },
      /**
       * Add a arc200_allowance(address,address)uint256 method call against the Arc1400 contract
       */
      arc200Allowance(params: CallParams<Arc1400Args['obj']['arc200_allowance(address,address)uint256'] | Arc1400Args['tuple']['arc200_allowance(address,address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Allowance(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_allowance(address,address)uint256', v))
        return this
      },
      /**
       * Add a arc88_owner()address method call against the Arc1400 contract
       */
      arc88Owner(params: CallParams<Arc1400Args['obj']['arc88_owner()address'] | Arc1400Args['tuple']['arc88_owner()address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88Owner(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc88_owner()address', v))
        return this
      },
      /**
       * Add a arc88_is_owner(address)bool method call against the Arc1400 contract
       */
      arc88IsOwner(params: CallParams<Arc1400Args['obj']['arc88_is_owner(address)bool'] | Arc1400Args['tuple']['arc88_is_owner(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88IsOwner(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc88_is_owner(address)bool', v))
        return this
      },
      /**
       * Add a arc88_initialize_owner(address)void method call against the Arc1400 contract
       */
      arc88InitializeOwner(params: CallParams<Arc1400Args['obj']['arc88_initialize_owner(address)void'] | Arc1400Args['tuple']['arc88_initialize_owner(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88InitializeOwner(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc88_transfer_ownership(address)void method call against the Arc1400 contract
       */
      arc88TransferOwnership(params: CallParams<Arc1400Args['obj']['arc88_transfer_ownership(address)void'] | Arc1400Args['tuple']['arc88_transfer_ownership(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88TransferOwnership(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc88_renounce_ownership()void method call against the Arc1400 contract
       */
      arc88RenounceOwnership(params: CallParams<Arc1400Args['obj']['arc88_renounce_ownership()void'] | Arc1400Args['tuple']['arc88_renounce_ownership()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88RenounceOwnership(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc88_transfer_ownership_request(address)void method call against the Arc1400 contract
       */
      arc88TransferOwnershipRequest(params: CallParams<Arc1400Args['obj']['arc88_transfer_ownership_request(address)void'] | Arc1400Args['tuple']['arc88_transfer_ownership_request(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88TransferOwnershipRequest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc88_accept_ownership()void method call against the Arc1400 contract
       */
      arc88AcceptOwnership(params: CallParams<Arc1400Args['obj']['arc88_accept_ownership()void'] | Arc1400Args['tuple']['arc88_accept_ownership()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88AcceptOwnership(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc88_cancel_ownership_request()void method call against the Arc1400 contract
       */
      arc88CancelOwnershipRequest(params: CallParams<Arc1400Args['obj']['arc88_cancel_ownership_request()void'] | Arc1400Args['tuple']['arc88_cancel_ownership_request()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc88CancelOwnershipRequest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the Arc1400 contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as Arc1400Composer
  }
}
export type Arc1400Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap(byte[],byte[],uint8,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(params?: CallParams<Arc1400Args['obj']['bootstrap(byte[],byte[],uint8,uint256)bool'] | Arc1400Args['tuple']['bootstrap(byte[],byte[],uint8,uint256)bool']>): Arc1400Composer<[...TReturns, Arc1400Returns['bootstrap(byte[],byte[],uint8,uint256)bool'] | undefined]>

  /**
   * Calls the bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap1400(params?: CallParams<Arc1400Args['obj']['bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool'] | Arc1400Args['tuple']['bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool']>): Arc1400Composer<[...TReturns, Arc1400Returns['bootstrap1400(byte[],byte[],uint8,uint256,address,address,bool,bool,uint64)bool'] | undefined]>

  /**
   * Calls the arc1644_set_controller(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1644SetController(params?: CallParams<Arc1400Args['obj']['arc1644_set_controller(address)void'] | Arc1400Args['tuple']['arc1644_set_controller(address)void']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1644_set_controller(address)void'] | undefined]>

  /**
   * Calls the arc1644_set_controllable(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1644SetControllable(params?: CallParams<Arc1400Args['obj']['arc1644_set_controllable(bool)void'] | Arc1400Args['tuple']['arc1644_set_controllable(bool)void']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1644_set_controllable(bool)void'] | undefined]>

  /**
   * Calls the arc1644_set_require_justification(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1644SetRequireJustification(params?: CallParams<Arc1400Args['obj']['arc1644_set_require_justification(bool)void'] | Arc1400Args['tuple']['arc1644_set_require_justification(bool)void']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1644_set_require_justification(bool)void'] | undefined]>

  /**
   * Calls the arc1644_set_min_action_interval(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1644SetMinActionInterval(params?: CallParams<Arc1400Args['obj']['arc1644_set_min_action_interval(uint64)void'] | Arc1400Args['tuple']['arc1644_set_min_action_interval(uint64)void']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1644_set_min_action_interval(uint64)void'] | undefined]>

  /**
   * Calls the arc1644_is_controllable()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1644IsControllable(params?: CallParams<Arc1400Args['obj']['arc1644_is_controllable()uint64'] | Arc1400Args['tuple']['arc1644_is_controllable()uint64']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1644_is_controllable()uint64'] | undefined]>

  /**
   * Calls the arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1644ControllerTransfer(params?: CallParams<Arc1400Args['obj']['arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64'] | Arc1400Args['tuple']['arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1644_controller_transfer(address,address,uint256,byte[],byte[])uint64'] | undefined]>

  /**
   * Calls the arc1644_controller_redeem(address,uint256,byte[])uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1644ControllerRedeem(params?: CallParams<Arc1400Args['obj']['arc1644_controller_redeem(address,uint256,byte[])uint64'] | Arc1400Args['tuple']['arc1644_controller_redeem(address,uint256,byte[])uint64']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1644_controller_redeem(address,uint256,byte[])uint64'] | undefined]>

  /**
   * Calls the arc1643_set_document(byte[],string,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1643SetDocument(params?: CallParams<Arc1400Args['obj']['arc1643_set_document(byte[],string,byte[])void'] | Arc1400Args['tuple']['arc1643_set_document(byte[],string,byte[])void']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1643_set_document(byte[],string,byte[])void'] | undefined]>

  /**
   * Calls the arc1643_get_document(byte[])(string,byte[],uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1643GetDocument(params?: CallParams<Arc1400Args['obj']['arc1643_get_document(byte[])(string,byte[],uint64)'] | Arc1400Args['tuple']['arc1643_get_document(byte[])(string,byte[],uint64)']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1643_get_document(byte[])(string,byte[],uint64)'] | undefined]>

  /**
   * Calls the arc1643_remove_document(byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1643RemoveDocument(params?: CallParams<Arc1400Args['obj']['arc1643_remove_document(byte[])void'] | Arc1400Args['tuple']['arc1643_remove_document(byte[])void']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1643_remove_document(byte[])void'] | undefined]>

  /**
   * Calls the arc1643_get_all_documents()byte[][] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1643GetAllDocuments(params?: CallParams<Arc1400Args['obj']['arc1643_get_all_documents()byte[][]'] | Arc1400Args['tuple']['arc1643_get_all_documents()byte[][]']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1643_get_all_documents()byte[][]'] | undefined]>

  /**
   * Calls the arc1594_set_issuable(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1594SetIssuable(params?: CallParams<Arc1400Args['obj']['arc1594_set_issuable(bool)void'] | Arc1400Args['tuple']['arc1594_set_issuable(bool)void']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1594_set_issuable(bool)void'] | undefined]>

  /**
   * Calls the arc1594_issue(address,uint256,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1594Issue(params?: CallParams<Arc1400Args['obj']['arc1594_issue(address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1594_issue(address,uint256,byte[])void']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1594_issue(address,uint256,byte[])void'] | undefined]>

  /**
   * Calls the arc1594_redeemFrom(address,uint256,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1594RedeemFrom(params?: CallParams<Arc1400Args['obj']['arc1594_redeemFrom(address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1594_redeemFrom(address,uint256,byte[])void']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1594_redeemFrom(address,uint256,byte[])void'] | undefined]>

  /**
   * Calls the arc1594_redeem(uint256,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1594Redeem(params?: CallParams<Arc1400Args['obj']['arc1594_redeem(uint256,byte[])void'] | Arc1400Args['tuple']['arc1594_redeem(uint256,byte[])void']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1594_redeem(uint256,byte[])void'] | undefined]>

  /**
   * Calls the arc1594_transfer_with_data(address,uint256,byte[])bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1594TransferWithData(params?: CallParams<Arc1400Args['obj']['arc1594_transfer_with_data(address,uint256,byte[])bool'] | Arc1400Args['tuple']['arc1594_transfer_with_data(address,uint256,byte[])bool']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1594_transfer_with_data(address,uint256,byte[])bool'] | undefined]>

  /**
   * Calls the arc1594_transfer_from_with_data(address,address,uint256,byte[])bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1594TransferFromWithData(params?: CallParams<Arc1400Args['obj']['arc1594_transfer_from_with_data(address,address,uint256,byte[])bool'] | Arc1400Args['tuple']['arc1594_transfer_from_with_data(address,address,uint256,byte[])bool']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1594_transfer_from_with_data(address,address,uint256,byte[])bool'] | undefined]>

  /**
   * Calls the arc1594_is_issuable()bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1594IsIssuable(params?: CallParams<Arc1400Args['obj']['arc1594_is_issuable()bool'] | Arc1400Args['tuple']['arc1594_is_issuable()bool']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1594_is_issuable()bool'] | undefined]>

  /**
   * Calls the arc1410_balance_of_partition(address,address)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410BalanceOfPartition(params?: CallParams<Arc1400Args['obj']['arc1410_balance_of_partition(address,address)uint256'] | Arc1400Args['tuple']['arc1410_balance_of_partition(address,address)uint256']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1410_balance_of_partition(address,address)uint256'] | undefined]>

  /**
   * Calls the arc200_transfer(address,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Transfer(params?: CallParams<Arc1400Args['obj']['arc200_transfer(address,uint256)bool'] | Arc1400Args['tuple']['arc200_transfer(address,uint256)bool']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc200_transfer(address,uint256)bool'] | undefined]>

  /**
   * Calls the arc1410_transfer_by_partition(address,address,uint256,byte[])address ABI method.
   *
   * Transfer an amount of tokens from partition to receiver. Sender must be msg.sender or authorized operator.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410TransferByPartition(params?: CallParams<Arc1400Args['obj']['arc1410_transfer_by_partition(address,address,uint256,byte[])address'] | Arc1400Args['tuple']['arc1410_transfer_by_partition(address,address,uint256,byte[])address']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1410_transfer_by_partition(address,address,uint256,byte[])address'] | undefined]>

  /**
   * Calls the arc1410_partitions_of(address,uint64)address[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410PartitionsOf(params?: CallParams<Arc1400Args['obj']['arc1410_partitions_of(address,uint64)address[]'] | Arc1400Args['tuple']['arc1410_partitions_of(address,uint64)address[]']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1410_partitions_of(address,uint64)address[]'] | undefined]>

  /**
   * Calls the arc1410_is_operator(address,address,address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410IsOperator(params?: CallParams<Arc1400Args['obj']['arc1410_is_operator(address,address,address)bool'] | Arc1400Args['tuple']['arc1410_is_operator(address,address,address)bool']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1410_is_operator(address,address,address)bool'] | undefined]>

  /**
   * Calls the arc1410_authorize_operator(address,address,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410AuthorizeOperator(params?: CallParams<Arc1400Args['obj']['arc1410_authorize_operator(address,address,address)void'] | Arc1400Args['tuple']['arc1410_authorize_operator(address,address,address)void']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1410_authorize_operator(address,address,address)void'] | undefined]>

  /**
   * Calls the arc1410_revoke_operator(address,address,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410RevokeOperator(params?: CallParams<Arc1400Args['obj']['arc1410_revoke_operator(address,address,address)void'] | Arc1400Args['tuple']['arc1410_revoke_operator(address,address,address)void']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1410_revoke_operator(address,address,address)void'] | undefined]>

  /**
   * Calls the arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410OperatorTransferByPartition(params?: CallParams<Arc1400Args['obj']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address'] | Arc1400Args['tuple']['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address'] | undefined]>

  /**
   * Calls the arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410CanTransferByPartition(params?: CallParams<Arc1400Args['obj']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)'] | Arc1400Args['tuple']['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)'] | undefined]>

  /**
   * Calls the arc1410_authorize_operator_by_portion(address,address,address,uint256)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410AuthorizeOperatorByPortion(params?: CallParams<Arc1400Args['obj']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void'] | Arc1400Args['tuple']['arc1410_authorize_operator_by_portion(address,address,address,uint256)void']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1410_authorize_operator_by_portion(address,address,address,uint256)void'] | undefined]>

  /**
   * Calls the arc1410_is_operator_by_portion(address,address,address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410IsOperatorByPortion(params?: CallParams<Arc1400Args['obj']['arc1410_is_operator_by_portion(address,address,address)bool'] | Arc1400Args['tuple']['arc1410_is_operator_by_portion(address,address,address)bool']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1410_is_operator_by_portion(address,address,address)bool'] | undefined]>

  /**
   * Calls the arc1410_issue_by_partition(address,address,uint256,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410IssueByPartition(params?: CallParams<Arc1400Args['obj']['arc1410_issue_by_partition(address,address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1410_issue_by_partition(address,address,uint256,byte[])void']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1410_issue_by_partition(address,address,uint256,byte[])void'] | undefined]>

  /**
   * Calls the arc1410_redeem_by_partition(address,uint256,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410RedeemByPartition(params?: CallParams<Arc1400Args['obj']['arc1410_redeem_by_partition(address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1410_redeem_by_partition(address,uint256,byte[])void']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1410_redeem_by_partition(address,uint256,byte[])void'] | undefined]>

  /**
   * Calls the arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1410OperatorRedeemByPartition(params?: CallParams<Arc1400Args['obj']['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void'] | Arc1400Args['tuple']['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void'] | undefined]>

  /**
   * Calls the arc200_name()byte[32] ABI method.
   *
   * Returns the name of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Name(params?: CallParams<Arc1400Args['obj']['arc200_name()byte[32]'] | Arc1400Args['tuple']['arc200_name()byte[32]']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc200_name()byte[32]'] | undefined]>

  /**
   * Calls the arc200_symbol()byte[8] ABI method.
   *
   * Returns the symbol of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Symbol(params?: CallParams<Arc1400Args['obj']['arc200_symbol()byte[8]'] | Arc1400Args['tuple']['arc200_symbol()byte[8]']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc200_symbol()byte[8]'] | undefined]>

  /**
   * Calls the arc200_decimals()uint8 ABI method.
   *
   * Returns the decimals of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Decimals(params?: CallParams<Arc1400Args['obj']['arc200_decimals()uint8'] | Arc1400Args['tuple']['arc200_decimals()uint8']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc200_decimals()uint8'] | undefined]>

  /**
   * Calls the arc200_totalSupply()uint256 ABI method.
   *
   * Returns the total supply of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200TotalSupply(params?: CallParams<Arc1400Args['obj']['arc200_totalSupply()uint256'] | Arc1400Args['tuple']['arc200_totalSupply()uint256']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc200_totalSupply()uint256'] | undefined]>

  /**
   * Calls the arc200_balanceOf(address)uint256 ABI method.
   *
   * Returns the current balance of the owner of the token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200BalanceOf(params?: CallParams<Arc1400Args['obj']['arc200_balanceOf(address)uint256'] | Arc1400Args['tuple']['arc200_balanceOf(address)uint256']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc200_balanceOf(address)uint256'] | undefined]>

  /**
   * Calls the arc200_transferFrom(address,address,uint256)bool ABI method.
   *
   * Transfers tokens from source to destination as approved spender
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200TransferFrom(params?: CallParams<Arc1400Args['obj']['arc200_transferFrom(address,address,uint256)bool'] | Arc1400Args['tuple']['arc200_transferFrom(address,address,uint256)bool']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc200_transferFrom(address,address,uint256)bool'] | undefined]>

  /**
   * Calls the arc200_approve(address,uint256)bool ABI method.
   *
   * Approve spender for a token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Approve(params?: CallParams<Arc1400Args['obj']['arc200_approve(address,uint256)bool'] | Arc1400Args['tuple']['arc200_approve(address,uint256)bool']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc200_approve(address,uint256)bool'] | undefined]>

  /**
   * Calls the arc200_allowance(address,address)uint256 ABI method.
   *
   * Returns the current allowance of the spender of the tokens of the owner
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Allowance(params?: CallParams<Arc1400Args['obj']['arc200_allowance(address,address)uint256'] | Arc1400Args['tuple']['arc200_allowance(address,address)uint256']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc200_allowance(address,address)uint256'] | undefined]>

  /**
   * Calls the arc88_owner()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88Owner(params?: CallParams<Arc1400Args['obj']['arc88_owner()address'] | Arc1400Args['tuple']['arc88_owner()address']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc88_owner()address'] | undefined]>

  /**
   * Calls the arc88_is_owner(address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88IsOwner(params?: CallParams<Arc1400Args['obj']['arc88_is_owner(address)bool'] | Arc1400Args['tuple']['arc88_is_owner(address)bool']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc88_is_owner(address)bool'] | undefined]>

  /**
   * Calls the arc88_initialize_owner(address)void ABI method.
   *
   * Explicit initialization override (creation group recommended). Fails if already initialized.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88InitializeOwner(params?: CallParams<Arc1400Args['obj']['arc88_initialize_owner(address)void'] | Arc1400Args['tuple']['arc88_initialize_owner(address)void']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc88_initialize_owner(address)void'] | undefined]>

  /**
   * Calls the arc88_transfer_ownership(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88TransferOwnership(params?: CallParams<Arc1400Args['obj']['arc88_transfer_ownership(address)void'] | Arc1400Args['tuple']['arc88_transfer_ownership(address)void']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc88_transfer_ownership(address)void'] | undefined]>

  /**
   * Calls the arc88_renounce_ownership()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88RenounceOwnership(params?: CallParams<Arc1400Args['obj']['arc88_renounce_ownership()void'] | Arc1400Args['tuple']['arc88_renounce_ownership()void']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc88_renounce_ownership()void'] | undefined]>

  /**
   * Calls the arc88_transfer_ownership_request(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88TransferOwnershipRequest(params?: CallParams<Arc1400Args['obj']['arc88_transfer_ownership_request(address)void'] | Arc1400Args['tuple']['arc88_transfer_ownership_request(address)void']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc88_transfer_ownership_request(address)void'] | undefined]>

  /**
   * Calls the arc88_accept_ownership()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88AcceptOwnership(params?: CallParams<Arc1400Args['obj']['arc88_accept_ownership()void'] | Arc1400Args['tuple']['arc88_accept_ownership()void']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc88_accept_ownership()void'] | undefined]>

  /**
   * Calls the arc88_cancel_ownership_request()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc88CancelOwnershipRequest(params?: CallParams<Arc1400Args['obj']['arc88_cancel_ownership_request()void'] | Arc1400Args['tuple']['arc88_cancel_ownership_request()void']>): Arc1400Composer<[...TReturns, Arc1400Returns['arc88_cancel_ownership_request()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Arc1400 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Arc1400Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Arc1400Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Arc1400ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<Arc1400ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<Arc1400ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Arc1400ComposerResults<TReturns>>
}
export type Arc1400ComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

