{
    "hints": {
        "arc88_owner()address": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc88_is_owner(address)bool": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc88_initialize_owner(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc88_transfer_ownership(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc88_renounce_ownership()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc88_transfer_ownership_request(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc88_accept_ownership()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc88_cancel_ownership_request()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "initialized": {
                    "type": "bytes",
                    "key": "arc88_oi"
                },
                "owner": {
                    "type": "bytes",
                    "key": "arc88_o"
                },
                "pendingOwner": {
                    "type": "bytes",
                    "key": "arc88_po"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Arc88",
        "desc": "ARC-88 Ownable Access Control\nDefault owner = application creator unless overridden by arc88_initialize_owner in creation group.",
        "methods": [
            {
                "name": "arc88_owner",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "address"
                }
            },
            {
                "name": "arc88_is_owner",
                "args": [
                    {
                        "type": "address",
                        "name": "query"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "arc88_initialize_owner",
                "args": [
                    {
                        "type": "address",
                        "name": "new_owner"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Explicit initialization override (creation group recommended). Fails if already initialized."
            },
            {
                "name": "arc88_transfer_ownership",
                "args": [
                    {
                        "type": "address",
                        "name": "new_owner"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc88_renounce_ownership",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc88_transfer_ownership_request",
                "args": [
                    {
                        "type": "address",
                        "name": "pending"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc88_accept_ownership",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc88_cancel_ownership_request",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}