{
  "version": 3,
  "sources": [
    "C:/Users/scholtz/source/repos/scholtz/arc-1400/projects/arc-1400/smart_contracts/security_token/arc1643.algo.ts",
    "C:/Users/scholtz/source/repos/scholtz/arc-1400/projects/arc-1400/smart_contracts/security_token/arc88.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AC+EG;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;ADtDH;;;ACsDG;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;ADlCH;;;ACkCG;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AD1BH;;;AC0BG;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;ADjBH;;;ACiBG;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AD4BA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AA9BH;;;AA8BG;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAxBH;;;AAwBG;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAVH;;;AAAA;;;AAAA;;;AAUG;;;AAAA;;AAVH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMoD;;AAAzC;;;;AAAkD;AAAW;AAA7D;AAAP;;AAIF;;;AAEE;;;AACkB;;AAAA;AAAA;AAAlB;AACwF;;AAAxB;AAApD;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAZqE;;AAAA;;AAAA;AAajF;AAAA;;AAAA;AAAA;AAZoD;AAa7B;AAAA;;AAAnB;;;AACyB;;AAAA;;AAAA;AAAA;;;AAduB;AAclD;;AAdkD;AAclD;AAAA;AAIsB;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAxB;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;AAlBoD;AAgBF;AAAA;AAAO;;AAAA;;AAAA;AAAA;;;AAA7B;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAhBwB;AAgBlD;;AAhBkD;AAgBlD;AAAA;;;;AAKJ;;;AAtBmF;;AAAA;;AAAA;AAwBrD;AAAA;AAAA;;AAA5B;AAC4B;AAAA;AAA5B;AAGF;;;AAEE;;;AA9BiF;;AAAA;;AAAA;AA+BrD;AAAA;AAAA;;AAA5B;AACmC;AAAA;AAAA;AACd;AAAA;;AACyD;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAiB;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAvE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAxB;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;ACzCiD;AAAA;;AAQ3B;AAAA;;AAAlB;;;AAR6C;AAAA;;AAAA;AAAA;AAQQ;AAArD;;;AAV0C;AAAA;AAW5B;AAAA;;AAAZ;;;AAXwC;AAYC;;AAA3C;AAV6C;;AAYtB;;;AAAzB;;AAMF;;;AApB8C;AAAA;AAAA;AAAA;AAqB9C;AAGF;;;AAEE;;;AA1B8C;AAAA;AA2B9B;AAAA;;AAAZ;;;AAA6B;;AAAP;AA3BoB;AAAA;AAAA;AAAA;AA4BrB;AAArB;AAAJ;;;AAAoD;;AAAP;AA5BC;AAAA;AAAA;AAAA;AA6BzB;;AAAA;AAAd;;AAAA;AAAA;;AAAA;AAAP;AAIF;;;AA/BmD;AAAA;;AAiCvB;AAAA;;AAAjB;;;AAjCwC;AAAA;;AAAA;AAAA;AAiCY;AAAW;AAAlC;AAA7B;;;;AAAF;AAAP;AACO;;AAAc;AAAd;AAAP;AApC8C;AAqC9C;;AAAA;AAnCiD;;AAoCxB;;;AAAzB;;;;;;AAGF;;;AAEE;;;AAC4B;;AA5CkB;AAAA;AAAA;AAAA;AA4CvC;AAAP;AACO;;AAAc;AAAd;AAAP;AA7C8C;AAAA;AAAA;AAAA;AAAA;AA+C9C;;AAAA;AACK;;AAAA;AAAL;;AAAA;AAAA;AAAA;;AAKA;;;AAC4B;;AAtDkB;AAAA;AAAA;AAAA;AAsDvC;AAAP;AAtD8C;AAAA;AAAA;AAAA;AAAA;AAwD3B;AAAnB;AACA;;;;;;AAAA;AAAA;AAAA;;AAIF;;;AAEE;;;AAC4B;;AAhEkB;AAAA;AAAA;AAAA;AAgEvC;AAAP;AACO;;AAAY;AAAZ;AAAP;AAhEqD;AAAA;AAiE/B;AAAA;;AAAlB;;;AAjEiD;AAAA;AAAA;AAAA;AAiES;AAA5B;AAA9B;AAAA;AAjEiD;AAoErD;;AAAA;AArE8C;AAAA;AAAA;AAAA;AAsEzC;;AAAA;AAAL;;;;;;AAAA;AAAA;AAAA;;AAKA;;;AA1EqD;AAAA;AA2E5B;AAAA;;AAAzB;AACoC;;AA5EiB;AAAA;AAAA;AAAA;AA6E9C;;AAAA;AAAP;AA9E8C;AAAA;AAAA;AAAA;AAAA;AAgF9C;;AAAA;AA/EqD;AAgF3B;AAA1B;AACK;AAAA;AAAL;;;;;;AAAA;;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;;AAKA;;;AAC4B;;AAzFkB;AAAA;AAAA;AAAA;AAyFvC;AAAP;AAxFqD;AAyF3B;AAA1B;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2 6"
    },
    "7": {
      "op": "bytecblock \"arc88_o\" base32(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) \"arc88_po\" \"docs\" \"arc88_oi\" 0x151f7c75 \"doc\" 0x00 0x0000 0x0006 0x0002 0x4355d2ad"
    },
    "98": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "100": {
      "op": "bz main_bare_routing@19",
      "stack_out": []
    },
    "103": {
      "op": "pushbytess 0x11cb36f5 0xb16d7a8c 0xa7cb3482 0x123f75b8 0x0702654e 0xd015724e 0x029fecc0 0x7349334e 0xdb7c82ef 0xfd2c2c6e 0x42a5f065 0xad4f68ea // method \"arc1643_set_document(byte[],string,byte[])void\", method \"arc1643_get_document(byte[])(string,byte[],uint64)\", method \"arc1643_remove_document(byte[])void\", method \"arc1643_get_all_documents()byte[]\", method \"arc88_owner()address\", method \"arc88_is_owner(address)bool\", method \"arc88_initialize_owner(address)void\", method \"arc88_transfer_ownership(address)void\", method \"arc88_renounce_ownership()void\", method \"arc88_transfer_ownership_request(address)void\", method \"arc88_accept_ownership()void\", method \"arc88_cancel_ownership_request()void\"",
      "defined_out": [
        "Method(arc1643_get_all_documents()byte[])",
        "Method(arc1643_get_document(byte[])(string,byte[],uint64))",
        "Method(arc1643_remove_document(byte[])void)",
        "Method(arc1643_set_document(byte[],string,byte[])void)",
        "Method(arc88_accept_ownership()void)",
        "Method(arc88_cancel_ownership_request()void)",
        "Method(arc88_initialize_owner(address)void)",
        "Method(arc88_is_owner(address)bool)",
        "Method(arc88_owner()address)",
        "Method(arc88_renounce_ownership()void)",
        "Method(arc88_transfer_ownership(address)void)",
        "Method(arc88_transfer_ownership_request(address)void)"
      ],
      "stack_out": [
        "Method(arc1643_set_document(byte[],string,byte[])void)",
        "Method(arc1643_get_document(byte[])(string,byte[],uint64))",
        "Method(arc1643_remove_document(byte[])void)",
        "Method(arc1643_get_all_documents()byte[])",
        "Method(arc88_owner()address)",
        "Method(arc88_is_owner(address)bool)",
        "Method(arc88_initialize_owner(address)void)",
        "Method(arc88_transfer_ownership(address)void)",
        "Method(arc88_renounce_ownership()void)",
        "Method(arc88_transfer_ownership_request(address)void)",
        "Method(arc88_accept_ownership()void)",
        "Method(arc88_cancel_ownership_request()void)"
      ]
    },
    "165": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(arc1643_get_all_documents()byte[])",
        "Method(arc1643_get_document(byte[])(string,byte[],uint64))",
        "Method(arc1643_remove_document(byte[])void)",
        "Method(arc1643_set_document(byte[],string,byte[])void)",
        "Method(arc88_accept_ownership()void)",
        "Method(arc88_cancel_ownership_request()void)",
        "Method(arc88_initialize_owner(address)void)",
        "Method(arc88_is_owner(address)bool)",
        "Method(arc88_owner()address)",
        "Method(arc88_renounce_ownership()void)",
        "Method(arc88_transfer_ownership(address)void)",
        "Method(arc88_transfer_ownership_request(address)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(arc1643_set_document(byte[],string,byte[])void)",
        "Method(arc1643_get_document(byte[])(string,byte[],uint64))",
        "Method(arc1643_remove_document(byte[])void)",
        "Method(arc1643_get_all_documents()byte[])",
        "Method(arc88_owner()address)",
        "Method(arc88_is_owner(address)bool)",
        "Method(arc88_initialize_owner(address)void)",
        "Method(arc88_transfer_ownership(address)void)",
        "Method(arc88_renounce_ownership()void)",
        "Method(arc88_transfer_ownership_request(address)void)",
        "Method(arc88_accept_ownership()void)",
        "Method(arc88_cancel_ownership_request()void)",
        "tmp%2#0"
      ]
    },
    "168": {
      "op": "match main_arc1643_set_document_route@5 main_arc1643_get_document_route@6 main_arc1643_remove_document_route@7 main_arc1643_get_all_documents_route@8 main_arc88_owner_route@9 main_arc88_is_owner_route@10 main_arc88_initialize_owner_route@11 main_arc88_transfer_ownership_route@12 main_arc88_renounce_ownership_route@13 main_arc88_transfer_ownership_request_route@14 main_arc88_accept_ownership_route@15 main_arc88_cancel_ownership_request_route@16",
      "stack_out": []
    },
    "194": {
      "block": "main_after_if_else@23",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "195": {
      "op": "return",
      "stack_out": []
    },
    "196": {
      "block": "main_arc88_cancel_ownership_request_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "198": {
      "op": "!",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "199": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "200": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "202": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "203": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_cancel_ownership_request",
      "op": "callsub arc88_cancel_ownership_request"
    },
    "206": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "207": {
      "op": "return",
      "stack_out": []
    },
    "208": {
      "block": "main_arc88_accept_ownership_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "210": {
      "op": "!",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "211": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "212": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "214": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "215": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_accept_ownership",
      "op": "callsub arc88_accept_ownership"
    },
    "218": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "219": {
      "op": "return",
      "stack_out": []
    },
    "220": {
      "block": "main_arc88_transfer_ownership_request_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "222": {
      "op": "!",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "223": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "224": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "226": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "227": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%3#0"
      ]
    },
    "230": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_transfer_ownership_request",
      "op": "callsub arc88_transfer_ownership_request",
      "stack_out": []
    },
    "233": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "234": {
      "op": "return",
      "stack_out": []
    },
    "235": {
      "block": "main_arc88_renounce_ownership_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "237": {
      "op": "!",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "238": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "239": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "241": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "242": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_renounce_ownership",
      "op": "callsub arc88_renounce_ownership"
    },
    "245": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "246": {
      "op": "return",
      "stack_out": []
    },
    "247": {
      "block": "main_arc88_transfer_ownership_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "249": {
      "op": "!",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "250": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "251": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "253": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "254": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "257": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_transfer_ownership",
      "op": "callsub arc88_transfer_ownership",
      "stack_out": []
    },
    "260": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "261": {
      "op": "return",
      "stack_out": []
    },
    "262": {
      "block": "main_arc88_initialize_owner_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "264": {
      "op": "!",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "265": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "266": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "268": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "269": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "272": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_initialize_owner",
      "op": "callsub arc88_initialize_owner",
      "stack_out": []
    },
    "275": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "276": {
      "op": "return",
      "stack_out": []
    },
    "277": {
      "block": "main_arc88_is_owner_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "279": {
      "op": "!",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "280": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "281": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "283": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "284": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "287": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_is_owner",
      "op": "callsub arc88_is_owner",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "290": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "0x151f7c75"
      ]
    },
    "292": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%38#0"
      ]
    },
    "293": {
      "op": "concat",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "294": {
      "op": "log",
      "stack_out": []
    },
    "295": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "296": {
      "op": "return",
      "stack_out": []
    },
    "297": {
      "block": "main_arc88_owner_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "299": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "300": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "301": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "303": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "304": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_owner",
      "op": "callsub arc88_owner",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "307": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "0x151f7c75"
      ]
    },
    "309": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%32#0"
      ]
    },
    "310": {
      "op": "concat",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "311": {
      "op": "log",
      "stack_out": []
    },
    "312": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "313": {
      "op": "return",
      "stack_out": []
    },
    "314": {
      "block": "main_arc1643_get_all_documents_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "316": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "317": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "318": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "320": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "321": {
      "op": "pushbytes 0x151f7c750000",
      "defined_out": [
        "0x151f7c750000"
      ],
      "stack_out": [
        "0x151f7c750000"
      ]
    },
    "329": {
      "op": "log",
      "stack_out": []
    },
    "330": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "331": {
      "op": "return",
      "stack_out": []
    },
    "332": {
      "block": "main_arc1643_remove_document_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "334": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "335": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "336": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "338": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "339": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "342": {
      "callsub": "smart_contracts/security_token/arc1643.algo.ts::Arc1643.arc1643_remove_document",
      "op": "callsub arc1643_remove_document",
      "stack_out": []
    },
    "345": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "346": {
      "op": "return",
      "stack_out": []
    },
    "347": {
      "block": "main_arc1643_get_document_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "349": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "350": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "351": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "353": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "354": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "357": {
      "callsub": "smart_contracts/security_token/arc1643.algo.ts::Arc1643.arc1643_get_document",
      "op": "callsub arc1643_get_document",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "360": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "0x151f7c75"
      ]
    },
    "362": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%15#0"
      ]
    },
    "363": {
      "op": "concat",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "364": {
      "op": "log",
      "stack_out": []
    },
    "365": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "366": {
      "op": "return",
      "stack_out": []
    },
    "367": {
      "block": "main_arc1643_set_document_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "369": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "370": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "371": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "373": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "374": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "377": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "380": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "383": {
      "callsub": "smart_contracts/security_token/arc1643.algo.ts::Arc1643.arc1643_set_document",
      "op": "callsub arc1643_set_document",
      "stack_out": []
    },
    "386": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "387": {
      "op": "return",
      "stack_out": []
    },
    "388": {
      "block": "main_bare_routing@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "390": {
      "op": "bnz main_after_if_else@23",
      "stack_out": []
    },
    "393": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "395": {
      "op": "!",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "396": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "397": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "398": {
      "op": "return",
      "stack_out": []
    },
    "399": {
      "subroutine": "_puya_lib.arc4.dynamic_array_concat_byte_length_head",
      "params": {
        "array#0": "bytes",
        "new_items_bytes#0": "bytes",
        "new_items_count#0": "uint64"
      },
      "block": "dynamic_array_concat_byte_length_head",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "402": {
      "op": "frame_dig -3",
      "defined_out": [
        "array#0 (copy)"
      ],
      "stack_out": [
        "array#0 (copy)"
      ]
    },
    "404": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array#0 (copy)"
      ],
      "stack_out": [
        "array#0 (copy)",
        "0"
      ]
    },
    "405": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length#0"
      ],
      "stack_out": [
        "array_length#0"
      ]
    },
    "406": {
      "op": "dup",
      "defined_out": [
        "array_length#0",
        "array_length#0 (copy)"
      ],
      "stack_out": [
        "array_length#0",
        "array_length#0 (copy)"
      ]
    },
    "407": {
      "op": "frame_dig -1",
      "defined_out": [
        "array_length#0",
        "array_length#0 (copy)",
        "new_items_count#0 (copy)"
      ],
      "stack_out": [
        "array_length#0",
        "array_length#0 (copy)",
        "new_items_count#0 (copy)"
      ]
    },
    "409": {
      "op": "+",
      "defined_out": [
        "array_length#0",
        "new_length#0"
      ],
      "stack_out": [
        "array_length#0",
        "new_length#0"
      ]
    },
    "410": {
      "op": "swap",
      "stack_out": [
        "new_length#0",
        "array_length#0"
      ]
    },
    "411": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "array_length#0",
        "new_length#0"
      ],
      "stack_out": [
        "new_length#0",
        "array_length#0",
        "2"
      ]
    },
    "412": {
      "op": "*",
      "defined_out": [
        "new_length#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "new_length#0",
        "tmp%0#0"
      ]
    },
    "413": {
      "op": "intc_2 // 2",
      "stack_out": [
        "new_length#0",
        "tmp%0#0",
        "2"
      ]
    },
    "414": {
      "op": "+",
      "defined_out": [
        "header_end#0",
        "new_length#0"
      ],
      "stack_out": [
        "new_length#0",
        "header_end#0"
      ]
    },
    "415": {
      "op": "dig 1",
      "defined_out": [
        "header_end#0",
        "new_length#0",
        "new_length#0 (copy)"
      ],
      "stack_out": [
        "new_length#0",
        "header_end#0",
        "new_length#0 (copy)"
      ]
    },
    "417": {
      "op": "itob",
      "defined_out": [
        "header_end#0",
        "new_length#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "new_length#0",
        "header_end#0",
        "tmp%1#0"
      ]
    },
    "418": {
      "op": "extract 6 2",
      "defined_out": [
        "header_end#0",
        "new_length#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "new_length#0",
        "header_end#0",
        "tmp%2#0"
      ]
    },
    "421": {
      "op": "cover 2",
      "defined_out": [
        "header_end#0",
        "new_length#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0"
      ]
    },
    "423": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "array#0 (copy)"
      ]
    },
    "425": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "array#0 (copy)",
        "2"
      ]
    },
    "426": {
      "op": "dig 2",
      "defined_out": [
        "2",
        "array#0 (copy)",
        "header_end#0",
        "header_end#0 (copy)",
        "new_length#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "array#0 (copy)",
        "2",
        "header_end#0 (copy)"
      ]
    },
    "428": {
      "op": "substring3",
      "defined_out": [
        "header_end#0",
        "new_length#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "tmp%3#0"
      ]
    },
    "429": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "tmp%3#0",
        "new_items_count#0 (copy)"
      ]
    },
    "431": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "tmp%3#0",
        "new_items_count#0 (copy)",
        "2"
      ]
    },
    "432": {
      "op": "*",
      "defined_out": [
        "header_end#0",
        "new_length#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "433": {
      "op": "bzero",
      "defined_out": [
        "header_end#0",
        "new_length#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "434": {
      "op": "concat",
      "defined_out": [
        "header_end#0",
        "new_length#0",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "tmp%6#0"
      ]
    },
    "435": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "tmp%6#0",
        "array#0 (copy)"
      ]
    },
    "437": {
      "op": "len",
      "defined_out": [
        "header_end#0",
        "new_length#0",
        "tmp%2#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "438": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "tmp%6#0",
        "tmp%7#0",
        "array#0 (copy)"
      ]
    },
    "440": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "tmp%6#0",
        "tmp%7#0",
        "array#0 (copy)",
        "header_end#0"
      ]
    },
    "442": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "tmp%6#0",
        "array#0 (copy)",
        "header_end#0",
        "tmp%7#0"
      ]
    },
    "444": {
      "op": "substring3",
      "defined_out": [
        "new_length#0",
        "tmp%2#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "445": {
      "op": "concat",
      "defined_out": [
        "new_length#0",
        "tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "tmp%9#0"
      ]
    },
    "446": {
      "op": "frame_dig -2",
      "defined_out": [
        "new_items_bytes#0 (copy)",
        "new_length#0",
        "tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "tmp%9#0",
        "new_items_bytes#0 (copy)"
      ]
    },
    "448": {
      "op": "concat",
      "defined_out": [
        "array_head_and_tail#0",
        "new_length#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "array_head_and_tail#0"
      ]
    },
    "449": {
      "op": "swap",
      "defined_out": [
        "array_head_and_tail#0",
        "new_length#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "new_length#0"
      ]
    },
    "450": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "new_length#0",
        "2"
      ]
    },
    "451": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail#0",
        "tail_offset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0"
      ]
    },
    "452": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail#0",
        "tail_offset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "tail_offset#0"
      ]
    },
    "453": {
      "op": "intc_0 // 0",
      "defined_out": [
        "array_head_and_tail#0",
        "head_offset#0",
        "tail_offset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "tail_offset#0",
        "head_offset#0"
      ]
    },
    "454": {
      "op": "swap",
      "defined_out": [
        "array_head_and_tail#0",
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1"
      ]
    },
    "455": {
      "block": "dynamic_array_concat_byte_length_head_for_header@2",
      "stack_in": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0"
      ]
    },
    "457": {
      "op": "frame_dig 2",
      "defined_out": [
        "head_offset#0",
        "tail_offset#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#0"
      ]
    },
    "459": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "head_offset#0",
        "tail_offset#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "continue_looping%0#0"
      ]
    },
    "460": {
      "op": "bz dynamic_array_concat_byte_length_head_after_for@5",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1"
      ]
    },
    "463": {
      "op": "frame_dig 4",
      "defined_out": [
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tail_offset#1"
      ]
    },
    "465": {
      "op": "dup",
      "defined_out": [
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1",
        "tail_offset#1 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tail_offset#1",
        "tail_offset#1 (copy)"
      ]
    },
    "466": {
      "op": "itob",
      "defined_out": [
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tail_offset#1",
        "tmp%5#0"
      ]
    },
    "467": {
      "op": "extract 6 2",
      "defined_out": [
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1",
        "tail_offset_bytes#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tail_offset#1",
        "tail_offset_bytes#0"
      ]
    },
    "470": {
      "op": "frame_dig 1",
      "defined_out": [
        "array_head_and_tail#0",
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1",
        "tail_offset_bytes#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tail_offset#1",
        "tail_offset_bytes#0",
        "array_head_and_tail#0"
      ]
    },
    "472": {
      "op": "frame_dig 3",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tail_offset#1",
        "tail_offset_bytes#0",
        "array_head_and_tail#0",
        "head_offset#0"
      ]
    },
    "474": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail#0",
        "head_offset#0",
        "head_offset#0 (copy)",
        "tail_offset#0",
        "tail_offset#1",
        "tail_offset_bytes#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tail_offset#1",
        "tail_offset_bytes#0",
        "array_head_and_tail#0",
        "head_offset#0 (copy)",
        "head_offset#0 (copy)"
      ]
    },
    "475": {
      "op": "cover 4",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1",
        "tail_offset_bytes#0",
        "array_head_and_tail#0",
        "head_offset#0 (copy)"
      ]
    },
    "477": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1",
        "array_head_and_tail#0",
        "head_offset#0 (copy)",
        "tail_offset_bytes#0"
      ]
    },
    "479": {
      "op": "replace3",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1",
        "array_head_and_tail#0"
      ]
    },
    "480": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1",
        "array_head_and_tail#0",
        "array_head_and_tail#0"
      ]
    },
    "481": {
      "op": "frame_bury 1",
      "defined_out": [
        "array_head_and_tail#0",
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1",
        "array_head_and_tail#0"
      ]
    },
    "483": {
      "op": "dig 1",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1",
        "array_head_and_tail#0",
        "tail_offset#1 (copy)"
      ]
    },
    "485": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail#0",
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1",
        "tmp%6#1"
      ]
    },
    "486": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "array_head_and_tail#0",
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1",
        "tmp%6#1",
        "2"
      ]
    },
    "487": {
      "op": "+",
      "defined_out": [
        "array_head_and_tail#0",
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1",
        "tmp%7#0"
      ]
    },
    "488": {
      "op": "+",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1"
      ]
    },
    "489": {
      "op": "frame_bury 4",
      "defined_out": [
        "array_head_and_tail#0",
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0"
      ]
    },
    "491": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "2"
      ]
    },
    "492": {
      "op": "+",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0"
      ]
    },
    "493": {
      "op": "frame_bury 3",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1"
      ]
    },
    "495": {
      "op": "b dynamic_array_concat_byte_length_head_for_header@2"
    },
    "498": {
      "block": "dynamic_array_concat_byte_length_head_after_for@5",
      "stack_in": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tmp%2#0"
      ]
    },
    "500": {
      "op": "frame_dig 1",
      "defined_out": [
        "array_head_and_tail#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tmp%2#0",
        "array_head_and_tail#0"
      ]
    },
    "502": {
      "op": "concat",
      "defined_out": [
        "array_head_and_tail#0",
        "tmp%12#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tmp%12#0"
      ]
    },
    "503": {
      "op": "frame_bury 0"
    },
    "505": {
      "retsub": true,
      "op": "retsub"
    },
    "506": {
      "subroutine": "smart_contracts/security_token/arc1643.algo.ts::Arc1643._onlyOwner",
      "params": {},
      "block": "_onlyOwner",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "508": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_is_owner",
      "op": "callsub arc88_is_owner",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "511": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "512": {
      "op": "getbit",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "513": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "1"
      ]
    },
    "514": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "515": {
      "error": "only_owner",
      "op": "assert // only_owner",
      "stack_out": []
    },
    "516": {
      "retsub": true,
      "op": "retsub"
    },
    "517": {
      "subroutine": "smart_contracts/security_token/arc1643.algo.ts::Arc1643.arc1643_set_document",
      "params": {
        "name#0": "bytes",
        "uri#0": "bytes",
        "hash#0": "bytes"
      },
      "block": "arc1643_set_document",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "520": {
      "callsub": "smart_contracts/security_token/arc1643.algo.ts::Arc1643._onlyOwner",
      "op": "callsub _onlyOwner"
    },
    "523": {
      "op": "frame_dig -3",
      "defined_out": [
        "name#0 (copy)"
      ],
      "stack_out": [
        "name#0 (copy)"
      ]
    },
    "525": {
      "op": "len",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "526": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "527": {
      "error": "empty_name",
      "op": "assert // empty_name",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "528": {
      "op": "global Round",
      "defined_out": [
        "tmp%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "to_encode%0#0"
      ]
    },
    "530": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "531": {
      "op": "frame_dig -2",
      "defined_out": [
        "tmp%0#0",
        "uri#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "uri#0 (copy)"
      ]
    },
    "533": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "data_length%0#0"
      ]
    },
    "534": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "data_length%0#0",
        "data_length%0#0"
      ]
    },
    "535": {
      "op": "cover 2",
      "defined_out": [
        "data_length%0#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "val_as_bytes%0#0",
        "data_length%0#0"
      ]
    },
    "537": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "data_length%0#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "val_as_bytes%0#0",
        "data_length%0#0",
        "12"
      ]
    },
    "539": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "data_length%0#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "val_as_bytes%0#0",
        "current_tail_offset%1#0"
      ]
    },
    "540": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "data_length%0#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "val_as_bytes%0#0",
        "as_bytes%1#0"
      ]
    },
    "541": {
      "op": "extract 6 2",
      "defined_out": [
        "data_length%0#0",
        "offset_as_uint16%1#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "val_as_bytes%0#0",
        "offset_as_uint16%1#0"
      ]
    },
    "544": {
      "op": "pushbytes 0x000c",
      "defined_out": [
        "0x000c",
        "data_length%0#0",
        "offset_as_uint16%1#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "val_as_bytes%0#0",
        "offset_as_uint16%1#0",
        "0x000c"
      ]
    },
    "548": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "val_as_bytes%0#0",
        "0x000c",
        "offset_as_uint16%1#0"
      ]
    },
    "549": {
      "op": "concat",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%2#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "550": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "551": {
      "op": "concat",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "552": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%3#0",
        "uri#0 (copy)"
      ]
    },
    "554": {
      "op": "concat",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "555": {
      "op": "frame_dig -1",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%4#0",
        "hash#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%4#0",
        "hash#0 (copy)"
      ]
    },
    "557": {
      "op": "concat",
      "defined_out": [
        "data_length%0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "rec#0"
      ]
    },
    "558": {
      "op": "bytec 6 // \"doc\"",
      "defined_out": [
        "\"doc\"",
        "data_length%0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "rec#0",
        "\"doc\""
      ]
    },
    "560": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "rec#0",
        "\"doc\"",
        "name#0 (copy)"
      ]
    },
    "562": {
      "op": "concat",
      "defined_out": [
        "data_length%0#0",
        "rec#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "rec#0",
        "tmp%2#0"
      ]
    },
    "563": {
      "op": "dup",
      "defined_out": [
        "data_length%0#0",
        "rec#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "rec#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "564": {
      "op": "box_del",
      "defined_out": [
        "data_length%0#0",
        "rec#0",
        "tmp%0#0",
        "tmp%2#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "rec#0",
        "tmp%2#0",
        "{box_del}"
      ]
    },
    "565": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "rec#0",
        "tmp%2#0"
      ]
    },
    "566": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "tmp%2#0",
        "rec#0"
      ]
    },
    "567": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0"
      ]
    },
    "568": {
      "op": "bytec_3 // \"docs\"",
      "defined_out": [
        "\"docs\"",
        "data_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "\"docs\""
      ]
    },
    "569": {
      "op": "box_len",
      "defined_out": [
        "data_length%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "570": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_exists%0#0"
      ]
    },
    "572": {
      "op": "bnz arc1643_set_document_else_body@2",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0"
      ]
    },
    "575": {
      "op": "bytec 8 // 0x0000",
      "defined_out": [
        "0x0000",
        "data_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "0x0000"
      ]
    },
    "577": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "0x0000",
        "name#0 (copy)"
      ]
    },
    "579": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0x0000",
        "1",
        "data_length%0#0",
        "name#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "0x0000",
        "name#0 (copy)",
        "1"
      ]
    },
    "580": {
      "callsub": "_puya_lib.arc4.dynamic_array_concat_byte_length_head",
      "op": "callsub dynamic_array_concat_byte_length_head",
      "defined_out": [
        "concat_result%0#0",
        "data_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "concat_result%0#0"
      ]
    },
    "583": {
      "op": "bytec_3 // \"docs\"",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "concat_result%0#0",
        "\"docs\""
      ]
    },
    "584": {
      "op": "box_del",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "concat_result%0#0",
        "{box_del}"
      ]
    },
    "585": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "concat_result%0#0"
      ]
    },
    "586": {
      "op": "bytec_3 // \"docs\"",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "concat_result%0#0",
        "\"docs\""
      ]
    },
    "587": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "\"docs\"",
        "concat_result%0#0"
      ]
    },
    "588": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0"
      ]
    },
    "589": {
      "block": "arc1643_set_document_after_if_else@3",
      "stack_in": [
        "tmp%0#0",
        "data_length%0#0"
      ],
      "op": "intc_3 // 6",
      "defined_out": [
        "6"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "6"
      ]
    },
    "590": {
      "op": "frame_dig 0",
      "defined_out": [
        "6",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "6",
        "tmp%0#0"
      ]
    },
    "592": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "current_tail_offset%4#0"
      ]
    },
    "593": {
      "op": "dup",
      "defined_out": [
        "current_tail_offset%4#0",
        "current_tail_offset%4#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "current_tail_offset%4#0",
        "current_tail_offset%4#0 (copy)"
      ]
    },
    "594": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "current_tail_offset%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "current_tail_offset%4#0",
        "as_bytes%3#0"
      ]
    },
    "595": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%4#0",
        "offset_as_uint16%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "current_tail_offset%4#0",
        "offset_as_uint16%3#0"
      ]
    },
    "598": {
      "op": "bytec 9 // 0x0006",
      "defined_out": [
        "0x0006",
        "current_tail_offset%4#0",
        "offset_as_uint16%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "current_tail_offset%4#0",
        "offset_as_uint16%3#0",
        "0x0006"
      ]
    },
    "600": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "current_tail_offset%4#0",
        "0x0006",
        "offset_as_uint16%3#0"
      ]
    },
    "601": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%4#0",
        "encoded_tuple_buffer%8#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "current_tail_offset%4#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "602": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%8#0",
        "current_tail_offset%4#0"
      ]
    },
    "603": {
      "op": "frame_dig 1",
      "defined_out": [
        "current_tail_offset%4#0",
        "data_length%0#0",
        "encoded_tuple_buffer%8#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%8#0",
        "current_tail_offset%4#0",
        "data_length%0#0"
      ]
    },
    "605": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%5#0",
        "data_length%0#0",
        "encoded_tuple_buffer%8#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%8#0",
        "current_tail_offset%5#0"
      ]
    },
    "606": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "data_length%0#0",
        "encoded_tuple_buffer%8#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%8#0",
        "as_bytes%4#0"
      ]
    },
    "607": {
      "op": "extract 6 2",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%8#0",
        "offset_as_uint16%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%8#0",
        "offset_as_uint16%4#0"
      ]
    },
    "610": {
      "op": "concat",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%9#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "611": {
      "op": "frame_dig -3",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%9#0",
        "name#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%9#0",
        "name#0 (copy)"
      ]
    },
    "613": {
      "op": "concat",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%10#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "614": {
      "op": "frame_dig -2",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%10#0",
        "tmp%0#0",
        "uri#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%10#0",
        "uri#0 (copy)"
      ]
    },
    "616": {
      "op": "concat",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%11#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "617": {
      "op": "frame_dig -1",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%11#0",
        "hash#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%11#0",
        "hash#0 (copy)"
      ]
    },
    "619": {
      "op": "concat",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%12#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "620": {
      "op": "bytec 10 // 0x0002",
      "defined_out": [
        "0x0002",
        "data_length%0#0",
        "encoded_tuple_buffer%12#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%12#0",
        "0x0002"
      ]
    },
    "622": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "0x0002",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "623": {
      "op": "concat",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%15#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "624": {
      "op": "pushbytes 0x2dc03c36 // method \"DocumentUpdated((byte[],string,byte[]))\"",
      "defined_out": [
        "Method(DocumentUpdated((byte[],string,byte[])))",
        "data_length%0#0",
        "encoded_tuple_buffer%15#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%15#0",
        "Method(DocumentUpdated((byte[],string,byte[])))"
      ]
    },
    "630": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "Method(DocumentUpdated((byte[],string,byte[])))",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "631": {
      "op": "concat",
      "defined_out": [
        "data_length%0#0",
        "event%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "event%0#0"
      ]
    },
    "632": {
      "op": "log",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0"
      ]
    },
    "633": {
      "retsub": true,
      "op": "retsub"
    },
    "634": {
      "block": "arc1643_set_document_else_body@2",
      "stack_in": [
        "tmp%0#0",
        "data_length%0#0"
      ],
      "op": "bytec_3 // \"docs\"",
      "defined_out": [
        "\"docs\""
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "\"docs\""
      ]
    },
    "635": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "636": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0"
      ]
    },
    "637": {
      "op": "bytec 8 // 0x0000",
      "defined_out": [
        "0x0000",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "0x0000"
      ]
    },
    "639": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x0000",
        "maybe_value%1#0",
        "name#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "0x0000",
        "name#0 (copy)"
      ]
    },
    "641": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0x0000",
        "1",
        "maybe_value%1#0",
        "name#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "0x0000",
        "name#0 (copy)",
        "1"
      ]
    },
    "642": {
      "callsub": "_puya_lib.arc4.dynamic_array_concat_byte_length_head",
      "op": "callsub dynamic_array_concat_byte_length_head",
      "defined_out": [
        "concat_result%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "concat_result%1#0"
      ]
    },
    "645": {
      "op": "dup",
      "defined_out": [
        "concat_result%1#0",
        "concat_result%1#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "concat_result%1#0",
        "concat_result%1#0 (copy)"
      ]
    },
    "646": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "concat_result%1#0",
        "concat_result%1#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "concat_result%1#0",
        "concat_result%1#0 (copy)",
        "0"
      ]
    },
    "647": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length%0#0",
        "concat_result%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "concat_result%1#0",
        "array_length%0#0"
      ]
    },
    "648": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "array_length%0#0",
        "concat_result%1#0"
      ]
    },
    "649": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "array_length%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "652": {
      "op": "dig 1",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "array_length%0#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "array_length%0#0",
        "array_head_and_tail%0#0",
        "array_length%0#0 (copy)"
      ]
    },
    "654": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "array_length%0#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "array_length%0#0",
        "array_head_and_tail%0#0",
        "array_length%0#0 (copy)",
        "2"
      ]
    },
    "655": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "maybe_value%1#0",
        "start_of_tail%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "array_length%0#0",
        "array_head_and_tail%0#0",
        "start_of_tail%0#0"
      ]
    },
    "656": {
      "op": "dig 1",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "array_length%0#0",
        "maybe_value%1#0",
        "start_of_tail%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "array_length%0#0",
        "array_head_and_tail%0#0",
        "start_of_tail%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "658": {
      "op": "len",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "maybe_value%1#0",
        "start_of_tail%0#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "array_length%0#0",
        "array_head_and_tail%0#0",
        "start_of_tail%0#0",
        "total_length%0#0"
      ]
    },
    "659": {
      "op": "substring3",
      "defined_out": [
        "array_length%0#0",
        "data%2#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "array_length%0#0",
        "data%2#0"
      ]
    },
    "660": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "maybe_value%1#0",
        "data%2#0",
        "array_length%0#0"
      ]
    },
    "661": {
      "callsub": "_puya_lib.arc4.dynamic_array_concat_byte_length_head",
      "op": "callsub dynamic_array_concat_byte_length_head",
      "defined_out": [
        "concat_result%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "concat_result%2#0"
      ]
    },
    "664": {
      "op": "bytec_3 // \"docs\"",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "concat_result%2#0",
        "\"docs\""
      ]
    },
    "665": {
      "op": "box_del",
      "defined_out": [
        "concat_result%2#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "concat_result%2#0",
        "{box_del}"
      ]
    },
    "666": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "concat_result%2#0"
      ]
    },
    "667": {
      "op": "bytec_3 // \"docs\"",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "concat_result%2#0",
        "\"docs\""
      ]
    },
    "668": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0",
        "\"docs\"",
        "concat_result%2#0"
      ]
    },
    "669": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "data_length%0#0"
      ]
    },
    "670": {
      "op": "b arc1643_set_document_after_if_else@3"
    },
    "673": {
      "subroutine": "smart_contracts/security_token/arc1643.algo.ts::Arc1643.arc1643_get_document",
      "params": {
        "name#0": "bytes"
      },
      "block": "arc1643_get_document",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "676": {
      "op": "bytec 6 // \"doc\"",
      "defined_out": [
        "\"doc\""
      ],
      "stack_out": [
        "\"doc\""
      ]
    },
    "678": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"doc\"",
        "name#0 (copy)"
      ],
      "stack_out": [
        "\"doc\"",
        "name#0 (copy)"
      ]
    },
    "680": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "681": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "682": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "683": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "685": {
      "error": "not_found",
      "op": "assert // not_found",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "686": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "687": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "688": {
      "retsub": true,
      "op": "retsub"
    },
    "689": {
      "subroutine": "smart_contracts/security_token/arc1643.algo.ts::Arc1643.arc1643_remove_document",
      "params": {
        "name#0": "bytes"
      },
      "block": "arc1643_remove_document",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "692": {
      "callsub": "smart_contracts/security_token/arc1643.algo.ts::Arc1643._onlyOwner",
      "op": "callsub _onlyOwner"
    },
    "695": {
      "op": "bytec 6 // \"doc\"",
      "defined_out": [
        "\"doc\""
      ],
      "stack_out": [
        "\"doc\""
      ]
    },
    "697": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"doc\"",
        "name#0 (copy)"
      ],
      "stack_out": [
        "\"doc\"",
        "name#0 (copy)"
      ]
    },
    "699": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "700": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "701": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "702": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "704": {
      "error": "not_found",
      "op": "assert // not_found",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "705": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "706": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "prior#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "prior#0",
        "maybe_exists%1#0"
      ]
    },
    "707": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "prior#0"
      ]
    },
    "708": {
      "op": "swap",
      "stack_out": [
        "prior#0",
        "tmp%0#0"
      ]
    },
    "709": {
      "op": "box_del",
      "defined_out": [
        "prior#0",
        "{box_del}"
      ],
      "stack_out": [
        "prior#0",
        "{box_del}"
      ]
    },
    "710": {
      "op": "pop",
      "stack_out": [
        "prior#0"
      ]
    },
    "711": {
      "op": "dup",
      "defined_out": [
        "prior#0",
        "prior#0 (copy)"
      ],
      "stack_out": [
        "prior#0",
        "prior#0 (copy)"
      ]
    },
    "712": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "prior#0",
        "prior#0 (copy)"
      ],
      "stack_out": [
        "prior#0",
        "prior#0 (copy)",
        "0"
      ]
    },
    "713": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "prior#0"
      ],
      "stack_out": [
        "prior#0",
        "item_start_offset%0#0"
      ]
    },
    "714": {
      "op": "dig 1",
      "stack_out": [
        "prior#0",
        "item_start_offset%0#0",
        "prior#0 (copy)"
      ]
    },
    "716": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%0#0",
        "prior#0",
        "prior#0 (copy)"
      ],
      "stack_out": [
        "prior#0",
        "item_start_offset%0#0",
        "prior#0 (copy)",
        "2"
      ]
    },
    "717": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "prior#0"
      ],
      "stack_out": [
        "prior#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "718": {
      "op": "dig 2",
      "stack_out": [
        "prior#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "prior#0 (copy)"
      ]
    },
    "720": {
      "op": "uncover 2",
      "stack_out": [
        "prior#0",
        "item_end_offset%0#0",
        "prior#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "722": {
      "op": "dig 2",
      "defined_out": [
        "item_end_offset%0#0",
        "item_end_offset%0#0 (copy)",
        "item_start_offset%0#0",
        "prior#0",
        "prior#0 (copy)"
      ],
      "stack_out": [
        "prior#0",
        "item_end_offset%0#0",
        "prior#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0 (copy)"
      ]
    },
    "724": {
      "op": "substring3",
      "defined_out": [
        "item_end_offset%0#0",
        "prior#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "prior#0",
        "item_end_offset%0#0",
        "tmp%3#0"
      ]
    },
    "725": {
      "op": "dig 2",
      "stack_out": [
        "prior#0",
        "item_end_offset%0#0",
        "tmp%3#0",
        "prior#0 (copy)"
      ]
    },
    "727": {
      "op": "len",
      "defined_out": [
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "prior#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "prior#0",
        "item_end_offset%0#0",
        "tmp%3#0",
        "item_end_offset%1#0"
      ]
    },
    "728": {
      "op": "uncover 3",
      "stack_out": [
        "item_end_offset%0#0",
        "tmp%3#0",
        "item_end_offset%1#0",
        "prior#0"
      ]
    },
    "730": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%3#0",
        "item_end_offset%1#0",
        "prior#0",
        "item_end_offset%0#0"
      ]
    },
    "732": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "prior#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0"
      ]
    },
    "734": {
      "op": "substring3",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "735": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "name#0 (copy)"
      ]
    },
    "737": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "data_length%0#0"
      ]
    },
    "738": {
      "op": "intc_3 // 6",
      "defined_out": [
        "6",
        "data_length%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "data_length%0#0",
        "6"
      ]
    },
    "739": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "current_tail_offset%1#0"
      ]
    },
    "740": {
      "op": "dup",
      "defined_out": [
        "current_tail_offset%1#0",
        "current_tail_offset%1#0 (copy)",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "current_tail_offset%1#0",
        "current_tail_offset%1#0 (copy)"
      ]
    },
    "741": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "current_tail_offset%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "current_tail_offset%1#0",
        "as_bytes%1#0"
      ]
    },
    "742": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%1#0",
        "offset_as_uint16%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "current_tail_offset%1#0",
        "offset_as_uint16%1#0"
      ]
    },
    "745": {
      "op": "bytec 9 // 0x0006",
      "defined_out": [
        "0x0006",
        "current_tail_offset%1#0",
        "offset_as_uint16%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "current_tail_offset%1#0",
        "offset_as_uint16%1#0",
        "0x0006"
      ]
    },
    "747": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "current_tail_offset%1#0",
        "0x0006",
        "offset_as_uint16%1#0"
      ]
    },
    "748": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "749": {
      "op": "dig 3",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "tmp%3#0 (copy)"
      ]
    },
    "751": {
      "op": "len",
      "defined_out": [
        "current_tail_offset%1#0",
        "data_length%1#0",
        "encoded_tuple_buffer%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "data_length%1#0"
      ]
    },
    "752": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "encoded_tuple_buffer%2#0",
        "data_length%1#0",
        "current_tail_offset%1#0"
      ]
    },
    "754": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%2#0"
      ]
    },
    "755": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "encoded_tuple_buffer%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "encoded_tuple_buffer%2#0",
        "as_bytes%2#0"
      ]
    },
    "756": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "offset_as_uint16%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "encoded_tuple_buffer%2#0",
        "offset_as_uint16%2#0"
      ]
    },
    "759": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "760": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "encoded_tuple_buffer%3#0",
        "name#0 (copy)"
      ]
    },
    "762": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "763": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "encoded_tuple_buffer%4#0",
        "tmp%3#0"
      ]
    },
    "765": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "766": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%4#0"
      ]
    },
    "767": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "768": {
      "op": "bytec 10 // 0x0002",
      "defined_out": [
        "0x0002",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "0x0002"
      ]
    },
    "770": {
      "op": "swap",
      "stack_out": [
        "0x0002",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "771": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0"
      ]
    },
    "772": {
      "op": "pushbytes 0xae7a4fa0 // method \"DocumentRemoved((byte[],string,byte[]))\"",
      "defined_out": [
        "Method(DocumentRemoved((byte[],string,byte[])))",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "Method(DocumentRemoved((byte[],string,byte[])))"
      ]
    },
    "778": {
      "op": "swap",
      "stack_out": [
        "Method(DocumentRemoved((byte[],string,byte[])))",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "779": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "780": {
      "op": "log",
      "stack_out": []
    },
    "781": {
      "retsub": true,
      "op": "retsub"
    },
    "782": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "params": {},
      "block": "_ensureDefaultOwner",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "783": {
      "op": "bytec 4 // \"arc88_oi\"",
      "defined_out": [
        "\"arc88_oi\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_oi\""
      ]
    },
    "785": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "786": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "788": {
      "op": "bz _ensureDefaultOwner_if_body@2",
      "stack_out": []
    },
    "791": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "792": {
      "op": "bytec 4 // \"arc88_oi\"",
      "stack_out": [
        "0",
        "\"arc88_oi\""
      ]
    },
    "794": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "795": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "796": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "797": {
      "op": "bnz _ensureDefaultOwner_after_if_else@5",
      "stack_out": []
    },
    "800": {
      "block": "_ensureDefaultOwner_if_body@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "801": {
      "op": "bytec_0 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "802": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "803": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%2#0"
      ]
    },
    "805": {
      "op": "bnz _ensureDefaultOwner_after_if_else@4",
      "stack_out": []
    },
    "808": {
      "op": "bytec_0 // \"arc88_o\"",
      "stack_out": [
        "\"arc88_o\""
      ]
    },
    "809": {
      "op": "global CreatorAddress",
      "defined_out": [
        "\"arc88_o\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"arc88_o\"",
        "new_state_value%0#0"
      ]
    },
    "811": {
      "op": "app_global_put",
      "stack_out": []
    },
    "812": {
      "block": "_ensureDefaultOwner_after_if_else@4",
      "stack_in": [],
      "op": "bytec 4 // \"arc88_oi\"",
      "defined_out": [
        "\"arc88_oi\""
      ],
      "stack_out": [
        "\"arc88_oi\""
      ]
    },
    "814": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "\"arc88_oi\"",
        "0x01"
      ],
      "stack_out": [
        "\"arc88_oi\"",
        "0x01"
      ]
    },
    "817": {
      "op": "app_global_put",
      "stack_out": []
    },
    "818": {
      "block": "_ensureDefaultOwner_after_if_else@5",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "819": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_owner",
      "params": {},
      "block": "arc88_owner",
      "stack_in": [],
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "822": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "823": {
      "op": "bytec_0 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "824": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "825": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "826": {
      "retsub": true,
      "op": "retsub"
    },
    "827": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_is_owner",
      "params": {
        "query#0": "bytes"
      },
      "block": "arc88_is_owner",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "830": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "833": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "834": {
      "op": "bytec_0 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "835": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "836": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "838": {
      "op": "bnz arc88_is_owner_after_if_else@2",
      "stack_out": []
    },
    "841": {
      "op": "bytec 7 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "843": {
      "retsub": true,
      "op": "retsub"
    },
    "844": {
      "block": "arc88_is_owner_after_if_else@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "845": {
      "op": "bytec_0 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "846": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "847": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "848": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "849": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "850": {
      "op": "bz arc88_is_owner_after_if_else@4",
      "stack_out": []
    },
    "853": {
      "op": "bytec 7 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "855": {
      "retsub": true,
      "op": "retsub"
    },
    "856": {
      "block": "arc88_is_owner_after_if_else@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "857": {
      "op": "bytec_0 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "858": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "859": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "860": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%2#0",
        "query#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "query#0 (copy)"
      ]
    },
    "862": {
      "op": "==",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "863": {
      "op": "bytec 7 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "865": {
      "op": "intc_0 // 0",
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "866": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "868": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "869": {
      "retsub": true,
      "op": "retsub"
    },
    "870": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_initialize_owner",
      "params": {
        "new_owner#0": "bytes"
      },
      "block": "arc88_initialize_owner",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "873": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "874": {
      "op": "bytec 4 // \"arc88_oi\"",
      "defined_out": [
        "\"arc88_oi\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_oi\""
      ]
    },
    "876": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "877": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "879": {
      "op": "bz arc88_initialize_owner_bool_false@3",
      "stack_out": []
    },
    "882": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "883": {
      "op": "bytec 4 // \"arc88_oi\"",
      "stack_out": [
        "0",
        "\"arc88_oi\""
      ]
    },
    "885": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "886": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "887": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "888": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "889": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "890": {
      "op": "bz arc88_initialize_owner_bool_false@3",
      "stack_out": []
    },
    "893": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "894": {
      "block": "arc88_initialize_owner_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "895": {
      "error": "already_initialized",
      "op": "assert // already_initialized",
      "stack_out": []
    },
    "896": {
      "op": "frame_dig -1",
      "defined_out": [
        "new_owner#0 (copy)"
      ],
      "stack_out": [
        "new_owner#0 (copy)"
      ]
    },
    "898": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "new_owner#0 (copy)"
      ],
      "stack_out": [
        "new_owner#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "899": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "900": {
      "error": "zero_address_not_allowed",
      "op": "assert // zero_address_not_allowed",
      "stack_out": []
    },
    "901": {
      "op": "bytec_0 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\""
      ],
      "stack_out": [
        "\"arc88_o\""
      ]
    },
    "902": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"arc88_o\"",
        "new_owner#0 (copy)"
      ]
    },
    "904": {
      "op": "app_global_put",
      "stack_out": []
    },
    "905": {
      "op": "bytec 4 // \"arc88_oi\"",
      "defined_out": [
        "\"arc88_oi\""
      ],
      "stack_out": [
        "\"arc88_oi\""
      ]
    },
    "907": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "\"arc88_oi\"",
        "0x01"
      ],
      "stack_out": [
        "\"arc88_oi\"",
        "0x01"
      ]
    },
    "910": {
      "op": "app_global_put",
      "stack_out": []
    },
    "911": {
      "retsub": true,
      "op": "retsub"
    },
    "912": {
      "block": "arc88_initialize_owner_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "913": {
      "op": "b arc88_initialize_owner_bool_merge@4"
    },
    "916": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_transfer_ownership",
      "params": {
        "new_owner#0": "bytes"
      },
      "block": "arc88_transfer_ownership",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "919": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "922": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "924": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "925": {
      "op": "bytec_0 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "926": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "927": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "928": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "929": {
      "error": "not_owner",
      "op": "assert // not_owner",
      "stack_out": []
    },
    "930": {
      "op": "frame_dig -1",
      "defined_out": [
        "new_owner#0 (copy)"
      ],
      "stack_out": [
        "new_owner#0 (copy)"
      ]
    },
    "932": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "new_owner#0 (copy)"
      ],
      "stack_out": [
        "new_owner#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "933": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "934": {
      "error": "zero_address_not_allowed",
      "op": "assert // zero_address_not_allowed",
      "stack_out": []
    },
    "935": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "936": {
      "op": "bytec_0 // \"arc88_o\"",
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "937": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "previous#0"
      ],
      "stack_out": [
        "previous#0",
        "maybe_exists%1#0"
      ]
    },
    "938": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "previous#0"
      ]
    },
    "939": {
      "op": "bytec_0 // \"arc88_o\"",
      "stack_out": [
        "previous#0",
        "\"arc88_o\""
      ]
    },
    "940": {
      "op": "frame_dig -1",
      "stack_out": [
        "previous#0",
        "\"arc88_o\"",
        "new_owner#0 (copy)"
      ]
    },
    "942": {
      "op": "app_global_put",
      "stack_out": [
        "previous#0"
      ]
    },
    "943": {
      "op": "frame_dig -1",
      "stack_out": [
        "previous#0",
        "new_owner#0 (copy)"
      ]
    },
    "945": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "946": {
      "op": "bytec 11 // method \"arc88_OwnershipTransferred(address,address)\"",
      "defined_out": [
        "Method(arc88_OwnershipTransferred(address,address))",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferred(address,address))"
      ]
    },
    "948": {
      "op": "swap",
      "stack_out": [
        "Method(arc88_OwnershipTransferred(address,address))",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "949": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "950": {
      "op": "log",
      "stack_out": []
    },
    "951": {
      "retsub": true,
      "op": "retsub"
    },
    "952": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_renounce_ownership",
      "params": {},
      "block": "arc88_renounce_ownership",
      "stack_in": [],
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "955": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "957": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "958": {
      "op": "bytec_0 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "959": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "960": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "961": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "962": {
      "error": "not_owner",
      "op": "assert // not_owner",
      "stack_out": []
    },
    "963": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "964": {
      "op": "bytec_0 // \"arc88_o\"",
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "965": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "previous#0"
      ],
      "stack_out": [
        "previous#0",
        "maybe_exists%1#0"
      ]
    },
    "966": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "previous#0"
      ]
    },
    "967": {
      "op": "bytec_0 // \"arc88_o\"",
      "stack_out": [
        "previous#0",
        "\"arc88_o\""
      ]
    },
    "968": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "\"arc88_o\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "previous#0"
      ],
      "stack_out": [
        "previous#0",
        "\"arc88_o\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "969": {
      "op": "app_global_put",
      "stack_out": [
        "previous#0"
      ]
    },
    "970": {
      "op": "pushbytes 0x346aa166 // method \"arc88_OwnershipRenounced(address)\"",
      "defined_out": [
        "Method(arc88_OwnershipRenounced(address))",
        "previous#0"
      ],
      "stack_out": [
        "previous#0",
        "Method(arc88_OwnershipRenounced(address))"
      ]
    },
    "976": {
      "op": "swap",
      "stack_out": [
        "Method(arc88_OwnershipRenounced(address))",
        "previous#0"
      ]
    },
    "977": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "978": {
      "op": "log",
      "stack_out": []
    },
    "979": {
      "retsub": true,
      "op": "retsub"
    },
    "980": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_transfer_ownership_request",
      "params": {
        "pending#0": "bytes"
      },
      "block": "arc88_transfer_ownership_request",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "983": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "986": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "988": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "989": {
      "op": "bytec_0 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "990": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "991": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "992": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "993": {
      "error": "not_owner",
      "op": "assert // not_owner",
      "stack_out": []
    },
    "994": {
      "op": "frame_dig -1",
      "defined_out": [
        "pending#0 (copy)"
      ],
      "stack_out": [
        "pending#0 (copy)"
      ]
    },
    "996": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "pending#0 (copy)"
      ],
      "stack_out": [
        "pending#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "997": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "998": {
      "error": "zero_address_not_allowed",
      "op": "assert // zero_address_not_allowed",
      "stack_out": []
    },
    "999": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1000": {
      "op": "bytec_2 // \"arc88_po\"",
      "defined_out": [
        "\"arc88_po\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_po\""
      ]
    },
    "1001": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1002": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "1004": {
      "op": "bz arc88_transfer_ownership_request_after_if_else@3",
      "stack_out": []
    },
    "1007": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1008": {
      "op": "bytec_2 // \"arc88_po\"",
      "stack_out": [
        "0",
        "\"arc88_po\""
      ]
    },
    "1009": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1010": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1011": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "stack_out": [
        "maybe_value%2#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "1012": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1013": {
      "op": "!",
      "defined_out": [
        "not%tmp%3#0"
      ],
      "stack_out": [
        "not%tmp%3#0"
      ]
    },
    "1014": {
      "error": "pending_transfer_exists",
      "op": "assert // pending_transfer_exists",
      "stack_out": []
    },
    "1015": {
      "block": "arc88_transfer_ownership_request_after_if_else@3",
      "stack_in": [],
      "op": "bytec_2 // \"arc88_po\"",
      "defined_out": [
        "\"arc88_po\""
      ],
      "stack_out": [
        "\"arc88_po\""
      ]
    },
    "1016": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"arc88_po\"",
        "pending#0 (copy)"
      ],
      "stack_out": [
        "\"arc88_po\"",
        "pending#0 (copy)"
      ]
    },
    "1018": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1019": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1020": {
      "op": "bytec_0 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "1021": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1022": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "1023": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%3#0",
        "pending#0 (copy)"
      ]
    },
    "1025": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1026": {
      "op": "pushbytes 0x16bf1f91 // method \"arc88_OwnershipTransferRequested(address,address)\"",
      "defined_out": [
        "Method(arc88_OwnershipTransferRequested(address,address))",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferRequested(address,address))"
      ]
    },
    "1032": {
      "op": "swap",
      "stack_out": [
        "Method(arc88_OwnershipTransferRequested(address,address))",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1033": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "1034": {
      "op": "log",
      "stack_out": []
    },
    "1035": {
      "retsub": true,
      "op": "retsub"
    },
    "1036": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_accept_ownership",
      "params": {},
      "block": "arc88_accept_ownership",
      "stack_in": [],
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "1039": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1040": {
      "op": "bytec_2 // \"arc88_po\"",
      "defined_out": [
        "\"arc88_po\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_po\""
      ]
    },
    "1041": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1042": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1044": {
      "error": "not_pending_owner",
      "op": "assert // not_pending_owner",
      "stack_out": []
    },
    "1045": {
      "op": "txn Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "1047": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sender#0",
        "0"
      ]
    },
    "1048": {
      "op": "bytec_2 // \"arc88_po\"",
      "stack_out": [
        "sender#0",
        "0",
        "\"arc88_po\""
      ]
    },
    "1049": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1050": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "sender#0",
        "maybe_value%1#0"
      ]
    },
    "1051": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%1#0",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "maybe_value%1#0",
        "sender#0 (copy)"
      ]
    },
    "1053": {
      "op": "==",
      "defined_out": [
        "sender#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%0#0"
      ]
    },
    "1054": {
      "error": "not_pending_owner",
      "op": "assert // not_pending_owner",
      "stack_out": [
        "sender#0"
      ]
    },
    "1055": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sender#0",
        "0"
      ]
    },
    "1056": {
      "op": "bytec_0 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "1057": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "previous#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "previous#0",
        "maybe_exists%2#0"
      ]
    },
    "1058": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "sender#0",
        "previous#0"
      ]
    },
    "1059": {
      "op": "bytec_0 // \"arc88_o\"",
      "stack_out": [
        "sender#0",
        "previous#0",
        "\"arc88_o\""
      ]
    },
    "1060": {
      "op": "dig 2",
      "stack_out": [
        "sender#0",
        "previous#0",
        "\"arc88_o\"",
        "sender#0 (copy)"
      ]
    },
    "1062": {
      "op": "app_global_put",
      "stack_out": [
        "sender#0",
        "previous#0"
      ]
    },
    "1063": {
      "op": "bytec_2 // \"arc88_po\"",
      "stack_out": [
        "sender#0",
        "previous#0",
        "\"arc88_po\""
      ]
    },
    "1064": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "\"arc88_po\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "previous#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "previous#0",
        "\"arc88_po\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "1065": {
      "op": "app_global_put",
      "stack_out": [
        "sender#0",
        "previous#0"
      ]
    },
    "1066": {
      "op": "swap",
      "stack_out": [
        "previous#0",
        "sender#0"
      ]
    },
    "1067": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1068": {
      "op": "pushbytes 0xf7e36b37 // method \"arc88_OwnershipTransferAccepted(address,address)\"",
      "defined_out": [
        "Method(arc88_OwnershipTransferAccepted(address,address))",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferAccepted(address,address))"
      ]
    },
    "1074": {
      "op": "dig 1",
      "defined_out": [
        "Method(arc88_OwnershipTransferAccepted(address,address))",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%2#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferAccepted(address,address))",
        "encoded_tuple_buffer%2#0 (copy)"
      ]
    },
    "1076": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "event%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "event%0#0"
      ]
    },
    "1077": {
      "op": "log",
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1078": {
      "op": "bytec 11 // method \"arc88_OwnershipTransferred(address,address)\"",
      "defined_out": [
        "Method(arc88_OwnershipTransferred(address,address))",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferred(address,address))"
      ]
    },
    "1080": {
      "op": "swap",
      "stack_out": [
        "Method(arc88_OwnershipTransferred(address,address))",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1081": {
      "op": "concat",
      "defined_out": [
        "event%1#0"
      ],
      "stack_out": [
        "event%1#0"
      ]
    },
    "1082": {
      "op": "log",
      "stack_out": []
    },
    "1083": {
      "retsub": true,
      "op": "retsub"
    },
    "1084": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_cancel_ownership_request",
      "params": {},
      "block": "arc88_cancel_ownership_request",
      "stack_in": [],
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "1087": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1089": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1090": {
      "op": "bytec_0 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "1091": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1092": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1093": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1094": {
      "error": "not_owner",
      "op": "assert // not_owner",
      "stack_out": []
    },
    "1095": {
      "op": "bytec_2 // \"arc88_po\"",
      "defined_out": [
        "\"arc88_po\""
      ],
      "stack_out": [
        "\"arc88_po\""
      ]
    },
    "1096": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "\"arc88_po\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ],
      "stack_out": [
        "\"arc88_po\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "1097": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1098": {
      "retsub": true,
      "op": "retsub"
    }
  }
}