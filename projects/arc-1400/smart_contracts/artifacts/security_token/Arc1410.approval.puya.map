{
  "version": 3,
  "sources": [
    "C:/Users/scholtz/source/repos/scholtz/arc-1400/projects/arc-1400/smart_contracts/security_token/arc1410.algo.ts",
    "C:/Users/scholtz/source/repos/scholtz/arc-1400/projects/arc-1400/smart_contracts/security_token/arc200.algo.ts",
    "C:/Users/scholtz/source/repos/scholtz/arc-1400/projects/arc-1400/smart_contracts/security_token/arc88.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AE+CG;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AFtBH;;;AEsBG;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AFFH;;;AEEG;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AFMH;;;AENG;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AFeH;;;AEfG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AD8IA;;AAAA;AAAA;AAAA;;AAAA;ADzHH;;;AAAA;;;ACyHG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AD7GH;;;AAAA;;;AC6GG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AD5FH;;;AAAA;;;AAAA;;;AC4FG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;ADnEH;;;ACmEG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA1BA;;AAAA;AAAA;AAAA;;AAAA;ADAH;;;AAAA;;;AAAA;;;AAAA;;;ACAG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AD+WA;;AAAA;AAAA;AAAA;;AAAA;AA/WH;;;AAAA;;;AAAA;;;AAAA;;;AA+WG;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAhWH;;;AAAA;;;AAAA;;;AAgWG;;;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;AAvUH;;;AAAA;;;AAAA;;;AAAA;;;AAuUG;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AA3TH;;;AAAA;;;AAAA;;;AA2TG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AA/SH;;;AAAA;;;AAAA;;;AAAA;;;AA+SG;;;AAAA;;AAzLA;;AAAA;AAAA;AAAA;;AAAA;AAtHH;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAsHG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA9BA;;AAAA;AAAA;AAAA;;AAAA;AAxFH;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAwFG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AA/EH;;;AAAA;;;AAAA;;;AA+EG;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAxEH;;;AAAA;;;AAAA;;;AAwEG;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AA1DH;;;AAAA;;;AAAA;;;AA0DG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAnDH;;;AAAA;;;AAmDG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AArCH;;;AAAA;;;AAAA;;;AAAA;;;AAqCG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAtBH;;;AAAA;;;AAsBG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAbH;;;AAAA;;;AAaG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAbH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAaE;;;AAEc;;AAAA;;AAAA;AAd+D;;AAAA;AAAA;AAkB/C;AAAA;AAA5B;AAGF;;;AAGyB;;AACrB;AAFF;;AAIE;AAJF;;AAME;;AANF;;;AAQ2C;;AAApC;;AAAA;;AAAA;;;AAAP;AAKF;;;AAOsC;;AAEhC;;AAAA;;AAAoB;;;AACxB;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AACA;AAGF;;;AAEc;;AAAA;;AAAA;AAjDD;;AAAA;AAAA;AAAA;AAkD8B;AAAA;;AAArC;;;AAAoD;;AAAP;AAAA;AACN;;AAAA;AAAA;AAA3C;AAAA;AAGF;;;;;;AAEM;;AAAA;;AAAA;AAAJ;;;AAAgC;;AAAP;;AAAA;AACR;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAvDoD;;AAAA;AAAA;AAAA;AAAA;;AAwDxC;AAAA;;AAAzB;;;AAA4D;;AAAA;AAAA;AAAM;AAAW;AAA1C;AAAnC;;;AACK;;AAAP;;AAAA;AAEgB;;AAAyE;AAAzE;AA3DmD;;AAAA;AAAA;AAAA;AAAA;;AA4DvC;AAAA;;AAA1B;;;AAA8D;;AAAA;AAAA;AAAM;AAAW;AAA3C;AAApC;;;AACK;;AAAP;;AAAA;AAEK;;AAAP;;AAAA;AAGF;;;AAE8B;;AAArB;;AAAA;AAAP;AACY;;AAAA;;AAAA;AAAA;;AAAA;AArEyD;;AAAA;AAAA;AAsEzC;;AAA5B;;AAGF;;;AAE8B;;AAArB;;AAAA;AAAP;AACY;;AAAA;;AAAA;AAAA;;AAAA;AA5EyD;;AAAA;AAAA;AAAA;AA6E7C;AAAA;;AAAxB;;;AACsB;;AAAA;;;AAIxB;;;;AAQsC;;AAEnB;;AAFX;;AAEW;;AAAA;;;;AAAkD;AAAW;AAA7D;AAAb;;AAEA;;;AAEW;;AAAA;;AAAA;AAAA;;AAAA;AA/FiF;;AAAA;AAAA;AAAA;AAAA;;AAgGrD;AAAA;;AAAzC;;;AACyD;;AAAA;AAAA;AAAA;AAChD;AAAA;;AAAA;AAAP;AACa;AAAb;;AAG+D;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA7C;;;;;;;AAGJ;AACI;;AAAA;;AAAoB;;;AACxB;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AACA;;AAAA;AAGF;;;;;;;;AA6EyB;;AAAA;;AAAA;AAlMoD;;AAAA;AAAA;AAAA;AAkMgB;AAAA;;AArEvF;;;AACK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;;AAAA;AAOkF;;AAAA;AAAA;AAAlF;;AAAA;AADF;;;AAGS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;;AAAA;AAOE;;AAAO;AAAP;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;;AAAA;AAQI;;AAAkC;AAAlC;;AACF;;AAAA;AAAJ;;;AACmB;;AAAA;;AAAA;;AAAA;;;;AAAsD;AAAW;AAAjE;AAAb;AAAA;;;;;AACA;;;AACW;;AAAA;;AAAA;AAAA;;AAAA;AArJ+E;;AAAA;AAAA;AAAA;AAAA;;AAsJnD;AAAA;;;;;;AAAzC;;;AACyD;;AAAA;AAAA;AACnD;;AAAA;AAAJ;;;AACe;AAAb;;;;;;;;AAIF;;;AACK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;;AAAA;AAQA;;AAAA;;AAAoB;;;AAEjB;;;;;AAAA;AAAA;AAEG;;;;;;;;;;;AAFH;AAAP;;AAAA;AAYF;;;AAC0B;AACJ;;AAAA;;AAAA;AA5LuD;;AAAA;AAAA;AA4Le;AAAA;;AAA1F;;;;;;;AAGA;;AAAA;AAAA;AAgBF;;;;;;;;;;AA9MqF;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAgNrC;AAAA;;AAA1C;;;AACF;;AAFS;;AAET;AAEwD;;AAAA;AAAA;AAAA;;AAAA;AAC9C;AAAR;;AALO;;AAMF;;AAAwB;;AAAA;AAAA;AAAA;;AAAkB;;AAAA;AAAA;AAAA;;AAA1B;AAAzB;;;AACuB;;AAAA;;AAAA;AApNZ;;AAAA;AAAA;AAAA;AAAA;;AAwNyC;AAAA;;AAA9C;;;AACoD;;AAAA;;AAAA;AAAtD;;AAAA;AAAA;;AAAA;AAAA;AAGoE;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA1BxE;AAAA;AAAA;;;;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACM;;AAAA;AAAJ;;;AAAoB;AAyBpB;;;AACU;AAAR;;AAIA;;AAAA;;;AACmB;;AAAA;;AAAA;AAlOZ;;AAAA;AAAA;AAAA;AAAA;;AAsOwE;AAAA;AAAM;AAAA;AAApE;AACJ;AAAS;;AAApB;AAAJ;;;AAGoD;;AAAA;AAAA;AAAA;AADG;;;AAEnD;;AAAA;;AAAA;AAFmD;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAArD;;AAAA;;AAAA;;AAKqC;;AAAkB;AAAlB;AAAjB;AACpB;;AAAA;;AAAA;AACwB;;AAAA;AAAA;AAIiC;;AAAA;;AAAA;AApPlD;;AAAA;;AAAA;AAoPP;AAAA;;AAAA;AAAA;;AAjCkF;;AAAiB;AAAjB;AAAjB;AAAA;;;;;;;;;;;;;;AAd9D;AAuBD;;;AAsCR;;;;;AAQS;;AAAgB;;AAAhB;AAAP;AAEgB;;AAAA;;AAAA;AA/Q2D;;AAAA;AAAA;AAAA;AAgR7C;AAAA;;AAA1B;;;AACF;;AAAiC;AAAjC;AAE0E;;AAAA;AAAA;AAAA;AAAzB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAjC;AAKE;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAFF;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAYI;;AAAA;;AAAA;AAAJ;;;AACE;;AAAA;;AAAA;;;AAIY;;AAAA;;AAAA;AAvS6D;;AAAA;AAAA;AAAA;AAAA;;AAwS/C;AAAA;;AAAxB;;;AACF;;AAA+B;AAA/B;AAEsE;;AAAA;AAAA;AAAA;AAAvB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA/B;;AAGF;;;AAO8B;;AAArB;;AAAA;AAAP;AACY;;AAAA;;AAAA;AAAA;;AAAA;AAhToF;;AAAA;AAAA;AAiThG;;AAAA;;AAGF;;;;AAMM;;AAAA;;AAAA;AAAJ;;;AAAgC;;AAAP;AAAA;AACb;;AAAA;;AAAA;AAAA;;AAAA;AA3ToF;;AAAA;AAAA;AAAA;AAAA;;AA4TvD;AAAA;;AAArC;;;AAAoD;;AAAP;AAAA;AACQ;;AAAA;AAAA;AAAe;;AAAnD;AAAd;;AAAA;AAAA;;AAAA;AAAP;AAAA;AAGF;;;;;AAOkD;;AAAzC;;;;AAAkD;AAAW;AAA7D;AAAP;AACO;;AAAgB;;AAAhB;AAAP;AAEc;;AAAA;;AAAA;AAAA;AAhV6D;;AAAA;AAAA;AAAA;AAiV/C;AAAA;;AAAxB;;;AACF;;AAA+B;AAA/B;AACA;;AAAA;;AAAA;;;AAEsE;;AAAA;AAAA;AAAA;AAAvB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA/B;ACzVuD;;AAAA;;AAAA;AAAA;AAAA;;AD2VhC;AAAA;;AAAnB;;;AACF;;AAA0B;AAA1B;AAE4D;;AAAA;AAAA;AAAA;AAAlB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA1B;AChWgD;AAAA;AAAA;AAAA;ADiWL;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;ACjWuB;ADiWhD;AAAA;AACc;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAd;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;AAGF;;;AAEoC;;AAC3B;;AAAgB;;AAAhB;AAAP;AACgB;AAAA;;AAAA;AAAA;AAAA;;AAnW2D;;AAAA;AAAA;AAoW3C;AAAA;AAAA;;AAAhC;AACgC;AAAA;AAAA;AAAzB;;AAAA;AAAP;AAC4E;AAAA;AAAA;AAAzB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAjC;AC1WuD;;AAAA;AAAA;AAAA;AD4W5B;AAAA;;AAApB;;;AAAkD;;AAAA;AAAA;AAApB;;AAAA;AAA9B;;;;AAAP;AACkE;;AAAA;AAAA;AAAA;AAApB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA5B;AC/WgD;AAAA;AAAA;AAAA;ADgXL;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AChXuB;ADgXhD;AAAA;AACe;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAf;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAGF;;;;;;AAOsC;;AAEnB;;AAFX;;AAEW;;AAAA;;;;AAAkD;AAAW;AAA7D;AAAb;;AACA;;;AACW;;AAAA;;AAAA;AAAA;;AAAA;AAnXiF;;AAAA;AAAA;AAAA;AAAA;;AAoXrD;AAAA;;AAAzC;;;AACyD;;AAAA;AAAA;AAAA;AAChD;AAAA;;AAAA;AAAP;AACa;AAAb;;AAC+D;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA7C;;;;;;;AAGJ;AAEgB;;AAAA;;AAAA;AAAA;AAAA;;AAnY2D;;AAAA;AAAA;AAoY3C;AAAA;AAAA;;AAAhC;AACgC;AAAA;AAAA;AAAzB;;AAAA;AAAP;AAC4E;AAAA;AAAA;AAAzB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAjC;AC1YuD;;AAAA;;AAAA;AAAA;AAAA;;AD2Y5B;AAAA;;AAApB;;;AAAkD;;AAAA;AAAA;AAApB;;AAAA;AAA9B;;;;AAAP;AACkE;;AAAA;AAAA;AAAA;AAApB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA5B;AC9YgD;AAAA;AAAA;AAAA;AD+YL;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AC/YuB;AD+YhD;AAAA;AACe;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAf;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AC3YF;;;AAEa;;AAAkB;;AAAtB;AAAP;AACY;;AAAA;;;AAAO;AAAnB;AAAA;AAC6B;AAAtB;AAAP;AACc;;AAAA;;;AAAO;AAArB;AAAA;AAC+B;AAAxB;AAAP;AAXgD;AAAA;AAYvB;AAAA;;AAAlB;AAAP;AAxB6C;;;AA0B7C;;AAAA;AAtB+C;;;AAuB/C;;AAAA;AAfgD;AAgBhD;;AAAA;AApB2C;;;AAqB3C;;AAAA;AAC+B;;AAhBwB;;AAAA;;AAAA;AAkBvD;;AAAA;AAEoD;;AAA/C;AAAA;AAAA;;AAAA;AAAL;;AAAA;AAAA;AAAA;AACO;;AAAP;AAnC6C;AAAA;;;AAAA;AAAA;AA6CF;;;AAApC;AAAA;AAAA;AAAA;AAAA;AAAP;AAzC+C;AAAA;;;AAAA;AAAA;AAmDH;;;AAArC;AAAA;AAAA;AAAA;AAAA;AAAP;AA/C2C;AAAA;;;AAAA;AAAA;AAyD3C;AArDgD;AAAA;AAAA;AAAA;AA+DhD;AASF;;;AAES;;AAAA;;;AAAP;AAuBF;;;AAEkC;;AAC1B;;AAAA;;AAAoB;;;AACnB;AAAA;;AAAA;AAAP;AAC2C;;AAAA;AAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9B;;AAAA;;AAAA;;;;AACO;;AAAA;;AAAA;;AAAA;;;AAAP;AAUF;;;AAEgC;;AACvB;;AAAA;;AAAA;;;AAAP;AASF;;;AAES;;AAAA;;AAAA;;;AAAP;AAGF;;;AAjIyD;;AAAA;;AAAA;AAAA;AAkI7B;AAAA;;AAAtB;;;AAAqC;AAAP;AAAA;AACN;;AAAA;AAAA;AAA5B;AAAA;AAGF;;;AACQ;;AAAiB;;;AAAjB;AACA;;AAAoB;;;AAApB;AACC;;AAAA;AAAP;AAEI;;AAAA;;AAAA;AAAJ;;;AAE6C;;AAAA;;AAAA;AAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AA7IuB;;AAAA;;AAAA;AA6IrD;AAAA;AAC8C;;AAAA;;AAAA;AAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AA9IoB;;AAAA;;AAAA;AA8IrD;AAAA;AAEG;;AAAA;;AAAA;AAAA;;AAAA;AAAL;;AAAA;AAAA;AAAA;AACO;;AAAP;;AAAA;AAEF;;;AACuC;;AAAA;;AAAA;AAAV;AAApB;AAAA;AAAA;AAAA;AAAA;AAAP;AAGF;;;AACQ;;AAAA;;AAAM;;;AAtJ0D;;;AAAA;AAAA;AAAA;AAuJ7C;AAAA;;AAArB;;;AAAoC;AAAP;AAAA;AACN;;AAAA;AAAA;AAAM;;;AAAjC;AAAA;AAGF;;;AACQ;;AAAA;;AAAM;;;AACwB;;AAAA;;AAAA;AAAA;;AAAA;AA7JkC;;;AAAA;;AAAA;AAkKtE;AAAA;AACK;;AAAA;;AAAA;AAAA;;AAAA;AAAL;;;;;;AAAA;AAAA;AAAA;AACO;;AAAP;ACxMiD;AAAA;;AAQ3B;AAAA;;AAAlB;;;AAR6C;AAAA;;AAAA;AAAA;AAQQ;AAArD;;;AAV0C;AAAA;AAW5B;AAAA;;AAAZ;;;AAXwC;AAYC;;AAA3C;AAV6C;;AAYtB;;AAAzB;;AAMF;;;AApB8C;AAAA;AAAA;AAAA;AAqB9C;AAGF;;;AAEE;;;AA1B8C;AAAA;AA2B9B;AAAA;;AAAZ;;;AAA6B;;AAAP;AA3BoB;AAAA;AAAA;AAAA;AA4BrB;AAArB;AAAJ;;;AAAoD;;AAAP;AA5BC;AAAA;AAAA;AAAA;AA6BzB;;AAAA;AAAd;;AAAA;AAAA;;AAAA;AAAP;AAIF;;;AA/BmD;AAAA;;AAiCvB;AAAA;;AAAjB;;;AAjCwC;AAAA;;AAAA;AAAA;AAiCY;AAAW;AAAlC;AAA7B;;;;AAAF;AAAP;AACO;;AAAc;AAAd;AAAP;AApC8C;AAqC9C;;AAAA;AAnCiD;;AAoCxB;;AAAzB;;;;;;AAGF;;;AAEE;;;AAC4B;;AA5CkB;AAAA;AAAA;AAAA;AA4CvC;AAAP;AACO;;AAAc;AAAd;AAAP;AA7C8C;AAAA;AAAA;AAAA;AAAA;AA+C9C;;AAAA;AACK;;AAAA;AAAL;;AAAA;AAAA;AAAA;;AAKA;;;AAC4B;;AAtDkB;AAAA;AAAA;AAAA;AAsDvC;AAAP;AAtD8C;AAAA;AAAA;AAAA;AAAA;AAwD3B;AAAnB;AACA;;;;;;AAAA;AAAA;AAAA;;AAIF;;;AAEE;;;AAC4B;;AAhEkB;AAAA;AAAA;AAAA;AAgEvC;AAAP;AACO;;AAAY;AAAZ;AAAP;AAhEqD;AAAA;;AAiE/B;AAAA;;AAAlB;;;AAjEiD;AAAA;;AAAA;AAAA;AAiES;AAA5B;AAA9B;AAAA;AAjEiD;;AAoErD;;AAAA;AArE8C;AAAA;AAAA;AAAA;AAsEzC;;AAAA;AAAL;;;;;;AAAA;AAAA;AAAA;;AAKA;;;AA1EqD;AAAA;;AA2E5B;AAAA;;AAAzB;AACoC;;AA5EiB;AAAA;;AAAA;AAAA;AA6E9C;;AAAA;AAAP;AA9E8C;AAAA;AAAA;AAAA;AAAA;AAgF9C;;AAAA;AA/EqD;;AAgF3B;AAA1B;AACK;AAAA;AAAL;;;;;;AAAA;;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;;AAKA;;;AAC4B;;AAzFkB;AAAA;AAAA;AAAA;AAyFvC;AAAP;AAxFqD;;AAyF3B;AAA1B;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 32 8"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 0x0000000000000000000000000000000000000000000000000000000000000000 \"arc88_o\" \"t\" \"arc1410_p\" 0x80 \"b\" \"arc88_po\" 0x00 \"arc88_oi\" \"arc1410_opa\" \"arc1410_hp_a\" \"arc1410_op\" 0x0002 0x01 0x0001 0x0062 0x0000 0x0000000000000000 0x5c27b4fc 0x7983c35c 0x4355d2ad"
    },
    "165": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "167": {
      "op": "bz main_bare_routing@38",
      "stack_out": []
    },
    "170": {
      "op": "pushbytess 0x35f8135f 0xda7025b9 0x3f256713 0x95b4f9e3 0x80cc49ab 0x07962165 0xe78961da 0xfd9480d7 0xb1b1d69a 0xc1bed789 0x3bfe1833 0x599cd1a5 0x6de94166 0x28f023d7 0x975382e2 0x657d13ec 0xb6ae1a25 0x84ec13d5 0xec996041 0x82e573c4 0x4a968f8f 0xb5422125 0xbbb319f3 0x0702654e 0xd015724e 0x029fecc0 0x7349334e 0xdb7c82ef 0xfd2c2c6e 0x42a5f065 0xad4f68ea // method \"arc1410_balance_of_partition(address,address)uint256\", method \"arc200_transfer(address,uint256)bool\", method \"arc1410_transfer_by_partition(address,address,uint256,byte[])address\", method \"arc1410_partitions_of(address,uint64)address[]\", method \"arc1410_is_operator(address,address,address)bool\", method \"arc1410_authorize_operator(address,address,address)void\", method \"arc1410_revoke_operator(address,address,address)void\", method \"arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address\", method \"arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)\", method \"arc1410_authorize_operator_by_portion(address,address,address,uint256)void\", method \"arc1410_is_operator_by_portion(address,address,address)bool\", method \"arc1410_issue_by_partition(address,address,uint256,byte[])void\", method \"arc1410_redeem_by_partition(address,uint256,byte[])void\", method \"arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void\", method \"bootstrap(byte[],byte[],uint8,uint256)bool\", method \"arc200_name()byte[32]\", method \"arc200_symbol()byte[8]\", method \"arc200_decimals()uint8\", method \"arc200_totalSupply()uint256\", method \"arc200_balanceOf(address)uint256\", method \"arc200_transferFrom(address,address,uint256)bool\", method \"arc200_approve(address,uint256)bool\", method \"arc200_allowance(address,address)uint256\", method \"arc88_owner()address\", method \"arc88_is_owner(address)bool\", method \"arc88_initialize_owner(address)void\", method \"arc88_transfer_ownership(address)void\", method \"arc88_renounce_ownership()void\", method \"arc88_transfer_ownership_request(address)void\", method \"arc88_accept_ownership()void\", method \"arc88_cancel_ownership_request()void\"",
      "defined_out": [
        "Method(arc1410_authorize_operator(address,address,address)void)",
        "Method(arc1410_authorize_operator_by_portion(address,address,address,uint256)void)",
        "Method(arc1410_balance_of_partition(address,address)uint256)",
        "Method(arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address))",
        "Method(arc1410_is_operator(address,address,address)bool)",
        "Method(arc1410_is_operator_by_portion(address,address,address)bool)",
        "Method(arc1410_issue_by_partition(address,address,uint256,byte[])void)",
        "Method(arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void)",
        "Method(arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address)",
        "Method(arc1410_partitions_of(address,uint64)address[])",
        "Method(arc1410_redeem_by_partition(address,uint256,byte[])void)",
        "Method(arc1410_revoke_operator(address,address,address)void)",
        "Method(arc1410_transfer_by_partition(address,address,uint256,byte[])address)",
        "Method(arc200_allowance(address,address)uint256)",
        "Method(arc200_approve(address,uint256)bool)",
        "Method(arc200_balanceOf(address)uint256)",
        "Method(arc200_decimals()uint8)",
        "Method(arc200_name()byte[32])",
        "Method(arc200_symbol()byte[8])",
        "Method(arc200_totalSupply()uint256)",
        "Method(arc200_transfer(address,uint256)bool)",
        "Method(arc200_transferFrom(address,address,uint256)bool)",
        "Method(arc88_accept_ownership()void)",
        "Method(arc88_cancel_ownership_request()void)",
        "Method(arc88_initialize_owner(address)void)",
        "Method(arc88_is_owner(address)bool)",
        "Method(arc88_owner()address)",
        "Method(arc88_renounce_ownership()void)",
        "Method(arc88_transfer_ownership(address)void)",
        "Method(arc88_transfer_ownership_request(address)void)",
        "Method(bootstrap(byte[],byte[],uint8,uint256)bool)"
      ],
      "stack_out": [
        "Method(arc1410_balance_of_partition(address,address)uint256)",
        "Method(arc200_transfer(address,uint256)bool)",
        "Method(arc1410_transfer_by_partition(address,address,uint256,byte[])address)",
        "Method(arc1410_partitions_of(address,uint64)address[])",
        "Method(arc1410_is_operator(address,address,address)bool)",
        "Method(arc1410_authorize_operator(address,address,address)void)",
        "Method(arc1410_revoke_operator(address,address,address)void)",
        "Method(arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address)",
        "Method(arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address))",
        "Method(arc1410_authorize_operator_by_portion(address,address,address,uint256)void)",
        "Method(arc1410_is_operator_by_portion(address,address,address)bool)",
        "Method(arc1410_issue_by_partition(address,address,uint256,byte[])void)",
        "Method(arc1410_redeem_by_partition(address,uint256,byte[])void)",
        "Method(arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void)",
        "Method(bootstrap(byte[],byte[],uint8,uint256)bool)",
        "Method(arc200_name()byte[32])",
        "Method(arc200_symbol()byte[8])",
        "Method(arc200_decimals()uint8)",
        "Method(arc200_totalSupply()uint256)",
        "Method(arc200_balanceOf(address)uint256)",
        "Method(arc200_transferFrom(address,address,uint256)bool)",
        "Method(arc200_approve(address,uint256)bool)",
        "Method(arc200_allowance(address,address)uint256)",
        "Method(arc88_owner()address)",
        "Method(arc88_is_owner(address)bool)",
        "Method(arc88_initialize_owner(address)void)",
        "Method(arc88_transfer_ownership(address)void)",
        "Method(arc88_renounce_ownership()void)",
        "Method(arc88_transfer_ownership_request(address)void)",
        "Method(arc88_accept_ownership()void)",
        "Method(arc88_cancel_ownership_request()void)"
      ]
    },
    "327": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(arc1410_authorize_operator(address,address,address)void)",
        "Method(arc1410_authorize_operator_by_portion(address,address,address,uint256)void)",
        "Method(arc1410_balance_of_partition(address,address)uint256)",
        "Method(arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address))",
        "Method(arc1410_is_operator(address,address,address)bool)",
        "Method(arc1410_is_operator_by_portion(address,address,address)bool)",
        "Method(arc1410_issue_by_partition(address,address,uint256,byte[])void)",
        "Method(arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void)",
        "Method(arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address)",
        "Method(arc1410_partitions_of(address,uint64)address[])",
        "Method(arc1410_redeem_by_partition(address,uint256,byte[])void)",
        "Method(arc1410_revoke_operator(address,address,address)void)",
        "Method(arc1410_transfer_by_partition(address,address,uint256,byte[])address)",
        "Method(arc200_allowance(address,address)uint256)",
        "Method(arc200_approve(address,uint256)bool)",
        "Method(arc200_balanceOf(address)uint256)",
        "Method(arc200_decimals()uint8)",
        "Method(arc200_name()byte[32])",
        "Method(arc200_symbol()byte[8])",
        "Method(arc200_totalSupply()uint256)",
        "Method(arc200_transfer(address,uint256)bool)",
        "Method(arc200_transferFrom(address,address,uint256)bool)",
        "Method(arc88_accept_ownership()void)",
        "Method(arc88_cancel_ownership_request()void)",
        "Method(arc88_initialize_owner(address)void)",
        "Method(arc88_is_owner(address)bool)",
        "Method(arc88_owner()address)",
        "Method(arc88_renounce_ownership()void)",
        "Method(arc88_transfer_ownership(address)void)",
        "Method(arc88_transfer_ownership_request(address)void)",
        "Method(bootstrap(byte[],byte[],uint8,uint256)bool)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(arc1410_balance_of_partition(address,address)uint256)",
        "Method(arc200_transfer(address,uint256)bool)",
        "Method(arc1410_transfer_by_partition(address,address,uint256,byte[])address)",
        "Method(arc1410_partitions_of(address,uint64)address[])",
        "Method(arc1410_is_operator(address,address,address)bool)",
        "Method(arc1410_authorize_operator(address,address,address)void)",
        "Method(arc1410_revoke_operator(address,address,address)void)",
        "Method(arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address)",
        "Method(arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address))",
        "Method(arc1410_authorize_operator_by_portion(address,address,address,uint256)void)",
        "Method(arc1410_is_operator_by_portion(address,address,address)bool)",
        "Method(arc1410_issue_by_partition(address,address,uint256,byte[])void)",
        "Method(arc1410_redeem_by_partition(address,uint256,byte[])void)",
        "Method(arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void)",
        "Method(bootstrap(byte[],byte[],uint8,uint256)bool)",
        "Method(arc200_name()byte[32])",
        "Method(arc200_symbol()byte[8])",
        "Method(arc200_decimals()uint8)",
        "Method(arc200_totalSupply()uint256)",
        "Method(arc200_balanceOf(address)uint256)",
        "Method(arc200_transferFrom(address,address,uint256)bool)",
        "Method(arc200_approve(address,uint256)bool)",
        "Method(arc200_allowance(address,address)uint256)",
        "Method(arc88_owner()address)",
        "Method(arc88_is_owner(address)bool)",
        "Method(arc88_initialize_owner(address)void)",
        "Method(arc88_transfer_ownership(address)void)",
        "Method(arc88_renounce_ownership()void)",
        "Method(arc88_transfer_ownership_request(address)void)",
        "Method(arc88_accept_ownership()void)",
        "Method(arc88_cancel_ownership_request()void)",
        "tmp%2#0"
      ]
    },
    "330": {
      "op": "match main_arc1410_balance_of_partition_route@5 main_arc200_transfer_route@6 main_arc1410_transfer_by_partition_route@7 main_arc1410_partitions_of_route@8 main_arc1410_is_operator_route@9 main_arc1410_authorize_operator_route@10 main_arc1410_revoke_operator_route@11 main_arc1410_operator_transfer_by_partition_route@12 main_arc1410_can_transfer_by_partition_route@13 main_arc1410_authorize_operator_by_portion_route@14 main_arc1410_is_operator_by_portion_route@15 main_arc1410_issue_by_partition_route@16 main_arc1410_redeem_by_partition_route@17 main_arc1410_operator_redeem_by_partition_route@18 main_bootstrap_route@19 main_arc200_name_route@20 main_arc200_symbol_route@21 main_arc200_decimals_route@22 main_arc200_totalSupply_route@23 main_arc200_balanceOf_route@24 main_arc200_transferFrom_route@25 main_arc200_approve_route@26 main_arc200_allowance_route@27 main_arc88_owner_route@28 main_arc88_is_owner_route@29 main_arc88_initialize_owner_route@30 main_arc88_transfer_ownership_route@31 main_arc88_renounce_ownership_route@32 main_arc88_transfer_ownership_request_route@33 main_arc88_accept_ownership_route@34 main_arc88_cancel_ownership_request_route@35",
      "stack_out": []
    },
    "394": {
      "block": "main_after_if_else@42",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "395": {
      "op": "return",
      "stack_out": []
    },
    "396": {
      "block": "main_arc88_cancel_ownership_request_route@35",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%169#0"
      ]
    },
    "398": {
      "op": "!",
      "defined_out": [
        "tmp%170#0"
      ],
      "stack_out": [
        "tmp%170#0"
      ]
    },
    "399": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "400": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%171#0"
      ]
    },
    "402": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "403": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_cancel_ownership_request",
      "op": "callsub arc88_cancel_ownership_request"
    },
    "406": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "407": {
      "op": "return",
      "stack_out": []
    },
    "408": {
      "block": "main_arc88_accept_ownership_route@34",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%165#0"
      ]
    },
    "410": {
      "op": "!",
      "defined_out": [
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%166#0"
      ]
    },
    "411": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "412": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%167#0"
      ],
      "stack_out": [
        "tmp%167#0"
      ]
    },
    "414": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "415": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_accept_ownership",
      "op": "callsub arc88_accept_ownership"
    },
    "418": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "419": {
      "op": "return",
      "stack_out": []
    },
    "420": {
      "block": "main_arc88_transfer_ownership_request_route@33",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0"
      ]
    },
    "422": {
      "op": "!",
      "defined_out": [
        "tmp%162#0"
      ],
      "stack_out": [
        "tmp%162#0"
      ]
    },
    "423": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "424": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%163#0"
      ]
    },
    "426": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "427": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%52#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%52#0"
      ]
    },
    "430": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_transfer_ownership_request",
      "op": "callsub arc88_transfer_ownership_request",
      "stack_out": []
    },
    "433": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "434": {
      "op": "return",
      "stack_out": []
    },
    "435": {
      "block": "main_arc88_renounce_ownership_route@32",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0"
      ]
    },
    "437": {
      "op": "!",
      "defined_out": [
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%158#0"
      ]
    },
    "438": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "439": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%159#0"
      ]
    },
    "441": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "442": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_renounce_ownership",
      "op": "callsub arc88_renounce_ownership"
    },
    "445": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "446": {
      "op": "return",
      "stack_out": []
    },
    "447": {
      "block": "main_arc88_transfer_ownership_route@31",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%153#0"
      ]
    },
    "449": {
      "op": "!",
      "defined_out": [
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0"
      ]
    },
    "450": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "451": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%155#0"
      ],
      "stack_out": [
        "tmp%155#0"
      ]
    },
    "453": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "454": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%51#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%51#0"
      ]
    },
    "457": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_transfer_ownership",
      "op": "callsub arc88_transfer_ownership",
      "stack_out": []
    },
    "460": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "461": {
      "op": "return",
      "stack_out": []
    },
    "462": {
      "block": "main_arc88_initialize_owner_route@30",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%149#0"
      ]
    },
    "464": {
      "op": "!",
      "defined_out": [
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%150#0"
      ]
    },
    "465": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "466": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%151#0"
      ]
    },
    "468": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "469": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%50#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%50#0"
      ]
    },
    "472": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_initialize_owner",
      "op": "callsub arc88_initialize_owner",
      "stack_out": []
    },
    "475": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "476": {
      "op": "return",
      "stack_out": []
    },
    "477": {
      "block": "main_arc88_is_owner_route@29",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0"
      ]
    },
    "479": {
      "op": "!",
      "defined_out": [
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0"
      ]
    },
    "480": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "481": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%145#0"
      ]
    },
    "483": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "484": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%49#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%49#0"
      ]
    },
    "487": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_is_owner",
      "op": "callsub arc88_is_owner",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0"
      ]
    },
    "490": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0",
        "0x151f7c75"
      ]
    },
    "491": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%147#0"
      ]
    },
    "492": {
      "op": "concat",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%148#0"
      ]
    },
    "493": {
      "op": "log",
      "stack_out": []
    },
    "494": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "495": {
      "op": "return",
      "stack_out": []
    },
    "496": {
      "block": "main_arc88_owner_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0"
      ]
    },
    "498": {
      "op": "!",
      "defined_out": [
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%138#0"
      ]
    },
    "499": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "500": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%139#0"
      ]
    },
    "502": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "503": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_owner",
      "op": "callsub arc88_owner",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "506": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0",
        "0x151f7c75"
      ]
    },
    "507": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%141#0"
      ]
    },
    "508": {
      "op": "concat",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "509": {
      "op": "log",
      "stack_out": []
    },
    "510": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "511": {
      "op": "return",
      "stack_out": []
    },
    "512": {
      "block": "main_arc200_allowance_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "514": {
      "op": "!",
      "defined_out": [
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%132#0"
      ]
    },
    "515": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "516": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%133#0"
      ]
    },
    "518": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "519": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%47#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%47#0"
      ]
    },
    "522": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%47#0",
        "reinterpret_bytes[32]%48#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%47#0",
        "reinterpret_bytes[32]%48#0"
      ]
    },
    "525": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_allowance",
      "op": "callsub arc200_allowance",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "528": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0",
        "0x151f7c75"
      ]
    },
    "529": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%135#0"
      ]
    },
    "530": {
      "op": "concat",
      "defined_out": [
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0"
      ]
    },
    "531": {
      "op": "log",
      "stack_out": []
    },
    "532": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "533": {
      "op": "return",
      "stack_out": []
    },
    "534": {
      "block": "main_arc200_approve_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "536": {
      "op": "!",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "537": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "538": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "540": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "541": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%45#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%45#0"
      ]
    },
    "544": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%45#0",
        "reinterpret_bytes[32]%46#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%45#0",
        "reinterpret_bytes[32]%46#0"
      ]
    },
    "547": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_approve",
      "op": "callsub arc200_approve",
      "defined_out": [
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0"
      ]
    },
    "550": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0",
        "0x151f7c75"
      ]
    },
    "551": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%129#0"
      ]
    },
    "552": {
      "op": "concat",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "553": {
      "op": "log",
      "stack_out": []
    },
    "554": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "555": {
      "op": "return",
      "stack_out": []
    },
    "556": {
      "block": "main_arc200_transferFrom_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "558": {
      "op": "!",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "559": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "560": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "562": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "563": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%42#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%42#0"
      ]
    },
    "566": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%42#0",
        "reinterpret_bytes[32]%43#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%42#0",
        "reinterpret_bytes[32]%43#0"
      ]
    },
    "569": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%42#0",
        "reinterpret_bytes[32]%43#0",
        "reinterpret_bytes[32]%44#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%42#0",
        "reinterpret_bytes[32]%43#0",
        "reinterpret_bytes[32]%44#0"
      ]
    },
    "572": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_transferFrom",
      "op": "callsub arc200_transferFrom",
      "defined_out": [
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0"
      ]
    },
    "575": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0",
        "0x151f7c75"
      ]
    },
    "576": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%123#0"
      ]
    },
    "577": {
      "op": "concat",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0"
      ]
    },
    "578": {
      "op": "log",
      "stack_out": []
    },
    "579": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "580": {
      "op": "return",
      "stack_out": []
    },
    "581": {
      "block": "main_arc200_balanceOf_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "583": {
      "op": "!",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "584": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "585": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "587": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "588": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%41#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%41#0"
      ]
    },
    "591": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_balanceOf",
      "op": "callsub arc200_balanceOf",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "594": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0",
        "0x151f7c75"
      ]
    },
    "595": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%117#0"
      ]
    },
    "596": {
      "op": "concat",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "597": {
      "op": "log",
      "stack_out": []
    },
    "598": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "599": {
      "op": "return",
      "stack_out": []
    },
    "600": {
      "block": "main_arc200_totalSupply_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "602": {
      "op": "!",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "603": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "604": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "606": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "607": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_totalSupply",
      "op": "callsub arc200_totalSupply",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "610": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "0x151f7c75"
      ]
    },
    "611": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%111#0"
      ]
    },
    "612": {
      "op": "concat",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "613": {
      "op": "log",
      "stack_out": []
    },
    "614": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "615": {
      "op": "return",
      "stack_out": []
    },
    "616": {
      "block": "main_arc200_decimals_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "618": {
      "op": "!",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "619": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "620": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "622": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "623": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_decimals",
      "op": "callsub arc200_decimals",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "626": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0",
        "0x151f7c75"
      ]
    },
    "627": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%105#0"
      ]
    },
    "628": {
      "op": "concat",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "629": {
      "op": "log",
      "stack_out": []
    },
    "630": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "631": {
      "op": "return",
      "stack_out": []
    },
    "632": {
      "block": "main_arc200_symbol_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "634": {
      "op": "!",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "635": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "636": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "638": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "639": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_symbol",
      "op": "callsub arc200_symbol",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "642": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0",
        "0x151f7c75"
      ]
    },
    "643": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%99#0"
      ]
    },
    "644": {
      "op": "concat",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "645": {
      "op": "log",
      "stack_out": []
    },
    "646": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "647": {
      "op": "return",
      "stack_out": []
    },
    "648": {
      "block": "main_arc200_name_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "650": {
      "op": "!",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "651": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "652": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "654": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "655": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_name",
      "op": "callsub arc200_name",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "658": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0",
        "0x151f7c75"
      ]
    },
    "659": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%93#0"
      ]
    },
    "660": {
      "op": "concat",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "661": {
      "op": "log",
      "stack_out": []
    },
    "662": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "663": {
      "op": "return",
      "stack_out": []
    },
    "664": {
      "block": "main_bootstrap_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "666": {
      "op": "!",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "667": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "668": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "670": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "671": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "674": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%85#0",
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%85#0",
        "tmp%86#0"
      ]
    },
    "677": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "tmp%85#0",
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%85#0",
        "tmp%86#0",
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "680": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[32]%40#0",
        "tmp%85#0",
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%85#0",
        "tmp%86#0",
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[32]%40#0"
      ]
    },
    "683": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.bootstrap",
      "op": "callsub bootstrap",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "686": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0",
        "0x151f7c75"
      ]
    },
    "687": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%87#0"
      ]
    },
    "688": {
      "op": "concat",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "689": {
      "op": "log",
      "stack_out": []
    },
    "690": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "691": {
      "op": "return",
      "stack_out": []
    },
    "692": {
      "block": "main_arc1410_operator_redeem_by_partition_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "694": {
      "op": "!",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "695": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "696": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "698": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "699": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%37#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%37#0"
      ]
    },
    "702": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%37#0",
        "reinterpret_bytes[32]%38#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%37#0",
        "reinterpret_bytes[32]%38#0"
      ]
    },
    "705": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%37#0",
        "reinterpret_bytes[32]%38#0",
        "reinterpret_bytes[32]%39#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%37#0",
        "reinterpret_bytes[32]%38#0",
        "reinterpret_bytes[32]%39#0"
      ]
    },
    "708": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%37#0",
        "reinterpret_bytes[32]%38#0",
        "reinterpret_bytes[32]%39#0",
        "tmp%80#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%37#0",
        "reinterpret_bytes[32]%38#0",
        "reinterpret_bytes[32]%39#0",
        "tmp%80#0"
      ]
    },
    "711": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_operator_redeem_by_partition",
      "op": "callsub arc1410_operator_redeem_by_partition",
      "stack_out": []
    },
    "714": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "715": {
      "op": "return",
      "stack_out": []
    },
    "716": {
      "block": "main_arc1410_redeem_by_partition_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "718": {
      "op": "!",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "719": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "720": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "722": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "723": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%35#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%35#0"
      ]
    },
    "726": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%35#0",
        "reinterpret_bytes[32]%36#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%35#0",
        "reinterpret_bytes[32]%36#0"
      ]
    },
    "729": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%35#0",
        "reinterpret_bytes[32]%36#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%35#0",
        "reinterpret_bytes[32]%36#0",
        "tmp%75#0"
      ]
    },
    "732": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_redeem_by_partition",
      "op": "callsub arc1410_redeem_by_partition",
      "stack_out": []
    },
    "735": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "736": {
      "op": "return",
      "stack_out": []
    },
    "737": {
      "block": "main_arc1410_issue_by_partition_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "739": {
      "op": "!",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "740": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "741": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "743": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "744": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%32#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%32#0"
      ]
    },
    "747": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%32#0",
        "reinterpret_bytes[32]%33#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%32#0",
        "reinterpret_bytes[32]%33#0"
      ]
    },
    "750": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%32#0",
        "reinterpret_bytes[32]%33#0",
        "reinterpret_bytes[32]%34#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%32#0",
        "reinterpret_bytes[32]%33#0",
        "reinterpret_bytes[32]%34#0"
      ]
    },
    "753": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%32#0",
        "reinterpret_bytes[32]%33#0",
        "reinterpret_bytes[32]%34#0",
        "tmp%70#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%32#0",
        "reinterpret_bytes[32]%33#0",
        "reinterpret_bytes[32]%34#0",
        "tmp%70#0"
      ]
    },
    "756": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_issue_by_partition",
      "op": "callsub arc1410_issue_by_partition",
      "stack_out": []
    },
    "759": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "760": {
      "op": "return",
      "stack_out": []
    },
    "761": {
      "block": "main_arc1410_is_operator_by_portion_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "763": {
      "op": "!",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "764": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "765": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "767": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "768": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%29#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%29#0"
      ]
    },
    "771": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%29#0",
        "reinterpret_bytes[32]%30#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%29#0",
        "reinterpret_bytes[32]%30#0"
      ]
    },
    "774": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%29#0",
        "reinterpret_bytes[32]%30#0",
        "reinterpret_bytes[32]%31#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%29#0",
        "reinterpret_bytes[32]%30#0",
        "reinterpret_bytes[32]%31#0"
      ]
    },
    "777": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator_by_portion",
      "op": "callsub arc1410_is_operator_by_portion",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "780": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0",
        "0x151f7c75"
      ]
    },
    "781": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%64#0"
      ]
    },
    "782": {
      "op": "concat",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "783": {
      "op": "log",
      "stack_out": []
    },
    "784": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "785": {
      "op": "return",
      "stack_out": []
    },
    "786": {
      "block": "main_arc1410_authorize_operator_by_portion_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "788": {
      "op": "!",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "789": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "790": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "792": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "793": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%25#0"
      ]
    },
    "796": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%25#0",
        "reinterpret_bytes[32]%26#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%25#0",
        "reinterpret_bytes[32]%26#0"
      ]
    },
    "799": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%25#0",
        "reinterpret_bytes[32]%26#0",
        "reinterpret_bytes[32]%27#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%25#0",
        "reinterpret_bytes[32]%26#0",
        "reinterpret_bytes[32]%27#0"
      ]
    },
    "802": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%25#0",
        "reinterpret_bytes[32]%26#0",
        "reinterpret_bytes[32]%27#0",
        "reinterpret_bytes[32]%28#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%25#0",
        "reinterpret_bytes[32]%26#0",
        "reinterpret_bytes[32]%27#0",
        "reinterpret_bytes[32]%28#0"
      ]
    },
    "805": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_authorize_operator_by_portion",
      "op": "callsub arc1410_authorize_operator_by_portion",
      "stack_out": []
    },
    "808": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "809": {
      "op": "return",
      "stack_out": []
    },
    "810": {
      "block": "main_arc1410_can_transfer_by_partition_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "812": {
      "op": "!",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "813": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "814": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "816": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "817": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%21#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%21#0"
      ]
    },
    "820": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%21#0",
        "reinterpret_bytes[32]%22#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%21#0",
        "reinterpret_bytes[32]%22#0"
      ]
    },
    "823": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%21#0",
        "reinterpret_bytes[32]%22#0",
        "reinterpret_bytes[32]%23#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%21#0",
        "reinterpret_bytes[32]%22#0",
        "reinterpret_bytes[32]%23#0"
      ]
    },
    "826": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%21#0",
        "reinterpret_bytes[32]%22#0",
        "reinterpret_bytes[32]%23#0",
        "reinterpret_bytes[32]%24#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%21#0",
        "reinterpret_bytes[32]%22#0",
        "reinterpret_bytes[32]%23#0",
        "reinterpret_bytes[32]%24#0"
      ]
    },
    "829": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[32]%21#0",
        "reinterpret_bytes[32]%22#0",
        "reinterpret_bytes[32]%23#0",
        "reinterpret_bytes[32]%24#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%21#0",
        "reinterpret_bytes[32]%22#0",
        "reinterpret_bytes[32]%23#0",
        "reinterpret_bytes[32]%24#0",
        "tmp%53#0"
      ]
    },
    "832": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_can_transfer_by_partition",
      "op": "callsub arc1410_can_transfer_by_partition",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "835": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "0x151f7c75"
      ]
    },
    "836": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%54#0"
      ]
    },
    "837": {
      "op": "concat",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "838": {
      "op": "log",
      "stack_out": []
    },
    "839": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "840": {
      "op": "return",
      "stack_out": []
    },
    "841": {
      "block": "main_arc1410_operator_transfer_by_partition_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "843": {
      "op": "!",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "844": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "845": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "847": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "848": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%17#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%17#0"
      ]
    },
    "851": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0"
      ]
    },
    "854": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0",
        "reinterpret_bytes[32]%19#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0",
        "reinterpret_bytes[32]%19#0"
      ]
    },
    "857": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0",
        "reinterpret_bytes[32]%19#0",
        "reinterpret_bytes[32]%20#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0",
        "reinterpret_bytes[32]%19#0",
        "reinterpret_bytes[32]%20#0"
      ]
    },
    "860": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0",
        "reinterpret_bytes[32]%19#0",
        "reinterpret_bytes[32]%20#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0",
        "reinterpret_bytes[32]%19#0",
        "reinterpret_bytes[32]%20#0",
        "tmp%46#0"
      ]
    },
    "863": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_operator_transfer_by_partition",
      "op": "callsub arc1410_operator_transfer_by_partition",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "866": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "0x151f7c75"
      ]
    },
    "867": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%47#0"
      ]
    },
    "868": {
      "op": "concat",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "869": {
      "op": "log",
      "stack_out": []
    },
    "870": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "871": {
      "op": "return",
      "stack_out": []
    },
    "872": {
      "block": "main_arc1410_revoke_operator_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "874": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "875": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "876": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "878": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "879": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%14#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%14#0"
      ]
    },
    "882": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%14#0",
        "reinterpret_bytes[32]%15#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%14#0",
        "reinterpret_bytes[32]%15#0"
      ]
    },
    "885": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%14#0",
        "reinterpret_bytes[32]%15#0",
        "reinterpret_bytes[32]%16#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%14#0",
        "reinterpret_bytes[32]%15#0",
        "reinterpret_bytes[32]%16#0"
      ]
    },
    "888": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_revoke_operator",
      "op": "callsub arc1410_revoke_operator",
      "stack_out": []
    },
    "891": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "892": {
      "op": "return",
      "stack_out": []
    },
    "893": {
      "block": "main_arc1410_authorize_operator_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "895": {
      "op": "!",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "896": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "897": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "899": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "900": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%11#0"
      ]
    },
    "903": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[32]%12#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[32]%12#0"
      ]
    },
    "906": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[32]%12#0",
        "reinterpret_bytes[32]%13#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[32]%12#0",
        "reinterpret_bytes[32]%13#0"
      ]
    },
    "909": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_authorize_operator",
      "op": "callsub arc1410_authorize_operator",
      "stack_out": []
    },
    "912": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "913": {
      "op": "return",
      "stack_out": []
    },
    "914": {
      "block": "main_arc1410_is_operator_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "916": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "917": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "918": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "920": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "921": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%8#0"
      ]
    },
    "924": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%8#0",
        "reinterpret_bytes[32]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%8#0",
        "reinterpret_bytes[32]%9#0"
      ]
    },
    "927": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%8#0",
        "reinterpret_bytes[32]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%8#0",
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[32]%10#0"
      ]
    },
    "930": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator",
      "op": "callsub arc1410_is_operator",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "933": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "0x151f7c75"
      ]
    },
    "934": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%32#0"
      ]
    },
    "935": {
      "op": "concat",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "936": {
      "op": "log",
      "stack_out": []
    },
    "937": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "938": {
      "op": "return",
      "stack_out": []
    },
    "939": {
      "block": "main_arc1410_partitions_of_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "941": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "942": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "943": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "945": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "946": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0"
      ]
    },
    "949": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%7#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "952": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_partitions_of",
      "op": "callsub arc1410_partitions_of",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "955": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "0x151f7c75"
      ]
    },
    "956": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%26#0"
      ]
    },
    "957": {
      "op": "concat",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "958": {
      "op": "log",
      "stack_out": []
    },
    "959": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "960": {
      "op": "return",
      "stack_out": []
    },
    "961": {
      "block": "main_arc1410_transfer_by_partition_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "963": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "964": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "965": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "967": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "968": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0"
      ]
    },
    "971": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0"
      ]
    },
    "974": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0"
      ]
    },
    "977": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "tmp%19#0"
      ]
    },
    "980": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_transfer_by_partition",
      "op": "callsub arc1410_transfer_by_partition",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "983": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "0x151f7c75"
      ]
    },
    "984": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%20#0"
      ]
    },
    "985": {
      "op": "concat",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "986": {
      "op": "log",
      "stack_out": []
    },
    "987": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "988": {
      "op": "return",
      "stack_out": []
    },
    "989": {
      "block": "main_arc200_transfer_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "991": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "992": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "993": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "995": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "996": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "999": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0"
      ]
    },
    "1002": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc200_transfer",
      "op": "callsub arc200_transfer",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1005": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "0x151f7c75"
      ]
    },
    "1006": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%13#0"
      ]
    },
    "1007": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1008": {
      "op": "log",
      "stack_out": []
    },
    "1009": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1010": {
      "op": "return",
      "stack_out": []
    },
    "1011": {
      "block": "main_arc1410_balance_of_partition_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1013": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1014": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1015": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1017": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1018": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1021": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "1024": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_balance_of_partition",
      "op": "callsub arc1410_balance_of_partition",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1027": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0x151f7c75"
      ]
    },
    "1028": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%7#0"
      ]
    },
    "1029": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1030": {
      "op": "log",
      "stack_out": []
    },
    "1031": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1032": {
      "op": "return",
      "stack_out": []
    },
    "1033": {
      "block": "main_bare_routing@38",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%173#0"
      ],
      "stack_out": [
        "tmp%173#0"
      ]
    },
    "1035": {
      "op": "bnz main_after_if_else@42",
      "stack_out": []
    },
    "1038": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%174#0"
      ],
      "stack_out": [
        "tmp%174#0"
      ]
    },
    "1040": {
      "op": "!",
      "defined_out": [
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0"
      ]
    },
    "1041": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1042": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1043": {
      "op": "return",
      "stack_out": []
    },
    "1044": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_balance_of_partition",
      "params": {
        "holder#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "arc1410_balance_of_partition",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1047": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)"
      ]
    },
    "1049": {
      "op": "frame_dig -1",
      "defined_out": [
        "holder#0 (copy)",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "1051": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "1052": {
      "op": "bytec 4 // \"arc1410_p\"",
      "defined_out": [
        "\"arc1410_p\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"arc1410_p\""
      ]
    },
    "1054": {
      "op": "swap",
      "stack_out": [
        "\"arc1410_p\"",
        "key#0"
      ]
    },
    "1055": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1056": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1057": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1058": {
      "retsub": true,
      "op": "retsub"
    },
    "1059": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc200_transfer",
      "params": {
        "to#0": "bytes",
        "value#0": "bytes"
      },
      "block": "arc200_transfer",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1062": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1064": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "1065": {
      "op": "frame_dig -2",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "tmp%0#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "to#0 (copy)"
      ]
    },
    "1067": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "stack_out": [
        "tmp%0#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "1068": {
      "op": "frame_dig -1",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "tmp%0#0",
        "to#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "value#0 (copy)"
      ]
    },
    "1070": {
      "op": "bytec 17 // 0x0000",
      "defined_out": [
        "0x0000",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "tmp%0#0",
        "to#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "value#0 (copy)",
        "0x0000"
      ]
    },
    "1072": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._transfer_partition",
      "op": "callsub _transfer_partition",
      "stack_out": []
    },
    "1075": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1077": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%1#0",
        "to#0 (copy)"
      ]
    },
    "1079": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "to#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "1081": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._transfer",
      "op": "callsub _transfer",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1084": {
      "retsub": true,
      "op": "retsub"
    },
    "1085": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_transfer_by_partition",
      "params": {
        "partition#0": "bytes",
        "to#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1410_transfer_by_partition",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "1088": {
      "op": "txn Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "1090": {
      "op": "frame_dig -3",
      "defined_out": [
        "sender#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "to#0 (copy)"
      ]
    },
    "1092": {
      "op": "frame_dig -4",
      "defined_out": [
        "partition#0 (copy)",
        "sender#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "to#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "1094": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._receiverPartition",
      "op": "callsub _receiverPartition",
      "defined_out": [
        "receiverPartition#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "receiverPartition#0"
      ]
    },
    "1097": {
      "op": "swap",
      "stack_out": [
        "receiverPartition#0",
        "sender#0"
      ]
    },
    "1098": {
      "op": "frame_dig -4",
      "stack_out": [
        "receiverPartition#0",
        "sender#0",
        "partition#0 (copy)"
      ]
    },
    "1100": {
      "op": "frame_dig -3",
      "stack_out": [
        "receiverPartition#0",
        "sender#0",
        "partition#0 (copy)",
        "to#0 (copy)"
      ]
    },
    "1102": {
      "op": "dig 3",
      "defined_out": [
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "sender#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "receiverPartition#0",
        "sender#0",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)"
      ]
    },
    "1104": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "sender#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "receiverPartition#0",
        "sender#0",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "1106": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "data#0 (copy)",
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "sender#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "receiverPartition#0",
        "sender#0",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)",
        "amount#0 (copy)",
        "data#0 (copy)"
      ]
    },
    "1108": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._transfer_partition",
      "op": "callsub _transfer_partition",
      "stack_out": [
        "receiverPartition#0"
      ]
    },
    "1111": {
      "retsub": true,
      "op": "retsub"
    },
    "1112": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_partitions_of",
      "params": {
        "holder#0": "bytes",
        "page#0": "bytes"
      },
      "block": "arc1410_partitions_of",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1115": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)"
      ]
    },
    "1117": {
      "op": "frame_dig -1",
      "defined_out": [
        "holder#0 (copy)",
        "page#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)",
        "page#0 (copy)"
      ]
    },
    "1119": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "1120": {
      "op": "bytec 11 // \"arc1410_hp_a\"",
      "defined_out": [
        "\"arc1410_hp_a\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"arc1410_hp_a\""
      ]
    },
    "1122": {
      "op": "swap",
      "stack_out": [
        "\"arc1410_hp_a\"",
        "key#0"
      ]
    },
    "1123": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1124": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1125": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1126": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1128": {
      "op": "bnz arc1410_partitions_of_after_if_else@2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1131": {
      "op": "bytec 17 // 0x0000",
      "defined_out": [
        "0x0000",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x0000"
      ]
    },
    "1133": {
      "op": "swap"
    },
    "1134": {
      "retsub": true,
      "op": "retsub"
    },
    "1135": {
      "block": "arc1410_partitions_of_after_if_else@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1137": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1138": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "1139": {
      "op": "swap"
    },
    "1140": {
      "retsub": true,
      "op": "retsub"
    },
    "1141": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator",
      "params": {
        "holder#0": "bytes",
        "operator#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "arc1410_is_operator",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1144": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1145": {
      "op": "dupn 2",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "1147": {
      "op": "frame_dig -2",
      "defined_out": [
        "operator#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "operator#0 (copy)"
      ]
    },
    "1149": {
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "operator#0 (copy)",
        "holder#0 (copy)"
      ]
    },
    "1151": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%0#0"
      ]
    },
    "1152": {
      "op": "bz arc1410_is_operator_after_if_else@2",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "1155": {
      "op": "bytec 5 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "0x80"
      ]
    },
    "1157": {
      "op": "frame_bury 0"
    },
    "1159": {
      "retsub": true,
      "op": "retsub"
    },
    "1160": {
      "block": "arc1410_is_operator_after_if_else@2",
      "stack_in": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "holder#0 (copy)"
      ]
    },
    "1162": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "holder#0 (copy)",
        "operator#0 (copy)"
      ]
    },
    "1164": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1165": {
      "op": "dup",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1166": {
      "op": "frame_bury 0",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1168": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "1170": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "specific#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "specific#0"
      ]
    },
    "1171": {
      "op": "bytec 12 // \"arc1410_op\"",
      "defined_out": [
        "\"arc1410_op\"",
        "encoded_tuple_buffer%2#0",
        "specific#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "specific#0",
        "\"arc1410_op\""
      ]
    },
    "1173": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "\"arc1410_op\"",
        "specific#0"
      ]
    },
    "1174": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%1#0"
      ]
    },
    "1175": {
      "op": "dup",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1176": {
      "op": "frame_bury 1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%1#0"
      ]
    },
    "1178": {
      "op": "box_len",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1179": {
      "op": "bury 1",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_exists%0#0"
      ]
    },
    "1181": {
      "op": "bz arc1410_is_operator_after_if_else@5",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "1184": {
      "op": "frame_dig 1",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%1#0"
      ]
    },
    "1186": {
      "op": "box_get",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1187": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%1#0"
      ]
    },
    "1188": {
      "op": "btoi",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%3#0"
      ]
    },
    "1189": {
      "op": "intc_1 // 1",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%3#0",
        "1"
      ]
    },
    "1190": {
      "op": "==",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%4#0"
      ]
    },
    "1191": {
      "op": "bz arc1410_is_operator_after_if_else@5",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "1194": {
      "op": "bytec 5 // 0x80",
      "defined_out": [
        "0x80",
        "encoded_tuple_buffer%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "0x80"
      ]
    },
    "1196": {
      "op": "frame_bury 0"
    },
    "1198": {
      "retsub": true,
      "op": "retsub"
    },
    "1199": {
      "block": "arc1410_is_operator_after_if_else@5",
      "stack_in": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1201": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "1202": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "globalKey#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "globalKey#0"
      ]
    },
    "1203": {
      "op": "bytec 12 // \"arc1410_op\"",
      "defined_out": [
        "\"arc1410_op\"",
        "encoded_tuple_buffer%2#0",
        "globalKey#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "globalKey#0",
        "\"arc1410_op\""
      ]
    },
    "1205": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "\"arc1410_op\"",
        "globalKey#0"
      ]
    },
    "1206": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "1207": {
      "op": "dup",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "1208": {
      "op": "frame_bury 2",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "1210": {
      "op": "box_len",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1211": {
      "op": "bury 1",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_exists%2#0"
      ]
    },
    "1213": {
      "op": "bz arc1410_is_operator_after_if_else@8",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "1216": {
      "op": "frame_dig 2",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "1218": {
      "op": "box_get",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1219": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%3#0"
      ]
    },
    "1220": {
      "op": "btoi",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "1221": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "encoded_tuple_buffer%2#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%7#0",
        "1"
      ]
    },
    "1222": {
      "op": "==",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%8#0"
      ]
    },
    "1223": {
      "op": "bz arc1410_is_operator_after_if_else@8",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "1226": {
      "op": "bytec 5 // 0x80",
      "defined_out": [
        "0x80",
        "encoded_tuple_buffer%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "0x80"
      ]
    },
    "1228": {
      "op": "frame_bury 0"
    },
    "1230": {
      "retsub": true,
      "op": "retsub"
    },
    "1231": {
      "block": "arc1410_is_operator_after_if_else@8",
      "stack_in": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "op": "bytec 8 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "0x00"
      ]
    },
    "1233": {
      "op": "frame_bury 0"
    },
    "1235": {
      "retsub": true,
      "op": "retsub"
    },
    "1236": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_authorize_operator",
      "params": {
        "holder#0": "bytes",
        "operator#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "arc1410_authorize_operator",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1239": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1241": {
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "holder#0 (copy)"
      ]
    },
    "1243": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1244": {
      "error": "Only holder can authorize",
      "op": "assert // Only holder can authorize",
      "stack_out": []
    },
    "1245": {
      "op": "frame_dig -3",
      "stack_out": [
        "holder#0 (copy)"
      ]
    },
    "1247": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ]
    },
    "1249": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1250": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "1252": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "1253": {
      "op": "bytec 12 // \"arc1410_op\"",
      "defined_out": [
        "\"arc1410_op\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"arc1410_op\""
      ]
    },
    "1255": {
      "op": "swap",
      "stack_out": [
        "\"arc1410_op\"",
        "key#0"
      ]
    },
    "1256": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1257": {
      "op": "bytec 14 // 0x01",
      "defined_out": [
        "0x01",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x01"
      ]
    },
    "1259": {
      "op": "box_put",
      "stack_out": []
    },
    "1260": {
      "retsub": true,
      "op": "retsub"
    },
    "1261": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_revoke_operator",
      "params": {
        "holder#0": "bytes",
        "operator#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "arc1410_revoke_operator",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1264": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1266": {
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "holder#0 (copy)"
      ]
    },
    "1268": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1269": {
      "error": "Only holder can revoke",
      "op": "assert // Only holder can revoke",
      "stack_out": []
    },
    "1270": {
      "op": "frame_dig -3",
      "stack_out": [
        "holder#0 (copy)"
      ]
    },
    "1272": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ]
    },
    "1274": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1275": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "1277": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "1278": {
      "op": "bytec 12 // \"arc1410_op\"",
      "defined_out": [
        "\"arc1410_op\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"arc1410_op\""
      ]
    },
    "1280": {
      "op": "swap",
      "stack_out": [
        "\"arc1410_op\"",
        "key#0"
      ]
    },
    "1281": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1282": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "1283": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1284": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "maybe_exists%0#0"
      ]
    },
    "1286": {
      "op": "bz arc1410_revoke_operator_after_if_else@2",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1289": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "1291": {
      "op": "box_del",
      "defined_out": [
        "tmp%2#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%2#0",
        "{box_del}"
      ]
    },
    "1292": {
      "op": "pop",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1293": {
      "block": "arc1410_revoke_operator_after_if_else@2",
      "stack_in": [
        "tmp%2#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "1294": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_operator_transfer_by_partition",
      "params": {
        "from#0": "bytes",
        "partition#0": "bytes",
        "to#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1410_operator_transfer_by_partition",
      "stack_in": [],
      "op": "proto 5 1"
    },
    "1297": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1298": {
      "op": "txn Sender"
    },
    "1300": {
      "op": "frame_dig -5"
    },
    "1302": {
      "op": "txn Sender"
    },
    "1304": {
      "op": "frame_dig -4",
      "defined_out": [
        "from#0 (copy)",
        "partition#0 (copy)",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "from#0 (copy)",
        "sender#0",
        "partition#0 (copy)"
      ]
    },
    "1306": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator",
      "op": "callsub arc1410_is_operator",
      "defined_out": [
        "sender#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "tmp%0#0"
      ]
    },
    "1309": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "tmp%0#0",
        "0"
      ]
    },
    "1310": {
      "op": "getbit",
      "defined_out": [
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "tmp%1#0"
      ]
    },
    "1311": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "tmp%1#0",
        "1"
      ]
    },
    "1312": {
      "op": "==",
      "defined_out": [
        "authorized#0",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0"
      ]
    },
    "1313": {
      "op": "dupn 2",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "authorized#0"
      ]
    },
    "1315": {
      "op": "bnz arc1410_operator_transfer_by_partition_after_if_else@4",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "1318": {
      "op": "frame_dig -5",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "from#0 (copy)"
      ]
    },
    "1320": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "from#0 (copy)",
        "sender#0"
      ]
    },
    "1322": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%2#0",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1323": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "1325": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "pKey#0",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "pKey#0"
      ]
    },
    "1326": {
      "op": "bytec 10 // \"arc1410_opa\"",
      "defined_out": [
        "\"arc1410_opa\"",
        "authorized#0",
        "authorized#9",
        "pKey#0",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "pKey#0",
        "\"arc1410_opa\""
      ]
    },
    "1328": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "\"arc1410_opa\"",
        "pKey#0"
      ]
    },
    "1329": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0"
      ]
    },
    "1330": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "1331": {
      "op": "frame_bury 0",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0"
      ]
    },
    "1333": {
      "op": "box_len",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1334": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_exists%0#0"
      ]
    },
    "1336": {
      "op": "bz arc1410_operator_transfer_by_partition_after_if_else@3",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "1339": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0"
      ]
    },
    "1341": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "1342": {
      "op": "box_get",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "maybe_exists%1#0",
        "remaining#0",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "maybe_exists%1#0"
      ]
    },
    "1343": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0"
      ]
    },
    "1344": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "remaining#0",
        "remaining#0 (copy)",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "remaining#0 (copy)"
      ]
    },
    "1345": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "authorized#0",
        "authorized#9",
        "remaining#0",
        "remaining#0 (copy)",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "remaining#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "1347": {
      "op": "b>=",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "remaining#0",
        "sender#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "tmp%4#0"
      ]
    },
    "1348": {
      "error": "Portion allowance exceeded",
      "op": "assert // Portion allowance exceeded",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0"
      ]
    },
    "1349": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "authorized#0"
      ]
    },
    "1350": {
      "op": "frame_bury 2",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0"
      ]
    },
    "1352": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "amount#0 (copy)"
      ]
    },
    "1354": {
      "op": "b-",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0"
      ]
    },
    "1355": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "1356": {
      "op": "len",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "1357": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "1358": {
      "op": "<=",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "len_ok%0#0",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "1359": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0"
      ]
    },
    "1360": {
      "op": "intc_2 // 32",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "1361": {
      "op": "bzero",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "bzero%0#0",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "1362": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "arc4_encoded%0#0"
      ]
    },
    "1363": {
      "op": "box_put",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "1364": {
      "block": "arc1410_operator_transfer_by_partition_after_if_else@3",
      "stack_in": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "authorized#9"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "authorized#9"
      ]
    },
    "1366": {
      "op": "frame_bury 3",
      "defined_out": [
        "authorized#9"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "1368": {
      "block": "arc1410_operator_transfer_by_partition_after_if_else@4",
      "stack_in": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "authorized#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "authorized#0"
      ]
    },
    "1370": {
      "error": "Not authorized operator",
      "op": "assert // Not authorized operator",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "1371": {
      "op": "frame_dig -3",
      "defined_out": [
        "authorized#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "to#0 (copy)"
      ]
    },
    "1373": {
      "op": "frame_dig -4",
      "defined_out": [
        "authorized#0",
        "partition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "to#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "1375": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._receiverPartition",
      "op": "callsub _receiverPartition",
      "defined_out": [
        "authorized#0",
        "receiverPartition#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0"
      ]
    },
    "1378": {
      "op": "frame_dig -5",
      "defined_out": [
        "authorized#0",
        "from#0 (copy)",
        "receiverPartition#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)"
      ]
    },
    "1380": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "1382": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "to#0 (copy)"
      ]
    },
    "1384": {
      "op": "dig 3",
      "defined_out": [
        "authorized#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)"
      ]
    },
    "1386": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "authorized#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "1388": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "authorized#0",
        "data#0 (copy)",
        "from#0 (copy)",
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)",
        "amount#0 (copy)",
        "data#0 (copy)"
      ]
    },
    "1390": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._transfer_partition",
      "op": "callsub _transfer_partition",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0"
      ]
    },
    "1393": {
      "op": "frame_bury 0"
    },
    "1395": {
      "retsub": true,
      "op": "retsub"
    },
    "1396": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_can_transfer_by_partition",
      "params": {
        "from#0": "bytes",
        "partition#0": "bytes",
        "to#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1410_can_transfer_by_partition",
      "stack_in": [],
      "op": "proto 5 1"
    },
    "1399": {
      "op": "intc_0 // 0",
      "stack_out": [
        "senderAddr#0"
      ]
    },
    "1400": {
      "op": "dup",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0"
      ]
    },
    "1401": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0"
      ]
    },
    "1403": {
      "op": "dup",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10"
      ]
    },
    "1404": {
      "op": "frame_dig -5",
      "defined_out": [
        "from#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "from#0 (copy)"
      ]
    },
    "1406": {
      "op": "frame_dig -4",
      "defined_out": [
        "from#0 (copy)",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "from#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "1408": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "encoded_tuple_buffer%2#1"
      ]
    },
    "1409": {
      "op": "bytec 4 // \"arc1410_p\"",
      "defined_out": [
        "\"arc1410_p\"",
        "encoded_tuple_buffer%2#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "encoded_tuple_buffer%2#1",
        "\"arc1410_p\""
      ]
    },
    "1411": {
      "op": "swap",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "\"arc1410_p\"",
        "encoded_tuple_buffer%2#1"
      ]
    },
    "1412": {
      "op": "concat",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "1413": {
      "op": "dup",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%0#1"
      ]
    },
    "1414": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "1415": {
      "op": "bury 1",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_exists%0#0"
      ]
    },
    "1417": {
      "op": "bnz arc1410_can_transfer_by_partition_after_if_else@2",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "1420": {
      "op": "pushbytes base32(KAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKFAYLSORUXI2LPNYQG433UEBSXQ2LTORZQ)",
      "defined_out": [
        "KAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKFAYLSORUXI2LPNYQG433UEBSXQ2LTORZQ",
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "KAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKFAYLSORUXI2LPNYQG433UEBSXQ2LTORZQ"
      ]
    },
    "1479": {
      "op": "frame_bury 0"
    },
    "1481": {
      "retsub": true,
      "op": "retsub"
    },
    "1482": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@2",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%0#1"
      ]
    },
    "1484": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1485": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_value%0#0"
      ]
    },
    "1486": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_value%0#0",
        "amount#0 (copy)"
      ]
    },
    "1488": {
      "op": "b<",
      "defined_out": [
        "tmp%0#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%2#0"
      ]
    },
    "1489": {
      "op": "bz arc1410_can_transfer_by_partition_after_if_else@4",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "1492": {
      "op": "pushbytes base32(KIACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKES3TTOVTGM2LDNFSW45BAMJQWYYLOMNSQ)",
      "defined_out": [
        "KIACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKES3TTOVTGM2LDNFSW45BAMJQWYYLOMNSQ",
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "KIACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKES3TTOVTGM2LDNFSW45BAMJQWYYLOMNSQ"
      ]
    },
    "1551": {
      "op": "frame_bury 0"
    },
    "1553": {
      "retsub": true,
      "op": "retsub"
    },
    "1554": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@4",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "to#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "to#0 (copy)"
      ]
    },
    "1556": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "1557": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%3#0"
      ]
    },
    "1558": {
      "op": "bz arc1410_can_transfer_by_partition_after_if_else@6",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "1561": {
      "op": "pushbytes base32(K4ACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIES3TWMFWGSZBAOJSWGZLJOZSXE)",
      "defined_out": [
        "K4ACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIES3TWMFWGSZBAOJSWGZLJOZSXE"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "K4ACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIES3TWMFWGSZBAOJSWGZLJOZSXE"
      ]
    },
    "1616": {
      "op": "frame_bury 0"
    },
    "1618": {
      "retsub": true,
      "op": "retsub"
    },
    "1619": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@6",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "txn Sender"
    },
    "1621": {
      "op": "dup",
      "defined_out": [
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "senderAddr#0",
        "senderAddr#0"
      ]
    },
    "1622": {
      "op": "frame_bury 0",
      "defined_out": [
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "senderAddr#0"
      ]
    },
    "1624": {
      "op": "frame_dig -5",
      "defined_out": [
        "from#0 (copy)",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "senderAddr#0",
        "from#0 (copy)"
      ]
    },
    "1626": {
      "op": "!=",
      "defined_out": [
        "senderAddr#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%4#0"
      ]
    },
    "1627": {
      "op": "bz arc1410_can_transfer_by_partition_after_if_else@16",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "1630": {
      "op": "frame_dig -5",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "from#0 (copy)"
      ]
    },
    "1632": {
      "op": "frame_dig 0",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "from#0 (copy)",
        "senderAddr#0"
      ]
    },
    "1634": {
      "op": "frame_dig -4",
      "defined_out": [
        "from#0 (copy)",
        "partition#0 (copy)",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "from#0 (copy)",
        "senderAddr#0",
        "partition#0 (copy)"
      ]
    },
    "1636": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator",
      "op": "callsub arc1410_is_operator",
      "defined_out": [
        "senderAddr#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%5#0"
      ]
    },
    "1639": {
      "op": "intc_0 // 0",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%5#0",
        "0"
      ]
    },
    "1640": {
      "op": "getbit",
      "defined_out": [
        "senderAddr#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%6#0"
      ]
    },
    "1641": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "senderAddr#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%6#0",
        "1"
      ]
    },
    "1642": {
      "op": "==",
      "defined_out": [
        "authorized#0",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0"
      ]
    },
    "1643": {
      "op": "dup",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0",
        "authorized#0"
      ]
    },
    "1644": {
      "op": "frame_bury 2",
      "defined_out": [
        "authorized#0",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0"
      ]
    },
    "1646": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0",
        "authorized#10"
      ]
    },
    "1647": {
      "op": "frame_bury 3",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0"
      ]
    },
    "1649": {
      "op": "bnz arc1410_can_transfer_by_partition_after_if_else@13",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "1652": {
      "op": "frame_dig -5",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "from#0 (copy)"
      ]
    },
    "1654": {
      "op": "frame_dig 0",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "from#0 (copy)",
        "senderAddr#0"
      ]
    },
    "1656": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "encoded_tuple_buffer%20#0",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "encoded_tuple_buffer%20#0"
      ]
    },
    "1657": {
      "op": "frame_dig -4",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "encoded_tuple_buffer%20#0",
        "partition#0 (copy)"
      ]
    },
    "1659": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "pKey#0",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "pKey#0"
      ]
    },
    "1660": {
      "op": "bytec 10 // \"arc1410_opa\"",
      "defined_out": [
        "\"arc1410_opa\"",
        "authorized#0",
        "authorized#10",
        "pKey#0",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "pKey#0",
        "\"arc1410_opa\""
      ]
    },
    "1662": {
      "op": "swap",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "\"arc1410_opa\"",
        "pKey#0"
      ]
    },
    "1663": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "senderAddr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%7#0"
      ]
    },
    "1664": {
      "op": "dup",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%7#0",
        "tmp%7#0"
      ]
    },
    "1665": {
      "op": "frame_bury 1",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "senderAddr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%7#0"
      ]
    },
    "1667": {
      "op": "box_len",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "senderAddr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1668": {
      "op": "bury 1",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_exists%1#0"
      ]
    },
    "1670": {
      "op": "frame_dig 2",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_exists%1#0",
        "authorized#10"
      ]
    },
    "1672": {
      "op": "frame_bury 3",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_exists%1#0"
      ]
    },
    "1674": {
      "op": "bz arc1410_can_transfer_by_partition_after_if_else@13",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "1677": {
      "op": "frame_dig 1",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%7#0"
      ]
    },
    "1679": {
      "op": "box_get",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "maybe_exists%2#0",
        "remaining#0",
        "senderAddr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "remaining#0",
        "maybe_exists%2#0"
      ]
    },
    "1680": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "remaining#0"
      ]
    },
    "1681": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "authorized#0",
        "authorized#10",
        "remaining#0",
        "senderAddr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "remaining#0",
        "amount#0 (copy)"
      ]
    },
    "1683": {
      "op": "b>=",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "senderAddr#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%9#0"
      ]
    },
    "1684": {
      "op": "bz arc1410_can_transfer_by_partition_after_if_else@11",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "1687": {
      "op": "intc_1 // 1",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0"
      ]
    },
    "1688": {
      "op": "frame_bury 2",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "1690": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@11",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "authorized#10"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#10"
      ]
    },
    "1692": {
      "op": "frame_bury 3",
      "defined_out": [
        "authorized#10"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "1694": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@13",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "authorized#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0"
      ]
    },
    "1696": {
      "op": "bnz arc1410_can_transfer_by_partition_after_if_else@16",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "1699": {
      "op": "pushbytes base32(LAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALU64DFOJQXI33SEBXG65BAMF2XI2DPOJUXUZLE)",
      "defined_out": [
        "LAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALU64DFOJQXI33SEBXG65BAMF2XI2DPOJUXUZLE",
        "authorized#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "LAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALU64DFOJQXI33SEBXG65BAMF2XI2DPOJUXUZLE"
      ]
    },
    "1761": {
      "op": "frame_bury 0"
    },
    "1763": {
      "retsub": true,
      "op": "retsub"
    },
    "1764": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@16",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "to#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "to#0 (copy)"
      ]
    },
    "1766": {
      "op": "frame_dig -4",
      "defined_out": [
        "partition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "to#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "1768": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._receiverPartition",
      "op": "callsub _receiverPartition",
      "defined_out": [
        "receiverPartition#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "receiverPartition#0"
      ]
    },
    "1771": {
      "op": "pushbytes 0x510023",
      "defined_out": [
        "0x510023",
        "receiverPartition#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "receiverPartition#0",
        "0x510023"
      ]
    },
    "1776": {
      "op": "swap",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "0x510023",
        "receiverPartition#0"
      ]
    },
    "1777": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%30#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "encoded_tuple_buffer%30#0"
      ]
    },
    "1778": {
      "op": "pushbytes 0x000753756363657373",
      "defined_out": [
        "0x000753756363657373",
        "encoded_tuple_buffer%30#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "encoded_tuple_buffer%30#0",
        "0x000753756363657373"
      ]
    },
    "1789": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%31#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "encoded_tuple_buffer%31#0"
      ]
    },
    "1790": {
      "op": "frame_bury 0"
    },
    "1792": {
      "retsub": true,
      "op": "retsub"
    },
    "1793": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._receiverPartition",
      "params": {
        "receiver#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "_receiverPartition",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1796": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ"
    },
    "1797": {
      "op": "frame_dig -2"
    },
    "1799": {
      "op": "frame_dig -1",
      "defined_out": [
        "partition#0 (copy)",
        "receiver#0 (copy)",
        "receiverPartition#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "receiver#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "1801": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "receiverPartition#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1802": {
      "op": "bytec 4 // \"arc1410_p\"",
      "defined_out": [
        "\"arc1410_p\"",
        "encoded_tuple_buffer%2#0",
        "receiverPartition#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "encoded_tuple_buffer%2#0",
        "\"arc1410_p\""
      ]
    },
    "1804": {
      "op": "swap",
      "stack_out": [
        "receiverPartition#0",
        "\"arc1410_p\"",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1805": {
      "op": "concat",
      "defined_out": [
        "receiverPartition#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "tmp%0#0"
      ]
    },
    "1806": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "receiverPartition#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1807": {
      "op": "bury 1",
      "stack_out": [
        "receiverPartition#0",
        "maybe_exists%0#0"
      ]
    },
    "1809": {
      "op": "bz _receiverPartition_after_if_else@2",
      "stack_out": [
        "receiverPartition#0"
      ]
    },
    "1812": {
      "op": "frame_dig -1",
      "stack_out": [
        "receiverPartition#0",
        "receiverPartition#0"
      ]
    },
    "1814": {
      "op": "frame_bury 0",
      "stack_out": [
        "receiverPartition#0"
      ]
    },
    "1816": {
      "block": "_receiverPartition_after_if_else@2",
      "stack_in": [
        "receiverPartition#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "receiverPartition#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "receiverPartition#0"
      ]
    },
    "1818": {
      "op": "swap"
    },
    "1819": {
      "retsub": true,
      "op": "retsub"
    },
    "1820": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._add_participation_to_holder",
      "params": {
        "holder#0": "bytes",
        "participation#0": "bytes"
      },
      "block": "_add_participation_to_holder",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1823": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a#0"
      ]
    },
    "1824": {
      "op": "dupn 4",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0"
      ]
    },
    "1826": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0"
      ]
    },
    "1828": {
      "op": "dupn 4",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1830": {
      "op": "pushbytes \"arc1410_hp_p\"",
      "defined_out": [
        "\"arc1410_hp_p\""
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "\"arc1410_hp_p\""
      ]
    },
    "1844": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"arc1410_hp_p\"",
        "holder#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "\"arc1410_hp_p\"",
        "holder#0 (copy)"
      ]
    },
    "1846": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "1847": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1848": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1849": {
      "op": "bury 1",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1851": {
      "op": "bnz _add_participation_to_holder_after_if_else@2",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "1854": {
      "op": "frame_dig 10",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1856": {
      "op": "bytec 18 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%0#0",
        "0x0000000000000000"
      ]
    },
    "1858": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "1859": {
      "block": "_add_participation_to_holder_after_if_else@2",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 10",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1861": {
      "op": "box_get",
      "defined_out": [
        "lastPage#0",
        "maybe_exists%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "lastPage#0",
        "maybe_exists%1#0"
      ]
    },
    "1862": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_exists%1#0",
        "lastPage#0"
      ]
    },
    "1863": {
      "op": "frame_bury 2",
      "defined_out": [
        "lastPage#0",
        "maybe_exists%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_exists%1#0"
      ]
    },
    "1865": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "1866": {
      "op": "intc_0 // 0",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "found#0"
      ]
    },
    "1867": {
      "op": "frame_bury 6",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "1869": {
      "op": "bytec 18 // 0x0000000000000000",
      "defined_out": [
        "curPage#0",
        "found#0",
        "lastPage#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "curPage#0"
      ]
    },
    "1871": {
      "op": "frame_bury 1",
      "defined_out": [
        "curPage#0",
        "found#0",
        "lastPage#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "1873": {
      "block": "_add_participation_to_holder_while_top@3",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "curPage#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "curPage#0"
      ]
    },
    "1875": {
      "op": "btoi",
      "defined_out": [
        "curPage#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "1876": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%3#0"
      ]
    },
    "1877": {
      "op": "frame_bury 8",
      "defined_out": [
        "curPage#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "1879": {
      "op": "frame_dig 2",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0",
        "lastPage#0"
      ]
    },
    "1881": {
      "op": "btoi",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1882": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%4#0"
      ]
    },
    "1883": {
      "op": "frame_bury 9",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1885": {
      "op": "<",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%5#0"
      ]
    },
    "1886": {
      "op": "bz _add_participation_to_holder_block@10",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "1889": {
      "op": "frame_dig -2",
      "defined_out": [
        "curPage#0",
        "holder#0 (copy)",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "holder#0 (copy)"
      ]
    },
    "1891": {
      "op": "frame_dig 1",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "holder#0 (copy)",
        "curPage#0"
      ]
    },
    "1893": {
      "op": "concat",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "paginatedKey#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "paginatedKey#0"
      ]
    },
    "1894": {
      "op": "bytec 11 // \"arc1410_hp_a\"",
      "defined_out": [
        "\"arc1410_hp_a\"",
        "curPage#0",
        "lastPage#0",
        "paginatedKey#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "paginatedKey#0",
        "\"arc1410_hp_a\""
      ]
    },
    "1896": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "\"arc1410_hp_a\"",
        "paginatedKey#0"
      ]
    },
    "1897": {
      "op": "concat",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "1898": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "1899": {
      "op": "frame_bury 4",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "1901": {
      "op": "box_len",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1902": {
      "op": "bury 1",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_exists%2#0"
      ]
    },
    "1904": {
      "op": "bnz _add_participation_to_holder_after_if_else@6",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "1907": {
      "op": "bytec 15 // 0x0001",
      "defined_out": [
        "0x0001",
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "0x0001"
      ]
    },
    "1909": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x0001",
        "curPage#0",
        "lastPage#0",
        "participation#0 (copy)",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "0x0001",
        "participation#0 (copy)"
      ]
    },
    "1911": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%0#0"
      ]
    },
    "1912": {
      "op": "frame_dig 4",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%6#0"
      ]
    },
    "1914": {
      "op": "dup",
      "defined_out": [
        "concat_result%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "1915": {
      "op": "box_del",
      "defined_out": [
        "concat_result%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0",
        "{box_del}"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%6#0",
        "{box_del}"
      ]
    },
    "1916": {
      "op": "pop",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%6#0"
      ]
    },
    "1917": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%6#0",
        "concat_result%0#0"
      ]
    },
    "1918": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "1919": {
      "block": "_add_participation_to_holder_after_if_else@6",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "1921": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "a#0",
        "maybe_exists%3#0"
      ]
    },
    "1922": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_exists%3#0",
        "a#0"
      ]
    },
    "1923": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_exists%3#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1924": {
      "op": "cover 2",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "a#0",
        "maybe_exists%3#0",
        "a#0"
      ]
    },
    "1926": {
      "op": "frame_bury 0",
      "defined_out": [
        "a#0",
        "maybe_exists%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "a#0",
        "maybe_exists%3#0"
      ]
    },
    "1928": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "a#0"
      ]
    },
    "1929": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "a#0",
        "0"
      ]
    },
    "1930": {
      "op": "extract_uint16",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "array_length%0#0"
      ]
    },
    "1931": {
      "op": "frame_bury 5",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "1933": {
      "op": "intc_0 // 0",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1934": {
      "op": "frame_bury 7",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "1936": {
      "block": "_add_participation_to_holder_for_header@17",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1938": {
      "op": "frame_dig 5",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "item_index_internal%0#0",
        "array_length%0#0"
      ]
    },
    "1940": {
      "op": "<",
      "defined_out": [
        "array_length%0#0",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "continue_looping%0#0"
      ]
    },
    "1941": {
      "op": "bz _add_participation_to_holder_after_for@21",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "1944": {
      "op": "frame_dig 0",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "a#0"
      ]
    },
    "1946": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1949": {
      "op": "frame_dig 7",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1951": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "a#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0",
        "32"
      ]
    },
    "1952": {
      "op": "*",
      "defined_out": [
        "a#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "1953": {
      "op": "intc_2 // 32",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "32"
      ]
    },
    "1954": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "v#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "v#0"
      ]
    },
    "1955": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "participation#0 (copy)",
        "v#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "v#0",
        "participation#0 (copy)"
      ]
    },
    "1957": {
      "op": "==",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%0#1"
      ]
    },
    "1958": {
      "op": "bz _add_participation_to_holder_after_if_else@20",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "1961": {
      "op": "intc_1 // 1",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%9#0"
      ]
    },
    "1962": {
      "block": "_add_participation_to_holder_after_inlined_smart_contracts/security_token/arc1410.algo.ts::Arc1410.containsAddress@22",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%9#0"
      ],
      "op": "bz _add_participation_to_holder_after_if_else@8",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "1965": {
      "op": "intc_1 // 1",
      "defined_out": [
        "found#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "found#0"
      ]
    },
    "1966": {
      "op": "frame_bury 6",
      "defined_out": [
        "found#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "1968": {
      "block": "_add_participation_to_holder_block@10",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 6",
      "defined_out": [
        "found#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "found#0"
      ]
    },
    "1970": {
      "op": "bnz _add_participation_to_holder_after_if_else@15",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "1973": {
      "op": "frame_dig -2",
      "defined_out": [
        "found#0",
        "holder#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "holder#0 (copy)"
      ]
    },
    "1975": {
      "op": "frame_dig 2",
      "defined_out": [
        "found#0",
        "holder#0 (copy)",
        "lastPage#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "holder#0 (copy)",
        "lastPage#0"
      ]
    },
    "1977": {
      "op": "concat",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "paginatedKey\u2081#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "paginatedKey\u2081#0"
      ]
    },
    "1978": {
      "op": "bytec 11 // \"arc1410_hp_a\"",
      "defined_out": [
        "\"arc1410_hp_a\"",
        "found#0",
        "lastPage#0",
        "paginatedKey\u2081#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "paginatedKey\u2081#0",
        "\"arc1410_hp_a\""
      ]
    },
    "1980": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "\"arc1410_hp_a\"",
        "paginatedKey\u2081#0"
      ]
    },
    "1981": {
      "op": "concat",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0"
      ]
    },
    "1982": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "tmp%11#0"
      ]
    },
    "1983": {
      "op": "frame_bury 3",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0"
      ]
    },
    "1985": {
      "op": "box_get",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1986": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_value%4#0"
      ]
    },
    "1987": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_value%4#0",
        "0"
      ]
    },
    "1988": {
      "op": "extract_uint16",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "to_encode%1#0"
      ]
    },
    "1989": {
      "op": "itob",
      "defined_out": [
        "found#0",
        "itemsCount#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "itemsCount#0"
      ]
    },
    "1990": {
      "op": "btoi",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%12#0"
      ]
    },
    "1991": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%12#0",
        "10"
      ]
    },
    "1993": {
      "op": "<",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%13#0"
      ]
    },
    "1994": {
      "op": "bz _add_participation_to_holder_else_body@13",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "1997": {
      "op": "frame_dig 3",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0"
      ]
    },
    "1999": {
      "op": "dup",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ]
    },
    "2000": {
      "op": "box_get",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2001": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "maybe_value%5#0"
      ]
    },
    "2002": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%1#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "expr_value_trimmed%1#0"
      ]
    },
    "2005": {
      "op": "bytec 15 // 0x0001",
      "defined_out": [
        "0x0001",
        "expr_value_trimmed%1#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "expr_value_trimmed%1#0",
        "0x0001"
      ]
    },
    "2007": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x0001",
        "expr_value_trimmed%1#0",
        "found#0",
        "lastPage#0",
        "participation#0 (copy)",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "expr_value_trimmed%1#0",
        "0x0001",
        "participation#0 (copy)"
      ]
    },
    "2009": {
      "op": "concat",
      "defined_out": [
        "concat_result%1#0",
        "expr_value_trimmed%1#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "expr_value_trimmed%1#0",
        "concat_result%1#0"
      ]
    },
    "2010": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%1#0",
        "expr_value_trimmed%3#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "expr_value_trimmed%1#0",
        "expr_value_trimmed%3#0"
      ]
    },
    "2013": {
      "op": "concat",
      "defined_out": [
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concatenated%2#0"
      ]
    },
    "2014": {
      "op": "dup",
      "defined_out": [
        "concatenated%2#0",
        "concatenated%2#0 (copy)",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concatenated%2#0",
        "concatenated%2#0 (copy)"
      ]
    },
    "2015": {
      "op": "len",
      "defined_out": [
        "byte_len%2#0",
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concatenated%2#0",
        "byte_len%2#0"
      ]
    },
    "2016": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "byte_len%2#0",
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concatenated%2#0",
        "byte_len%2#0",
        "32"
      ]
    },
    "2017": {
      "op": "/",
      "defined_out": [
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "len_%2#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concatenated%2#0",
        "len_%2#0"
      ]
    },
    "2018": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concatenated%2#0",
        "as_bytes%2#0"
      ]
    },
    "2019": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "len_16_bit%2#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concatenated%2#0",
        "len_16_bit%2#0"
      ]
    },
    "2022": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "len_16_bit%2#0",
        "concatenated%2#0"
      ]
    },
    "2023": {
      "op": "concat",
      "defined_out": [
        "concat_result%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concat_result%2#0"
      ]
    },
    "2024": {
      "op": "dig 1",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concat_result%2#0",
        "tmp%11#0 (copy)"
      ]
    },
    "2026": {
      "op": "box_del",
      "defined_out": [
        "concat_result%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "{box_del}"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concat_result%2#0",
        "{box_del}"
      ]
    },
    "2027": {
      "op": "pop",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concat_result%2#0"
      ]
    },
    "2028": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2029": {
      "block": "_add_participation_to_holder_after_if_else@15",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "2030": {
      "block": "_add_participation_to_holder_else_body@13",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 9",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%4#0"
      ]
    },
    "2032": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%4#0",
        "1"
      ]
    },
    "2033": {
      "op": "+",
      "defined_out": [
        "tmp%4#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "to_encode%2#0"
      ]
    },
    "2034": {
      "op": "itob",
      "defined_out": [
        "newLastPage#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newLastPage#0"
      ]
    },
    "2035": {
      "op": "frame_dig 10",
      "defined_out": [
        "newLastPage#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newLastPage#0",
        "tmp%0#0"
      ]
    },
    "2037": {
      "op": "dig 1",
      "defined_out": [
        "newLastPage#0",
        "newLastPage#0 (copy)",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newLastPage#0",
        "tmp%0#0",
        "newLastPage#0 (copy)"
      ]
    },
    "2039": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newLastPage#0"
      ]
    },
    "2040": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)",
        "newLastPage#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newLastPage#0",
        "holder#0 (copy)"
      ]
    },
    "2042": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "holder#0 (copy)",
        "newLastPage#0"
      ]
    },
    "2043": {
      "op": "concat",
      "defined_out": [
        "newPaginatedKey#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newPaginatedKey#0"
      ]
    },
    "2044": {
      "op": "bytec 15 // 0x0001",
      "defined_out": [
        "0x0001",
        "newPaginatedKey#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newPaginatedKey#0",
        "0x0001"
      ]
    },
    "2046": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x0001",
        "newPaginatedKey#0",
        "participation#0 (copy)",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newPaginatedKey#0",
        "0x0001",
        "participation#0 (copy)"
      ]
    },
    "2048": {
      "op": "concat",
      "defined_out": [
        "concat_result%3#0",
        "newPaginatedKey#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newPaginatedKey#0",
        "concat_result%3#0"
      ]
    },
    "2049": {
      "op": "bytec 11 // \"arc1410_hp_a\"",
      "defined_out": [
        "\"arc1410_hp_a\"",
        "concat_result%3#0",
        "newPaginatedKey#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newPaginatedKey#0",
        "concat_result%3#0",
        "\"arc1410_hp_a\""
      ]
    },
    "2051": {
      "op": "uncover 2",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%3#0",
        "\"arc1410_hp_a\"",
        "newPaginatedKey#0"
      ]
    },
    "2053": {
      "op": "concat",
      "defined_out": [
        "concat_result%3#0",
        "tmp%0#0",
        "tmp%18#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%3#0",
        "tmp%18#0"
      ]
    },
    "2054": {
      "op": "dup",
      "defined_out": [
        "concat_result%3#0",
        "tmp%0#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%3#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "2055": {
      "op": "box_del",
      "defined_out": [
        "concat_result%3#0",
        "tmp%0#0",
        "tmp%18#0",
        "tmp%4#0",
        "{box_del}"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%3#0",
        "tmp%18#0",
        "{box_del}"
      ]
    },
    "2056": {
      "op": "pop",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%3#0",
        "tmp%18#0"
      ]
    },
    "2057": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%18#0",
        "concat_result%3#0"
      ]
    },
    "2058": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2059": {
      "retsub": true,
      "op": "retsub"
    },
    "2060": {
      "block": "_add_participation_to_holder_after_if_else@8",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 8",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "2062": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0",
        "1"
      ]
    },
    "2063": {
      "op": "+",
      "defined_out": [
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "to_encode%0#0"
      ]
    },
    "2064": {
      "op": "itob",
      "defined_out": [
        "curPage#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "curPage#0"
      ]
    },
    "2065": {
      "op": "frame_bury 1",
      "defined_out": [
        "curPage#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2067": {
      "op": "b _add_participation_to_holder_while_top@3"
    },
    "2070": {
      "block": "_add_participation_to_holder_after_if_else@20",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2072": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "2073": {
      "op": "+",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2074": {
      "op": "frame_bury 7",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2076": {
      "op": "b _add_participation_to_holder_for_header@17"
    },
    "2079": {
      "block": "_add_participation_to_holder_after_for@21",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%9#0"
      ]
    },
    "2080": {
      "op": "b _add_participation_to_holder_after_inlined_smart_contracts/security_token/arc1410.algo.ts::Arc1410.containsAddress@22"
    },
    "2083": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._transfer_partition",
      "params": {
        "from#0": "bytes",
        "fromPartition#0": "bytes",
        "to#0": "bytes",
        "toPartition#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "_transfer_partition",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "2086": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bzero%0#0"
      ]
    },
    "2087": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "2088": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "amount#0 (copy)"
      ]
    },
    "2090": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "amount#0 (copy)",
        "0x"
      ]
    },
    "2092": {
      "op": "b>",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%0#0"
      ]
    },
    "2093": {
      "error": "Invalid amount",
      "op": "assert // Invalid amount",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "2094": {
      "op": "frame_dig -6",
      "defined_out": [
        "from#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0 (copy)"
      ]
    },
    "2096": {
      "op": "frame_dig -5",
      "defined_out": [
        "from#0 (copy)",
        "fromPartition#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0 (copy)",
        "fromPartition#0 (copy)"
      ]
    },
    "2098": {
      "op": "concat",
      "defined_out": [
        "fromKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "fromKey#0"
      ]
    },
    "2099": {
      "op": "bytec 4 // \"arc1410_p\"",
      "defined_out": [
        "\"arc1410_p\"",
        "fromKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "fromKey#0",
        "\"arc1410_p\""
      ]
    },
    "2101": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "\"arc1410_p\"",
        "fromKey#0"
      ]
    },
    "2102": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "2103": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "2104": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2105": {
      "op": "bury 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "2107": {
      "op": "bnz _transfer_partition_after_if_else@2",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "2110": {
      "op": "frame_dig 2",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "2112": {
      "op": "bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "2113": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "2114": {
      "block": "_transfer_partition_after_if_else@2",
      "stack_in": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "2116": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "2117": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2118": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "2119": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "2121": {
      "op": "b-",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "2122": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "2123": {
      "op": "len",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "2124": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "2125": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "2126": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "2127": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "2128": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "2129": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0",
        "bzero%0#0"
      ]
    },
    "2130": {
      "op": "frame_bury 0",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "2132": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "arc4_encoded%0#0"
      ]
    },
    "2133": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "2134": {
      "op": "frame_dig -6",
      "defined_out": [
        "bzero%0#0",
        "from#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "from#0 (copy)"
      ]
    },
    "2136": {
      "op": "frame_dig -4",
      "defined_out": [
        "bzero%0#0",
        "from#0 (copy)",
        "tmp%1#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "from#0 (copy)",
        "to#0 (copy)"
      ]
    },
    "2138": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%5#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2139": {
      "op": "frame_dig -5",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%5#0",
        "fromPartition#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%5#0",
        "fromPartition#0 (copy)"
      ]
    },
    "2141": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%6#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2142": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%6#0",
        "amount#0 (copy)"
      ]
    },
    "2144": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%7#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "2145": {
      "op": "pushbytes 0x0082",
      "defined_out": [
        "0x0082",
        "bzero%0#0",
        "encoded_tuple_buffer%7#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%7#0",
        "0x0082"
      ]
    },
    "2149": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%8#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "2150": {
      "op": "frame_dig -1",
      "defined_out": [
        "bzero%0#0",
        "data#0 (copy)",
        "encoded_tuple_buffer%8#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%8#0",
        "data#0 (copy)"
      ]
    },
    "2152": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%9#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "2153": {
      "op": "bytec 13 // 0x0002",
      "defined_out": [
        "0x0002",
        "bzero%0#0",
        "encoded_tuple_buffer%9#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%9#0",
        "0x0002"
      ]
    },
    "2155": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "0x0002",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "2156": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%12#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "2157": {
      "op": "pushbytes 0x206b7940 // method \"Transfer((address,address,address,uint256,byte[]))\"",
      "defined_out": [
        "Method(Transfer((address,address,address,uint256,byte[])))",
        "bzero%0#0",
        "encoded_tuple_buffer%12#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%12#0",
        "Method(Transfer((address,address,address,uint256,byte[])))"
      ]
    },
    "2163": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "Method(Transfer((address,address,address,uint256,byte[])))",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "2164": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "event%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "event%0#0"
      ]
    },
    "2165": {
      "op": "log",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "2166": {
      "op": "frame_dig -3",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "toPartition#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "toPartition#0 (copy)"
      ]
    },
    "2168": {
      "op": "frame_dig -5",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "toPartition#0 (copy)",
        "fromPartition#0 (copy)"
      ]
    },
    "2170": {
      "op": "!=",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "2171": {
      "op": "bz _transfer_partition_after_if_else@4",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "2174": {
      "op": "frame_dig -4",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "to#0 (copy)"
      ]
    },
    "2176": {
      "op": "frame_dig -3",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "to#0 (copy)",
        "toPartition#0 (copy)"
      ]
    },
    "2178": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._add_participation_to_holder",
      "op": "callsub _add_participation_to_holder",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "2181": {
      "block": "_transfer_partition_after_if_else@4",
      "stack_in": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ],
      "op": "frame_dig -4",
      "defined_out": [
        "to#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "to#0 (copy)"
      ]
    },
    "2183": {
      "op": "frame_dig -3",
      "defined_out": [
        "to#0 (copy)",
        "toPartition#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "to#0 (copy)",
        "toPartition#0 (copy)"
      ]
    },
    "2185": {
      "op": "concat",
      "defined_out": [
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "toKey#0"
      ]
    },
    "2186": {
      "op": "bytec 4 // \"arc1410_p\"",
      "defined_out": [
        "\"arc1410_p\"",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "toKey#0",
        "\"arc1410_p\""
      ]
    },
    "2188": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "\"arc1410_p\"",
        "toKey#0"
      ]
    },
    "2189": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "2190": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "2191": {
      "op": "frame_bury 1",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "2193": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2194": {
      "op": "bury 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "maybe_exists%2#0"
      ]
    },
    "2196": {
      "op": "bnz _transfer_partition_after_if_else@6",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "2199": {
      "op": "frame_dig 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "2201": {
      "op": "bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "2202": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "2203": {
      "block": "_transfer_partition_after_if_else@6",
      "stack_in": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "2205": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "2206": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2207": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "maybe_value%3#0"
      ]
    },
    "2208": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "maybe_value%3#0",
        "amount#0 (copy)"
      ]
    },
    "2210": {
      "op": "b+",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0"
      ]
    },
    "2211": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "2212": {
      "op": "len",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "2213": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "2214": {
      "op": "<=",
      "defined_out": [
        "len_ok%1#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "2215": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0"
      ]
    },
    "2216": {
      "op": "frame_dig 0",
      "defined_out": [
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%0#0"
      ]
    },
    "2218": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "arc4_encoded%1#0"
      ]
    },
    "2219": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "2220": {
      "retsub": true,
      "op": "retsub"
    },
    "2221": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_authorize_operator_by_portion",
      "params": {
        "holder#0": "bytes",
        "operator#0": "bytes",
        "partition#0": "bytes",
        "amount#0": "bytes"
      },
      "block": "arc1410_authorize_operator_by_portion",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "2224": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2226": {
      "op": "frame_dig -4",
      "defined_out": [
        "holder#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "holder#0 (copy)"
      ]
    },
    "2228": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2229": {
      "error": "Only holder can authorize portion",
      "op": "assert // Only holder can authorize portion",
      "stack_out": []
    },
    "2230": {
      "op": "frame_dig -4",
      "stack_out": [
        "holder#0 (copy)"
      ]
    },
    "2232": {
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ]
    },
    "2234": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2235": {
      "op": "frame_dig -2",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "2237": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "2238": {
      "op": "bytec 10 // \"arc1410_opa\"",
      "defined_out": [
        "\"arc1410_opa\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"arc1410_opa\""
      ]
    },
    "2240": {
      "op": "swap",
      "stack_out": [
        "\"arc1410_opa\"",
        "key#0"
      ]
    },
    "2241": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2242": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "amount#0 (copy)"
      ]
    },
    "2244": {
      "op": "box_put",
      "stack_out": []
    },
    "2245": {
      "retsub": true,
      "op": "retsub"
    },
    "2246": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator_by_portion",
      "params": {
        "holder#0": "bytes",
        "operator#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "arc1410_is_operator_by_portion",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "2249": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2250": {
      "op": "frame_dig -2",
      "defined_out": [
        "operator#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "operator#0 (copy)"
      ]
    },
    "2252": {
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "operator#0 (copy)",
        "holder#0 (copy)"
      ]
    },
    "2254": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "2255": {
      "op": "bz arc1410_is_operator_by_portion_after_if_else@2",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2258": {
      "op": "bytec 5 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x80"
      ]
    },
    "2260": {
      "op": "swap"
    },
    "2261": {
      "retsub": true,
      "op": "retsub"
    },
    "2262": {
      "block": "arc1410_is_operator_by_portion_after_if_else@2",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "holder#0 (copy)"
      ]
    },
    "2264": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "holder#0 (copy)",
        "operator#0 (copy)"
      ]
    },
    "2266": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2267": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "2269": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "key#0"
      ]
    },
    "2270": {
      "op": "bytec 10 // \"arc1410_opa\"",
      "defined_out": [
        "\"arc1410_opa\"",
        "key#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "key#0",
        "\"arc1410_opa\""
      ]
    },
    "2272": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "\"arc1410_opa\"",
        "key#0"
      ]
    },
    "2273": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "2274": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "2275": {
      "op": "frame_bury 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "2277": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2278": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "2280": {
      "op": "bnz arc1410_is_operator_by_portion_after_if_else@4",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2283": {
      "op": "bytec 8 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x00"
      ]
    },
    "2285": {
      "op": "swap"
    },
    "2286": {
      "retsub": true,
      "op": "retsub"
    },
    "2287": {
      "block": "arc1410_is_operator_by_portion_after_if_else@4",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "2289": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2290": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "2291": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "0x"
      ]
    },
    "2293": {
      "op": "b>",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "2294": {
      "op": "bytec 8 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "to_encode%0#0",
        "0x00"
      ]
    },
    "2296": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "2297": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "2299": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_bool%0#0"
      ]
    },
    "2300": {
      "op": "swap"
    },
    "2301": {
      "retsub": true,
      "op": "retsub"
    },
    "2302": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_issue_by_partition",
      "params": {
        "to#0": "bytes",
        "partition#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1410_issue_by_partition",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "2305": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bzero%0#0"
      ]
    },
    "2306": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0"
      ]
    },
    "2307": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "tmp%0#0"
      ]
    },
    "2309": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_is_owner",
      "op": "callsub arc88_is_owner",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "tmp%1#0"
      ]
    },
    "2312": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "tmp%1#0",
        "0"
      ]
    },
    "2313": {
      "op": "getbit",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "tmp%2#0"
      ]
    },
    "2314": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "tmp%2#0",
        "1"
      ]
    },
    "2315": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "tmp%3#0"
      ]
    },
    "2316": {
      "error": "only_owner",
      "op": "assert // only_owner",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0"
      ]
    },
    "2317": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "amount#0 (copy)"
      ]
    },
    "2319": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "amount#0 (copy)",
        "0x"
      ]
    },
    "2321": {
      "op": "b>",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "tmp%4#0"
      ]
    },
    "2322": {
      "error": "Invalid amount",
      "op": "assert // Invalid amount",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0"
      ]
    },
    "2323": {
      "op": "frame_dig -4",
      "defined_out": [
        "to#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "to#0 (copy)"
      ]
    },
    "2325": {
      "op": "frame_dig -3",
      "defined_out": [
        "partition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "to#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "2327": {
      "op": "concat",
      "defined_out": [
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0"
      ]
    },
    "2328": {
      "op": "dup",
      "defined_out": [
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "toKey#0"
      ]
    },
    "2329": {
      "op": "bytec 4 // \"arc1410_p\"",
      "defined_out": [
        "\"arc1410_p\"",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "toKey#0",
        "\"arc1410_p\""
      ]
    },
    "2331": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "\"arc1410_p\"",
        "toKey#0"
      ]
    },
    "2332": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "2333": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "2334": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%5#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2335": {
      "op": "bury 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "maybe_exists%0#0"
      ]
    },
    "2337": {
      "op": "bnz arc1410_issue_by_partition_after_if_else@2",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "2340": {
      "op": "frame_dig 3",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "2342": {
      "op": "bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%5#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "2343": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "2344": {
      "op": "frame_dig -4",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "to#0 (copy)"
      ]
    },
    "2346": {
      "op": "frame_dig -3",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "to#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "2348": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._add_participation_to_holder",
      "op": "callsub _add_participation_to_holder",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "2351": {
      "block": "arc1410_issue_by_partition_after_if_else@2",
      "stack_in": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "2353": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "2354": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2355": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "maybe_value%1#0"
      ]
    },
    "2356": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "2358": {
      "op": "b+",
      "defined_out": [
        "tmp%5#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0"
      ]
    },
    "2359": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "2360": {
      "op": "len",
      "defined_out": [
        "tmp%5#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "2361": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%5#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "2362": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "tmp%5#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "2363": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0"
      ]
    },
    "2364": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "2365": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "tmp%5#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "2366": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "bzero%0#0",
        "bzero%0#0"
      ]
    },
    "2367": {
      "op": "frame_bury 0",
      "defined_out": [
        "bzero%0#0",
        "tmp%5#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "2369": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "arc4_encoded%0#0"
      ]
    },
    "2370": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "2371": {
      "op": "bytec 6 // \"b\"",
      "defined_out": [
        "\"b\"",
        "bzero%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "\"b\""
      ]
    },
    "2373": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"b\"",
        "bzero%0#0",
        "tmp%5#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "\"b\"",
        "to#0 (copy)"
      ]
    },
    "2375": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0"
      ]
    },
    "2376": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "tmp%9#0"
      ]
    },
    "2377": {
      "op": "frame_bury 1",
      "defined_out": [
        "bzero%0#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0"
      ]
    },
    "2379": {
      "op": "box_len",
      "defined_out": [
        "bzero%0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2380": {
      "op": "bury 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "maybe_exists%2#0"
      ]
    },
    "2382": {
      "op": "bnz arc1410_issue_by_partition_after_if_else@4",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "2385": {
      "op": "frame_dig 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0"
      ]
    },
    "2387": {
      "op": "bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "bzero%0#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "2388": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "2389": {
      "block": "arc1410_issue_by_partition_after_if_else@4",
      "stack_in": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0"
      ]
    },
    "2391": {
      "op": "dup",
      "defined_out": [
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ]
    },
    "2392": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2393": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "maybe_value%3#0"
      ]
    },
    "2394": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "maybe_value%3#0",
        "amount#0 (copy)"
      ]
    },
    "2396": {
      "op": "b+",
      "defined_out": [
        "tmp%9#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0"
      ]
    },
    "2397": {
      "op": "dup",
      "defined_out": [
        "tmp%9#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "2398": {
      "op": "len",
      "defined_out": [
        "tmp%9#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "2399": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%9#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "2400": {
      "op": "<=",
      "defined_out": [
        "len_ok%1#0",
        "tmp%9#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "2401": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0"
      ]
    },
    "2402": {
      "op": "frame_dig 0",
      "defined_out": [
        "bzero%0#0",
        "tmp%9#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0",
        "bzero%0#0"
      ]
    },
    "2404": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "bzero%0#0 (copy)",
        "tmp%9#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0",
        "bzero%0#0 (copy)",
        "bzero%0#0 (copy)"
      ]
    },
    "2405": {
      "op": "cover 3",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "tmp%9#0",
        "to_encode%1#0",
        "bzero%0#0 (copy)"
      ]
    },
    "2407": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "bzero%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "tmp%9#0",
        "arc4_encoded%1#0"
      ]
    },
    "2408": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0"
      ]
    },
    "2409": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "bzero%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "0"
      ]
    },
    "2410": {
      "op": "bytec_3 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0",
        "bzero%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "0",
        "\"t\""
      ]
    },
    "2411": {
      "op": "app_global_get_ex",
      "defined_out": [
        "bzero%0#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2412": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "maybe_value%4#0"
      ]
    },
    "2413": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "maybe_value%4#0",
        "amount#0 (copy)"
      ]
    },
    "2415": {
      "op": "b+",
      "defined_out": [
        "bzero%0#0",
        "tmp%9#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "to_encode%2#0"
      ]
    },
    "2416": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "tmp%9#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "2417": {
      "op": "len",
      "defined_out": [
        "bzero%0#0",
        "tmp%9#0",
        "to_encode%2#0",
        "value_len%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "to_encode%2#0",
        "value_len%2#0"
      ]
    },
    "2418": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "to_encode%2#0",
        "value_len%2#0",
        "32"
      ]
    },
    "2419": {
      "op": "<=",
      "defined_out": [
        "bzero%0#0",
        "len_ok%2#0",
        "tmp%9#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "to_encode%2#0",
        "len_ok%2#0"
      ]
    },
    "2420": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "to_encode%2#0"
      ]
    },
    "2421": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%2#0",
        "bzero%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "arc4_encoded%2#0"
      ]
    },
    "2422": {
      "op": "bytec_3 // \"t\"",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "arc4_encoded%2#0",
        "\"t\""
      ]
    },
    "2423": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "\"t\"",
        "arc4_encoded%2#0"
      ]
    },
    "2424": {
      "op": "app_global_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "2425": {
      "op": "frame_dig 2",
      "defined_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "toKey#0"
      ]
    },
    "2427": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "toKey#0",
        "amount#0 (copy)"
      ]
    },
    "2429": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%6#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2430": {
      "op": "bytec 16 // 0x0062",
      "defined_out": [
        "0x0062",
        "bzero%0#0",
        "encoded_tuple_buffer%6#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%6#0",
        "0x0062"
      ]
    },
    "2432": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%7#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "2433": {
      "op": "frame_dig -1",
      "defined_out": [
        "bzero%0#0",
        "data#0 (copy)",
        "encoded_tuple_buffer%7#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%7#0",
        "data#0 (copy)"
      ]
    },
    "2435": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%8#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "2436": {
      "op": "bytec 13 // 0x0002",
      "defined_out": [
        "0x0002",
        "bzero%0#0",
        "encoded_tuple_buffer%8#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%8#0",
        "0x0002"
      ]
    },
    "2438": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "0x0002",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "2439": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%11#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "2440": {
      "op": "pushbytes 0xfa443b1b // method \"Issue((address,address,uint256,byte[]))\"",
      "defined_out": [
        "Method(Issue((address,address,uint256,byte[])))",
        "bzero%0#0",
        "encoded_tuple_buffer%11#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%11#0",
        "Method(Issue((address,address,uint256,byte[])))"
      ]
    },
    "2446": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "Method(Issue((address,address,uint256,byte[])))",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "2447": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "event%0#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "event%0#0"
      ]
    },
    "2448": {
      "op": "log",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "2449": {
      "retsub": true,
      "op": "retsub"
    },
    "2450": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_redeem_by_partition",
      "params": {
        "partition#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1410_redeem_by_partition",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "2453": {
      "op": "txn Sender",
      "defined_out": [
        "from#0"
      ],
      "stack_out": [
        "from#0"
      ]
    },
    "2455": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "from#0"
      ],
      "stack_out": [
        "from#0",
        "amount#0 (copy)"
      ]
    },
    "2457": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "amount#0 (copy)",
        "from#0"
      ],
      "stack_out": [
        "from#0",
        "amount#0 (copy)",
        "0x"
      ]
    },
    "2459": {
      "op": "b>",
      "defined_out": [
        "from#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%0#0"
      ]
    },
    "2460": {
      "error": "Invalid amount",
      "op": "assert // Invalid amount",
      "stack_out": [
        "from#0"
      ]
    },
    "2461": {
      "op": "dup",
      "defined_out": [
        "from#0",
        "from#0 (copy)"
      ],
      "stack_out": [
        "from#0",
        "from#0 (copy)"
      ]
    },
    "2462": {
      "op": "frame_dig -3",
      "defined_out": [
        "from#0",
        "from#0 (copy)",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "from#0",
        "from#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "2464": {
      "op": "concat",
      "defined_out": [
        "from#0",
        "fromKey#0"
      ],
      "stack_out": [
        "from#0",
        "fromKey#0"
      ]
    },
    "2465": {
      "op": "dup",
      "stack_out": [
        "from#0",
        "fromKey#0",
        "fromKey#0"
      ]
    },
    "2466": {
      "op": "cover 2",
      "defined_out": [
        "from#0",
        "fromKey#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "fromKey#0"
      ]
    },
    "2468": {
      "op": "bytec 4 // \"arc1410_p\"",
      "defined_out": [
        "\"arc1410_p\"",
        "from#0",
        "fromKey#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "fromKey#0",
        "\"arc1410_p\""
      ]
    },
    "2470": {
      "op": "swap",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "\"arc1410_p\"",
        "fromKey#0"
      ]
    },
    "2471": {
      "op": "concat",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0"
      ]
    },
    "2472": {
      "op": "dup",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "2473": {
      "op": "box_len",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2474": {
      "op": "bury 1",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "2476": {
      "error": "Partition balance missing",
      "op": "assert // Partition balance missing",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0"
      ]
    },
    "2477": {
      "op": "dup",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "2478": {
      "op": "box_get",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2479": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "2480": {
      "op": "frame_dig -2",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "2482": {
      "op": "b>=",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "2483": {
      "error": "Insufficient partition balance",
      "op": "assert // Insufficient partition balance",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0"
      ]
    },
    "2484": {
      "op": "dup",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "2485": {
      "op": "box_get",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2486": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%2#0"
      ]
    },
    "2487": {
      "op": "frame_dig -2",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%2#0",
        "amount#0 (copy)"
      ]
    },
    "2489": {
      "op": "b-",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "2490": {
      "op": "dup",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "2491": {
      "op": "len",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "2492": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "2493": {
      "op": "<=",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "len_ok%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "2494": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "2495": {
      "op": "intc_2 // 32",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "2496": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "2497": {
      "op": "dup",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0",
        "bzero%0#0"
      ]
    },
    "2498": {
      "op": "cover 4",
      "defined_out": [
        "bzero%0#0",
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "2500": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "from#0",
        "fromKey#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "from#0",
        "tmp%1#0",
        "arc4_encoded%0#0"
      ]
    },
    "2501": {
      "op": "box_put",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "from#0"
      ]
    },
    "2502": {
      "op": "bytec 6 // \"b\"",
      "defined_out": [
        "\"b\"",
        "bzero%0#0",
        "from#0",
        "fromKey#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "from#0",
        "\"b\""
      ]
    },
    "2504": {
      "op": "swap",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "\"b\"",
        "from#0"
      ]
    },
    "2505": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "2506": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "2507": {
      "op": "box_len",
      "defined_out": [
        "bzero%0#0",
        "fromKey#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2508": {
      "op": "bury 1",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "maybe_exists%3#0"
      ]
    },
    "2510": {
      "op": "bz arc1410_redeem_by_partition_bool_false@3",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "2513": {
      "op": "frame_dig 2",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "2515": {
      "op": "box_get",
      "defined_out": [
        "bzero%0#0",
        "fromKey#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2516": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "maybe_value%4#0"
      ]
    },
    "2517": {
      "op": "frame_dig -2",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "maybe_value%4#0",
        "amount#0 (copy)"
      ]
    },
    "2519": {
      "op": "b>=",
      "defined_out": [
        "bzero%0#0",
        "fromKey#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "2520": {
      "op": "bz arc1410_redeem_by_partition_bool_false@3",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "2523": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "bzero%0#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "and_result%0#0"
      ]
    },
    "2524": {
      "block": "arc1410_redeem_by_partition_bool_merge@4",
      "stack_in": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "and_result%0#0"
      ],
      "error": "Insufficient balance",
      "op": "assert // Insufficient balance",
      "defined_out": [],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "2525": {
      "op": "frame_dig 2",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "2527": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "2528": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2529": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "maybe_value%5#0"
      ]
    },
    "2530": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "maybe_value%5#0",
        "amount#0 (copy)"
      ]
    },
    "2532": {
      "op": "b-",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0"
      ]
    },
    "2533": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "2534": {
      "op": "len",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "2535": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "2536": {
      "op": "<=",
      "defined_out": [
        "len_ok%1#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "2537": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0"
      ]
    },
    "2538": {
      "op": "frame_dig 1",
      "defined_out": [
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%0#0"
      ]
    },
    "2540": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "bzero%0#0 (copy)",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%0#0 (copy)",
        "bzero%0#0 (copy)"
      ]
    },
    "2541": {
      "op": "cover 3",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%0#0 (copy)"
      ]
    },
    "2543": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "tmp%6#0",
        "arc4_encoded%1#0"
      ]
    },
    "2544": {
      "op": "box_put",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0"
      ]
    },
    "2545": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "0"
      ]
    },
    "2546": {
      "op": "bytec_3 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "0",
        "\"t\""
      ]
    },
    "2547": {
      "op": "app_global_get_ex",
      "defined_out": [
        "bzero%0#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "2548": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "maybe_value%6#0"
      ]
    },
    "2549": {
      "op": "frame_dig -2",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "maybe_value%6#0",
        "amount#0 (copy)"
      ]
    },
    "2551": {
      "op": "b-",
      "defined_out": [
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "to_encode%2#0"
      ]
    },
    "2552": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "2553": {
      "op": "len",
      "defined_out": [
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%2#0",
        "value_len%2#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "to_encode%2#0",
        "value_len%2#0"
      ]
    },
    "2554": {
      "op": "intc_2 // 32",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "to_encode%2#0",
        "value_len%2#0",
        "32"
      ]
    },
    "2555": {
      "op": "<=",
      "defined_out": [
        "bzero%0#0",
        "len_ok%2#0",
        "tmp%6#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "to_encode%2#0",
        "len_ok%2#0"
      ]
    },
    "2556": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "to_encode%2#0"
      ]
    },
    "2557": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%2#0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "arc4_encoded%2#0"
      ]
    },
    "2558": {
      "op": "bytec_3 // \"t\"",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "arc4_encoded%2#0",
        "\"t\""
      ]
    },
    "2559": {
      "op": "swap",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "\"t\"",
        "arc4_encoded%2#0"
      ]
    },
    "2560": {
      "op": "app_global_put",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "2561": {
      "op": "frame_dig 0",
      "defined_out": [
        "bzero%0#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "fromKey#0"
      ]
    },
    "2563": {
      "op": "frame_dig -2",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "fromKey#0",
        "amount#0 (copy)"
      ]
    },
    "2565": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%6#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2566": {
      "op": "bytec 16 // 0x0062",
      "defined_out": [
        "0x0062",
        "bzero%0#0",
        "encoded_tuple_buffer%6#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%6#0",
        "0x0062"
      ]
    },
    "2568": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%7#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "2569": {
      "op": "frame_dig -1",
      "defined_out": [
        "bzero%0#0",
        "data#0 (copy)",
        "encoded_tuple_buffer%7#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%7#0",
        "data#0 (copy)"
      ]
    },
    "2571": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%8#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "2572": {
      "op": "bytec 13 // 0x0002",
      "defined_out": [
        "0x0002",
        "bzero%0#0",
        "encoded_tuple_buffer%8#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%8#0",
        "0x0002"
      ]
    },
    "2574": {
      "op": "swap",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "0x0002",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "2575": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%11#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "2576": {
      "op": "bytec 19 // method \"Redeem((address,address,uint256,byte[]))\"",
      "defined_out": [
        "Method(Redeem((address,address,uint256,byte[])))",
        "bzero%0#0",
        "encoded_tuple_buffer%11#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%11#0",
        "Method(Redeem((address,address,uint256,byte[])))"
      ]
    },
    "2578": {
      "op": "swap",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "Method(Redeem((address,address,uint256,byte[])))",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "2579": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "event%0#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "event%0#0"
      ]
    },
    "2580": {
      "op": "log",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "2581": {
      "retsub": true,
      "op": "retsub"
    },
    "2582": {
      "block": "arc1410_redeem_by_partition_bool_false@3",
      "stack_in": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "and_result%0#0"
      ]
    },
    "2583": {
      "op": "b arc1410_redeem_by_partition_bool_merge@4"
    },
    "2586": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_operator_redeem_by_partition",
      "params": {
        "from#0": "bytes",
        "partition#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1410_operator_redeem_by_partition",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "2589": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bzero%1#0"
      ]
    },
    "2590": {
      "op": "dupn 3",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0"
      ]
    },
    "2592": {
      "op": "txn Sender"
    },
    "2594": {
      "op": "frame_dig -4"
    },
    "2596": {
      "op": "txn Sender"
    },
    "2598": {
      "op": "frame_dig -3",
      "defined_out": [
        "from#0 (copy)",
        "partition#0 (copy)",
        "sender#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "from#0 (copy)",
        "sender#0",
        "partition#0 (copy)"
      ]
    },
    "2600": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator",
      "op": "callsub arc1410_is_operator",
      "defined_out": [
        "sender#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "tmp%0#0"
      ]
    },
    "2603": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "tmp%0#0",
        "0"
      ]
    },
    "2604": {
      "op": "getbit",
      "defined_out": [
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "tmp%1#0"
      ]
    },
    "2605": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "tmp%1#0",
        "1"
      ]
    },
    "2606": {
      "op": "==",
      "defined_out": [
        "authorized#0",
        "sender#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0"
      ]
    },
    "2607": {
      "op": "dupn 2",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "authorized#0"
      ]
    },
    "2609": {
      "op": "bnz arc1410_operator_redeem_by_partition_after_if_else@4",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "2612": {
      "op": "frame_dig -4",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "from#0 (copy)"
      ]
    },
    "2614": {
      "op": "frame_dig 4",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "from#0 (copy)",
        "sender#0"
      ]
    },
    "2616": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%2#0",
        "sender#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2617": {
      "op": "frame_dig -3",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "2619": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "pKey#0",
        "sender#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "pKey#0"
      ]
    },
    "2620": {
      "op": "bytec 10 // \"arc1410_opa\"",
      "defined_out": [
        "\"arc1410_opa\"",
        "authorized#0",
        "authorized#9",
        "pKey#0",
        "sender#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "pKey#0",
        "\"arc1410_opa\""
      ]
    },
    "2622": {
      "op": "swap",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "\"arc1410_opa\"",
        "pKey#0"
      ]
    },
    "2623": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0"
      ]
    },
    "2624": {
      "op": "dup",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "2625": {
      "op": "frame_bury 3",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0"
      ]
    },
    "2627": {
      "op": "box_len",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2628": {
      "op": "bury 1",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_exists%0#0"
      ]
    },
    "2630": {
      "op": "bz arc1410_operator_redeem_by_partition_after_if_else@3",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "2633": {
      "op": "frame_dig 3",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0"
      ]
    },
    "2635": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "2636": {
      "op": "box_get",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "maybe_exists%1#0",
        "remaining#0",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "maybe_exists%1#0"
      ]
    },
    "2637": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0"
      ]
    },
    "2638": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "remaining#0",
        "remaining#0 (copy)",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "remaining#0 (copy)"
      ]
    },
    "2639": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "authorized#0",
        "authorized#9",
        "remaining#0",
        "remaining#0 (copy)",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "remaining#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "2641": {
      "op": "b>=",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "remaining#0",
        "sender#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "tmp%4#0"
      ]
    },
    "2642": {
      "error": "Portion allowance exceeded",
      "op": "assert // Portion allowance exceeded",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0"
      ]
    },
    "2643": {
      "op": "intc_1 // 1",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "authorized#0"
      ]
    },
    "2644": {
      "op": "frame_bury 5",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0"
      ]
    },
    "2646": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "amount#0 (copy)"
      ]
    },
    "2648": {
      "op": "b-",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0"
      ]
    },
    "2649": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "2650": {
      "op": "len",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "2651": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "2652": {
      "op": "<=",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "len_ok%0#0",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "2653": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0"
      ]
    },
    "2654": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "2655": {
      "op": "bzero",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "bzero%0#0",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "2656": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "arc4_encoded%0#0"
      ]
    },
    "2657": {
      "op": "box_put",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "2658": {
      "block": "arc1410_operator_redeem_by_partition_after_if_else@3",
      "stack_in": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "authorized#9"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "authorized#9"
      ]
    },
    "2660": {
      "op": "frame_bury 6",
      "defined_out": [
        "authorized#9"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "2662": {
      "block": "arc1410_operator_redeem_by_partition_after_if_else@4",
      "stack_in": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ],
      "op": "frame_dig 6",
      "defined_out": [
        "authorized#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "authorized#0"
      ]
    },
    "2664": {
      "error": "Not authorized operator",
      "op": "assert // Not authorized operator",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "2665": {
      "op": "frame_dig -4",
      "defined_out": [
        "authorized#0",
        "from#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "from#0 (copy)"
      ]
    },
    "2667": {
      "op": "frame_dig -3",
      "defined_out": [
        "authorized#0",
        "from#0 (copy)",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "from#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "2669": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "fromKey#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "fromKey#0"
      ]
    },
    "2670": {
      "op": "dup",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "fromKey#0",
        "fromKey#0"
      ]
    },
    "2671": {
      "op": "frame_bury 1",
      "defined_out": [
        "authorized#0",
        "fromKey#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "fromKey#0"
      ]
    },
    "2673": {
      "op": "bytec 4 // \"arc1410_p\"",
      "defined_out": [
        "\"arc1410_p\"",
        "authorized#0",
        "fromKey#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "fromKey#0",
        "\"arc1410_p\""
      ]
    },
    "2675": {
      "op": "swap",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "\"arc1410_p\"",
        "fromKey#0"
      ]
    },
    "2676": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0"
      ]
    },
    "2677": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "2678": {
      "op": "box_len",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2679": {
      "op": "bury 1",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_exists%2#0"
      ]
    },
    "2681": {
      "error": "Partition balance missing",
      "op": "assert // Partition balance missing",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0"
      ]
    },
    "2682": {
      "op": "dup",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "2683": {
      "op": "box_get",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2684": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_value%3#0"
      ]
    },
    "2685": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "authorized#0",
        "fromKey#0",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_value%3#0",
        "amount#0 (copy)"
      ]
    },
    "2687": {
      "op": "b>=",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "2688": {
      "error": "Insufficient partition balance",
      "op": "assert // Insufficient partition balance",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0"
      ]
    },
    "2689": {
      "op": "dup",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "2690": {
      "op": "box_get",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2691": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_value%4#0"
      ]
    },
    "2692": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_value%4#0",
        "amount#0 (copy)"
      ]
    },
    "2694": {
      "op": "b-",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0"
      ]
    },
    "2695": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "tmp%6#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "2696": {
      "op": "len",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "2697": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "authorized#0",
        "fromKey#0",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "2698": {
      "op": "<=",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "len_ok%1#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "2699": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0"
      ]
    },
    "2700": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "32"
      ]
    },
    "2701": {
      "op": "bzero",
      "defined_out": [
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%1#0"
      ]
    },
    "2702": {
      "op": "dup",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%1#0",
        "bzero%1#0"
      ]
    },
    "2703": {
      "op": "frame_bury 0",
      "defined_out": [
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%1#0"
      ]
    },
    "2705": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "arc4_encoded%1#0"
      ]
    },
    "2706": {
      "op": "box_put",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "2707": {
      "op": "bytec 6 // \"b\"",
      "defined_out": [
        "\"b\"",
        "authorized#0",
        "bzero%1#0",
        "fromKey#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "\"b\""
      ]
    },
    "2709": {
      "op": "frame_dig -4",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "\"b\"",
        "from#0 (copy)"
      ]
    },
    "2711": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0"
      ]
    },
    "2712": {
      "op": "dup",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "tmp%11#0"
      ]
    },
    "2713": {
      "op": "frame_bury 2",
      "defined_out": [
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0"
      ]
    },
    "2715": {
      "op": "box_len",
      "defined_out": [
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2716": {
      "op": "bury 1",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_exists%5#0"
      ]
    },
    "2718": {
      "op": "bz arc1410_operator_redeem_by_partition_bool_false@7",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "2721": {
      "op": "frame_dig 2",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0"
      ]
    },
    "2723": {
      "op": "box_get",
      "defined_out": [
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "2724": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_value%6#0"
      ]
    },
    "2725": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_value%6#0",
        "amount#0 (copy)"
      ]
    },
    "2727": {
      "op": "b>=",
      "defined_out": [
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%13#0"
      ]
    },
    "2728": {
      "op": "bz arc1410_operator_redeem_by_partition_bool_false@7",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "2731": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "and_result%0#0"
      ]
    },
    "2732": {
      "block": "arc1410_operator_redeem_by_partition_bool_merge@8",
      "stack_in": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "and_result%0#0"
      ],
      "error": "Insufficient balance",
      "op": "assert // Insufficient balance",
      "defined_out": [],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "2733": {
      "op": "frame_dig 2",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0"
      ]
    },
    "2735": {
      "op": "dup",
      "defined_out": [
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ]
    },
    "2736": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "2737": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "maybe_value%7#0"
      ]
    },
    "2738": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%7#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "maybe_value%7#0",
        "amount#0 (copy)"
      ]
    },
    "2740": {
      "op": "b-",
      "defined_out": [
        "tmp%11#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0"
      ]
    },
    "2741": {
      "op": "dup",
      "defined_out": [
        "tmp%11#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "2742": {
      "op": "len",
      "defined_out": [
        "tmp%11#0",
        "to_encode%2#0",
        "value_len%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0",
        "value_len%2#0"
      ]
    },
    "2743": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%11#0",
        "to_encode%2#0",
        "value_len%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0",
        "value_len%2#0",
        "32"
      ]
    },
    "2744": {
      "op": "<=",
      "defined_out": [
        "len_ok%2#0",
        "tmp%11#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0",
        "len_ok%2#0"
      ]
    },
    "2745": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0"
      ]
    },
    "2746": {
      "op": "frame_dig 0",
      "defined_out": [
        "bzero%1#0",
        "tmp%11#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0",
        "bzero%1#0"
      ]
    },
    "2748": {
      "op": "dup",
      "defined_out": [
        "bzero%1#0",
        "bzero%1#0 (copy)",
        "tmp%11#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0",
        "bzero%1#0 (copy)",
        "bzero%1#0 (copy)"
      ]
    },
    "2749": {
      "op": "cover 3",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "tmp%11#0",
        "to_encode%2#0",
        "bzero%1#0 (copy)"
      ]
    },
    "2751": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%2#0",
        "bzero%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "tmp%11#0",
        "arc4_encoded%2#0"
      ]
    },
    "2752": {
      "op": "box_put",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0"
      ]
    },
    "2753": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "bzero%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "0"
      ]
    },
    "2754": {
      "op": "bytec_3 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0",
        "bzero%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "0",
        "\"t\""
      ]
    },
    "2755": {
      "op": "app_global_get_ex",
      "defined_out": [
        "bzero%1#0",
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "2756": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "maybe_value%8#0"
      ]
    },
    "2757": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "maybe_value%8#0",
        "amount#0 (copy)"
      ]
    },
    "2759": {
      "op": "b-",
      "defined_out": [
        "bzero%1#0",
        "tmp%11#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "to_encode%3#0"
      ]
    },
    "2760": {
      "op": "dup",
      "defined_out": [
        "bzero%1#0",
        "tmp%11#0",
        "to_encode%3#0",
        "to_encode%3#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "to_encode%3#0",
        "to_encode%3#0 (copy)"
      ]
    },
    "2761": {
      "op": "len",
      "defined_out": [
        "bzero%1#0",
        "tmp%11#0",
        "to_encode%3#0",
        "value_len%3#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "to_encode%3#0",
        "value_len%3#0"
      ]
    },
    "2762": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "to_encode%3#0",
        "value_len%3#0",
        "32"
      ]
    },
    "2763": {
      "op": "<=",
      "defined_out": [
        "bzero%1#0",
        "len_ok%3#0",
        "tmp%11#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "to_encode%3#0",
        "len_ok%3#0"
      ]
    },
    "2764": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "to_encode%3#0"
      ]
    },
    "2765": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%3#0",
        "bzero%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "arc4_encoded%3#0"
      ]
    },
    "2766": {
      "op": "bytec_3 // \"t\"",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "arc4_encoded%3#0",
        "\"t\""
      ]
    },
    "2767": {
      "op": "swap",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "\"t\"",
        "arc4_encoded%3#0"
      ]
    },
    "2768": {
      "op": "app_global_put",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "2769": {
      "op": "frame_dig 1",
      "defined_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "fromKey#0"
      ]
    },
    "2771": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "fromKey#0",
        "amount#0 (copy)"
      ]
    },
    "2773": {
      "op": "concat",
      "defined_out": [
        "bzero%1#0",
        "encoded_tuple_buffer%10#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "2774": {
      "op": "bytec 16 // 0x0062",
      "defined_out": [
        "0x0062",
        "bzero%1#0",
        "encoded_tuple_buffer%10#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%10#0",
        "0x0062"
      ]
    },
    "2776": {
      "op": "concat",
      "defined_out": [
        "bzero%1#0",
        "encoded_tuple_buffer%11#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "2777": {
      "op": "frame_dig -1",
      "defined_out": [
        "bzero%1#0",
        "data#0 (copy)",
        "encoded_tuple_buffer%11#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%11#0",
        "data#0 (copy)"
      ]
    },
    "2779": {
      "op": "concat",
      "defined_out": [
        "bzero%1#0",
        "encoded_tuple_buffer%12#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "2780": {
      "op": "bytec 13 // 0x0002",
      "defined_out": [
        "0x0002",
        "bzero%1#0",
        "encoded_tuple_buffer%12#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%12#0",
        "0x0002"
      ]
    },
    "2782": {
      "op": "swap",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "0x0002",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "2783": {
      "op": "concat",
      "defined_out": [
        "bzero%1#0",
        "encoded_tuple_buffer%15#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "2784": {
      "op": "bytec 19 // method \"Redeem((address,address,uint256,byte[]))\"",
      "defined_out": [
        "Method(Redeem((address,address,uint256,byte[])))",
        "bzero%1#0",
        "encoded_tuple_buffer%15#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%15#0",
        "Method(Redeem((address,address,uint256,byte[])))"
      ]
    },
    "2786": {
      "op": "swap",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "Method(Redeem((address,address,uint256,byte[])))",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "2787": {
      "op": "concat",
      "defined_out": [
        "bzero%1#0",
        "event%0#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "event%0#0"
      ]
    },
    "2788": {
      "op": "log",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "2789": {
      "retsub": true,
      "op": "retsub"
    },
    "2790": {
      "block": "arc1410_operator_redeem_by_partition_bool_false@7",
      "stack_in": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "and_result%0#0"
      ]
    },
    "2791": {
      "op": "b arc1410_operator_redeem_by_partition_bool_merge@8"
    },
    "2794": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.bootstrap",
      "params": {
        "name#0": "bytes",
        "symbol#0": "bytes",
        "decimals#0": "bytes",
        "totalSupply#0": "bytes"
      },
      "block": "bootstrap",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "2797": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2799": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2801": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2802": {
      "error": "Only deployer of this smart contract can call bootstrap method",
      "op": "assert // Only deployer of this smart contract can call bootstrap method",
      "stack_out": []
    },
    "2803": {
      "op": "frame_dig -4",
      "defined_out": [
        "name#0 (copy)"
      ],
      "stack_out": [
        "name#0 (copy)"
      ]
    },
    "2805": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2808": {
      "op": "len",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2809": {
      "op": "dup",
      "defined_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "2810": {
      "error": "Name of the asset must be longer or equal to 1 character",
      "op": "assert // Name of the asset must be longer or equal to 1 character",
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2811": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "32"
      ]
    },
    "2812": {
      "op": "<=",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "2813": {
      "error": "Name of the asset must be shorter or equal to 32 characters",
      "op": "assert // Name of the asset must be shorter or equal to 32 characters",
      "stack_out": []
    },
    "2814": {
      "op": "frame_dig -3",
      "defined_out": [
        "symbol#0 (copy)"
      ],
      "stack_out": [
        "symbol#0 (copy)"
      ]
    },
    "2816": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "2819": {
      "op": "len",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "2820": {
      "op": "dup",
      "defined_out": [
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "2821": {
      "error": "Symbol of the asset must be longer or equal to 1 character",
      "op": "assert // Symbol of the asset must be longer or equal to 1 character",
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "2822": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "8"
      ]
    },
    "2823": {
      "op": "<=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "2824": {
      "error": "Symbol of the asset must be shorter or equal to 8 characters",
      "op": "assert // Symbol of the asset must be shorter or equal to 8 characters",
      "stack_out": []
    },
    "2825": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2826": {
      "op": "bytec_3 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"t\""
      ]
    },
    "2827": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2828": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "2830": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "2831": {
      "error": "This method can be called only once",
      "op": "assert // This method can be called only once",
      "stack_out": []
    },
    "2832": {
      "op": "pushbytes \"n\"",
      "defined_out": [
        "\"n\""
      ],
      "stack_out": [
        "\"n\""
      ]
    },
    "2835": {
      "op": "frame_dig -4",
      "stack_out": [
        "\"n\"",
        "name#0 (copy)"
      ]
    },
    "2837": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2838": {
      "op": "pushbytes \"s\"",
      "defined_out": [
        "\"s\""
      ],
      "stack_out": [
        "\"s\""
      ]
    },
    "2841": {
      "op": "frame_dig -3",
      "stack_out": [
        "\"s\"",
        "symbol#0 (copy)"
      ]
    },
    "2843": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2844": {
      "op": "bytec_3 // \"t\"",
      "stack_out": [
        "\"t\""
      ]
    },
    "2845": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"t\"",
        "totalSupply#0 (copy)"
      ],
      "stack_out": [
        "\"t\"",
        "totalSupply#0 (copy)"
      ]
    },
    "2847": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2848": {
      "op": "pushbytes \"d\"",
      "defined_out": [
        "\"d\""
      ],
      "stack_out": [
        "\"d\""
      ]
    },
    "2851": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"d\"",
        "decimals#0 (copy)"
      ],
      "stack_out": [
        "\"d\"",
        "decimals#0 (copy)"
      ]
    },
    "2853": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2854": {
      "op": "txn Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "2856": {
      "op": "bytec 6 // \"b\"",
      "defined_out": [
        "\"b\"",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "\"b\""
      ]
    },
    "2858": {
      "op": "dig 1",
      "defined_out": [
        "\"b\"",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "\"b\"",
        "sender#0 (copy)"
      ]
    },
    "2860": {
      "op": "concat",
      "defined_out": [
        "sender#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%16#0"
      ]
    },
    "2861": {
      "op": "frame_dig -1",
      "stack_out": [
        "sender#0",
        "tmp%16#0",
        "totalSupply#0 (copy)"
      ]
    },
    "2863": {
      "op": "box_put",
      "stack_out": [
        "sender#0"
      ]
    },
    "2864": {
      "op": "global ZeroAddress",
      "defined_out": [
        "sender#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%17#0"
      ]
    },
    "2866": {
      "op": "swap",
      "stack_out": [
        "tmp%17#0",
        "sender#0"
      ]
    },
    "2867": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2868": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "totalSupply#0 (copy)"
      ]
    },
    "2870": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2871": {
      "op": "bytec 20 // method \"arc200_Transfer(address,address,uint256)\"",
      "defined_out": [
        "Method(arc200_Transfer(address,address,uint256))",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "Method(arc200_Transfer(address,address,uint256))"
      ]
    },
    "2873": {
      "op": "swap",
      "stack_out": [
        "Method(arc200_Transfer(address,address,uint256))",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2874": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "2875": {
      "op": "log",
      "stack_out": []
    },
    "2876": {
      "op": "bytec 5 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "0x80"
      ]
    },
    "2878": {
      "retsub": true,
      "op": "retsub"
    },
    "2879": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_name",
      "params": {},
      "block": "arc200_name",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2880": {
      "op": "pushbytes \"n\"",
      "defined_out": [
        "\"n\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"n\""
      ]
    },
    "2883": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2884": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2885": {
      "op": "extract 2 0",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2888": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "2889": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "2890": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0",
        "32"
      ]
    },
    "2891": {
      "op": "==",
      "defined_out": [
        "lengths_equal%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "lengths_equal%0#0"
      ]
    },
    "2892": {
      "error": "invalid size",
      "op": "assert // invalid size",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2893": {
      "retsub": true,
      "op": "retsub"
    },
    "2894": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_symbol",
      "params": {},
      "block": "arc200_symbol",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2895": {
      "op": "pushbytes \"s\"",
      "defined_out": [
        "\"s\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"s\""
      ]
    },
    "2898": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2899": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2900": {
      "op": "extract 2 0",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2903": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "2904": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "2905": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0",
        "8"
      ]
    },
    "2906": {
      "op": "==",
      "defined_out": [
        "lengths_equal%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "lengths_equal%0#0"
      ]
    },
    "2907": {
      "error": "invalid size",
      "op": "assert // invalid size",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2908": {
      "retsub": true,
      "op": "retsub"
    },
    "2909": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_decimals",
      "params": {},
      "block": "arc200_decimals",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2910": {
      "op": "pushbytes \"d\"",
      "defined_out": [
        "\"d\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"d\""
      ]
    },
    "2913": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2914": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2915": {
      "retsub": true,
      "op": "retsub"
    },
    "2916": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_totalSupply",
      "params": {},
      "block": "arc200_totalSupply",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2917": {
      "op": "bytec_3 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"t\""
      ]
    },
    "2918": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2919": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2920": {
      "retsub": true,
      "op": "retsub"
    },
    "2921": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_balanceOf",
      "params": {
        "owner#0": "bytes"
      },
      "block": "arc200_balanceOf",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2924": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "2926": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "op": "callsub _balanceOf",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2929": {
      "retsub": true,
      "op": "retsub"
    },
    "2930": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_transferFrom",
      "params": {
        "from#0": "bytes",
        "to#0": "bytes",
        "value#0": "bytes"
      },
      "block": "arc200_transferFrom",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "2933": {
      "op": "txn Sender",
      "defined_out": [
        "spender#0"
      ],
      "stack_out": [
        "spender#0"
      ]
    },
    "2935": {
      "op": "frame_dig -3",
      "defined_out": [
        "from#0 (copy)",
        "spender#0"
      ],
      "stack_out": [
        "spender#0",
        "from#0 (copy)"
      ]
    },
    "2937": {
      "op": "dig 1",
      "defined_out": [
        "from#0 (copy)",
        "spender#0",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "spender#0",
        "from#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "2939": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._allowance",
      "op": "callsub _allowance",
      "defined_out": [
        "spender#0",
        "spender_allowance#0"
      ],
      "stack_out": [
        "spender#0",
        "spender_allowance#0"
      ]
    },
    "2942": {
      "op": "dup",
      "defined_out": [
        "spender#0",
        "spender_allowance#0",
        "spender_allowance#0 (copy)"
      ],
      "stack_out": [
        "spender#0",
        "spender_allowance#0",
        "spender_allowance#0 (copy)"
      ]
    },
    "2943": {
      "op": "frame_dig -1",
      "defined_out": [
        "spender#0",
        "spender_allowance#0",
        "spender_allowance#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "spender#0",
        "spender_allowance#0",
        "spender_allowance#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "2945": {
      "op": "b>=",
      "defined_out": [
        "spender#0",
        "spender_allowance#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "spender#0",
        "spender_allowance#0",
        "tmp%0#0"
      ]
    },
    "2946": {
      "error": "insufficient approval",
      "op": "assert // insufficient approval",
      "stack_out": [
        "spender#0",
        "spender_allowance#0"
      ]
    },
    "2947": {
      "op": "frame_dig -1",
      "stack_out": [
        "spender#0",
        "spender_allowance#0",
        "value#0 (copy)"
      ]
    },
    "2949": {
      "op": "b-",
      "defined_out": [
        "spender#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0"
      ]
    },
    "2950": {
      "op": "dup",
      "defined_out": [
        "spender#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "2951": {
      "op": "len",
      "defined_out": [
        "spender#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "2952": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "spender#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "2953": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "spender#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "2954": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "spender#0",
        "to_encode%0#0"
      ]
    },
    "2955": {
      "op": "intc_2 // 32",
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "2956": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "spender#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "2957": {
      "op": "b|",
      "defined_out": [
        "new_spender_allowance#0",
        "spender#0"
      ],
      "stack_out": [
        "spender#0",
        "new_spender_allowance#0"
      ]
    },
    "2958": {
      "op": "frame_dig -3",
      "stack_out": [
        "spender#0",
        "new_spender_allowance#0",
        "from#0 (copy)"
      ]
    },
    "2960": {
      "op": "cover 2",
      "stack_out": [
        "from#0 (copy)",
        "spender#0",
        "new_spender_allowance#0"
      ]
    },
    "2962": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._approve",
      "op": "callsub _approve",
      "defined_out": [
        "{_approve}"
      ],
      "stack_out": [
        "{_approve}"
      ]
    },
    "2965": {
      "op": "pop",
      "stack_out": []
    },
    "2966": {
      "op": "frame_dig -3",
      "stack_out": [
        "from#0 (copy)"
      ]
    },
    "2968": {
      "op": "frame_dig -2",
      "defined_out": [
        "from#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "from#0 (copy)",
        "to#0 (copy)"
      ]
    },
    "2970": {
      "op": "frame_dig -1",
      "stack_out": [
        "from#0 (copy)",
        "to#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "2972": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._transfer",
      "op": "callsub _transfer",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2975": {
      "retsub": true,
      "op": "retsub"
    },
    "2976": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_approve",
      "params": {
        "spender#0": "bytes",
        "value#0": "bytes"
      },
      "block": "arc200_approve",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2979": {
      "op": "txn Sender",
      "defined_out": [
        "owner#0"
      ],
      "stack_out": [
        "owner#0"
      ]
    },
    "2981": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0",
        "spender#0 (copy)"
      ]
    },
    "2983": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0",
        "spender#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "owner#0",
        "spender#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "2985": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._approve",
      "op": "callsub _approve",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2988": {
      "retsub": true,
      "op": "retsub"
    },
    "2989": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_allowance",
      "params": {
        "owner#0": "bytes",
        "spender#0": "bytes"
      },
      "block": "arc200_allowance",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2992": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "2994": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "2996": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._allowance",
      "op": "callsub _allowance",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2999": {
      "retsub": true,
      "op": "retsub"
    },
    "3000": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "params": {
        "owner#0": "bytes"
      },
      "block": "_balanceOf",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "3003": {
      "op": "bytec 6 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "\"b\""
      ]
    },
    "3005": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"b\"",
        "owner#0 (copy)"
      ],
      "stack_out": [
        "\"b\"",
        "owner#0 (copy)"
      ]
    },
    "3007": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3008": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3009": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3010": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3012": {
      "op": "bnz _balanceOf_after_if_else@2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3015": {
      "op": "bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "3016": {
      "op": "swap"
    },
    "3017": {
      "retsub": true,
      "op": "retsub"
    },
    "3018": {
      "block": "_balanceOf_after_if_else@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3020": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3021": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "3022": {
      "op": "swap"
    },
    "3023": {
      "retsub": true,
      "op": "retsub"
    },
    "3024": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._transfer",
      "params": {
        "sender#0": "bytes",
        "recipient#0": "bytes",
        "amount#0": "bytes"
      },
      "block": "_transfer",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "3027": {
      "op": "frame_dig -3",
      "defined_out": [
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0 (copy)"
      ]
    },
    "3029": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "op": "callsub _balanceOf",
      "defined_out": [
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0"
      ]
    },
    "3032": {
      "op": "dup",
      "defined_out": [
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "sender_balance#0"
      ]
    },
    "3033": {
      "op": "frame_dig -2",
      "defined_out": [
        "recipient#0 (copy)",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "sender_balance#0",
        "recipient#0 (copy)"
      ]
    },
    "3035": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "op": "callsub _balanceOf",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "3038": {
      "op": "swap",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender_balance#0"
      ]
    },
    "3039": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender_balance#0",
        "amount#0 (copy)"
      ]
    },
    "3041": {
      "op": "b>=",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "tmp%0#0"
      ]
    },
    "3042": {
      "error": "Insufficient balance at the sender account",
      "op": "assert // Insufficient balance at the sender account",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "3043": {
      "op": "frame_dig -3",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender#0 (copy)"
      ]
    },
    "3045": {
      "op": "frame_dig -2",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender#0 (copy)",
        "recipient#0 (copy)"
      ]
    },
    "3047": {
      "op": "!=",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "tmp%1#0"
      ]
    },
    "3048": {
      "op": "bz _transfer_after_if_else@2",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "3051": {
      "op": "frame_dig 0",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender_balance#0"
      ]
    },
    "3053": {
      "op": "frame_dig -1",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender_balance#0",
        "amount#0 (copy)"
      ]
    },
    "3055": {
      "op": "b-",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0"
      ]
    },
    "3056": {
      "op": "dup",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "3057": {
      "op": "len",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "3058": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "3059": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "3060": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0"
      ]
    },
    "3061": {
      "op": "intc_2 // 32",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "3062": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "3063": {
      "op": "swap",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%0#0"
      ]
    },
    "3064": {
      "op": "dig 1",
      "defined_out": [
        "bzero%0#0",
        "bzero%0#0 (copy)",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%0#0",
        "bzero%0#0 (copy)"
      ]
    },
    "3066": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "arc4_encoded%0#0"
      ]
    },
    "3067": {
      "op": "bytec 6 // \"b\"",
      "defined_out": [
        "\"b\"",
        "arc4_encoded%0#0",
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "arc4_encoded%0#0",
        "\"b\""
      ]
    },
    "3069": {
      "op": "frame_dig -3",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "arc4_encoded%0#0",
        "\"b\"",
        "sender#0 (copy)"
      ]
    },
    "3071": {
      "op": "concat",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "arc4_encoded%0#0",
        "tmp%2#0"
      ]
    },
    "3072": {
      "op": "swap",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "tmp%2#0",
        "arc4_encoded%0#0"
      ]
    },
    "3073": {
      "op": "box_put",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0"
      ]
    },
    "3074": {
      "op": "frame_dig 1",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "recipient_balance#0"
      ]
    },
    "3076": {
      "op": "frame_dig -1",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "recipient_balance#0",
        "amount#0 (copy)"
      ]
    },
    "3078": {
      "op": "b+",
      "defined_out": [
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0"
      ]
    },
    "3079": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "3080": {
      "op": "len",
      "defined_out": [
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "3081": {
      "op": "intc_2 // 32",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "3082": {
      "op": "<=",
      "defined_out": [
        "bzero%0#0",
        "len_ok%1#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "3083": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0"
      ]
    },
    "3084": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "arc4_encoded%1#0"
      ]
    },
    "3085": {
      "op": "bytec 6 // \"b\"",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "arc4_encoded%1#0",
        "\"b\""
      ]
    },
    "3087": {
      "op": "frame_dig -2",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "arc4_encoded%1#0",
        "\"b\"",
        "recipient#0 (copy)"
      ]
    },
    "3089": {
      "op": "concat",
      "defined_out": [
        "arc4_encoded%1#0",
        "recipient_balance#0",
        "sender_balance#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "arc4_encoded%1#0",
        "tmp%3#0"
      ]
    },
    "3090": {
      "op": "swap",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "tmp%3#0",
        "arc4_encoded%1#0"
      ]
    },
    "3091": {
      "op": "box_put",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "3092": {
      "block": "_transfer_after_if_else@2",
      "stack_in": [
        "sender_balance#0",
        "recipient_balance#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender#0 (copy)"
      ]
    },
    "3094": {
      "op": "frame_dig -2",
      "defined_out": [
        "recipient#0 (copy)",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender#0 (copy)",
        "recipient#0 (copy)"
      ]
    },
    "3096": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3097": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "encoded_tuple_buffer%2#0",
        "amount#0 (copy)"
      ]
    },
    "3099": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3100": {
      "op": "bytec 20 // method \"arc200_Transfer(address,address,uint256)\"",
      "defined_out": [
        "Method(arc200_Transfer(address,address,uint256))",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "encoded_tuple_buffer%3#0",
        "Method(arc200_Transfer(address,address,uint256))"
      ]
    },
    "3102": {
      "op": "swap",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "Method(arc200_Transfer(address,address,uint256))",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3103": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "event%0#0"
      ]
    },
    "3104": {
      "op": "log",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "3105": {
      "op": "bytec 5 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "0x80"
      ]
    },
    "3107": {
      "op": "frame_bury 0"
    },
    "3109": {
      "retsub": true,
      "op": "retsub"
    },
    "3110": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._approvalKey",
      "params": {
        "owner#0": "bytes",
        "spender#0": "bytes"
      },
      "block": "_approvalKey",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "3113": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "3115": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "3117": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3118": {
      "op": "sha256",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "3119": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "3120": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "3121": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0",
        "32"
      ]
    },
    "3122": {
      "op": "==",
      "defined_out": [
        "lengths_equal%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "lengths_equal%0#0"
      ]
    },
    "3123": {
      "error": "invalid size",
      "op": "assert // invalid size",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "3124": {
      "retsub": true,
      "op": "retsub"
    },
    "3125": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._allowance",
      "params": {
        "owner#0": "bytes",
        "spender#0": "bytes"
      },
      "block": "_allowance",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "3128": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "3130": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "3132": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._approvalKey",
      "op": "callsub _approvalKey",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "3135": {
      "op": "pushbytes \"a\"",
      "defined_out": [
        "\"a\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"a\""
      ]
    },
    "3138": {
      "op": "swap",
      "stack_out": [
        "\"a\"",
        "key#0"
      ]
    },
    "3139": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3140": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3141": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3142": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3144": {
      "op": "bnz _allowance_after_if_else@2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3147": {
      "op": "bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "3148": {
      "op": "swap"
    },
    "3149": {
      "retsub": true,
      "op": "retsub"
    },
    "3150": {
      "block": "_allowance_after_if_else@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3152": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3153": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "3154": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "3157": {
      "op": "swap"
    },
    "3158": {
      "retsub": true,
      "op": "retsub"
    },
    "3159": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._approve",
      "params": {
        "owner#0": "bytes",
        "spender#0": "bytes",
        "amount#0": "bytes"
      },
      "block": "_approve",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "3162": {
      "op": "frame_dig -3",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "3164": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "3166": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._approvalKey",
      "op": "callsub _approvalKey",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "3169": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "amount#0 (copy)"
      ]
    },
    "3171": {
      "op": "frame_dig -3",
      "stack_out": [
        "key#0",
        "amount#0 (copy)",
        "owner#0 (copy)"
      ]
    },
    "3173": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3174": {
      "op": "frame_dig -2",
      "stack_out": [
        "key#0",
        "encoded_tuple_buffer%2#0",
        "spender#0 (copy)"
      ]
    },
    "3176": {
      "op": "concat",
      "defined_out": [
        "approvalBox#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "approvalBox#0"
      ]
    },
    "3177": {
      "op": "pushbytes \"a\"",
      "defined_out": [
        "\"a\"",
        "approvalBox#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "approvalBox#0",
        "\"a\""
      ]
    },
    "3180": {
      "op": "uncover 2",
      "stack_out": [
        "approvalBox#0",
        "\"a\"",
        "key#0"
      ]
    },
    "3182": {
      "op": "concat",
      "defined_out": [
        "approvalBox#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "approvalBox#0",
        "tmp%0#0"
      ]
    },
    "3183": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "approvalBox#0"
      ]
    },
    "3184": {
      "op": "box_put",
      "stack_out": []
    },
    "3185": {
      "op": "frame_dig -3",
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "3187": {
      "op": "frame_dig -2",
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "3189": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "3190": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "amount#0 (copy)"
      ]
    },
    "3192": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3193": {
      "op": "pushbytes 0x1969f865 // method \"arc200_Approval(address,address,uint256)\"",
      "defined_out": [
        "Method(arc200_Approval(address,address,uint256))",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "Method(arc200_Approval(address,address,uint256))"
      ]
    },
    "3199": {
      "op": "swap",
      "stack_out": [
        "Method(arc200_Approval(address,address,uint256))",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3200": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "3201": {
      "op": "log",
      "stack_out": []
    },
    "3202": {
      "op": "bytec 5 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "0x80"
      ]
    },
    "3204": {
      "retsub": true,
      "op": "retsub"
    },
    "3205": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "params": {},
      "block": "_ensureDefaultOwner",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3206": {
      "op": "bytec 9 // \"arc88_oi\"",
      "defined_out": [
        "\"arc88_oi\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_oi\""
      ]
    },
    "3208": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3209": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "3211": {
      "op": "bz _ensureDefaultOwner_if_body@2",
      "stack_out": []
    },
    "3214": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3215": {
      "op": "bytec 9 // \"arc88_oi\"",
      "stack_out": [
        "0",
        "\"arc88_oi\""
      ]
    },
    "3217": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3218": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "3219": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3220": {
      "op": "bnz _ensureDefaultOwner_after_if_else@5",
      "stack_out": []
    },
    "3223": {
      "block": "_ensureDefaultOwner_if_body@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3224": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "3225": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3226": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%2#0"
      ]
    },
    "3228": {
      "op": "bnz _ensureDefaultOwner_after_if_else@4",
      "stack_out": []
    },
    "3231": {
      "op": "bytec_2 // \"arc88_o\"",
      "stack_out": [
        "\"arc88_o\""
      ]
    },
    "3232": {
      "op": "global CreatorAddress",
      "defined_out": [
        "\"arc88_o\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"arc88_o\"",
        "new_state_value%0#0"
      ]
    },
    "3234": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3235": {
      "block": "_ensureDefaultOwner_after_if_else@4",
      "stack_in": [],
      "op": "bytec 9 // \"arc88_oi\"",
      "defined_out": [
        "\"arc88_oi\""
      ],
      "stack_out": [
        "\"arc88_oi\""
      ]
    },
    "3237": {
      "op": "bytec 14 // 0x01",
      "defined_out": [
        "\"arc88_oi\"",
        "0x01"
      ],
      "stack_out": [
        "\"arc88_oi\"",
        "0x01"
      ]
    },
    "3239": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3240": {
      "block": "_ensureDefaultOwner_after_if_else@5",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "3241": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_owner",
      "params": {},
      "block": "arc88_owner",
      "stack_in": [],
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "3244": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3245": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "3246": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3247": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3248": {
      "retsub": true,
      "op": "retsub"
    },
    "3249": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_is_owner",
      "params": {
        "query#0": "bytes"
      },
      "block": "arc88_is_owner",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "3252": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "3255": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3256": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "3257": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3258": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "3260": {
      "op": "bnz arc88_is_owner_after_if_else@2",
      "stack_out": []
    },
    "3263": {
      "op": "bytec 8 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "3265": {
      "retsub": true,
      "op": "retsub"
    },
    "3266": {
      "block": "arc88_is_owner_after_if_else@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3267": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "3268": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3269": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "3270": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "3271": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3272": {
      "op": "bz arc88_is_owner_after_if_else@4",
      "stack_out": []
    },
    "3275": {
      "op": "bytec 8 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "3277": {
      "retsub": true,
      "op": "retsub"
    },
    "3278": {
      "block": "arc88_is_owner_after_if_else@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3279": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "3280": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3281": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "3282": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%2#0",
        "query#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "query#0 (copy)"
      ]
    },
    "3284": {
      "op": "==",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "3285": {
      "op": "bytec 8 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "3287": {
      "op": "intc_0 // 0",
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "3288": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "3290": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "3291": {
      "retsub": true,
      "op": "retsub"
    },
    "3292": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_initialize_owner",
      "params": {
        "new_owner#0": "bytes"
      },
      "block": "arc88_initialize_owner",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "3295": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3296": {
      "op": "bytec 9 // \"arc88_oi\"",
      "defined_out": [
        "\"arc88_oi\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_oi\""
      ]
    },
    "3298": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3299": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "3301": {
      "op": "bz arc88_initialize_owner_bool_false@3",
      "stack_out": []
    },
    "3304": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3305": {
      "op": "bytec 9 // \"arc88_oi\"",
      "stack_out": [
        "0",
        "\"arc88_oi\""
      ]
    },
    "3307": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3308": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "3309": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3310": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "3311": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3312": {
      "op": "bz arc88_initialize_owner_bool_false@3",
      "stack_out": []
    },
    "3315": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "3316": {
      "block": "arc88_initialize_owner_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3317": {
      "error": "already_initialized",
      "op": "assert // already_initialized",
      "stack_out": []
    },
    "3318": {
      "op": "frame_dig -1",
      "defined_out": [
        "new_owner#0 (copy)"
      ],
      "stack_out": [
        "new_owner#0 (copy)"
      ]
    },
    "3320": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "new_owner#0 (copy)"
      ],
      "stack_out": [
        "new_owner#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "3321": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "3322": {
      "error": "zero_address_not_allowed",
      "op": "assert // zero_address_not_allowed",
      "stack_out": []
    },
    "3323": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\""
      ],
      "stack_out": [
        "\"arc88_o\""
      ]
    },
    "3324": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"arc88_o\"",
        "new_owner#0 (copy)"
      ]
    },
    "3326": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3327": {
      "op": "bytec 9 // \"arc88_oi\"",
      "defined_out": [
        "\"arc88_oi\""
      ],
      "stack_out": [
        "\"arc88_oi\""
      ]
    },
    "3329": {
      "op": "bytec 14 // 0x01",
      "defined_out": [
        "\"arc88_oi\"",
        "0x01"
      ],
      "stack_out": [
        "\"arc88_oi\"",
        "0x01"
      ]
    },
    "3331": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3332": {
      "retsub": true,
      "op": "retsub"
    },
    "3333": {
      "block": "arc88_initialize_owner_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "3334": {
      "op": "b arc88_initialize_owner_bool_merge@4"
    },
    "3337": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_transfer_ownership",
      "params": {
        "new_owner#0": "bytes"
      },
      "block": "arc88_transfer_ownership",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "3340": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "3343": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3345": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "3346": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "3347": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3348": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "3349": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3350": {
      "error": "not_owner",
      "op": "assert // not_owner",
      "stack_out": []
    },
    "3351": {
      "op": "frame_dig -1",
      "defined_out": [
        "new_owner#0 (copy)"
      ],
      "stack_out": [
        "new_owner#0 (copy)"
      ]
    },
    "3353": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "new_owner#0 (copy)"
      ],
      "stack_out": [
        "new_owner#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "3354": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3355": {
      "error": "zero_address_not_allowed",
      "op": "assert // zero_address_not_allowed",
      "stack_out": []
    },
    "3356": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3357": {
      "op": "bytec_2 // \"arc88_o\"",
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "3358": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "previous#0"
      ],
      "stack_out": [
        "previous#0",
        "maybe_exists%1#0"
      ]
    },
    "3359": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "previous#0"
      ]
    },
    "3360": {
      "op": "bytec_2 // \"arc88_o\"",
      "stack_out": [
        "previous#0",
        "\"arc88_o\""
      ]
    },
    "3361": {
      "op": "frame_dig -1",
      "stack_out": [
        "previous#0",
        "\"arc88_o\"",
        "new_owner#0 (copy)"
      ]
    },
    "3363": {
      "op": "app_global_put",
      "stack_out": [
        "previous#0"
      ]
    },
    "3364": {
      "op": "frame_dig -1",
      "stack_out": [
        "previous#0",
        "new_owner#0 (copy)"
      ]
    },
    "3366": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3367": {
      "op": "bytec 21 // method \"arc88_OwnershipTransferred(address,address)\"",
      "defined_out": [
        "Method(arc88_OwnershipTransferred(address,address))",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferred(address,address))"
      ]
    },
    "3369": {
      "op": "swap",
      "stack_out": [
        "Method(arc88_OwnershipTransferred(address,address))",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3370": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "3371": {
      "op": "log",
      "stack_out": []
    },
    "3372": {
      "retsub": true,
      "op": "retsub"
    },
    "3373": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_renounce_ownership",
      "params": {},
      "block": "arc88_renounce_ownership",
      "stack_in": [],
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "3376": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3378": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "3379": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "3380": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3381": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "3382": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3383": {
      "error": "not_owner",
      "op": "assert // not_owner",
      "stack_out": []
    },
    "3384": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3385": {
      "op": "bytec_2 // \"arc88_o\"",
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "3386": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "previous#0"
      ],
      "stack_out": [
        "previous#0",
        "maybe_exists%1#0"
      ]
    },
    "3387": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "previous#0"
      ]
    },
    "3388": {
      "op": "bytec_2 // \"arc88_o\"",
      "stack_out": [
        "previous#0",
        "\"arc88_o\""
      ]
    },
    "3389": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "\"arc88_o\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "previous#0"
      ],
      "stack_out": [
        "previous#0",
        "\"arc88_o\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "3390": {
      "op": "app_global_put",
      "stack_out": [
        "previous#0"
      ]
    },
    "3391": {
      "op": "pushbytes 0x346aa166 // method \"arc88_OwnershipRenounced(address)\"",
      "defined_out": [
        "Method(arc88_OwnershipRenounced(address))",
        "previous#0"
      ],
      "stack_out": [
        "previous#0",
        "Method(arc88_OwnershipRenounced(address))"
      ]
    },
    "3397": {
      "op": "swap",
      "stack_out": [
        "Method(arc88_OwnershipRenounced(address))",
        "previous#0"
      ]
    },
    "3398": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "3399": {
      "op": "log",
      "stack_out": []
    },
    "3400": {
      "retsub": true,
      "op": "retsub"
    },
    "3401": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_transfer_ownership_request",
      "params": {
        "pending#0": "bytes"
      },
      "block": "arc88_transfer_ownership_request",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "3404": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "3407": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3409": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "3410": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "3411": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3412": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "3413": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3414": {
      "error": "not_owner",
      "op": "assert // not_owner",
      "stack_out": []
    },
    "3415": {
      "op": "frame_dig -1",
      "defined_out": [
        "pending#0 (copy)"
      ],
      "stack_out": [
        "pending#0 (copy)"
      ]
    },
    "3417": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "pending#0 (copy)"
      ],
      "stack_out": [
        "pending#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "3418": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3419": {
      "error": "zero_address_not_allowed",
      "op": "assert // zero_address_not_allowed",
      "stack_out": []
    },
    "3420": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3421": {
      "op": "bytec 7 // \"arc88_po\"",
      "defined_out": [
        "\"arc88_po\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_po\""
      ]
    },
    "3423": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3424": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "3426": {
      "op": "bz arc88_transfer_ownership_request_after_if_else@3",
      "stack_out": []
    },
    "3429": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3430": {
      "op": "bytec 7 // \"arc88_po\"",
      "stack_out": [
        "0",
        "\"arc88_po\""
      ]
    },
    "3432": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3433": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "3434": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "stack_out": [
        "maybe_value%2#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "3435": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "3436": {
      "op": "!",
      "defined_out": [
        "not%tmp%3#0"
      ],
      "stack_out": [
        "not%tmp%3#0"
      ]
    },
    "3437": {
      "error": "pending_transfer_exists",
      "op": "assert // pending_transfer_exists",
      "stack_out": []
    },
    "3438": {
      "block": "arc88_transfer_ownership_request_after_if_else@3",
      "stack_in": [],
      "op": "bytec 7 // \"arc88_po\"",
      "defined_out": [
        "\"arc88_po\""
      ],
      "stack_out": [
        "\"arc88_po\""
      ]
    },
    "3440": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"arc88_po\"",
        "pending#0 (copy)"
      ],
      "stack_out": [
        "\"arc88_po\"",
        "pending#0 (copy)"
      ]
    },
    "3442": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3443": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3444": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "3445": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3446": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "3447": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%3#0",
        "pending#0 (copy)"
      ]
    },
    "3449": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3450": {
      "op": "pushbytes 0x16bf1f91 // method \"arc88_OwnershipTransferRequested(address,address)\"",
      "defined_out": [
        "Method(arc88_OwnershipTransferRequested(address,address))",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferRequested(address,address))"
      ]
    },
    "3456": {
      "op": "swap",
      "stack_out": [
        "Method(arc88_OwnershipTransferRequested(address,address))",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3457": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "3458": {
      "op": "log",
      "stack_out": []
    },
    "3459": {
      "retsub": true,
      "op": "retsub"
    },
    "3460": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_accept_ownership",
      "params": {},
      "block": "arc88_accept_ownership",
      "stack_in": [],
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "3463": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3464": {
      "op": "bytec 7 // \"arc88_po\"",
      "defined_out": [
        "\"arc88_po\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_po\""
      ]
    },
    "3466": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3467": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "3469": {
      "error": "not_pending_owner",
      "op": "assert // not_pending_owner",
      "stack_out": []
    },
    "3470": {
      "op": "txn Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "3472": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sender#0",
        "0"
      ]
    },
    "3473": {
      "op": "bytec 7 // \"arc88_po\"",
      "stack_out": [
        "sender#0",
        "0",
        "\"arc88_po\""
      ]
    },
    "3475": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3476": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "sender#0",
        "maybe_value%1#0"
      ]
    },
    "3477": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%1#0",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "maybe_value%1#0",
        "sender#0 (copy)"
      ]
    },
    "3479": {
      "op": "==",
      "defined_out": [
        "sender#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%0#0"
      ]
    },
    "3480": {
      "error": "not_pending_owner",
      "op": "assert // not_pending_owner",
      "stack_out": [
        "sender#0"
      ]
    },
    "3481": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sender#0",
        "0"
      ]
    },
    "3482": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "3483": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "previous#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "previous#0",
        "maybe_exists%2#0"
      ]
    },
    "3484": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "sender#0",
        "previous#0"
      ]
    },
    "3485": {
      "op": "bytec_2 // \"arc88_o\"",
      "stack_out": [
        "sender#0",
        "previous#0",
        "\"arc88_o\""
      ]
    },
    "3486": {
      "op": "dig 2",
      "stack_out": [
        "sender#0",
        "previous#0",
        "\"arc88_o\"",
        "sender#0 (copy)"
      ]
    },
    "3488": {
      "op": "app_global_put",
      "stack_out": [
        "sender#0",
        "previous#0"
      ]
    },
    "3489": {
      "op": "bytec 7 // \"arc88_po\"",
      "stack_out": [
        "sender#0",
        "previous#0",
        "\"arc88_po\""
      ]
    },
    "3491": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "\"arc88_po\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "previous#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "previous#0",
        "\"arc88_po\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "3492": {
      "op": "app_global_put",
      "stack_out": [
        "sender#0",
        "previous#0"
      ]
    },
    "3493": {
      "op": "swap",
      "stack_out": [
        "previous#0",
        "sender#0"
      ]
    },
    "3494": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3495": {
      "op": "pushbytes 0xf7e36b37 // method \"arc88_OwnershipTransferAccepted(address,address)\"",
      "defined_out": [
        "Method(arc88_OwnershipTransferAccepted(address,address))",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferAccepted(address,address))"
      ]
    },
    "3501": {
      "op": "dig 1",
      "defined_out": [
        "Method(arc88_OwnershipTransferAccepted(address,address))",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%2#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferAccepted(address,address))",
        "encoded_tuple_buffer%2#0 (copy)"
      ]
    },
    "3503": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "event%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "event%0#0"
      ]
    },
    "3504": {
      "op": "log",
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3505": {
      "op": "bytec 21 // method \"arc88_OwnershipTransferred(address,address)\"",
      "defined_out": [
        "Method(arc88_OwnershipTransferred(address,address))",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferred(address,address))"
      ]
    },
    "3507": {
      "op": "swap",
      "stack_out": [
        "Method(arc88_OwnershipTransferred(address,address))",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3508": {
      "op": "concat",
      "defined_out": [
        "event%1#0"
      ],
      "stack_out": [
        "event%1#0"
      ]
    },
    "3509": {
      "op": "log",
      "stack_out": []
    },
    "3510": {
      "retsub": true,
      "op": "retsub"
    },
    "3511": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_cancel_ownership_request",
      "params": {},
      "block": "arc88_cancel_ownership_request",
      "stack_in": [],
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "3514": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3516": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "3517": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "3518": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3519": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "3520": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3521": {
      "error": "not_owner",
      "op": "assert // not_owner",
      "stack_out": []
    },
    "3522": {
      "op": "bytec 7 // \"arc88_po\"",
      "defined_out": [
        "\"arc88_po\""
      ],
      "stack_out": [
        "\"arc88_po\""
      ]
    },
    "3524": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "\"arc88_po\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ],
      "stack_out": [
        "\"arc88_po\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "3525": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3526": {
      "retsub": true,
      "op": "retsub"
    }
  }
}