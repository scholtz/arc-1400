{
  "version": 3,
  "sources": [
    "C:/Users/scholtz/source/repos/scholtz/arc-1400/projects/arc-1400/smart_contracts/security_token/arc1410.algo.ts",
    "C:/Users/scholtz/source/repos/scholtz/arc-1400/projects/arc-1400/smart_contracts/security_token/arc200.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AC2KG;;AAAA;AAAA;AAAA;;AAAA;AD3KH;;;AAAA;;;AC2KG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AD/JH;;;AAAA;;;AC+JG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AD9IH;;;AAAA;;;AAAA;;;AC8IG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;ADrHH;;;ACqHG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA1BA;;AAAA;AAAA;AAAA;;AAAA;ADlDH;;;AAAA;;;AAAA;;;AAAA;;;ACkDG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AD5BA;;AAAA;AAAA;AAAA;;AAAA;AAtBH;;;AAAA;;;AAsBG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAhBH;;;AAAA;;;AAgBG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAPH;;;AAAA;;;AAOG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAOE;;;AAEc;;AAAA;;AAAA;AAR+D;;AAAA;AAAA;AAY/C;AAAA;AAA5B;AAGF;;;;;;;;;;AAEgD;;AAAS;AAwE9B;AAKG;;AA7EmD;AA6EnD;AA9F+C;;AAAA;;AAAA;AAAA;AAAA;;AAmGhC;AAAA;;AAA3C;AAnG2E;;AAAA;AAAA;AAAA;AAqGlC;AAAA;AAAvC;;AAAA;AADF;AAnGmF;;;;;;AAAA;;AAAA;AAAA;AAsCrC;AAAA;;AAA1C;;;AACF;;AAFS;;AAET;AAEwD;;AAAA;AAAA;AAAA;;AAAA;AAC9C;AAAR;;AALO;;AAMF;;AAAwB;;AAAA;AAAA;AAAA;;AAAkB;;AAAA;AAAA;AAAA;;AAA1B;AAAzB;;;AACuB;;AAAA;;AAAA;AA1CZ;AAAA;AAAA;AAAA;AAAA;;AA8CyC;AAAA;;AAA9C;;;AACF;;AAAA;AAAA;;AAAsD;;AAAtD;AAGoE;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA1BxE;AAAA;AAAA;;;;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAV+E;AAWzE;AAAJ;;;AAAoB;AAyBpB;;;AACU;AAAR;;AAIA;;AAAA;;;AACmB;;AAAA;;AAAA;AAxDZ;AAAA;AAAA;AAAA;AAAA;;AA4DwE;AAAA;AAAM;AAAA;AAApE;AACJ;AAAS;;AAApB;AAAJ;;;AAGoD;;AAAA;AAAA;AAAA;AADG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAArD;;AAAA;;AAAA;AA0CqC;;AAAA;AAAA;AAAA;AAAvC;;AAAA;AAD0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA5C;;AAAA;AAAA;AAI4C;AAAA;;AAAxC;;;AACF;;AAAA;;AAAA;AA9FyC;;AAApC;;AAAA;;AAAA;;;AAAP;;AAAA;AAiG2D;;AAAA;AAAA;AAAA;AAAvD;;AAAA;AAD6C;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA/C;;;;AA3CuC;;AAAkB;AAAlB;AAAjB;AACpB;;AAAA;;AAAA;AACwB;;AAAA;AAAA;AAtEjB;AAAA;AAAA;AA0EP;AAAA;;AAAyD;;AAAzD;;;;AAjCkF;;AAAiB;AAAjB;AAAjB;AAAA;;;;;;;;;;;;;;AAd9D;AAuBD;;;AAhCR;;;AAEwC;;AAAA;;AAAA;AApB3B;AAAA;AAAA;AAqBR;AAAA;AADH;AC0BF;;;AAEa;;AAAkB;;AAAtB;AAAP;AACY;;AAAA;;;AAAO;AAAnB;AAAA;AAC6B;AAAtB;AAAP;AACc;;AAAA;;;AAAO;AAArB;AAAA;AAC+B;AAAxB;AAAP;AAXgD;AAAA;;AAYvB;AAAA;;AAAlB;AAAP;AAxB6C;;;AA0B7C;;AAAA;AAtB+C;;;AAuB/C;;AAAA;AAfgD;;AAgBhD;;AAAA;AApB2C;;;AAqB3C;;AAAA;AAC+B;;AAhBwB;AAAA;;AAAA;AAkBvD;;AAAA;AAEoD;;AAA/C;AAAA;AAAA;;AAAA;AAAL;;AAAA;AAAA;AAAA;AACO;;AAAP;AAnC6C;AAAA;;;AAAA;AAAA;AA6CF;;;AAApC;AAAA;AAAA;AAAA;AAAA;AAAP;AAzC+C;AAAA;;;AAAA;AAAA;AAmDH;;;AAArC;AAAA;AAAA;AAAA;AAAA;AAAP;AA/C2C;AAAA;;;AAAA;AAAA;AAyD3C;AArDgD;AAAA;;AAAA;AAAA;AA+DhD;AASF;;;AAES;;AAAA;;;AAAP;AAuBF;;;AAEkC;;AAC1B;;AAAA;;AAAoB;;;AACnB;AAAA;;AAAA;AAAP;AAC2C;;AAAA;AAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9B;;AAAA;;AAAA;;;;AACO;;AAAA;;AAAA;;AAAA;;;AAAP;AAUF;;;AAEgC;;AACvB;;AAAA;;AAAA;;;AAAP;AASF;;;AAES;;AAAA;;AAAA;;;AAAP;AAGF;;;AAjIyD;AAAA;;AAAA;AAAA;AAkI7B;AAAA;;AAAtB;;;AAAqC;AAAP;AAAA;AACN;;AAAA;AAAA;AAA5B;AAAA;AAGF;;;AACQ;;AAAiB;;;AAAjB;AACA;;AAAoB;;;AAApB;AACC;;AAAA;AAAP;AAEI;;AAAA;;AAAA;AAAJ;;;AAE6C;;AAAA;;AAAA;AAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AA7IuB;AAAA;;AAAA;AA6IrD;AAAA;AAC8C;;AAAA;;AAAA;AAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AA9IoB;AAAA;;AAAA;AA8IrD;AAAA;AAEG;;AAAA;;AAAA;AAAA;;AAAA;AAAL;;AAAA;AAAA;AAAA;AACO;;AAAP;;AAAA;AAEF;;;AACuC;;AAAA;;AAAA;AAAV;AAApB;AAAA;AAAA;AAAA;AAAA;AAAP;AAGF;;;AACQ;;AAAA;;AAAM;;;AAtJ0D;;;AAAA;AAAA;AAAA;AAuJ7C;AAAA;;AAArB;;;AAAoC;AAAP;AAAA;AACN;;AAAA;AAAA;AAAM;;;AAAjC;AAAA;AAGF;;;AACQ;;AAAA;;AAAM;;;AACwB;;AAAA;;AAAA;AAAA;;AAAA;AA7JkC;;;AAAA;;AAAA;AAkKtE;AAAA;AACK;;AAAA;;AAAA;AAAA;;AAAA;AAAL;;;;;;AAAA;AAAA;AAAA;AACO;;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 32 0 8"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 0x0000000000000000000000000000000000000000000000000000000000000000 \"hp_a\" \"b\" \"p\" \"t\" 0x80 0x0000000000000000 base32(AAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) 0x7983c35c"
    },
    "109": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "111": {
      "op": "bz main_bare_routing@17",
      "stack_out": []
    },
    "114": {
      "op": "pushbytess 0xc016a9ab 0xda7025b9 0x1d89e24c 0x975382e2 0x657d13ec 0xb6ae1a25 0x84ec13d5 0xec996041 0x82e573c4 0x4a968f8f 0xb5422125 0xbbb319f3 // method \"balance_of_partition(address,address)uint256\", method \"arc200_transfer(address,uint256)bool\", method \"partitions_of(address,uint64)address[]\", method \"bootstrap(byte[],byte[],uint8,uint256)bool\", method \"arc200_name()byte[32]\", method \"arc200_symbol()byte[8]\", method \"arc200_decimals()uint8\", method \"arc200_totalSupply()uint256\", method \"arc200_balanceOf(address)uint256\", method \"arc200_transferFrom(address,address,uint256)bool\", method \"arc200_approve(address,uint256)bool\", method \"arc200_allowance(address,address)uint256\"",
      "defined_out": [
        "Method(arc200_allowance(address,address)uint256)",
        "Method(arc200_approve(address,uint256)bool)",
        "Method(arc200_balanceOf(address)uint256)",
        "Method(arc200_decimals()uint8)",
        "Method(arc200_name()byte[32])",
        "Method(arc200_symbol()byte[8])",
        "Method(arc200_totalSupply()uint256)",
        "Method(arc200_transfer(address,uint256)bool)",
        "Method(arc200_transferFrom(address,address,uint256)bool)",
        "Method(balance_of_partition(address,address)uint256)",
        "Method(bootstrap(byte[],byte[],uint8,uint256)bool)",
        "Method(partitions_of(address,uint64)address[])"
      ],
      "stack_out": [
        "Method(balance_of_partition(address,address)uint256)",
        "Method(arc200_transfer(address,uint256)bool)",
        "Method(partitions_of(address,uint64)address[])",
        "Method(bootstrap(byte[],byte[],uint8,uint256)bool)",
        "Method(arc200_name()byte[32])",
        "Method(arc200_symbol()byte[8])",
        "Method(arc200_decimals()uint8)",
        "Method(arc200_totalSupply()uint256)",
        "Method(arc200_balanceOf(address)uint256)",
        "Method(arc200_transferFrom(address,address,uint256)bool)",
        "Method(arc200_approve(address,uint256)bool)",
        "Method(arc200_allowance(address,address)uint256)"
      ]
    },
    "176": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(arc200_allowance(address,address)uint256)",
        "Method(arc200_approve(address,uint256)bool)",
        "Method(arc200_balanceOf(address)uint256)",
        "Method(arc200_decimals()uint8)",
        "Method(arc200_name()byte[32])",
        "Method(arc200_symbol()byte[8])",
        "Method(arc200_totalSupply()uint256)",
        "Method(arc200_transfer(address,uint256)bool)",
        "Method(arc200_transferFrom(address,address,uint256)bool)",
        "Method(balance_of_partition(address,address)uint256)",
        "Method(bootstrap(byte[],byte[],uint8,uint256)bool)",
        "Method(partitions_of(address,uint64)address[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(balance_of_partition(address,address)uint256)",
        "Method(arc200_transfer(address,uint256)bool)",
        "Method(partitions_of(address,uint64)address[])",
        "Method(bootstrap(byte[],byte[],uint8,uint256)bool)",
        "Method(arc200_name()byte[32])",
        "Method(arc200_symbol()byte[8])",
        "Method(arc200_decimals()uint8)",
        "Method(arc200_totalSupply()uint256)",
        "Method(arc200_balanceOf(address)uint256)",
        "Method(arc200_transferFrom(address,address,uint256)bool)",
        "Method(arc200_approve(address,uint256)bool)",
        "Method(arc200_allowance(address,address)uint256)",
        "tmp%2#0"
      ]
    },
    "179": {
      "op": "match main_balance_of_partition_route@3 main_arc200_transfer_route@4 main_partitions_of_route@5 main_bootstrap_route@6 main_arc200_name_route@7 main_arc200_symbol_route@8 main_arc200_decimals_route@9 main_arc200_totalSupply_route@10 main_arc200_balanceOf_route@11 main_arc200_transferFrom_route@12 main_arc200_approve_route@13 main_arc200_allowance_route@14",
      "stack_out": []
    },
    "205": {
      "block": "main_after_if_else@21",
      "stack_in": [],
      "op": "intc_2 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "206": {
      "op": "return",
      "stack_out": []
    },
    "207": {
      "block": "main_arc200_allowance_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "209": {
      "op": "!",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "210": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "211": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "213": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "214": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%12#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%12#0"
      ]
    },
    "217": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%12#0",
        "reinterpret_bytes[32]%13#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%12#0",
        "reinterpret_bytes[32]%13#0"
      ]
    },
    "220": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_allowance",
      "op": "callsub arc200_allowance",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "223": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "0x151f7c75"
      ]
    },
    "224": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%75#0"
      ]
    },
    "225": {
      "op": "concat",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "226": {
      "op": "log",
      "stack_out": []
    },
    "227": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "228": {
      "op": "return",
      "stack_out": []
    },
    "229": {
      "block": "main_arc200_approve_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "231": {
      "op": "!",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "232": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "233": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "235": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "236": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%10#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%10#0"
      ]
    },
    "239": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0"
      ]
    },
    "242": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_approve",
      "op": "callsub arc200_approve",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "245": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0",
        "0x151f7c75"
      ]
    },
    "246": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%69#0"
      ]
    },
    "247": {
      "op": "concat",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "248": {
      "op": "log",
      "stack_out": []
    },
    "249": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "250": {
      "op": "return",
      "stack_out": []
    },
    "251": {
      "block": "main_arc200_transferFrom_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "253": {
      "op": "!",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "254": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "255": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "257": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "258": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0"
      ]
    },
    "261": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%7#0",
        "reinterpret_bytes[32]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0",
        "reinterpret_bytes[32]%8#0"
      ]
    },
    "264": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%7#0",
        "reinterpret_bytes[32]%8#0",
        "reinterpret_bytes[32]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0",
        "reinterpret_bytes[32]%8#0",
        "reinterpret_bytes[32]%9#0"
      ]
    },
    "267": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_transferFrom",
      "op": "callsub arc200_transferFrom",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "270": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0",
        "0x151f7c75"
      ]
    },
    "271": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%63#0"
      ]
    },
    "272": {
      "op": "concat",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "273": {
      "op": "log",
      "stack_out": []
    },
    "274": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "275": {
      "op": "return",
      "stack_out": []
    },
    "276": {
      "block": "main_arc200_balanceOf_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "278": {
      "op": "!",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "279": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "280": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "282": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "283": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%6#0"
      ]
    },
    "286": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_balanceOf",
      "op": "callsub arc200_balanceOf",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "289": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0",
        "0x151f7c75"
      ]
    },
    "290": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%57#0"
      ]
    },
    "291": {
      "op": "concat",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "292": {
      "op": "log",
      "stack_out": []
    },
    "293": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "294": {
      "op": "return",
      "stack_out": []
    },
    "295": {
      "block": "main_arc200_totalSupply_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "297": {
      "op": "!",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "298": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "299": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "301": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "302": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_totalSupply",
      "op": "callsub arc200_totalSupply",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "305": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "0x151f7c75"
      ]
    },
    "306": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%51#0"
      ]
    },
    "307": {
      "op": "concat",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "308": {
      "op": "log",
      "stack_out": []
    },
    "309": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "310": {
      "op": "return",
      "stack_out": []
    },
    "311": {
      "block": "main_arc200_decimals_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "313": {
      "op": "!",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "314": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "315": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "317": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "318": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_decimals",
      "op": "callsub arc200_decimals",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "321": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "0x151f7c75"
      ]
    },
    "322": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%45#0"
      ]
    },
    "323": {
      "op": "concat",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "324": {
      "op": "log",
      "stack_out": []
    },
    "325": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "326": {
      "op": "return",
      "stack_out": []
    },
    "327": {
      "block": "main_arc200_symbol_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "329": {
      "op": "!",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "330": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "331": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "333": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "334": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_symbol",
      "op": "callsub arc200_symbol",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "337": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "0x151f7c75"
      ]
    },
    "338": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%39#0"
      ]
    },
    "339": {
      "op": "concat",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "340": {
      "op": "log",
      "stack_out": []
    },
    "341": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "342": {
      "op": "return",
      "stack_out": []
    },
    "343": {
      "block": "main_arc200_name_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "345": {
      "op": "!",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "346": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "347": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "349": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "350": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_name",
      "op": "callsub arc200_name",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "353": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "0x151f7c75"
      ]
    },
    "354": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%33#0"
      ]
    },
    "355": {
      "op": "concat",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "356": {
      "op": "log",
      "stack_out": []
    },
    "357": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "358": {
      "op": "return",
      "stack_out": []
    },
    "359": {
      "block": "main_bootstrap_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "361": {
      "op": "!",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "362": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "363": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "365": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "366": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "369": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "372": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%26#0",
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "375": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[32]%5#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%26#0",
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[32]%5#0"
      ]
    },
    "378": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.bootstrap",
      "op": "callsub bootstrap",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "381": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "0x151f7c75"
      ]
    },
    "382": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%27#0"
      ]
    },
    "383": {
      "op": "concat",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "384": {
      "op": "log",
      "stack_out": []
    },
    "385": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "386": {
      "op": "return",
      "stack_out": []
    },
    "387": {
      "block": "main_partitions_of_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "389": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "390": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "391": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "393": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "394": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0"
      ]
    },
    "397": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "400": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.partitions_of",
      "op": "callsub partitions_of",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "403": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "0x151f7c75"
      ]
    },
    "404": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%19#0"
      ]
    },
    "405": {
      "op": "concat",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "406": {
      "op": "log",
      "stack_out": []
    },
    "407": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "408": {
      "op": "return",
      "stack_out": []
    },
    "409": {
      "block": "main_arc200_transfer_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "411": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "412": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "413": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "415": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "416": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "419": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0"
      ]
    },
    "422": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc200_transfer",
      "op": "callsub arc200_transfer",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "425": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "0x151f7c75"
      ]
    },
    "426": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%13#0"
      ]
    },
    "427": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "428": {
      "op": "log",
      "stack_out": []
    },
    "429": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "430": {
      "op": "return",
      "stack_out": []
    },
    "431": {
      "block": "main_balance_of_partition_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "433": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "434": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "435": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "437": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "438": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "441": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "444": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.balance_of_partition",
      "op": "callsub balance_of_partition",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "447": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0x151f7c75"
      ]
    },
    "448": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%7#0"
      ]
    },
    "449": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "450": {
      "op": "log",
      "stack_out": []
    },
    "451": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "452": {
      "op": "return",
      "stack_out": []
    },
    "453": {
      "block": "main_bare_routing@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "455": {
      "op": "bnz main_after_if_else@21",
      "stack_out": []
    },
    "458": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "460": {
      "op": "!",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "461": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "462": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "463": {
      "op": "return",
      "stack_out": []
    },
    "464": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.balance_of_partition",
      "params": {
        "holder#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "balance_of_partition",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "467": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)"
      ]
    },
    "469": {
      "op": "frame_dig -1",
      "defined_out": [
        "holder#0 (copy)",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "471": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "472": {
      "op": "bytec 4 // \"p\"",
      "defined_out": [
        "\"p\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"p\""
      ]
    },
    "474": {
      "op": "swap",
      "stack_out": [
        "\"p\"",
        "key#0"
      ]
    },
    "475": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "476": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "477": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "478": {
      "retsub": true,
      "op": "retsub"
    },
    "479": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc200_transfer",
      "params": {
        "to#0": "bytes",
        "value#0": "bytes"
      },
      "block": "arc200_transfer",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "482": {
      "op": "intc_2 // 0",
      "stack_out": [
        "a#0"
      ]
    },
    "483": {
      "op": "dupn 5",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0"
      ]
    },
    "485": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0"
      ]
    },
    "487": {
      "op": "dupn 4",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "489": {
      "op": "txn Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "sender#0"
      ]
    },
    "491": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "sender#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "sender#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "492": {
      "op": "concat",
      "defined_out": [
        "senderPartitionKey#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "senderPartitionKey#0"
      ]
    },
    "493": {
      "op": "frame_dig -2",
      "defined_out": [
        "senderPartitionKey#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "senderPartitionKey#0",
        "to#0 (copy)"
      ]
    },
    "495": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "senderPartitionKey#0",
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "496": {
      "op": "concat",
      "defined_out": [
        "recipientPartitionKey#0",
        "senderPartitionKey#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "senderPartitionKey#0",
        "recipientPartitionKey#0"
      ]
    },
    "497": {
      "op": "bytec 4 // \"p\"",
      "defined_out": [
        "\"p\"",
        "recipientPartitionKey#0",
        "senderPartitionKey#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "senderPartitionKey#0",
        "recipientPartitionKey#0",
        "\"p\""
      ]
    },
    "499": {
      "op": "uncover 2",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "recipientPartitionKey#0",
        "\"p\"",
        "senderPartitionKey#0"
      ]
    },
    "501": {
      "op": "concat",
      "defined_out": [
        "recipientPartitionKey#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "recipientPartitionKey#0",
        "tmp%0#1"
      ]
    },
    "502": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "recipientPartitionKey#0",
        "tmp%0#1",
        "tmp%0#1"
      ]
    },
    "503": {
      "op": "cover 2",
      "defined_out": [
        "recipientPartitionKey#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "recipientPartitionKey#0",
        "tmp%0#1"
      ]
    },
    "505": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "recipientPartitionKey#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "recipientPartitionKey#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "506": {
      "op": "bury 1",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "recipientPartitionKey#0",
        "maybe_exists%0#0"
      ]
    },
    "508": {
      "error": "Sender partition does not exist",
      "op": "assert // Sender partition does not exist",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "recipientPartitionKey#0"
      ]
    },
    "509": {
      "op": "bytec 4 // \"p\"",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "recipientPartitionKey#0",
        "\"p\""
      ]
    },
    "511": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "\"p\"",
        "recipientPartitionKey#0"
      ]
    },
    "512": {
      "op": "concat",
      "defined_out": [
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "513": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%1#1"
      ]
    },
    "514": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "515": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "maybe_value%1#0"
      ]
    },
    "516": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%0#1",
        "tmp%1#1",
        "value#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "maybe_value%1#0",
        "value#0 (copy)"
      ]
    },
    "518": {
      "op": "b>=",
      "defined_out": [
        "tmp%0#1",
        "tmp%1#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%2#1"
      ]
    },
    "519": {
      "error": "Insufficient balance in sender partition",
      "op": "assert // Insufficient balance in sender partition",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "520": {
      "op": "pushbytes \"hp_p\"",
      "defined_out": [
        "\"hp_p\"",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "\"hp_p\""
      ]
    },
    "526": {
      "op": "frame_dig -2",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "\"hp_p\"",
        "to#0 (copy)"
      ]
    },
    "528": {
      "op": "concat",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#2",
        "tmp%1#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ]
    },
    "529": {
      "op": "dup",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#2",
        "tmp%1#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "530": {
      "op": "box_len",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "531": {
      "op": "bury 1",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "maybe_exists%0#0"
      ]
    },
    "533": {
      "op": "bnz arc200_transfer_after_if_else@7",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ]
    },
    "536": {
      "op": "frame_dig 13",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "538": {
      "op": "bytec 7 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "tmp%0#1",
        "tmp%0#2",
        "tmp%1#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%0#2",
        "0x0000000000000000"
      ]
    },
    "540": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ]
    },
    "541": {
      "block": "arc200_transfer_after_if_else@7",
      "stack_in": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ],
      "op": "frame_dig 13",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "543": {
      "op": "box_get",
      "defined_out": [
        "lastPage#0",
        "maybe_exists%1#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "lastPage#0",
        "maybe_exists%1#0"
      ]
    },
    "544": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "maybe_exists%1#0",
        "lastPage#0"
      ]
    },
    "545": {
      "op": "frame_bury 3",
      "defined_out": [
        "lastPage#0",
        "maybe_exists%1#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "maybe_exists%1#0"
      ]
    },
    "547": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ]
    },
    "548": {
      "op": "intc_2 // 0",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "found#0"
      ]
    },
    "549": {
      "op": "frame_bury 7",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ]
    },
    "551": {
      "op": "bytec 7 // 0x0000000000000000",
      "defined_out": [
        "curPage#0",
        "found#0",
        "lastPage#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "curPage#0"
      ]
    },
    "553": {
      "op": "frame_bury 2",
      "defined_out": [
        "curPage#0",
        "found#0",
        "lastPage#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ]
    },
    "555": {
      "block": "arc200_transfer_while_top@8",
      "stack_in": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "curPage#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "curPage#0"
      ]
    },
    "557": {
      "op": "btoi",
      "defined_out": [
        "curPage#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%3#0"
      ]
    },
    "558": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%3#0",
        "tmp%3#0"
      ]
    },
    "559": {
      "op": "frame_bury 9",
      "defined_out": [
        "curPage#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%3#0"
      ]
    },
    "561": {
      "op": "frame_dig 3",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%3#0",
        "lastPage#0"
      ]
    },
    "563": {
      "op": "btoi",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "564": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%4#0"
      ]
    },
    "565": {
      "op": "frame_bury 10",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "567": {
      "op": "<",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%5#0"
      ]
    },
    "568": {
      "op": "bz arc200_transfer_block@21",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ]
    },
    "571": {
      "op": "frame_dig -2",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "to#0 (copy)"
      ]
    },
    "573": {
      "op": "frame_dig 2",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "to#0 (copy)",
        "curPage#0"
      ]
    },
    "575": {
      "op": "concat",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "paginatedKey#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "paginatedKey#0"
      ]
    },
    "576": {
      "op": "bytec_2 // \"hp_a\"",
      "defined_out": [
        "\"hp_a\"",
        "curPage#0",
        "lastPage#0",
        "paginatedKey#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "paginatedKey#0",
        "\"hp_a\""
      ]
    },
    "577": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "\"hp_a\"",
        "paginatedKey#0"
      ]
    },
    "578": {
      "op": "concat",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%6#0"
      ]
    },
    "579": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "580": {
      "op": "frame_bury 5",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%6#0"
      ]
    },
    "582": {
      "op": "box_len",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "maybe_exists%2#0",
        "maybe_value%2#1",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "maybe_value%2#1",
        "maybe_exists%2#0"
      ]
    },
    "583": {
      "op": "bury 1",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "maybe_exists%2#0"
      ]
    },
    "585": {
      "op": "bnz arc200_transfer_after_if_else@11",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ]
    },
    "588": {
      "op": "frame_dig 5",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%6#0"
      ]
    },
    "590": {
      "op": "dup",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "591": {
      "op": "box_del",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0",
        "{box_del}"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%6#0",
        "{box_del}"
      ]
    },
    "592": {
      "op": "pop",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%6#0"
      ]
    },
    "593": {
      "op": "bytec 8 // base32(AAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)",
      "defined_out": [
        "AAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%6#0",
        "AAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      ]
    },
    "595": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ]
    },
    "596": {
      "block": "arc200_transfer_after_if_else@11",
      "stack_in": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%6#0"
      ]
    },
    "598": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "a#0",
        "maybe_exists%3#0"
      ]
    },
    "599": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "maybe_exists%3#0",
        "a#0"
      ]
    },
    "600": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "maybe_exists%3#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "601": {
      "op": "cover 2",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "a#0",
        "maybe_exists%3#0",
        "a#0"
      ]
    },
    "603": {
      "op": "frame_bury 0",
      "defined_out": [
        "a#0",
        "maybe_exists%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "a#0",
        "maybe_exists%3#0"
      ]
    },
    "605": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "a#0"
      ]
    },
    "606": {
      "op": "intc_2 // 0",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "a#0",
        "0"
      ]
    },
    "607": {
      "op": "extract_uint16",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "array_length%0#0"
      ]
    },
    "608": {
      "op": "frame_bury 6",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ]
    },
    "610": {
      "op": "intc_2 // 0",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "item_index_internal%0#0"
      ]
    },
    "611": {
      "op": "frame_bury 8",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ]
    },
    "613": {
      "block": "arc200_transfer_for_header@12",
      "stack_in": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ],
      "op": "frame_dig 8",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "item_index_internal%0#0"
      ]
    },
    "615": {
      "op": "frame_dig 6",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "item_index_internal%0#0",
        "array_length%0#0"
      ]
    },
    "617": {
      "op": "<",
      "defined_out": [
        "array_length%0#0",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "continue_looping%0#0"
      ]
    },
    "618": {
      "op": "bz arc200_transfer_after_for@16",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ]
    },
    "621": {
      "op": "frame_dig 0",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "a#0"
      ]
    },
    "623": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "array_head_and_tail%0#0"
      ]
    },
    "626": {
      "op": "frame_dig 8",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0"
      ]
    },
    "628": {
      "op": "intc_1 // 32",
      "defined_out": [
        "32",
        "a#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0",
        "32"
      ]
    },
    "629": {
      "op": "*",
      "defined_out": [
        "a#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "630": {
      "op": "intc_1 // 32",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "32"
      ]
    },
    "631": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "v#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "v#0"
      ]
    },
    "632": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "v#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "v#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "633": {
      "op": "==",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%0#3"
      ]
    },
    "634": {
      "op": "bz arc200_transfer_after_if_else@15",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ]
    },
    "637": {
      "op": "intc_0 // 1",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%9#0"
      ]
    },
    "638": {
      "block": "arc200_transfer_after_inlined_smart_contracts/security_token/arc1410.algo.ts::Arc1410.containsAddress@17",
      "stack_in": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%9#0"
      ],
      "op": "bz arc200_transfer_after_if_else@19",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ]
    },
    "641": {
      "op": "intc_0 // 1",
      "defined_out": [
        "found#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "found#0"
      ]
    },
    "642": {
      "op": "frame_bury 7",
      "defined_out": [
        "found#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ]
    },
    "644": {
      "block": "arc200_transfer_block@21",
      "stack_in": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "found#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "found#0"
      ]
    },
    "646": {
      "op": "bnz arc200_transfer_after_if_else@25",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ]
    },
    "649": {
      "op": "frame_dig -2",
      "defined_out": [
        "found#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "to#0 (copy)"
      ]
    },
    "651": {
      "op": "frame_dig 3",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "to#0 (copy)",
        "lastPage#0"
      ]
    },
    "653": {
      "op": "concat",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "paginatedKey\u2081#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "paginatedKey\u2081#0"
      ]
    },
    "654": {
      "op": "bytec_2 // \"hp_a\"",
      "defined_out": [
        "\"hp_a\"",
        "found#0",
        "lastPage#0",
        "paginatedKey\u2081#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "paginatedKey\u2081#0",
        "\"hp_a\""
      ]
    },
    "655": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "\"hp_a\"",
        "paginatedKey\u2081#0"
      ]
    },
    "656": {
      "op": "concat",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%11#0"
      ]
    },
    "657": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%11#0",
        "tmp%11#0"
      ]
    },
    "658": {
      "op": "frame_bury 4",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%11#0"
      ]
    },
    "660": {
      "op": "box_get",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "maybe_exists%4#0",
        "maybe_value%4#1",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "maybe_value%4#1",
        "maybe_exists%4#0"
      ]
    },
    "661": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "maybe_value%4#1"
      ]
    },
    "662": {
      "op": "intc_2 // 0",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "maybe_value%4#1",
        "0"
      ]
    },
    "663": {
      "op": "extract_uint16",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "to_encode%1#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "to_encode%1#1"
      ]
    },
    "664": {
      "op": "itob",
      "defined_out": [
        "found#0",
        "itemsCount#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "itemsCount#0"
      ]
    },
    "665": {
      "op": "btoi",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%12#0"
      ]
    },
    "666": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%12#0",
        "10"
      ]
    },
    "668": {
      "op": "<",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%13#0"
      ]
    },
    "669": {
      "op": "bz arc200_transfer_else_body@24",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ]
    },
    "672": {
      "op": "frame_dig 4",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%11#0"
      ]
    },
    "674": {
      "op": "dup",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ]
    },
    "675": {
      "op": "box_get",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%11#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "676": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%11#0",
        "maybe_value%5#0"
      ]
    },
    "677": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%1#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%11#0",
        "expr_value_trimmed%1#0"
      ]
    },
    "680": {
      "op": "bytec_1 // base32(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)",
      "defined_out": [
        "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        "expr_value_trimmed%1#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%11#0",
        "expr_value_trimmed%1#0",
        "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      ]
    },
    "681": {
      "op": "concat",
      "defined_out": [
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%11#0",
        "concatenated%2#0"
      ]
    },
    "682": {
      "op": "dup",
      "defined_out": [
        "concatenated%2#0",
        "concatenated%2#0 (copy)",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%11#0",
        "concatenated%2#0",
        "concatenated%2#0 (copy)"
      ]
    },
    "683": {
      "op": "len",
      "defined_out": [
        "byte_len%2#0",
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%11#0",
        "concatenated%2#0",
        "byte_len%2#0"
      ]
    },
    "684": {
      "op": "intc_1 // 32",
      "defined_out": [
        "32",
        "byte_len%2#0",
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%11#0",
        "concatenated%2#0",
        "byte_len%2#0",
        "32"
      ]
    },
    "685": {
      "op": "/",
      "defined_out": [
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "len_%2#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%11#0",
        "concatenated%2#0",
        "len_%2#0"
      ]
    },
    "686": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%11#0",
        "concatenated%2#0",
        "as_bytes%2#0"
      ]
    },
    "687": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "len_16_bit%2#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%11#0",
        "concatenated%2#0",
        "len_16_bit%2#0"
      ]
    },
    "690": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%11#0",
        "len_16_bit%2#0",
        "concatenated%2#0"
      ]
    },
    "691": {
      "op": "concat",
      "defined_out": [
        "concat_result%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%11#0",
        "concat_result%2#0"
      ]
    },
    "692": {
      "op": "dig 1",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%11#0",
        "concat_result%2#0",
        "tmp%11#0 (copy)"
      ]
    },
    "694": {
      "op": "box_del",
      "defined_out": [
        "concat_result%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "{box_del}"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%11#0",
        "concat_result%2#0",
        "{box_del}"
      ]
    },
    "695": {
      "op": "pop",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%11#0",
        "concat_result%2#0"
      ]
    },
    "696": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ]
    },
    "697": {
      "block": "arc200_transfer_after_if_else@25",
      "stack_in": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ],
      "op": "frame_dig 12",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1"
      ]
    },
    "699": {
      "op": "dup",
      "defined_out": [
        "tmp%1#1",
        "tmp%1#1 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "tmp%1#1 (copy)"
      ]
    },
    "700": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "701": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "maybe_value%2#0"
      ]
    },
    "702": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%2#0",
        "tmp%1#1",
        "value#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "maybe_value%2#0",
        "value#0 (copy)"
      ]
    },
    "704": {
      "op": "b-",
      "defined_out": [
        "tmp%1#1",
        "to_encode%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "to_encode%0#0"
      ]
    },
    "705": {
      "op": "dup",
      "defined_out": [
        "tmp%1#1",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "706": {
      "op": "len",
      "defined_out": [
        "tmp%1#1",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "707": {
      "op": "intc_1 // 32",
      "defined_out": [
        "32",
        "tmp%1#1",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "708": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "tmp%1#1",
        "to_encode%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "709": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "to_encode%0#0"
      ]
    },
    "710": {
      "op": "intc_1 // 32",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "to_encode%0#0",
        "32"
      ]
    },
    "711": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#1",
        "to_encode%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "712": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "to_encode%0#0",
        "bzero%0#0",
        "bzero%0#0"
      ]
    },
    "713": {
      "op": "frame_bury 1",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#1",
        "to_encode%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "715": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "arc4_encoded%0#0"
      ]
    },
    "716": {
      "op": "frame_dig 11",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "arc4_encoded%0#0",
        "tmp%0#1"
      ]
    },
    "718": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "tmp%0#1",
        "arc4_encoded%0#0"
      ]
    },
    "719": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1"
      ]
    },
    "720": {
      "op": "box_len",
      "defined_out": [
        "bzero%0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "721": {
      "op": "bury 1",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "maybe_exists%3#0"
      ]
    },
    "723": {
      "op": "bnz arc200_transfer_else_body@3",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ]
    },
    "726": {
      "op": "frame_dig 12",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1"
      ]
    },
    "728": {
      "op": "frame_dig -1",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "value#0 (copy)"
      ]
    },
    "730": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ]
    },
    "731": {
      "block": "arc200_transfer_after_if_else@4",
      "stack_in": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#0"
      ]
    },
    "733": {
      "op": "frame_dig -2",
      "defined_out": [
        "tmp%1#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#0",
        "to#0 (copy)"
      ]
    },
    "735": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%1#0",
        "to#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#0",
        "to#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "737": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._transfer",
      "op": "callsub _transfer",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%2#0"
      ]
    },
    "740": {
      "op": "frame_bury 0"
    },
    "742": {
      "retsub": true,
      "op": "retsub"
    },
    "743": {
      "block": "arc200_transfer_else_body@3",
      "stack_in": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ],
      "op": "frame_dig 12",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1"
      ]
    },
    "745": {
      "op": "dup",
      "defined_out": [
        "tmp%1#1",
        "tmp%1#1 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "tmp%1#1 (copy)"
      ]
    },
    "746": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "747": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "maybe_value%4#0"
      ]
    },
    "748": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%4#0",
        "tmp%1#1",
        "value#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "maybe_value%4#0",
        "value#0 (copy)"
      ]
    },
    "750": {
      "op": "b+",
      "defined_out": [
        "tmp%1#1",
        "to_encode%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "to_encode%1#0"
      ]
    },
    "751": {
      "op": "dup",
      "defined_out": [
        "tmp%1#1",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "752": {
      "op": "len",
      "defined_out": [
        "tmp%1#1",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "753": {
      "op": "intc_1 // 32",
      "defined_out": [
        "32",
        "tmp%1#1",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "754": {
      "op": "<=",
      "defined_out": [
        "len_ok%1#0",
        "tmp%1#1",
        "to_encode%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "755": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "to_encode%1#0"
      ]
    },
    "756": {
      "op": "frame_dig 1",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#1",
        "to_encode%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "to_encode%1#0",
        "bzero%0#0"
      ]
    },
    "758": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "bzero%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%1#1",
        "arc4_encoded%1#0"
      ]
    },
    "759": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ]
    },
    "760": {
      "op": "b arc200_transfer_after_if_else@4"
    },
    "763": {
      "block": "arc200_transfer_else_body@24",
      "stack_in": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ],
      "op": "frame_dig 10",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%4#0"
      ]
    },
    "765": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%4#0",
        "1"
      ]
    },
    "766": {
      "op": "+",
      "defined_out": [
        "tmp%4#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "to_encode%2#0"
      ]
    },
    "767": {
      "op": "itob",
      "defined_out": [
        "newLastPage#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "newLastPage#0"
      ]
    },
    "768": {
      "op": "frame_dig 13",
      "defined_out": [
        "newLastPage#0",
        "tmp%0#2",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "newLastPage#0",
        "tmp%0#2"
      ]
    },
    "770": {
      "op": "dig 1",
      "defined_out": [
        "newLastPage#0",
        "newLastPage#0 (copy)",
        "tmp%0#2",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "newLastPage#0",
        "tmp%0#2",
        "newLastPage#0 (copy)"
      ]
    },
    "772": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "newLastPage#0"
      ]
    },
    "773": {
      "op": "frame_dig -2",
      "defined_out": [
        "newLastPage#0",
        "tmp%0#2",
        "tmp%4#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "newLastPage#0",
        "to#0 (copy)"
      ]
    },
    "775": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "to#0 (copy)",
        "newLastPage#0"
      ]
    },
    "776": {
      "op": "concat",
      "defined_out": [
        "newPaginatedKey#0",
        "tmp%0#2",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "newPaginatedKey#0"
      ]
    },
    "777": {
      "op": "bytec_2 // \"hp_a\"",
      "defined_out": [
        "\"hp_a\"",
        "newPaginatedKey#0",
        "tmp%0#2",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "newPaginatedKey#0",
        "\"hp_a\""
      ]
    },
    "778": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "\"hp_a\"",
        "newPaginatedKey#0"
      ]
    },
    "779": {
      "op": "concat",
      "defined_out": [
        "tmp%0#2",
        "tmp%18#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%18#0"
      ]
    },
    "780": {
      "op": "dup",
      "defined_out": [
        "tmp%0#2",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "781": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#2",
        "tmp%18#0",
        "tmp%4#0",
        "{box_del}"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%18#0",
        "{box_del}"
      ]
    },
    "782": {
      "op": "pop",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%18#0"
      ]
    },
    "783": {
      "op": "bytec 8 // base32(AAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)",
      "defined_out": [
        "AAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        "tmp%0#2",
        "tmp%18#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%18#0",
        "AAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      ]
    },
    "785": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ]
    },
    "786": {
      "op": "b arc200_transfer_after_if_else@25"
    },
    "789": {
      "block": "arc200_transfer_after_if_else@19",
      "stack_in": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ],
      "op": "frame_dig 9",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%3#0"
      ]
    },
    "791": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%3#0",
        "1"
      ]
    },
    "792": {
      "op": "+",
      "defined_out": [
        "tmp%3#0",
        "to_encode%0#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "to_encode%0#1"
      ]
    },
    "793": {
      "op": "itob",
      "defined_out": [
        "curPage#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "curPage#0"
      ]
    },
    "794": {
      "op": "frame_bury 2",
      "defined_out": [
        "curPage#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ]
    },
    "796": {
      "op": "b arc200_transfer_while_top@8"
    },
    "799": {
      "block": "arc200_transfer_after_if_else@15",
      "stack_in": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ],
      "op": "frame_dig 8",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "item_index_internal%0#0"
      ]
    },
    "801": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "802": {
      "op": "+",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "item_index_internal%0#0"
      ]
    },
    "803": {
      "op": "frame_bury 8",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ]
    },
    "805": {
      "op": "b arc200_transfer_for_header@12"
    },
    "808": {
      "block": "arc200_transfer_after_for@16",
      "stack_in": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2"
      ],
      "op": "intc_2 // 0",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#1",
        "tmp%1#1",
        "tmp%0#2",
        "tmp%9#0"
      ]
    },
    "809": {
      "op": "b arc200_transfer_after_inlined_smart_contracts/security_token/arc1410.algo.ts::Arc1410.containsAddress@17"
    },
    "812": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.partitions_of",
      "params": {
        "holder#0": "bytes",
        "page#0": "bytes"
      },
      "block": "partitions_of",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "815": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)"
      ]
    },
    "817": {
      "op": "frame_dig -1",
      "defined_out": [
        "holder#0 (copy)",
        "page#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)",
        "page#0 (copy)"
      ]
    },
    "819": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "820": {
      "op": "bytec_2 // \"hp_a\"",
      "defined_out": [
        "\"hp_a\"",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "\"hp_a\""
      ]
    },
    "821": {
      "op": "swap",
      "stack_out": [
        "\"hp_a\"",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "822": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "823": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "824": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "825": {
      "retsub": true,
      "op": "retsub"
    },
    "826": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.bootstrap",
      "params": {
        "name#0": "bytes",
        "symbol#0": "bytes",
        "decimals#0": "bytes",
        "totalSupply#0": "bytes"
      },
      "block": "bootstrap",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "829": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "831": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "833": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "834": {
      "error": "Only deployer of this smart contract can call bootstrap method",
      "op": "assert // Only deployer of this smart contract can call bootstrap method",
      "stack_out": []
    },
    "835": {
      "op": "frame_dig -4",
      "defined_out": [
        "name#0 (copy)"
      ],
      "stack_out": [
        "name#0 (copy)"
      ]
    },
    "837": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "840": {
      "op": "len",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "841": {
      "op": "dup",
      "defined_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "842": {
      "error": "Name of the asset must be longer or equal to 1 character",
      "op": "assert // Name of the asset must be longer or equal to 1 character",
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "843": {
      "op": "intc_1 // 32",
      "defined_out": [
        "32",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "32"
      ]
    },
    "844": {
      "op": "<=",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "845": {
      "error": "Name of the asset must be shorter or equal to 32 characters",
      "op": "assert // Name of the asset must be shorter or equal to 32 characters",
      "stack_out": []
    },
    "846": {
      "op": "frame_dig -3",
      "defined_out": [
        "symbol#0 (copy)"
      ],
      "stack_out": [
        "symbol#0 (copy)"
      ]
    },
    "848": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "851": {
      "op": "len",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "852": {
      "op": "dup",
      "defined_out": [
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "853": {
      "error": "Symbol of the asset must be longer or equal to 1 character",
      "op": "assert // Symbol of the asset must be longer or equal to 1 character",
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "854": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "8"
      ]
    },
    "855": {
      "op": "<=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "856": {
      "error": "Symbol of the asset must be shorter or equal to 8 characters",
      "op": "assert // Symbol of the asset must be shorter or equal to 8 characters",
      "stack_out": []
    },
    "857": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "858": {
      "op": "bytec 5 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"t\""
      ]
    },
    "860": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "861": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "863": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "864": {
      "error": "This method can be called only once",
      "op": "assert // This method can be called only once",
      "stack_out": []
    },
    "865": {
      "op": "pushbytes \"n\"",
      "defined_out": [
        "\"n\""
      ],
      "stack_out": [
        "\"n\""
      ]
    },
    "868": {
      "op": "frame_dig -4",
      "stack_out": [
        "\"n\"",
        "name#0 (copy)"
      ]
    },
    "870": {
      "op": "app_global_put",
      "stack_out": []
    },
    "871": {
      "op": "pushbytes \"s\"",
      "defined_out": [
        "\"s\""
      ],
      "stack_out": [
        "\"s\""
      ]
    },
    "874": {
      "op": "frame_dig -3",
      "stack_out": [
        "\"s\"",
        "symbol#0 (copy)"
      ]
    },
    "876": {
      "op": "app_global_put",
      "stack_out": []
    },
    "877": {
      "op": "bytec 5 // \"t\"",
      "stack_out": [
        "\"t\""
      ]
    },
    "879": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"t\"",
        "totalSupply#0 (copy)"
      ],
      "stack_out": [
        "\"t\"",
        "totalSupply#0 (copy)"
      ]
    },
    "881": {
      "op": "app_global_put",
      "stack_out": []
    },
    "882": {
      "op": "pushbytes \"d\"",
      "defined_out": [
        "\"d\""
      ],
      "stack_out": [
        "\"d\""
      ]
    },
    "885": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"d\"",
        "decimals#0 (copy)"
      ],
      "stack_out": [
        "\"d\"",
        "decimals#0 (copy)"
      ]
    },
    "887": {
      "op": "app_global_put",
      "stack_out": []
    },
    "888": {
      "op": "txn Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "890": {
      "op": "bytec_3 // \"b\"",
      "defined_out": [
        "\"b\"",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "\"b\""
      ]
    },
    "891": {
      "op": "dig 1",
      "defined_out": [
        "\"b\"",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "\"b\"",
        "sender#0 (copy)"
      ]
    },
    "893": {
      "op": "concat",
      "defined_out": [
        "sender#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%16#0"
      ]
    },
    "894": {
      "op": "frame_dig -1",
      "stack_out": [
        "sender#0",
        "tmp%16#0",
        "totalSupply#0 (copy)"
      ]
    },
    "896": {
      "op": "box_put",
      "stack_out": [
        "sender#0"
      ]
    },
    "897": {
      "op": "global ZeroAddress",
      "defined_out": [
        "sender#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%17#0"
      ]
    },
    "899": {
      "op": "swap",
      "stack_out": [
        "tmp%17#0",
        "sender#0"
      ]
    },
    "900": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "901": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "totalSupply#0 (copy)"
      ]
    },
    "903": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "904": {
      "op": "bytec 9 // method \"arc200_Transfer(address,address,uint256)\"",
      "defined_out": [
        "Method(arc200_Transfer(address,address,uint256))",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "Method(arc200_Transfer(address,address,uint256))"
      ]
    },
    "906": {
      "op": "swap",
      "stack_out": [
        "Method(arc200_Transfer(address,address,uint256))",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "907": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "908": {
      "op": "log",
      "stack_out": []
    },
    "909": {
      "op": "bytec 6 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "0x80"
      ]
    },
    "911": {
      "retsub": true,
      "op": "retsub"
    },
    "912": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_name",
      "params": {},
      "block": "arc200_name",
      "stack_in": [],
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "913": {
      "op": "pushbytes \"n\"",
      "defined_out": [
        "\"n\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"n\""
      ]
    },
    "916": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "917": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "918": {
      "op": "extract 2 0",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "921": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "922": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "923": {
      "op": "intc_1 // 32",
      "defined_out": [
        "32",
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0",
        "32"
      ]
    },
    "924": {
      "op": "==",
      "defined_out": [
        "lengths_equal%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "lengths_equal%0#0"
      ]
    },
    "925": {
      "error": "invalid size",
      "op": "assert // invalid size",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "926": {
      "retsub": true,
      "op": "retsub"
    },
    "927": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_symbol",
      "params": {},
      "block": "arc200_symbol",
      "stack_in": [],
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "928": {
      "op": "pushbytes \"s\"",
      "defined_out": [
        "\"s\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"s\""
      ]
    },
    "931": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "932": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "933": {
      "op": "extract 2 0",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "936": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "937": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "938": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0",
        "8"
      ]
    },
    "939": {
      "op": "==",
      "defined_out": [
        "lengths_equal%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "lengths_equal%0#0"
      ]
    },
    "940": {
      "error": "invalid size",
      "op": "assert // invalid size",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "941": {
      "retsub": true,
      "op": "retsub"
    },
    "942": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_decimals",
      "params": {},
      "block": "arc200_decimals",
      "stack_in": [],
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "943": {
      "op": "pushbytes \"d\"",
      "defined_out": [
        "\"d\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"d\""
      ]
    },
    "946": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "947": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "948": {
      "retsub": true,
      "op": "retsub"
    },
    "949": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_totalSupply",
      "params": {},
      "block": "arc200_totalSupply",
      "stack_in": [],
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "950": {
      "op": "bytec 5 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"t\""
      ]
    },
    "952": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "953": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "954": {
      "retsub": true,
      "op": "retsub"
    },
    "955": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_balanceOf",
      "params": {
        "owner#0": "bytes"
      },
      "block": "arc200_balanceOf",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "958": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "960": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "op": "callsub _balanceOf",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "963": {
      "retsub": true,
      "op": "retsub"
    },
    "964": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_transferFrom",
      "params": {
        "from#0": "bytes",
        "to#0": "bytes",
        "value#0": "bytes"
      },
      "block": "arc200_transferFrom",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "967": {
      "op": "txn Sender",
      "defined_out": [
        "spender#0"
      ],
      "stack_out": [
        "spender#0"
      ]
    },
    "969": {
      "op": "frame_dig -3",
      "defined_out": [
        "from#0 (copy)",
        "spender#0"
      ],
      "stack_out": [
        "spender#0",
        "from#0 (copy)"
      ]
    },
    "971": {
      "op": "dig 1",
      "defined_out": [
        "from#0 (copy)",
        "spender#0",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "spender#0",
        "from#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "973": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._allowance",
      "op": "callsub _allowance",
      "defined_out": [
        "spender#0",
        "spender_allowance#0"
      ],
      "stack_out": [
        "spender#0",
        "spender_allowance#0"
      ]
    },
    "976": {
      "op": "dup",
      "defined_out": [
        "spender#0",
        "spender_allowance#0",
        "spender_allowance#0 (copy)"
      ],
      "stack_out": [
        "spender#0",
        "spender_allowance#0",
        "spender_allowance#0 (copy)"
      ]
    },
    "977": {
      "op": "frame_dig -1",
      "defined_out": [
        "spender#0",
        "spender_allowance#0",
        "spender_allowance#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "spender#0",
        "spender_allowance#0",
        "spender_allowance#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "979": {
      "op": "b>=",
      "defined_out": [
        "spender#0",
        "spender_allowance#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "spender#0",
        "spender_allowance#0",
        "tmp%0#0"
      ]
    },
    "980": {
      "error": "insufficient approval",
      "op": "assert // insufficient approval",
      "stack_out": [
        "spender#0",
        "spender_allowance#0"
      ]
    },
    "981": {
      "op": "frame_dig -1",
      "stack_out": [
        "spender#0",
        "spender_allowance#0",
        "value#0 (copy)"
      ]
    },
    "983": {
      "op": "b-",
      "defined_out": [
        "spender#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0"
      ]
    },
    "984": {
      "op": "dup",
      "defined_out": [
        "spender#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "985": {
      "op": "len",
      "defined_out": [
        "spender#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "986": {
      "op": "intc_1 // 32",
      "defined_out": [
        "32",
        "spender#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "987": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "spender#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "988": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "spender#0",
        "to_encode%0#0"
      ]
    },
    "989": {
      "op": "intc_1 // 32",
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "990": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "spender#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "991": {
      "op": "b|",
      "defined_out": [
        "new_spender_allowance#0",
        "spender#0"
      ],
      "stack_out": [
        "spender#0",
        "new_spender_allowance#0"
      ]
    },
    "992": {
      "op": "frame_dig -3",
      "stack_out": [
        "spender#0",
        "new_spender_allowance#0",
        "from#0 (copy)"
      ]
    },
    "994": {
      "op": "cover 2",
      "stack_out": [
        "from#0 (copy)",
        "spender#0",
        "new_spender_allowance#0"
      ]
    },
    "996": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._approve",
      "op": "callsub _approve",
      "defined_out": [
        "{_approve}"
      ],
      "stack_out": [
        "{_approve}"
      ]
    },
    "999": {
      "op": "pop",
      "stack_out": []
    },
    "1000": {
      "op": "frame_dig -3",
      "stack_out": [
        "from#0 (copy)"
      ]
    },
    "1002": {
      "op": "frame_dig -2",
      "defined_out": [
        "from#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "from#0 (copy)",
        "to#0 (copy)"
      ]
    },
    "1004": {
      "op": "frame_dig -1",
      "stack_out": [
        "from#0 (copy)",
        "to#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "1006": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._transfer",
      "op": "callsub _transfer",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1009": {
      "retsub": true,
      "op": "retsub"
    },
    "1010": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_approve",
      "params": {
        "spender#0": "bytes",
        "value#0": "bytes"
      },
      "block": "arc200_approve",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1013": {
      "op": "txn Sender",
      "defined_out": [
        "owner#0"
      ],
      "stack_out": [
        "owner#0"
      ]
    },
    "1015": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0",
        "spender#0 (copy)"
      ]
    },
    "1017": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0",
        "spender#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "owner#0",
        "spender#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "1019": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._approve",
      "op": "callsub _approve",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1022": {
      "retsub": true,
      "op": "retsub"
    },
    "1023": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_allowance",
      "params": {
        "owner#0": "bytes",
        "spender#0": "bytes"
      },
      "block": "arc200_allowance",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1026": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "1028": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "1030": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._allowance",
      "op": "callsub _allowance",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1033": {
      "retsub": true,
      "op": "retsub"
    },
    "1034": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "params": {
        "owner#0": "bytes"
      },
      "block": "_balanceOf",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1037": {
      "op": "bytec_3 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "\"b\""
      ]
    },
    "1038": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"b\"",
        "owner#0 (copy)"
      ],
      "stack_out": [
        "\"b\"",
        "owner#0 (copy)"
      ]
    },
    "1040": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1041": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1042": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1043": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1045": {
      "op": "bnz _balanceOf_after_if_else@2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1048": {
      "op": "bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "1049": {
      "op": "swap"
    },
    "1050": {
      "retsub": true,
      "op": "retsub"
    },
    "1051": {
      "block": "_balanceOf_after_if_else@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1053": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1054": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "1055": {
      "op": "swap"
    },
    "1056": {
      "retsub": true,
      "op": "retsub"
    },
    "1057": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._transfer",
      "params": {
        "sender#0": "bytes",
        "recipient#0": "bytes",
        "amount#0": "bytes"
      },
      "block": "_transfer",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1060": {
      "op": "frame_dig -3",
      "defined_out": [
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0 (copy)"
      ]
    },
    "1062": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "op": "callsub _balanceOf",
      "defined_out": [
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0"
      ]
    },
    "1065": {
      "op": "dup",
      "defined_out": [
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "sender_balance#0"
      ]
    },
    "1066": {
      "op": "frame_dig -2",
      "defined_out": [
        "recipient#0 (copy)",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "sender_balance#0",
        "recipient#0 (copy)"
      ]
    },
    "1068": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "op": "callsub _balanceOf",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "1071": {
      "op": "swap",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender_balance#0"
      ]
    },
    "1072": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender_balance#0",
        "amount#0 (copy)"
      ]
    },
    "1074": {
      "op": "b>=",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "tmp%0#0"
      ]
    },
    "1075": {
      "error": "Insufficient balance at the sender account",
      "op": "assert // Insufficient balance at the sender account",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "1076": {
      "op": "frame_dig -3",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender#0 (copy)"
      ]
    },
    "1078": {
      "op": "frame_dig -2",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender#0 (copy)",
        "recipient#0 (copy)"
      ]
    },
    "1080": {
      "op": "!=",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "tmp%1#0"
      ]
    },
    "1081": {
      "op": "bz _transfer_after_if_else@2",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "1084": {
      "op": "frame_dig 0",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender_balance#0"
      ]
    },
    "1086": {
      "op": "frame_dig -1",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender_balance#0",
        "amount#0 (copy)"
      ]
    },
    "1088": {
      "op": "b-",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0"
      ]
    },
    "1089": {
      "op": "dup",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "1090": {
      "op": "len",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "1091": {
      "op": "intc_1 // 32",
      "defined_out": [
        "32",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "1092": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "1093": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0"
      ]
    },
    "1094": {
      "op": "intc_1 // 32",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "1095": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "1096": {
      "op": "swap",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%0#0"
      ]
    },
    "1097": {
      "op": "dig 1",
      "defined_out": [
        "bzero%0#0",
        "bzero%0#0 (copy)",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%0#0",
        "bzero%0#0 (copy)"
      ]
    },
    "1099": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "arc4_encoded%0#0"
      ]
    },
    "1100": {
      "op": "bytec_3 // \"b\"",
      "defined_out": [
        "\"b\"",
        "arc4_encoded%0#0",
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "arc4_encoded%0#0",
        "\"b\""
      ]
    },
    "1101": {
      "op": "frame_dig -3",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "arc4_encoded%0#0",
        "\"b\"",
        "sender#0 (copy)"
      ]
    },
    "1103": {
      "op": "concat",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "arc4_encoded%0#0",
        "tmp%2#0"
      ]
    },
    "1104": {
      "op": "swap",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "tmp%2#0",
        "arc4_encoded%0#0"
      ]
    },
    "1105": {
      "op": "box_put",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0"
      ]
    },
    "1106": {
      "op": "frame_dig 1",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "recipient_balance#0"
      ]
    },
    "1108": {
      "op": "frame_dig -1",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "recipient_balance#0",
        "amount#0 (copy)"
      ]
    },
    "1110": {
      "op": "b+",
      "defined_out": [
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0"
      ]
    },
    "1111": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "1112": {
      "op": "len",
      "defined_out": [
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "1113": {
      "op": "intc_1 // 32",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "1114": {
      "op": "<=",
      "defined_out": [
        "bzero%0#0",
        "len_ok%1#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "1115": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0"
      ]
    },
    "1116": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "arc4_encoded%1#0"
      ]
    },
    "1117": {
      "op": "bytec_3 // \"b\"",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "arc4_encoded%1#0",
        "\"b\""
      ]
    },
    "1118": {
      "op": "frame_dig -2",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "arc4_encoded%1#0",
        "\"b\"",
        "recipient#0 (copy)"
      ]
    },
    "1120": {
      "op": "concat",
      "defined_out": [
        "arc4_encoded%1#0",
        "recipient_balance#0",
        "sender_balance#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "arc4_encoded%1#0",
        "tmp%3#0"
      ]
    },
    "1121": {
      "op": "swap",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "tmp%3#0",
        "arc4_encoded%1#0"
      ]
    },
    "1122": {
      "op": "box_put",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "1123": {
      "block": "_transfer_after_if_else@2",
      "stack_in": [
        "sender_balance#0",
        "recipient_balance#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender#0 (copy)"
      ]
    },
    "1125": {
      "op": "frame_dig -2",
      "defined_out": [
        "recipient#0 (copy)",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender#0 (copy)",
        "recipient#0 (copy)"
      ]
    },
    "1127": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1128": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "encoded_tuple_buffer%2#0",
        "amount#0 (copy)"
      ]
    },
    "1130": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1131": {
      "op": "bytec 9 // method \"arc200_Transfer(address,address,uint256)\"",
      "defined_out": [
        "Method(arc200_Transfer(address,address,uint256))",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "encoded_tuple_buffer%3#0",
        "Method(arc200_Transfer(address,address,uint256))"
      ]
    },
    "1133": {
      "op": "swap",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "Method(arc200_Transfer(address,address,uint256))",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1134": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "event%0#0"
      ]
    },
    "1135": {
      "op": "log",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "1136": {
      "op": "bytec 6 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "0x80"
      ]
    },
    "1138": {
      "op": "frame_bury 0"
    },
    "1140": {
      "retsub": true,
      "op": "retsub"
    },
    "1141": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._approvalKey",
      "params": {
        "owner#0": "bytes",
        "spender#0": "bytes"
      },
      "block": "_approvalKey",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1144": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "1146": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "1148": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1149": {
      "op": "sha256",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1150": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "1151": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "1152": {
      "op": "intc_1 // 32",
      "defined_out": [
        "32",
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0",
        "32"
      ]
    },
    "1153": {
      "op": "==",
      "defined_out": [
        "lengths_equal%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "lengths_equal%0#0"
      ]
    },
    "1154": {
      "error": "invalid size",
      "op": "assert // invalid size",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1155": {
      "retsub": true,
      "op": "retsub"
    },
    "1156": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._allowance",
      "params": {
        "owner#0": "bytes",
        "spender#0": "bytes"
      },
      "block": "_allowance",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1159": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "1161": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "1163": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._approvalKey",
      "op": "callsub _approvalKey",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "1166": {
      "op": "pushbytes \"a\"",
      "defined_out": [
        "\"a\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"a\""
      ]
    },
    "1169": {
      "op": "swap",
      "stack_out": [
        "\"a\"",
        "key#0"
      ]
    },
    "1170": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1171": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1172": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1173": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1175": {
      "op": "bnz _allowance_after_if_else@2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1178": {
      "op": "bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "1179": {
      "op": "swap"
    },
    "1180": {
      "retsub": true,
      "op": "retsub"
    },
    "1181": {
      "block": "_allowance_after_if_else@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1183": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1184": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "1185": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1188": {
      "op": "swap"
    },
    "1189": {
      "retsub": true,
      "op": "retsub"
    },
    "1190": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._approve",
      "params": {
        "owner#0": "bytes",
        "spender#0": "bytes",
        "amount#0": "bytes"
      },
      "block": "_approve",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1193": {
      "op": "frame_dig -3",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "1195": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "1197": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._approvalKey",
      "op": "callsub _approvalKey",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "1200": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "amount#0 (copy)"
      ]
    },
    "1202": {
      "op": "frame_dig -3",
      "stack_out": [
        "key#0",
        "amount#0 (copy)",
        "owner#0 (copy)"
      ]
    },
    "1204": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1205": {
      "op": "frame_dig -2",
      "stack_out": [
        "key#0",
        "encoded_tuple_buffer%2#0",
        "spender#0 (copy)"
      ]
    },
    "1207": {
      "op": "concat",
      "defined_out": [
        "approvalBox#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "approvalBox#0"
      ]
    },
    "1208": {
      "op": "pushbytes \"a\"",
      "defined_out": [
        "\"a\"",
        "approvalBox#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "approvalBox#0",
        "\"a\""
      ]
    },
    "1211": {
      "op": "uncover 2",
      "stack_out": [
        "approvalBox#0",
        "\"a\"",
        "key#0"
      ]
    },
    "1213": {
      "op": "concat",
      "defined_out": [
        "approvalBox#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "approvalBox#0",
        "tmp%0#0"
      ]
    },
    "1214": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "approvalBox#0"
      ]
    },
    "1215": {
      "op": "box_put",
      "stack_out": []
    },
    "1216": {
      "op": "frame_dig -3",
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "1218": {
      "op": "frame_dig -2",
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "1220": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1221": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "amount#0 (copy)"
      ]
    },
    "1223": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1224": {
      "op": "pushbytes 0x1969f865 // method \"arc200_Approval(address,address,uint256)\"",
      "defined_out": [
        "Method(arc200_Approval(address,address,uint256))",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "Method(arc200_Approval(address,address,uint256))"
      ]
    },
    "1230": {
      "op": "swap",
      "stack_out": [
        "Method(arc200_Approval(address,address,uint256))",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1231": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "1232": {
      "op": "log",
      "stack_out": []
    },
    "1233": {
      "op": "bytec 6 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "0x80"
      ]
    },
    "1235": {
      "retsub": true,
      "op": "retsub"
    }
  }
}