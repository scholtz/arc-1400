{
  "version": 3,
  "sources": [
    "C:/Users/scholtz/source/repos/scholtz/arc-1400/projects/arc-1400/smart_contracts/security_token/arc1410.algo.ts",
    "C:/Users/scholtz/source/repos/scholtz/arc-1400/projects/arc-1400/smart_contracts/security_token/arc200.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AC+IG;;AAAA;AAAA;AAAA;;AAAA;AD/IH;;;AAAA;;;AC+IG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;ADnIH;;;AAAA;;;ACmIG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;ADlHH;;;AAAA;;;AAAA;;;ACkHG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;ADzFH;;;ACyFG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA1BA;;AAAA;AAAA;AAAA;;AAAA;ADtBH;;;AAAA;;;AAAA;;;AAAA;;;ACsBG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;ADqSA;;AAAA;AAAA;AAAA;;AAAA;AA3TH;;;AAAA;;;AAAA;;;AA2TG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AA/SH;;;AAAA;;;AAAA;;;AAAA;;;AA+SG;;;AAAA;;AAzLA;;AAAA;AAAA;AAAA;;AAAA;AAtHH;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAsHG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA9BA;;AAAA;AAAA;AAAA;;AAAA;AAxFH;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAwFG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AA/EH;;;AAAA;;;AAAA;;;AA+EG;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAxEH;;;AAAA;;;AAAA;;;AAwEG;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AA1DH;;;AAAA;;;AAAA;;;AA0DG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAnDH;;;AAAA;;;AAmDG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AArCH;;;AAAA;;;AAAA;;;AAAA;;;AAqCG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAtBH;;;AAAA;;;AAsBG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAbH;;;AAAA;;;AAaG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAbH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAaE;;;AAEc;;AAAA;;AAAA;AAd+D;AAAA;AAAA;AAkB/C;AAAA;AAA5B;AAGF;;;AAGyB;;AACrB;AAFF;;AAIE;AAJF;;AAME;;AANF;;;AAQ2C;;AAApC;;AAAA;;AAAA;;;AAAP;AAKF;;;AAOsC;;AAEhC;;AAAA;;AAAoB;;;AACxB;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AACA;AAGF;;;AAEc;;AAAA;;AAAA;AAjDD;;AAAA;AAAA;AAAA;AAkD8B;AAAA;;AAArC;;;AAAoD;;AAAP;AAAA;AACN;;AAAA;AAAA;AAA3C;AAAA;AAGF;;;;;;AAEM;;AAAA;;AAAA;AAAJ;;;AAAgC;AAAP;;AAAA;AACR;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAvDoD;;AAAA;AAAA;AAAA;AAAA;;AAwDxC;AAAA;;AAAzB;;;AAA4D;;AAAA;AAAA;AAAM;AAAW;AAA1C;AAAnC;;;AACK;AAAP;;AAAA;AAEgB;;AAAyE;AAAzE;AA3DmD;;AAAA;AAAA;AAAA;AAAA;;AA4DvC;AAAA;;AAA1B;;;AAA8D;;AAAA;AAAA;AAAM;AAAW;AAA3C;AAApC;;;AACK;AAAP;;AAAA;AAEK;;AAAP;;AAAA;AAGF;;;AAE8B;;AAArB;;AAAA;AAAP;AACY;;AAAA;;AAAA;AAAA;;AAAA;AArEyD;;AAAA;AAAA;AAsEzC;;;AAA5B;;AAGF;;;AAE8B;;AAArB;;AAAA;AAAP;AACY;;AAAA;;AAAA;AAAA;;AAAA;AA5EyD;;AAAA;AAAA;AAAA;AA6E7C;AAAA;;AAAxB;;;AACsB;;AAAA;;;AAIxB;;;;AAQsC;;AAEnB;;AAFX;;AAEW;;AAAA;;;;AAAkD;AAAW;AAA7D;AAAb;;AAEA;;;AAEW;;AAAA;;AAAA;AAAA;;AAAA;AA/FiF;;AAAA;AAAA;AAAA;AAAA;;AAgGrD;AAAA;;AAAzC;;;AACyD;;AAAA;AAAA;AAAA;AAChD;AAAA;;AAAA;AAAP;AACa;AAAb;;AAG+D;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA7C;;;;;;;AAGJ;AACI;;AAAA;;AAAoB;;;AACxB;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AACA;;AAAA;AAGF;;;;;;;;AA6EyB;;AAAA;;AAAA;AAlMoD;AAAA;AAAA;AAAA;AAkMgB;AAAA;;AArEvF;;;AACK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;;AAAA;AAOkF;;AAAA;AAAA;AAAlF;;AAAA;AADF;;;AAGS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;;AAAA;AAOE;;AAAO;AAAP;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;;AAAA;AAQI;;AAAkC;AAAlC;;AACF;;AAAA;AAAJ;;;AACmB;;AAAA;;AAAA;;AAAA;;;;AAAsD;AAAW;AAAjE;AAAb;AAAA;;;;;AACA;;;AACW;;AAAA;;AAAA;AAAA;;AAAA;AArJ+E;;AAAA;AAAA;AAAA;AAAA;;AAsJnD;AAAA;;;;;;AAAzC;;;AACyD;;AAAA;AAAA;AACnD;;AAAA;AAAJ;;;AACe;AAAb;;;;;;;;AAIF;;;AACK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;;AAAA;AAQA;;AAAA;;AAAoB;;;AAEjB;;;;;AAAA;AAAA;AAEG;;;;;;;;;;;AAFH;AAAP;;AAAA;AAYF;;;AAC0B;AACJ;;AAAA;;AAAA;AA5LuD;AAAA;AAAA;AA4Le;AAAA;;AAA1F;;;;;;;AAGA;;AAAA;AAAA;AAsEF;;;;;;;;;;AAQS;;AAAgB;;AAAhB;AAAP;AAEgB;;AAAA;;AAAA;AA/Q2D;AAAA;AAAA;AAAA;AAgR7C;AAAA;;AAA1B;;;AACF;;AAAiC;AAAjC;AAE0E;;AAAA;AAAA;AAAA;AAAzB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAjC;AAKE;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAFF;;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAYI;;AAAA;;AAAA;AAAJ;;;AAjSmF;;;;;;AAAA;;AAAA;AAAA;AAAA;;AAgNrC;AAAA;;AAA1C;;;AACF;;AAFS;;AAET;AAEwD;;AAAA;AAAA;AAAA;;AAAA;AAC9C;AAAR;;AALO;;AAMF;;AAAwB;;AAAA;AAAA;AAAA;;AAAkB;;AAAA;AAAA;AAAA;;AAA1B;AAAzB;;;AACuB;;AAAA;;AAAA;AApNZ;;AAAA;AAAA;AAAA;AAAA;;AAwNyC;AAAA;;AAA9C;;;AACoD;;AAAA;;AAAA;AAAtD;;AAAA;AAAA;;AAAA;AAAA;AAGoE;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA1BxE;AAAA;AAAA;;;;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACM;;AAAA;AAAJ;;;AAAoB;AAyBpB;;;AACU;AAAR;;AAIA;;AAAA;;;AACmB;;AAAA;;AAAA;AAlOZ;;AAAA;AAAA;AAAA;AAAA;;AAsOwE;AAAA;AAAM;AAAA;AAApE;AACJ;AAAS;;AAApB;AAAJ;;;AAGoD;;AAAA;AAAA;AAAA;AADG;;;AAEnD;;AAAA;;AAAA;AAFmD;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAArD;;AAAA;;AAAA;AA2DU;;AAAA;;AAAA;AAvS6D;AAAA;AAAA;AAAA;AAAA;;AAwS/C;AAAA;;AAAxB;;;AACF;;AAA+B;AAA/B;AAEsE;;AAAA;AAAA;AAAA;AAAvB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA/B;;AA1DyC;;AAAkB;AAAlB;AAAjB;AACpB;;AAAA;;AAAA;AACwB;;AAAA;AAAA;AAIiC;;AAAA;;AAAA;AApPlD;;AAAA;;AAAA;AAoPP;AAAA;;AAAA;AAAA;;;;AAjCkF;;AAAiB;AAAjB;AAAjB;AAAA;;;;;;;;;;;;;;AAd9D;AAuBD;;;AA+ER;;;AAO8B;;AAArB;;AAAA;AAAP;AACY;;AAAA;;AAAA;AAAA;;AAAA;AAhToF;;AAAA;AAAA;AAiThG;;AAAA;;AAGF;;;;AAMM;;AAAA;;AAAA;AAAJ;;;AAAgC;AAAP;AAAA;AACb;;AAAA;;AAAA;AAAA;;AAAA;AA3ToF;;AAAA;AAAA;AAAA;AAAA;;AA4TvD;AAAA;;AAArC;;;AAAoD;;AAAP;AAAA;AACQ;;AAAA;AAAA;AAAe;;AAAnD;AAAd;;AAAA;AAAA;;AAAA;AAAP;AAAA;AC9SF;;;AAEa;;AAAkB;;AAAtB;AAAP;AACY;;AAAA;;;AAAO;AAAnB;AAAA;AAC6B;AAAtB;AAAP;AACc;;AAAA;;;AAAO;AAArB;AAAA;AAC+B;AAAxB;AAAP;AAXgD;AAAA;;AAYvB;AAAA;;AAAlB;AAAP;AAxB6C;;;AA0B7C;;AAAA;AAtB+C;;;AAuB/C;;AAAA;AAfgD;;AAgBhD;;AAAA;AApB2C;;;AAqB3C;;AAAA;AAC+B;;AAhBwB;;AAAA;;AAAA;AAkBvD;;AAAA;AAEoD;;AAA/C;AAAA;AAAA;;AAAA;AAAL;;AAAA;AAAA;AAAA;AACO;AAAP;AAnC6C;AAAA;;;AAAA;AAAA;AA6CF;;;AAApC;AAAA;AAAA;AAAA;AAAA;AAAP;AAzC+C;AAAA;;;AAAA;AAAA;AAmDH;;;AAArC;AAAA;AAAA;AAAA;AAAA;AAAP;AA/C2C;AAAA;;;AAAA;AAAA;AAyD3C;AArDgD;AAAA;;AAAA;AAAA;AA+DhD;AASF;;;AAES;;AAAA;;;AAAP;AAuBF;;;AAEkC;;AAC1B;;AAAA;;AAAoB;;;AACnB;AAAA;;AAAA;AAAP;AAC2C;;AAAA;AAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9B;;AAAA;;AAAA;;;;AACO;;AAAA;;AAAA;;AAAA;;;AAAP;AAUF;;;AAEgC;;AACvB;;AAAA;;AAAA;;;AAAP;AASF;;;AAES;;AAAA;;AAAA;;;AAAP;AAGF;;;AAjIyD;;AAAA;;AAAA;AAAA;AAkI7B;AAAA;;AAAtB;;;AAAqC;AAAP;AAAA;AACN;;AAAA;AAAA;AAA5B;AAAA;AAGF;;;AACQ;;AAAiB;;;AAAjB;AACA;;AAAoB;;;AAApB;AACC;;AAAA;AAAP;AAEI;;AAAA;;AAAA;AAAJ;;;AAE6C;;AAAA;;AAAA;AAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AA7IuB;;AAAA;;AAAA;AA6IrD;AAAA;AAC8C;;AAAA;;AAAA;AAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AA9IoB;;AAAA;;AAAA;AA8IrD;AAAA;AAEG;;AAAA;;AAAA;AAAA;;AAAA;AAAL;;AAAA;AAAA;AAAA;AACO;AAAP;;AAAA;AAEF;;;AACuC;;AAAA;;AAAA;AAAV;AAApB;AAAA;AAAA;AAAA;AAAA;AAAP;AAGF;;;AACQ;;AAAA;;AAAM;;;AAtJ0D;;;AAAA;AAAA;AAAA;AAuJ7C;AAAA;;AAArB;;;AAAoC;AAAP;AAAA;AACN;;AAAA;AAAA;AAAM;;;AAAjC;AAAA;AAGF;;;AACQ;;AAAA;;AAAM;;;AACwB;;AAAA;;AAAA;AAAA;;AAAA;AA7JkC;;;AAAA;;AAAA;AAkKtE;AAAA;AACK;;AAAA;;AAAA;AAAA;;AAAA;AAAL;;;;;;AAAA;AAAA;AAAA;AACO;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 32 8"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 0x0000000000000000000000000000000000000000000000000000000000000000 0x80 \"p\" \"hp_a\" \"op\" \"opa\" \"b\" 0x00 0x0001 \"t\" 0x0000 0x0000000000000000 0x7983c35c"
    },
    "89": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "91": {
      "op": "bz main_bare_routing@27",
      "stack_out": []
    },
    "94": {
      "op": "pushbytess 0x35f8135f 0xda7025b9 0x3f256713 0x95b4f9e3 0x80cc49ab 0x07962165 0xe78961da 0xfd9480d7 0xb1b1d69a 0xc1bed789 0x3bfe1833 0x975382e2 0x657d13ec 0xb6ae1a25 0x84ec13d5 0xec996041 0x82e573c4 0x4a968f8f 0xb5422125 0xbbb319f3 // method \"arc1410_balance_of_partition(address,address)uint256\", method \"arc200_transfer(address,uint256)bool\", method \"arc1410_transfer_by_partition(address,address,uint256,byte[])address\", method \"arc1410_partitions_of(address,uint64)address[]\", method \"arc1410_is_operator(address,address,address)bool\", method \"arc1410_authorize_operator(address,address,address)void\", method \"arc1410_revoke_operator(address,address,address)void\", method \"arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address\", method \"arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)\", method \"arc1410_authorize_operator_by_portion(address,address,address,uint256)void\", method \"arc1410_is_operator_by_portion(address,address,address)bool\", method \"bootstrap(byte[],byte[],uint8,uint256)bool\", method \"arc200_name()byte[32]\", method \"arc200_symbol()byte[8]\", method \"arc200_decimals()uint8\", method \"arc200_totalSupply()uint256\", method \"arc200_balanceOf(address)uint256\", method \"arc200_transferFrom(address,address,uint256)bool\", method \"arc200_approve(address,uint256)bool\", method \"arc200_allowance(address,address)uint256\"",
      "defined_out": [
        "Method(arc1410_authorize_operator(address,address,address)void)",
        "Method(arc1410_authorize_operator_by_portion(address,address,address,uint256)void)",
        "Method(arc1410_balance_of_partition(address,address)uint256)",
        "Method(arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address))",
        "Method(arc1410_is_operator(address,address,address)bool)",
        "Method(arc1410_is_operator_by_portion(address,address,address)bool)",
        "Method(arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address)",
        "Method(arc1410_partitions_of(address,uint64)address[])",
        "Method(arc1410_revoke_operator(address,address,address)void)",
        "Method(arc1410_transfer_by_partition(address,address,uint256,byte[])address)",
        "Method(arc200_allowance(address,address)uint256)",
        "Method(arc200_approve(address,uint256)bool)",
        "Method(arc200_balanceOf(address)uint256)",
        "Method(arc200_decimals()uint8)",
        "Method(arc200_name()byte[32])",
        "Method(arc200_symbol()byte[8])",
        "Method(arc200_totalSupply()uint256)",
        "Method(arc200_transfer(address,uint256)bool)",
        "Method(arc200_transferFrom(address,address,uint256)bool)",
        "Method(bootstrap(byte[],byte[],uint8,uint256)bool)"
      ],
      "stack_out": [
        "Method(arc1410_balance_of_partition(address,address)uint256)",
        "Method(arc200_transfer(address,uint256)bool)",
        "Method(arc1410_transfer_by_partition(address,address,uint256,byte[])address)",
        "Method(arc1410_partitions_of(address,uint64)address[])",
        "Method(arc1410_is_operator(address,address,address)bool)",
        "Method(arc1410_authorize_operator(address,address,address)void)",
        "Method(arc1410_revoke_operator(address,address,address)void)",
        "Method(arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address)",
        "Method(arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address))",
        "Method(arc1410_authorize_operator_by_portion(address,address,address,uint256)void)",
        "Method(arc1410_is_operator_by_portion(address,address,address)bool)",
        "Method(bootstrap(byte[],byte[],uint8,uint256)bool)",
        "Method(arc200_name()byte[32])",
        "Method(arc200_symbol()byte[8])",
        "Method(arc200_decimals()uint8)",
        "Method(arc200_totalSupply()uint256)",
        "Method(arc200_balanceOf(address)uint256)",
        "Method(arc200_transferFrom(address,address,uint256)bool)",
        "Method(arc200_approve(address,uint256)bool)",
        "Method(arc200_allowance(address,address)uint256)"
      ]
    },
    "196": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(arc1410_authorize_operator(address,address,address)void)",
        "Method(arc1410_authorize_operator_by_portion(address,address,address,uint256)void)",
        "Method(arc1410_balance_of_partition(address,address)uint256)",
        "Method(arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address))",
        "Method(arc1410_is_operator(address,address,address)bool)",
        "Method(arc1410_is_operator_by_portion(address,address,address)bool)",
        "Method(arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address)",
        "Method(arc1410_partitions_of(address,uint64)address[])",
        "Method(arc1410_revoke_operator(address,address,address)void)",
        "Method(arc1410_transfer_by_partition(address,address,uint256,byte[])address)",
        "Method(arc200_allowance(address,address)uint256)",
        "Method(arc200_approve(address,uint256)bool)",
        "Method(arc200_balanceOf(address)uint256)",
        "Method(arc200_decimals()uint8)",
        "Method(arc200_name()byte[32])",
        "Method(arc200_symbol()byte[8])",
        "Method(arc200_totalSupply()uint256)",
        "Method(arc200_transfer(address,uint256)bool)",
        "Method(arc200_transferFrom(address,address,uint256)bool)",
        "Method(bootstrap(byte[],byte[],uint8,uint256)bool)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(arc1410_balance_of_partition(address,address)uint256)",
        "Method(arc200_transfer(address,uint256)bool)",
        "Method(arc1410_transfer_by_partition(address,address,uint256,byte[])address)",
        "Method(arc1410_partitions_of(address,uint64)address[])",
        "Method(arc1410_is_operator(address,address,address)bool)",
        "Method(arc1410_authorize_operator(address,address,address)void)",
        "Method(arc1410_revoke_operator(address,address,address)void)",
        "Method(arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address)",
        "Method(arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address))",
        "Method(arc1410_authorize_operator_by_portion(address,address,address,uint256)void)",
        "Method(arc1410_is_operator_by_portion(address,address,address)bool)",
        "Method(bootstrap(byte[],byte[],uint8,uint256)bool)",
        "Method(arc200_name()byte[32])",
        "Method(arc200_symbol()byte[8])",
        "Method(arc200_decimals()uint8)",
        "Method(arc200_totalSupply()uint256)",
        "Method(arc200_balanceOf(address)uint256)",
        "Method(arc200_transferFrom(address,address,uint256)bool)",
        "Method(arc200_approve(address,uint256)bool)",
        "Method(arc200_allowance(address,address)uint256)",
        "tmp%2#0"
      ]
    },
    "199": {
      "op": "match main_arc1410_balance_of_partition_route@5 main_arc200_transfer_route@6 main_arc1410_transfer_by_partition_route@7 main_arc1410_partitions_of_route@8 main_arc1410_is_operator_route@9 main_arc1410_authorize_operator_route@10 main_arc1410_revoke_operator_route@11 main_arc1410_operator_transfer_by_partition_route@12 main_arc1410_can_transfer_by_partition_route@13 main_arc1410_authorize_operator_by_portion_route@14 main_arc1410_is_operator_by_portion_route@15 main_bootstrap_route@16 main_arc200_name_route@17 main_arc200_symbol_route@18 main_arc200_decimals_route@19 main_arc200_totalSupply_route@20 main_arc200_balanceOf_route@21 main_arc200_transferFrom_route@22 main_arc200_approve_route@23 main_arc200_allowance_route@24",
      "stack_out": []
    },
    "241": {
      "block": "main_after_if_else@31",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "242": {
      "op": "return",
      "stack_out": []
    },
    "243": {
      "block": "main_arc200_allowance_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "245": {
      "op": "!",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "246": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "247": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "249": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "250": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%39#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%39#0"
      ]
    },
    "253": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%39#0",
        "reinterpret_bytes[32]%40#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%39#0",
        "reinterpret_bytes[32]%40#0"
      ]
    },
    "256": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_allowance",
      "op": "callsub arc200_allowance",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "259": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0",
        "0x151f7c75"
      ]
    },
    "260": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%120#0"
      ]
    },
    "261": {
      "op": "concat",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "262": {
      "op": "log",
      "stack_out": []
    },
    "263": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "264": {
      "op": "return",
      "stack_out": []
    },
    "265": {
      "block": "main_arc200_approve_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "267": {
      "op": "!",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "268": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "269": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "271": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "272": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%37#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%37#0"
      ]
    },
    "275": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%37#0",
        "reinterpret_bytes[32]%38#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%37#0",
        "reinterpret_bytes[32]%38#0"
      ]
    },
    "278": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_approve",
      "op": "callsub arc200_approve",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "281": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0",
        "0x151f7c75"
      ]
    },
    "282": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%114#0"
      ]
    },
    "283": {
      "op": "concat",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "284": {
      "op": "log",
      "stack_out": []
    },
    "285": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "286": {
      "op": "return",
      "stack_out": []
    },
    "287": {
      "block": "main_arc200_transferFrom_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "289": {
      "op": "!",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "290": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "291": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "293": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "294": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%34#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%34#0"
      ]
    },
    "297": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%34#0",
        "reinterpret_bytes[32]%35#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%34#0",
        "reinterpret_bytes[32]%35#0"
      ]
    },
    "300": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%34#0",
        "reinterpret_bytes[32]%35#0",
        "reinterpret_bytes[32]%36#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%34#0",
        "reinterpret_bytes[32]%35#0",
        "reinterpret_bytes[32]%36#0"
      ]
    },
    "303": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_transferFrom",
      "op": "callsub arc200_transferFrom",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "306": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0",
        "0x151f7c75"
      ]
    },
    "307": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%108#0"
      ]
    },
    "308": {
      "op": "concat",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "309": {
      "op": "log",
      "stack_out": []
    },
    "310": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "311": {
      "op": "return",
      "stack_out": []
    },
    "312": {
      "block": "main_arc200_balanceOf_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "314": {
      "op": "!",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "315": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "316": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "318": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "319": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%33#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%33#0"
      ]
    },
    "322": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_balanceOf",
      "op": "callsub arc200_balanceOf",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "325": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0",
        "0x151f7c75"
      ]
    },
    "326": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%102#0"
      ]
    },
    "327": {
      "op": "concat",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "328": {
      "op": "log",
      "stack_out": []
    },
    "329": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "330": {
      "op": "return",
      "stack_out": []
    },
    "331": {
      "block": "main_arc200_totalSupply_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "333": {
      "op": "!",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "334": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "335": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "337": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "338": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_totalSupply",
      "op": "callsub arc200_totalSupply",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "341": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0",
        "0x151f7c75"
      ]
    },
    "342": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%96#0"
      ]
    },
    "343": {
      "op": "concat",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "344": {
      "op": "log",
      "stack_out": []
    },
    "345": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "346": {
      "op": "return",
      "stack_out": []
    },
    "347": {
      "block": "main_arc200_decimals_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "349": {
      "op": "!",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "350": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "351": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "353": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "354": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_decimals",
      "op": "callsub arc200_decimals",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "357": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0",
        "0x151f7c75"
      ]
    },
    "358": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%90#0"
      ]
    },
    "359": {
      "op": "concat",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "360": {
      "op": "log",
      "stack_out": []
    },
    "361": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "362": {
      "op": "return",
      "stack_out": []
    },
    "363": {
      "block": "main_arc200_symbol_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "365": {
      "op": "!",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "366": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "367": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "369": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "370": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_symbol",
      "op": "callsub arc200_symbol",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "373": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "0x151f7c75"
      ]
    },
    "374": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%84#0"
      ]
    },
    "375": {
      "op": "concat",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "376": {
      "op": "log",
      "stack_out": []
    },
    "377": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "378": {
      "op": "return",
      "stack_out": []
    },
    "379": {
      "block": "main_arc200_name_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "381": {
      "op": "!",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "382": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "383": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "385": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "386": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_name",
      "op": "callsub arc200_name",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "389": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0",
        "0x151f7c75"
      ]
    },
    "390": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%78#0"
      ]
    },
    "391": {
      "op": "concat",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "392": {
      "op": "log",
      "stack_out": []
    },
    "393": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "394": {
      "op": "return",
      "stack_out": []
    },
    "395": {
      "block": "main_bootstrap_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "397": {
      "op": "!",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "398": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "399": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "401": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "402": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "405": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%70#0",
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%70#0",
        "tmp%71#0"
      ]
    },
    "408": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "tmp%70#0",
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%70#0",
        "tmp%71#0",
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "411": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[32]%32#0",
        "tmp%70#0",
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%70#0",
        "tmp%71#0",
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[32]%32#0"
      ]
    },
    "414": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.bootstrap",
      "op": "callsub bootstrap",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "417": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0",
        "0x151f7c75"
      ]
    },
    "418": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%72#0"
      ]
    },
    "419": {
      "op": "concat",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "420": {
      "op": "log",
      "stack_out": []
    },
    "421": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "422": {
      "op": "return",
      "stack_out": []
    },
    "423": {
      "block": "main_arc1410_is_operator_by_portion_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "425": {
      "op": "!",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "426": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "427": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "429": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "430": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%29#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%29#0"
      ]
    },
    "433": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%29#0",
        "reinterpret_bytes[32]%30#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%29#0",
        "reinterpret_bytes[32]%30#0"
      ]
    },
    "436": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%29#0",
        "reinterpret_bytes[32]%30#0",
        "reinterpret_bytes[32]%31#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%29#0",
        "reinterpret_bytes[32]%30#0",
        "reinterpret_bytes[32]%31#0"
      ]
    },
    "439": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator_by_portion",
      "op": "callsub arc1410_is_operator_by_portion",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "442": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0",
        "0x151f7c75"
      ]
    },
    "443": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%64#0"
      ]
    },
    "444": {
      "op": "concat",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "445": {
      "op": "log",
      "stack_out": []
    },
    "446": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "447": {
      "op": "return",
      "stack_out": []
    },
    "448": {
      "block": "main_arc1410_authorize_operator_by_portion_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "450": {
      "op": "!",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "451": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "452": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "454": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "455": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%25#0"
      ]
    },
    "458": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%25#0",
        "reinterpret_bytes[32]%26#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%25#0",
        "reinterpret_bytes[32]%26#0"
      ]
    },
    "461": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%25#0",
        "reinterpret_bytes[32]%26#0",
        "reinterpret_bytes[32]%27#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%25#0",
        "reinterpret_bytes[32]%26#0",
        "reinterpret_bytes[32]%27#0"
      ]
    },
    "464": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%25#0",
        "reinterpret_bytes[32]%26#0",
        "reinterpret_bytes[32]%27#0",
        "reinterpret_bytes[32]%28#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%25#0",
        "reinterpret_bytes[32]%26#0",
        "reinterpret_bytes[32]%27#0",
        "reinterpret_bytes[32]%28#0"
      ]
    },
    "467": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_authorize_operator_by_portion",
      "op": "callsub arc1410_authorize_operator_by_portion",
      "stack_out": []
    },
    "470": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "471": {
      "op": "return",
      "stack_out": []
    },
    "472": {
      "block": "main_arc1410_can_transfer_by_partition_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "474": {
      "op": "!",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "475": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "476": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "478": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "479": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%21#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%21#0"
      ]
    },
    "482": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%21#0",
        "reinterpret_bytes[32]%22#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%21#0",
        "reinterpret_bytes[32]%22#0"
      ]
    },
    "485": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%21#0",
        "reinterpret_bytes[32]%22#0",
        "reinterpret_bytes[32]%23#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%21#0",
        "reinterpret_bytes[32]%22#0",
        "reinterpret_bytes[32]%23#0"
      ]
    },
    "488": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%21#0",
        "reinterpret_bytes[32]%22#0",
        "reinterpret_bytes[32]%23#0",
        "reinterpret_bytes[32]%24#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%21#0",
        "reinterpret_bytes[32]%22#0",
        "reinterpret_bytes[32]%23#0",
        "reinterpret_bytes[32]%24#0"
      ]
    },
    "491": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[32]%21#0",
        "reinterpret_bytes[32]%22#0",
        "reinterpret_bytes[32]%23#0",
        "reinterpret_bytes[32]%24#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%21#0",
        "reinterpret_bytes[32]%22#0",
        "reinterpret_bytes[32]%23#0",
        "reinterpret_bytes[32]%24#0",
        "tmp%53#0"
      ]
    },
    "494": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_can_transfer_by_partition",
      "op": "callsub arc1410_can_transfer_by_partition",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "497": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "0x151f7c75"
      ]
    },
    "498": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%54#0"
      ]
    },
    "499": {
      "op": "concat",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "500": {
      "op": "log",
      "stack_out": []
    },
    "501": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "502": {
      "op": "return",
      "stack_out": []
    },
    "503": {
      "block": "main_arc1410_operator_transfer_by_partition_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "505": {
      "op": "!",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "506": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "507": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "509": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "510": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%17#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%17#0"
      ]
    },
    "513": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0"
      ]
    },
    "516": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0",
        "reinterpret_bytes[32]%19#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0",
        "reinterpret_bytes[32]%19#0"
      ]
    },
    "519": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0",
        "reinterpret_bytes[32]%19#0",
        "reinterpret_bytes[32]%20#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0",
        "reinterpret_bytes[32]%19#0",
        "reinterpret_bytes[32]%20#0"
      ]
    },
    "522": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0",
        "reinterpret_bytes[32]%19#0",
        "reinterpret_bytes[32]%20#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0",
        "reinterpret_bytes[32]%19#0",
        "reinterpret_bytes[32]%20#0",
        "tmp%46#0"
      ]
    },
    "525": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_operator_transfer_by_partition",
      "op": "callsub arc1410_operator_transfer_by_partition",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "528": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "0x151f7c75"
      ]
    },
    "529": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%47#0"
      ]
    },
    "530": {
      "op": "concat",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "531": {
      "op": "log",
      "stack_out": []
    },
    "532": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "533": {
      "op": "return",
      "stack_out": []
    },
    "534": {
      "block": "main_arc1410_revoke_operator_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "536": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "537": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "538": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "540": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "541": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%14#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%14#0"
      ]
    },
    "544": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%14#0",
        "reinterpret_bytes[32]%15#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%14#0",
        "reinterpret_bytes[32]%15#0"
      ]
    },
    "547": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%14#0",
        "reinterpret_bytes[32]%15#0",
        "reinterpret_bytes[32]%16#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%14#0",
        "reinterpret_bytes[32]%15#0",
        "reinterpret_bytes[32]%16#0"
      ]
    },
    "550": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_revoke_operator",
      "op": "callsub arc1410_revoke_operator",
      "stack_out": []
    },
    "553": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "554": {
      "op": "return",
      "stack_out": []
    },
    "555": {
      "block": "main_arc1410_authorize_operator_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "557": {
      "op": "!",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "558": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "559": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "561": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "562": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%11#0"
      ]
    },
    "565": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[32]%12#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[32]%12#0"
      ]
    },
    "568": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[32]%12#0",
        "reinterpret_bytes[32]%13#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[32]%12#0",
        "reinterpret_bytes[32]%13#0"
      ]
    },
    "571": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_authorize_operator",
      "op": "callsub arc1410_authorize_operator",
      "stack_out": []
    },
    "574": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "575": {
      "op": "return",
      "stack_out": []
    },
    "576": {
      "block": "main_arc1410_is_operator_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "578": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "579": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "580": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "582": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "583": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%8#0"
      ]
    },
    "586": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%8#0",
        "reinterpret_bytes[32]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%8#0",
        "reinterpret_bytes[32]%9#0"
      ]
    },
    "589": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%8#0",
        "reinterpret_bytes[32]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%8#0",
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[32]%10#0"
      ]
    },
    "592": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator",
      "op": "callsub arc1410_is_operator",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "595": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "0x151f7c75"
      ]
    },
    "596": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%32#0"
      ]
    },
    "597": {
      "op": "concat",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "598": {
      "op": "log",
      "stack_out": []
    },
    "599": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "600": {
      "op": "return",
      "stack_out": []
    },
    "601": {
      "block": "main_arc1410_partitions_of_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "603": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "604": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "605": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "607": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "608": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0"
      ]
    },
    "611": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%7#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "614": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_partitions_of",
      "op": "callsub arc1410_partitions_of",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "617": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "0x151f7c75"
      ]
    },
    "618": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%26#0"
      ]
    },
    "619": {
      "op": "concat",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "620": {
      "op": "log",
      "stack_out": []
    },
    "621": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "622": {
      "op": "return",
      "stack_out": []
    },
    "623": {
      "block": "main_arc1410_transfer_by_partition_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "625": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "626": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "627": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "629": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "630": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0"
      ]
    },
    "633": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0"
      ]
    },
    "636": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0"
      ]
    },
    "639": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "tmp%19#0"
      ]
    },
    "642": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_transfer_by_partition",
      "op": "callsub arc1410_transfer_by_partition",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "645": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "0x151f7c75"
      ]
    },
    "646": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%20#0"
      ]
    },
    "647": {
      "op": "concat",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "648": {
      "op": "log",
      "stack_out": []
    },
    "649": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "650": {
      "op": "return",
      "stack_out": []
    },
    "651": {
      "block": "main_arc200_transfer_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "653": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "654": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "655": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "657": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "658": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "661": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0"
      ]
    },
    "664": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc200_transfer",
      "op": "callsub arc200_transfer",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "667": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "0x151f7c75"
      ]
    },
    "668": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%13#0"
      ]
    },
    "669": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "670": {
      "op": "log",
      "stack_out": []
    },
    "671": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "672": {
      "op": "return",
      "stack_out": []
    },
    "673": {
      "block": "main_arc1410_balance_of_partition_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "675": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "676": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "677": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "679": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "680": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "683": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "686": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_balance_of_partition",
      "op": "callsub arc1410_balance_of_partition",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "689": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0x151f7c75"
      ]
    },
    "690": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%7#0"
      ]
    },
    "691": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "692": {
      "op": "log",
      "stack_out": []
    },
    "693": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "694": {
      "op": "return",
      "stack_out": []
    },
    "695": {
      "block": "main_bare_routing@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "697": {
      "op": "bnz main_after_if_else@31",
      "stack_out": []
    },
    "700": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0"
      ]
    },
    "702": {
      "op": "!",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0"
      ]
    },
    "703": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "704": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "705": {
      "op": "return",
      "stack_out": []
    },
    "706": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_balance_of_partition",
      "params": {
        "holder#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "arc1410_balance_of_partition",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "709": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)"
      ]
    },
    "711": {
      "op": "frame_dig -1",
      "defined_out": [
        "holder#0 (copy)",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "713": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "714": {
      "op": "bytec_3 // \"p\"",
      "defined_out": [
        "\"p\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"p\""
      ]
    },
    "715": {
      "op": "swap",
      "stack_out": [
        "\"p\"",
        "key#0"
      ]
    },
    "716": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "717": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "718": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "719": {
      "retsub": true,
      "op": "retsub"
    },
    "720": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc200_transfer",
      "params": {
        "to#0": "bytes",
        "value#0": "bytes"
      },
      "block": "arc200_transfer",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "723": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "725": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "726": {
      "op": "frame_dig -2",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "tmp%0#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "to#0 (copy)"
      ]
    },
    "728": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "stack_out": [
        "tmp%0#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "729": {
      "op": "frame_dig -1",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "tmp%0#0",
        "to#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "value#0 (copy)"
      ]
    },
    "731": {
      "op": "bytec 11 // 0x0000",
      "defined_out": [
        "0x0000",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "tmp%0#0",
        "to#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "value#0 (copy)",
        "0x0000"
      ]
    },
    "733": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._transfer_partition",
      "op": "callsub _transfer_partition",
      "stack_out": []
    },
    "736": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "738": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%1#0",
        "to#0 (copy)"
      ]
    },
    "740": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "to#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "742": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._transfer",
      "op": "callsub _transfer",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "745": {
      "retsub": true,
      "op": "retsub"
    },
    "746": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_transfer_by_partition",
      "params": {
        "partition#0": "bytes",
        "to#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1410_transfer_by_partition",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "749": {
      "op": "txn Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "751": {
      "op": "frame_dig -3",
      "defined_out": [
        "sender#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "to#0 (copy)"
      ]
    },
    "753": {
      "op": "frame_dig -4",
      "defined_out": [
        "partition#0 (copy)",
        "sender#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "to#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "755": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._receiverPartition",
      "op": "callsub _receiverPartition",
      "defined_out": [
        "receiverPartition#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "receiverPartition#0"
      ]
    },
    "758": {
      "op": "swap",
      "stack_out": [
        "receiverPartition#0",
        "sender#0"
      ]
    },
    "759": {
      "op": "frame_dig -4",
      "stack_out": [
        "receiverPartition#0",
        "sender#0",
        "partition#0 (copy)"
      ]
    },
    "761": {
      "op": "frame_dig -3",
      "stack_out": [
        "receiverPartition#0",
        "sender#0",
        "partition#0 (copy)",
        "to#0 (copy)"
      ]
    },
    "763": {
      "op": "dig 3",
      "defined_out": [
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "sender#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "receiverPartition#0",
        "sender#0",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)"
      ]
    },
    "765": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "sender#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "receiverPartition#0",
        "sender#0",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "767": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "data#0 (copy)",
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "sender#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "receiverPartition#0",
        "sender#0",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)",
        "amount#0 (copy)",
        "data#0 (copy)"
      ]
    },
    "769": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._transfer_partition",
      "op": "callsub _transfer_partition",
      "stack_out": [
        "receiverPartition#0"
      ]
    },
    "772": {
      "retsub": true,
      "op": "retsub"
    },
    "773": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_partitions_of",
      "params": {
        "holder#0": "bytes",
        "page#0": "bytes"
      },
      "block": "arc1410_partitions_of",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "776": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)"
      ]
    },
    "778": {
      "op": "frame_dig -1",
      "defined_out": [
        "holder#0 (copy)",
        "page#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)",
        "page#0 (copy)"
      ]
    },
    "780": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "781": {
      "op": "bytec 4 // \"hp_a\"",
      "defined_out": [
        "\"hp_a\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"hp_a\""
      ]
    },
    "783": {
      "op": "swap",
      "stack_out": [
        "\"hp_a\"",
        "key#0"
      ]
    },
    "784": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "785": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "786": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "787": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "789": {
      "op": "bnz arc1410_partitions_of_after_if_else@2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "792": {
      "op": "bytec 11 // 0x0000",
      "defined_out": [
        "0x0000",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x0000"
      ]
    },
    "794": {
      "op": "swap"
    },
    "795": {
      "retsub": true,
      "op": "retsub"
    },
    "796": {
      "block": "arc1410_partitions_of_after_if_else@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "798": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "799": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "800": {
      "op": "swap"
    },
    "801": {
      "retsub": true,
      "op": "retsub"
    },
    "802": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator",
      "params": {
        "holder#0": "bytes",
        "operator#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "arc1410_is_operator",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "805": {
      "op": "intc_1 // 0",
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "806": {
      "op": "dupn 2",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "808": {
      "op": "frame_dig -2",
      "defined_out": [
        "operator#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "operator#0 (copy)"
      ]
    },
    "810": {
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "operator#0 (copy)",
        "holder#0 (copy)"
      ]
    },
    "812": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%0#0"
      ]
    },
    "813": {
      "op": "bz arc1410_is_operator_after_if_else@2",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "816": {
      "op": "bytec_2 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "0x80"
      ]
    },
    "817": {
      "op": "frame_bury 0"
    },
    "819": {
      "retsub": true,
      "op": "retsub"
    },
    "820": {
      "block": "arc1410_is_operator_after_if_else@2",
      "stack_in": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "holder#0 (copy)"
      ]
    },
    "822": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "holder#0 (copy)",
        "operator#0 (copy)"
      ]
    },
    "824": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "825": {
      "op": "dup",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "826": {
      "op": "frame_bury 0",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "828": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "830": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "specific#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "specific#0"
      ]
    },
    "831": {
      "op": "bytec 5 // \"op\"",
      "defined_out": [
        "\"op\"",
        "encoded_tuple_buffer%2#0",
        "specific#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "specific#0",
        "\"op\""
      ]
    },
    "833": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "\"op\"",
        "specific#0"
      ]
    },
    "834": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%1#0"
      ]
    },
    "835": {
      "op": "dup",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "836": {
      "op": "frame_bury 1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%1#0"
      ]
    },
    "838": {
      "op": "box_len",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "839": {
      "op": "bury 1",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_exists%0#0"
      ]
    },
    "841": {
      "op": "bz arc1410_is_operator_after_if_else@5",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "844": {
      "op": "frame_dig 1",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%1#0"
      ]
    },
    "846": {
      "op": "box_get",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "847": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%1#0"
      ]
    },
    "848": {
      "op": "btoi",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%3#0"
      ]
    },
    "849": {
      "op": "intc_0 // 1",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%3#0",
        "1"
      ]
    },
    "850": {
      "op": "==",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%4#0"
      ]
    },
    "851": {
      "op": "bz arc1410_is_operator_after_if_else@5",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "854": {
      "op": "bytec_2 // 0x80",
      "defined_out": [
        "0x80",
        "encoded_tuple_buffer%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "0x80"
      ]
    },
    "855": {
      "op": "frame_bury 0"
    },
    "857": {
      "retsub": true,
      "op": "retsub"
    },
    "858": {
      "block": "arc1410_is_operator_after_if_else@5",
      "stack_in": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "860": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "861": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "globalKey#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "globalKey#0"
      ]
    },
    "862": {
      "op": "bytec 5 // \"op\"",
      "defined_out": [
        "\"op\"",
        "encoded_tuple_buffer%2#0",
        "globalKey#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "globalKey#0",
        "\"op\""
      ]
    },
    "864": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "\"op\"",
        "globalKey#0"
      ]
    },
    "865": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "866": {
      "op": "dup",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "867": {
      "op": "frame_bury 2",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "869": {
      "op": "box_len",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "870": {
      "op": "bury 1",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_exists%2#0"
      ]
    },
    "872": {
      "op": "bz arc1410_is_operator_after_if_else@8",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "875": {
      "op": "frame_dig 2",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "877": {
      "op": "box_get",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "878": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%3#0"
      ]
    },
    "879": {
      "op": "btoi",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "880": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "encoded_tuple_buffer%2#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%7#0",
        "1"
      ]
    },
    "881": {
      "op": "==",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%8#0"
      ]
    },
    "882": {
      "op": "bz arc1410_is_operator_after_if_else@8",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "885": {
      "op": "bytec_2 // 0x80",
      "defined_out": [
        "0x80",
        "encoded_tuple_buffer%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "0x80"
      ]
    },
    "886": {
      "op": "frame_bury 0"
    },
    "888": {
      "retsub": true,
      "op": "retsub"
    },
    "889": {
      "block": "arc1410_is_operator_after_if_else@8",
      "stack_in": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "op": "bytec 8 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "0x00"
      ]
    },
    "891": {
      "op": "frame_bury 0"
    },
    "893": {
      "retsub": true,
      "op": "retsub"
    },
    "894": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_authorize_operator",
      "params": {
        "holder#0": "bytes",
        "operator#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "arc1410_authorize_operator",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "897": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "899": {
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "holder#0 (copy)"
      ]
    },
    "901": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "902": {
      "error": "Only holder can authorize",
      "op": "assert // Only holder can authorize",
      "stack_out": []
    },
    "903": {
      "op": "frame_dig -3",
      "stack_out": [
        "holder#0 (copy)"
      ]
    },
    "905": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ]
    },
    "907": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "908": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "910": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "911": {
      "op": "bytec 5 // \"op\"",
      "defined_out": [
        "\"op\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"op\""
      ]
    },
    "913": {
      "op": "swap",
      "stack_out": [
        "\"op\"",
        "key#0"
      ]
    },
    "914": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "915": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x01"
      ]
    },
    "918": {
      "op": "box_put",
      "stack_out": []
    },
    "919": {
      "retsub": true,
      "op": "retsub"
    },
    "920": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_revoke_operator",
      "params": {
        "holder#0": "bytes",
        "operator#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "arc1410_revoke_operator",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "923": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "925": {
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "holder#0 (copy)"
      ]
    },
    "927": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "928": {
      "error": "Only holder can revoke",
      "op": "assert // Only holder can revoke",
      "stack_out": []
    },
    "929": {
      "op": "frame_dig -3",
      "stack_out": [
        "holder#0 (copy)"
      ]
    },
    "931": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ]
    },
    "933": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "934": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "936": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "937": {
      "op": "bytec 5 // \"op\"",
      "defined_out": [
        "\"op\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"op\""
      ]
    },
    "939": {
      "op": "swap",
      "stack_out": [
        "\"op\"",
        "key#0"
      ]
    },
    "940": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "941": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "942": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "943": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "maybe_exists%0#0"
      ]
    },
    "945": {
      "op": "bz arc1410_revoke_operator_after_if_else@2",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "948": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "950": {
      "op": "box_del",
      "defined_out": [
        "tmp%2#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%2#0",
        "{box_del}"
      ]
    },
    "951": {
      "op": "pop",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "952": {
      "block": "arc1410_revoke_operator_after_if_else@2",
      "stack_in": [
        "tmp%2#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "953": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_operator_transfer_by_partition",
      "params": {
        "from#0": "bytes",
        "partition#0": "bytes",
        "to#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1410_operator_transfer_by_partition",
      "stack_in": [],
      "op": "proto 5 1"
    },
    "956": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "957": {
      "op": "txn Sender"
    },
    "959": {
      "op": "frame_dig -5"
    },
    "961": {
      "op": "txn Sender"
    },
    "963": {
      "op": "frame_dig -4",
      "defined_out": [
        "from#0 (copy)",
        "partition#0 (copy)",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "from#0 (copy)",
        "sender#0",
        "partition#0 (copy)"
      ]
    },
    "965": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator",
      "op": "callsub arc1410_is_operator",
      "defined_out": [
        "sender#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "tmp%0#0"
      ]
    },
    "968": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "tmp%0#0",
        "0"
      ]
    },
    "969": {
      "op": "getbit",
      "defined_out": [
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "tmp%1#0"
      ]
    },
    "970": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "tmp%1#0",
        "1"
      ]
    },
    "971": {
      "op": "==",
      "defined_out": [
        "authorized#0",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0"
      ]
    },
    "972": {
      "op": "dupn 2",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "authorized#0"
      ]
    },
    "974": {
      "op": "bnz arc1410_operator_transfer_by_partition_after_if_else@4",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "977": {
      "op": "frame_dig -5",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "from#0 (copy)"
      ]
    },
    "979": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "from#0 (copy)",
        "sender#0"
      ]
    },
    "981": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%2#0",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "982": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "984": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "pKey#0",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "pKey#0"
      ]
    },
    "985": {
      "op": "bytec 6 // \"opa\"",
      "defined_out": [
        "\"opa\"",
        "authorized#0",
        "authorized#9",
        "pKey#0",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "pKey#0",
        "\"opa\""
      ]
    },
    "987": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "\"opa\"",
        "pKey#0"
      ]
    },
    "988": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0"
      ]
    },
    "989": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "990": {
      "op": "frame_bury 0",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0"
      ]
    },
    "992": {
      "op": "box_len",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "993": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_exists%0#0"
      ]
    },
    "995": {
      "op": "bz arc1410_operator_transfer_by_partition_after_if_else@3",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "998": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0"
      ]
    },
    "1000": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "1001": {
      "op": "box_get",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "maybe_exists%1#0",
        "remaining#0",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "maybe_exists%1#0"
      ]
    },
    "1002": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0"
      ]
    },
    "1003": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "remaining#0",
        "remaining#0 (copy)",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "remaining#0 (copy)"
      ]
    },
    "1004": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "authorized#0",
        "authorized#9",
        "remaining#0",
        "remaining#0 (copy)",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "remaining#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "1006": {
      "op": "b>=",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "remaining#0",
        "sender#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "tmp%4#0"
      ]
    },
    "1007": {
      "error": "Portion allowance exceeded",
      "op": "assert // Portion allowance exceeded",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0"
      ]
    },
    "1008": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "authorized#0"
      ]
    },
    "1009": {
      "op": "frame_bury 2",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0"
      ]
    },
    "1011": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "amount#0 (copy)"
      ]
    },
    "1013": {
      "op": "b-",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0"
      ]
    },
    "1014": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "1015": {
      "op": "len",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "1016": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "1017": {
      "op": "<=",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "len_ok%0#0",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "1018": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0"
      ]
    },
    "1019": {
      "op": "intc_2 // 32",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "1020": {
      "op": "bzero",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "bzero%0#0",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "1021": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "arc4_encoded%0#0"
      ]
    },
    "1022": {
      "op": "box_put",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "1023": {
      "block": "arc1410_operator_transfer_by_partition_after_if_else@3",
      "stack_in": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "authorized#9"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "authorized#9"
      ]
    },
    "1025": {
      "op": "frame_bury 3",
      "defined_out": [
        "authorized#9"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "1027": {
      "block": "arc1410_operator_transfer_by_partition_after_if_else@4",
      "stack_in": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "authorized#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "authorized#0"
      ]
    },
    "1029": {
      "error": "Not authorized operator",
      "op": "assert // Not authorized operator",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "1030": {
      "op": "frame_dig -3",
      "defined_out": [
        "authorized#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "to#0 (copy)"
      ]
    },
    "1032": {
      "op": "frame_dig -4",
      "defined_out": [
        "authorized#0",
        "partition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "to#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "1034": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._receiverPartition",
      "op": "callsub _receiverPartition",
      "defined_out": [
        "authorized#0",
        "receiverPartition#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0"
      ]
    },
    "1037": {
      "op": "frame_dig -5",
      "defined_out": [
        "authorized#0",
        "from#0 (copy)",
        "receiverPartition#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)"
      ]
    },
    "1039": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "1041": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "to#0 (copy)"
      ]
    },
    "1043": {
      "op": "dig 3",
      "defined_out": [
        "authorized#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)"
      ]
    },
    "1045": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "authorized#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "1047": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "authorized#0",
        "data#0 (copy)",
        "from#0 (copy)",
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)",
        "amount#0 (copy)",
        "data#0 (copy)"
      ]
    },
    "1049": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._transfer_partition",
      "op": "callsub _transfer_partition",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0"
      ]
    },
    "1052": {
      "op": "frame_bury 0"
    },
    "1054": {
      "retsub": true,
      "op": "retsub"
    },
    "1055": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_can_transfer_by_partition",
      "params": {
        "from#0": "bytes",
        "partition#0": "bytes",
        "to#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1410_can_transfer_by_partition",
      "stack_in": [],
      "op": "proto 5 1"
    },
    "1058": {
      "op": "intc_1 // 0",
      "stack_out": [
        "senderAddr#0"
      ]
    },
    "1059": {
      "op": "dup",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0"
      ]
    },
    "1060": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0"
      ]
    },
    "1062": {
      "op": "dup",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10"
      ]
    },
    "1063": {
      "op": "frame_dig -5",
      "defined_out": [
        "from#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "from#0 (copy)"
      ]
    },
    "1065": {
      "op": "frame_dig -4",
      "defined_out": [
        "from#0 (copy)",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "from#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "1067": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "encoded_tuple_buffer%2#1"
      ]
    },
    "1068": {
      "op": "bytec_3 // \"p\"",
      "defined_out": [
        "\"p\"",
        "encoded_tuple_buffer%2#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "encoded_tuple_buffer%2#1",
        "\"p\""
      ]
    },
    "1069": {
      "op": "swap",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "\"p\"",
        "encoded_tuple_buffer%2#1"
      ]
    },
    "1070": {
      "op": "concat",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "1071": {
      "op": "dup",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%0#1"
      ]
    },
    "1072": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "1073": {
      "op": "bury 1",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_exists%0#0"
      ]
    },
    "1075": {
      "op": "bnz arc1410_can_transfer_by_partition_after_if_else@2",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "1078": {
      "op": "pushbytes base32(KAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKFAYLSORUXI2LPNYQG433UEBSXQ2LTORZQ)",
      "defined_out": [
        "KAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKFAYLSORUXI2LPNYQG433UEBSXQ2LTORZQ",
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "KAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKFAYLSORUXI2LPNYQG433UEBSXQ2LTORZQ"
      ]
    },
    "1137": {
      "op": "frame_bury 0"
    },
    "1139": {
      "retsub": true,
      "op": "retsub"
    },
    "1140": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@2",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%0#1"
      ]
    },
    "1142": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1143": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_value%0#0"
      ]
    },
    "1144": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_value%0#0",
        "amount#0 (copy)"
      ]
    },
    "1146": {
      "op": "b<",
      "defined_out": [
        "tmp%0#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%2#0"
      ]
    },
    "1147": {
      "op": "bz arc1410_can_transfer_by_partition_after_if_else@4",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "1150": {
      "op": "pushbytes base32(KIACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKES3TTOVTGM2LDNFSW45BAMJQWYYLOMNSQ)",
      "defined_out": [
        "KIACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKES3TTOVTGM2LDNFSW45BAMJQWYYLOMNSQ",
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "KIACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKES3TTOVTGM2LDNFSW45BAMJQWYYLOMNSQ"
      ]
    },
    "1209": {
      "op": "frame_bury 0"
    },
    "1211": {
      "retsub": true,
      "op": "retsub"
    },
    "1212": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@4",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "to#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "to#0 (copy)"
      ]
    },
    "1214": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "1215": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%3#0"
      ]
    },
    "1216": {
      "op": "bz arc1410_can_transfer_by_partition_after_if_else@6",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "1219": {
      "op": "pushbytes base32(K4ACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIES3TWMFWGSZBAOJSWGZLJOZSXE)",
      "defined_out": [
        "K4ACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIES3TWMFWGSZBAOJSWGZLJOZSXE"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "K4ACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIES3TWMFWGSZBAOJSWGZLJOZSXE"
      ]
    },
    "1274": {
      "op": "frame_bury 0"
    },
    "1276": {
      "retsub": true,
      "op": "retsub"
    },
    "1277": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@6",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "txn Sender"
    },
    "1279": {
      "op": "dup",
      "defined_out": [
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "senderAddr#0",
        "senderAddr#0"
      ]
    },
    "1280": {
      "op": "frame_bury 0",
      "defined_out": [
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "senderAddr#0"
      ]
    },
    "1282": {
      "op": "frame_dig -5",
      "defined_out": [
        "from#0 (copy)",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "senderAddr#0",
        "from#0 (copy)"
      ]
    },
    "1284": {
      "op": "!=",
      "defined_out": [
        "senderAddr#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%4#0"
      ]
    },
    "1285": {
      "op": "bz arc1410_can_transfer_by_partition_after_if_else@16",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "1288": {
      "op": "frame_dig -5",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "from#0 (copy)"
      ]
    },
    "1290": {
      "op": "frame_dig 0",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "from#0 (copy)",
        "senderAddr#0"
      ]
    },
    "1292": {
      "op": "frame_dig -4",
      "defined_out": [
        "from#0 (copy)",
        "partition#0 (copy)",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "from#0 (copy)",
        "senderAddr#0",
        "partition#0 (copy)"
      ]
    },
    "1294": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator",
      "op": "callsub arc1410_is_operator",
      "defined_out": [
        "senderAddr#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%5#0"
      ]
    },
    "1297": {
      "op": "intc_1 // 0",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%5#0",
        "0"
      ]
    },
    "1298": {
      "op": "getbit",
      "defined_out": [
        "senderAddr#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%6#0"
      ]
    },
    "1299": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "senderAddr#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%6#0",
        "1"
      ]
    },
    "1300": {
      "op": "==",
      "defined_out": [
        "authorized#0",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0"
      ]
    },
    "1301": {
      "op": "dup",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0",
        "authorized#0"
      ]
    },
    "1302": {
      "op": "frame_bury 2",
      "defined_out": [
        "authorized#0",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0"
      ]
    },
    "1304": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0",
        "authorized#10"
      ]
    },
    "1305": {
      "op": "frame_bury 3",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0"
      ]
    },
    "1307": {
      "op": "bnz arc1410_can_transfer_by_partition_after_if_else@13",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "1310": {
      "op": "frame_dig -5",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "from#0 (copy)"
      ]
    },
    "1312": {
      "op": "frame_dig 0",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "from#0 (copy)",
        "senderAddr#0"
      ]
    },
    "1314": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "encoded_tuple_buffer%20#0",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "encoded_tuple_buffer%20#0"
      ]
    },
    "1315": {
      "op": "frame_dig -4",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "encoded_tuple_buffer%20#0",
        "partition#0 (copy)"
      ]
    },
    "1317": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "pKey#0",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "pKey#0"
      ]
    },
    "1318": {
      "op": "bytec 6 // \"opa\"",
      "defined_out": [
        "\"opa\"",
        "authorized#0",
        "authorized#10",
        "pKey#0",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "pKey#0",
        "\"opa\""
      ]
    },
    "1320": {
      "op": "swap",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "\"opa\"",
        "pKey#0"
      ]
    },
    "1321": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "senderAddr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%7#0"
      ]
    },
    "1322": {
      "op": "dup",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%7#0",
        "tmp%7#0"
      ]
    },
    "1323": {
      "op": "frame_bury 1",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "senderAddr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%7#0"
      ]
    },
    "1325": {
      "op": "box_len",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "senderAddr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1326": {
      "op": "bury 1",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_exists%1#0"
      ]
    },
    "1328": {
      "op": "frame_dig 2",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_exists%1#0",
        "authorized#10"
      ]
    },
    "1330": {
      "op": "frame_bury 3",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_exists%1#0"
      ]
    },
    "1332": {
      "op": "bz arc1410_can_transfer_by_partition_after_if_else@13",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "1335": {
      "op": "frame_dig 1",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%7#0"
      ]
    },
    "1337": {
      "op": "box_get",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "maybe_exists%2#0",
        "remaining#0",
        "senderAddr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "remaining#0",
        "maybe_exists%2#0"
      ]
    },
    "1338": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "remaining#0"
      ]
    },
    "1339": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "authorized#0",
        "authorized#10",
        "remaining#0",
        "senderAddr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "remaining#0",
        "amount#0 (copy)"
      ]
    },
    "1341": {
      "op": "b>=",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "senderAddr#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%9#0"
      ]
    },
    "1342": {
      "op": "bz arc1410_can_transfer_by_partition_after_if_else@11",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "1345": {
      "op": "intc_0 // 1",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0"
      ]
    },
    "1346": {
      "op": "frame_bury 2",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "1348": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@11",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "authorized#10"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#10"
      ]
    },
    "1350": {
      "op": "frame_bury 3",
      "defined_out": [
        "authorized#10"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "1352": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@13",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "authorized#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0"
      ]
    },
    "1354": {
      "op": "bnz arc1410_can_transfer_by_partition_after_if_else@16",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "1357": {
      "op": "pushbytes base32(LAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALU64DFOJQXI33SEBXG65BAMF2XI2DPOJUXUZLE)",
      "defined_out": [
        "LAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALU64DFOJQXI33SEBXG65BAMF2XI2DPOJUXUZLE",
        "authorized#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "LAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALU64DFOJQXI33SEBXG65BAMF2XI2DPOJUXUZLE"
      ]
    },
    "1419": {
      "op": "frame_bury 0"
    },
    "1421": {
      "retsub": true,
      "op": "retsub"
    },
    "1422": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@16",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "to#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "to#0 (copy)"
      ]
    },
    "1424": {
      "op": "frame_dig -4",
      "defined_out": [
        "partition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "to#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "1426": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._receiverPartition",
      "op": "callsub _receiverPartition",
      "defined_out": [
        "receiverPartition#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "receiverPartition#0"
      ]
    },
    "1429": {
      "op": "pushbytes 0x510023",
      "defined_out": [
        "0x510023",
        "receiverPartition#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "receiverPartition#0",
        "0x510023"
      ]
    },
    "1434": {
      "op": "swap",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "0x510023",
        "receiverPartition#0"
      ]
    },
    "1435": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%30#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "encoded_tuple_buffer%30#0"
      ]
    },
    "1436": {
      "op": "pushbytes 0x000753756363657373",
      "defined_out": [
        "0x000753756363657373",
        "encoded_tuple_buffer%30#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "encoded_tuple_buffer%30#0",
        "0x000753756363657373"
      ]
    },
    "1447": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%31#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "encoded_tuple_buffer%31#0"
      ]
    },
    "1448": {
      "op": "frame_bury 0"
    },
    "1450": {
      "retsub": true,
      "op": "retsub"
    },
    "1451": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._receiverPartition",
      "params": {
        "receiver#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "_receiverPartition",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1454": {
      "op": "bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ"
    },
    "1455": {
      "op": "frame_dig -2"
    },
    "1457": {
      "op": "frame_dig -1",
      "defined_out": [
        "partition#0 (copy)",
        "receiver#0 (copy)",
        "receiverPartition#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "receiver#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "1459": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "receiverPartition#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1460": {
      "op": "bytec_3 // \"p\"",
      "defined_out": [
        "\"p\"",
        "encoded_tuple_buffer%2#0",
        "receiverPartition#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "encoded_tuple_buffer%2#0",
        "\"p\""
      ]
    },
    "1461": {
      "op": "swap",
      "stack_out": [
        "receiverPartition#0",
        "\"p\"",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1462": {
      "op": "concat",
      "defined_out": [
        "receiverPartition#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "tmp%0#0"
      ]
    },
    "1463": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "receiverPartition#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1464": {
      "op": "bury 1",
      "stack_out": [
        "receiverPartition#0",
        "maybe_exists%0#0"
      ]
    },
    "1466": {
      "op": "bz _receiverPartition_after_if_else@2",
      "stack_out": [
        "receiverPartition#0"
      ]
    },
    "1469": {
      "op": "frame_dig -1",
      "stack_out": [
        "receiverPartition#0",
        "receiverPartition#0"
      ]
    },
    "1471": {
      "op": "frame_bury 0",
      "stack_out": [
        "receiverPartition#0"
      ]
    },
    "1473": {
      "block": "_receiverPartition_after_if_else@2",
      "stack_in": [
        "receiverPartition#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "receiverPartition#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "receiverPartition#0"
      ]
    },
    "1475": {
      "op": "swap"
    },
    "1476": {
      "retsub": true,
      "op": "retsub"
    },
    "1477": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._transfer_partition",
      "params": {
        "from#0": "bytes",
        "fromPartition#0": "bytes",
        "to#0": "bytes",
        "toPartition#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "_transfer_partition",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "1480": {
      "op": "intc_1 // 0",
      "stack_out": [
        "a#0"
      ]
    },
    "1481": {
      "op": "dupn 6",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0"
      ]
    },
    "1483": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0"
      ]
    },
    "1485": {
      "op": "dupn 4",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1"
      ]
    },
    "1487": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "amount#0 (copy)"
      ]
    },
    "1489": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "amount#0 (copy)",
        "0x"
      ]
    },
    "1491": {
      "op": "b>",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%0#0"
      ]
    },
    "1492": {
      "error": "Invalid amount",
      "op": "assert // Invalid amount",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1"
      ]
    },
    "1493": {
      "op": "frame_dig -6",
      "defined_out": [
        "from#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "from#0 (copy)"
      ]
    },
    "1495": {
      "op": "frame_dig -5",
      "defined_out": [
        "from#0 (copy)",
        "fromPartition#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "from#0 (copy)",
        "fromPartition#0 (copy)"
      ]
    },
    "1497": {
      "op": "concat",
      "defined_out": [
        "fromKey#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "fromKey#0"
      ]
    },
    "1498": {
      "op": "bytec_3 // \"p\"",
      "defined_out": [
        "\"p\"",
        "fromKey#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "fromKey#0",
        "\"p\""
      ]
    },
    "1499": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "\"p\"",
        "fromKey#0"
      ]
    },
    "1500": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1501": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1502": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1503": {
      "op": "bury 1",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "1505": {
      "op": "bnz _transfer_partition_after_if_else@2",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1508": {
      "op": "frame_dig 12",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1510": {
      "op": "bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%1#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "1511": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1512": {
      "block": "_transfer_partition_after_if_else@2",
      "stack_in": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ],
      "op": "frame_dig 12",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1514": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1515": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1516": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "1517": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "1519": {
      "op": "b-",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "1520": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "1521": {
      "op": "len",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "1522": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "1523": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "1524": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "1525": {
      "op": "intc_2 // 32",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "1526": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "1527": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0",
        "bzero%0#0"
      ]
    },
    "1528": {
      "op": "frame_bury 1",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "1530": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%1#0",
        "arc4_encoded%0#0"
      ]
    },
    "1531": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1532": {
      "op": "frame_dig -6",
      "defined_out": [
        "bzero%0#0",
        "from#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "from#0 (copy)"
      ]
    },
    "1534": {
      "op": "frame_dig -4",
      "defined_out": [
        "bzero%0#0",
        "from#0 (copy)",
        "tmp%1#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "from#0 (copy)",
        "to#0 (copy)"
      ]
    },
    "1536": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%5#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1537": {
      "op": "frame_dig -5",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%5#0",
        "fromPartition#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "encoded_tuple_buffer%5#0",
        "fromPartition#0 (copy)"
      ]
    },
    "1539": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%6#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1540": {
      "op": "frame_dig -2",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "encoded_tuple_buffer%6#0",
        "amount#0 (copy)"
      ]
    },
    "1542": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%7#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1543": {
      "op": "pushbytes 0x0082",
      "defined_out": [
        "0x0082",
        "bzero%0#0",
        "encoded_tuple_buffer%7#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "encoded_tuple_buffer%7#0",
        "0x0082"
      ]
    },
    "1547": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%8#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "1548": {
      "op": "frame_dig -1",
      "defined_out": [
        "bzero%0#0",
        "data#0 (copy)",
        "encoded_tuple_buffer%8#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "encoded_tuple_buffer%8#0",
        "data#0 (copy)"
      ]
    },
    "1550": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%9#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "1551": {
      "op": "pushbytes 0x0002",
      "defined_out": [
        "0x0002",
        "bzero%0#0",
        "encoded_tuple_buffer%9#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "encoded_tuple_buffer%9#0",
        "0x0002"
      ]
    },
    "1555": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "0x0002",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "1556": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%12#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "1557": {
      "op": "pushbytes 0x206b7940 // method \"Transfer((address,address,address,uint256,byte[]))\"",
      "defined_out": [
        "Method(Transfer((address,address,address,uint256,byte[])))",
        "bzero%0#0",
        "encoded_tuple_buffer%12#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "encoded_tuple_buffer%12#0",
        "Method(Transfer((address,address,address,uint256,byte[])))"
      ]
    },
    "1563": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "Method(Transfer((address,address,address,uint256,byte[])))",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "1564": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "event%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "event%0#0"
      ]
    },
    "1565": {
      "op": "log",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1566": {
      "op": "frame_dig -3",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "toPartition#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "toPartition#0 (copy)"
      ]
    },
    "1568": {
      "op": "frame_dig -5",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "toPartition#0 (copy)",
        "fromPartition#0 (copy)"
      ]
    },
    "1570": {
      "op": "!=",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "1571": {
      "op": "bz _transfer_partition_after_if_else@4",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1574": {
      "op": "pushbytes \"hp_p\"",
      "defined_out": [
        "\"hp_p\"",
        "bzero%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "\"hp_p\""
      ]
    },
    "1580": {
      "op": "frame_dig -4",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "\"hp_p\"",
        "to#0 (copy)"
      ]
    },
    "1582": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "tmp%0#1",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%0#1"
      ]
    },
    "1583": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%0#1",
        "tmp%0#1"
      ]
    },
    "1584": {
      "op": "frame_bury 4",
      "defined_out": [
        "bzero%0#0",
        "tmp%0#1",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%0#1"
      ]
    },
    "1586": {
      "op": "box_len",
      "defined_out": [
        "bzero%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#1",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1587": {
      "op": "bury 1",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "1589": {
      "op": "bnz _transfer_partition_after_if_else@9",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1592": {
      "op": "frame_dig 4",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%0#1"
      ]
    },
    "1594": {
      "op": "bytec 12 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "bzero%0#0",
        "tmp%0#1",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%0#1",
        "0x0000000000000000"
      ]
    },
    "1596": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1597": {
      "block": "_transfer_partition_after_if_else@9",
      "stack_in": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%0#1"
      ]
    },
    "1599": {
      "op": "box_get",
      "defined_out": [
        "lastPage#0",
        "maybe_exists%1#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "lastPage#0",
        "maybe_exists%1#0"
      ]
    },
    "1600": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "maybe_exists%1#0",
        "lastPage#0"
      ]
    },
    "1601": {
      "op": "frame_bury 3",
      "defined_out": [
        "lastPage#0",
        "maybe_exists%1#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1603": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1604": {
      "op": "intc_1 // 0",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "found#0"
      ]
    },
    "1605": {
      "op": "frame_bury 8",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1607": {
      "op": "bytec 12 // 0x0000000000000000",
      "defined_out": [
        "curPage#0",
        "found#0",
        "lastPage#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "curPage#0"
      ]
    },
    "1609": {
      "op": "frame_bury 2",
      "defined_out": [
        "curPage#0",
        "found#0",
        "lastPage#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1611": {
      "block": "_transfer_partition_while_top@10",
      "stack_in": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "curPage#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "curPage#0"
      ]
    },
    "1613": {
      "op": "btoi",
      "defined_out": [
        "curPage#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%3#1"
      ]
    },
    "1614": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%3#1",
        "tmp%3#1"
      ]
    },
    "1615": {
      "op": "frame_bury 10",
      "defined_out": [
        "curPage#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%3#1"
      ]
    },
    "1617": {
      "op": "frame_dig 3",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%3#1",
        "lastPage#0"
      ]
    },
    "1619": {
      "op": "btoi",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#1",
        "tmp%4#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%3#1",
        "tmp%4#1"
      ]
    },
    "1620": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%4#1"
      ]
    },
    "1621": {
      "op": "frame_bury 11",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#1",
        "tmp%4#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%3#1",
        "tmp%4#1"
      ]
    },
    "1623": {
      "op": "<",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%5#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "1624": {
      "op": "bz _transfer_partition_block@23",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1627": {
      "op": "frame_dig -4",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#1",
        "tmp%4#1",
        "to#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "to#0 (copy)"
      ]
    },
    "1629": {
      "op": "frame_dig 2",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "to#0 (copy)",
        "curPage#0"
      ]
    },
    "1631": {
      "op": "concat",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "paginatedKey#0",
        "tmp%3#1",
        "tmp%4#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "paginatedKey#0"
      ]
    },
    "1632": {
      "op": "bytec 4 // \"hp_a\"",
      "defined_out": [
        "\"hp_a\"",
        "curPage#0",
        "lastPage#0",
        "paginatedKey#0",
        "tmp%3#1",
        "tmp%4#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "paginatedKey#0",
        "\"hp_a\""
      ]
    },
    "1634": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "\"hp_a\"",
        "paginatedKey#0"
      ]
    },
    "1635": {
      "op": "concat",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "1636": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "1637": {
      "op": "frame_bury 6",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "1639": {
      "op": "box_len",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1640": {
      "op": "bury 1",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "maybe_exists%2#0"
      ]
    },
    "1642": {
      "op": "bnz _transfer_partition_after_if_else@13",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1645": {
      "op": "bytec 9 // 0x0001",
      "defined_out": [
        "0x0001",
        "curPage#0",
        "lastPage#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "0x0001"
      ]
    },
    "1647": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x0001",
        "curPage#0",
        "lastPage#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%6#0",
        "toPartition#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "0x0001",
        "toPartition#0 (copy)"
      ]
    },
    "1649": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "concat_result%0#0"
      ]
    },
    "1650": {
      "op": "frame_dig 6",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "concat_result%0#0",
        "tmp%6#0"
      ]
    },
    "1652": {
      "op": "dup",
      "defined_out": [
        "concat_result%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "concat_result%0#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "1653": {
      "op": "box_del",
      "defined_out": [
        "concat_result%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%6#0",
        "{box_del}"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "concat_result%0#0",
        "tmp%6#0",
        "{box_del}"
      ]
    },
    "1654": {
      "op": "pop",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "concat_result%0#0",
        "tmp%6#0"
      ]
    },
    "1655": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%6#0",
        "concat_result%0#0"
      ]
    },
    "1656": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1657": {
      "block": "_transfer_partition_after_if_else@13",
      "stack_in": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ],
      "op": "frame_dig 6",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "1659": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "a#0",
        "maybe_exists%3#0"
      ]
    },
    "1660": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "maybe_exists%3#0",
        "a#0"
      ]
    },
    "1661": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "maybe_exists%3#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1662": {
      "op": "cover 2",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "a#0",
        "maybe_exists%3#0",
        "a#0"
      ]
    },
    "1664": {
      "op": "frame_bury 0",
      "defined_out": [
        "a#0",
        "maybe_exists%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "a#0",
        "maybe_exists%3#0"
      ]
    },
    "1666": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "a#0"
      ]
    },
    "1667": {
      "op": "intc_1 // 0",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "a#0",
        "0"
      ]
    },
    "1668": {
      "op": "extract_uint16",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "array_length%0#0"
      ]
    },
    "1669": {
      "op": "frame_bury 7",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1671": {
      "op": "intc_1 // 0",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "item_index_internal%0#0"
      ]
    },
    "1672": {
      "op": "frame_bury 9",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1674": {
      "block": "_transfer_partition_for_header@14",
      "stack_in": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ],
      "op": "frame_dig 9",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "item_index_internal%0#0"
      ]
    },
    "1676": {
      "op": "frame_dig 7",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "item_index_internal%0#0",
        "array_length%0#0"
      ]
    },
    "1678": {
      "op": "<",
      "defined_out": [
        "array_length%0#0",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "continue_looping%0#0"
      ]
    },
    "1679": {
      "op": "bz _transfer_partition_after_for@18",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1682": {
      "op": "frame_dig 0",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "a#0"
      ]
    },
    "1684": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1687": {
      "op": "frame_dig 9",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1689": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "a#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0",
        "32"
      ]
    },
    "1690": {
      "op": "*",
      "defined_out": [
        "a#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "1691": {
      "op": "intc_2 // 32",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "32"
      ]
    },
    "1692": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "v#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "v#0"
      ]
    },
    "1693": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "toPartition#0 (copy)",
        "v#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "v#0",
        "toPartition#0 (copy)"
      ]
    },
    "1695": {
      "op": "==",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "1696": {
      "op": "bz _transfer_partition_after_if_else@17",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1699": {
      "op": "intc_0 // 1",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%9#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%9#1"
      ]
    },
    "1700": {
      "block": "_transfer_partition_after_inlined_smart_contracts/security_token/arc1410.algo.ts::Arc1410.containsAddress@19",
      "stack_in": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%9#1"
      ],
      "op": "bz _transfer_partition_after_if_else@21",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1703": {
      "op": "intc_0 // 1",
      "defined_out": [
        "found#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "found#0"
      ]
    },
    "1704": {
      "op": "frame_bury 8",
      "defined_out": [
        "found#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1706": {
      "block": "_transfer_partition_block@23",
      "stack_in": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ],
      "op": "frame_dig 8",
      "defined_out": [
        "found#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "found#0"
      ]
    },
    "1708": {
      "op": "bnz _transfer_partition_after_if_else@4",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1711": {
      "op": "frame_dig -4",
      "defined_out": [
        "found#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "to#0 (copy)"
      ]
    },
    "1713": {
      "op": "frame_dig 3",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "to#0 (copy)",
        "lastPage#0"
      ]
    },
    "1715": {
      "op": "concat",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "paginatedKey\u2081#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "paginatedKey\u2081#0"
      ]
    },
    "1716": {
      "op": "bytec 4 // \"hp_a\"",
      "defined_out": [
        "\"hp_a\"",
        "found#0",
        "lastPage#0",
        "paginatedKey\u2081#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "paginatedKey\u2081#0",
        "\"hp_a\""
      ]
    },
    "1718": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "\"hp_a\"",
        "paginatedKey\u2081#0"
      ]
    },
    "1719": {
      "op": "concat",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%11#0"
      ]
    },
    "1720": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%11#0"
      ]
    },
    "1721": {
      "op": "frame_bury 5",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%11#0"
      ]
    },
    "1723": {
      "op": "box_get",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1724": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "maybe_value%4#0"
      ]
    },
    "1725": {
      "op": "intc_1 // 0",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "maybe_value%4#0",
        "0"
      ]
    },
    "1726": {
      "op": "extract_uint16",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "to_encode%1#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "to_encode%1#1"
      ]
    },
    "1727": {
      "op": "itob",
      "defined_out": [
        "found#0",
        "itemsCount#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "itemsCount#0"
      ]
    },
    "1728": {
      "op": "btoi",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%12#0"
      ]
    },
    "1729": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%12#0",
        "10"
      ]
    },
    "1731": {
      "op": "<",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%13#0"
      ]
    },
    "1732": {
      "op": "bz _transfer_partition_else_body@26",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1735": {
      "op": "frame_dig 5",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%11#0"
      ]
    },
    "1737": {
      "op": "dup",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ]
    },
    "1738": {
      "op": "box_get",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%11#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1739": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%11#0",
        "maybe_value%5#0"
      ]
    },
    "1740": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%1#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%11#0",
        "expr_value_trimmed%1#0"
      ]
    },
    "1743": {
      "op": "bytec 9 // 0x0001",
      "defined_out": [
        "0x0001",
        "expr_value_trimmed%1#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%11#0",
        "expr_value_trimmed%1#0",
        "0x0001"
      ]
    },
    "1745": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x0001",
        "expr_value_trimmed%1#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "toPartition#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%11#0",
        "expr_value_trimmed%1#0",
        "0x0001",
        "toPartition#0 (copy)"
      ]
    },
    "1747": {
      "op": "concat",
      "defined_out": [
        "concat_result%1#0",
        "expr_value_trimmed%1#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%11#0",
        "expr_value_trimmed%1#0",
        "concat_result%1#0"
      ]
    },
    "1748": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%1#0",
        "expr_value_trimmed%3#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%11#0",
        "expr_value_trimmed%1#0",
        "expr_value_trimmed%3#0"
      ]
    },
    "1751": {
      "op": "concat",
      "defined_out": [
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%11#0",
        "concatenated%2#0"
      ]
    },
    "1752": {
      "op": "dup",
      "defined_out": [
        "concatenated%2#0",
        "concatenated%2#0 (copy)",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%11#0",
        "concatenated%2#0",
        "concatenated%2#0 (copy)"
      ]
    },
    "1753": {
      "op": "len",
      "defined_out": [
        "byte_len%2#0",
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%11#0",
        "concatenated%2#0",
        "byte_len%2#0"
      ]
    },
    "1754": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "byte_len%2#0",
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%11#0",
        "concatenated%2#0",
        "byte_len%2#0",
        "32"
      ]
    },
    "1755": {
      "op": "/",
      "defined_out": [
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "len_%2#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%11#0",
        "concatenated%2#0",
        "len_%2#0"
      ]
    },
    "1756": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%11#0",
        "concatenated%2#0",
        "as_bytes%2#0"
      ]
    },
    "1757": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "len_16_bit%2#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%11#0",
        "concatenated%2#0",
        "len_16_bit%2#0"
      ]
    },
    "1760": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%11#0",
        "len_16_bit%2#0",
        "concatenated%2#0"
      ]
    },
    "1761": {
      "op": "concat",
      "defined_out": [
        "concat_result%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%11#0",
        "concat_result%2#0"
      ]
    },
    "1762": {
      "op": "dig 1",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%11#0",
        "concat_result%2#0",
        "tmp%11#0 (copy)"
      ]
    },
    "1764": {
      "op": "box_del",
      "defined_out": [
        "concat_result%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "{box_del}"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%11#0",
        "concat_result%2#0",
        "{box_del}"
      ]
    },
    "1765": {
      "op": "pop",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%11#0",
        "concat_result%2#0"
      ]
    },
    "1766": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1767": {
      "block": "_transfer_partition_after_if_else@4",
      "stack_in": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ],
      "op": "frame_dig -4",
      "defined_out": [
        "to#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "to#0 (copy)"
      ]
    },
    "1769": {
      "op": "frame_dig -3",
      "defined_out": [
        "to#0 (copy)",
        "toPartition#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "to#0 (copy)",
        "toPartition#0 (copy)"
      ]
    },
    "1771": {
      "op": "concat",
      "defined_out": [
        "toKey#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "toKey#0"
      ]
    },
    "1772": {
      "op": "bytec_3 // \"p\"",
      "defined_out": [
        "\"p\"",
        "toKey#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "toKey#0",
        "\"p\""
      ]
    },
    "1773": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "\"p\"",
        "toKey#0"
      ]
    },
    "1774": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "1775": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "1776": {
      "op": "frame_bury 6",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "1778": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1779": {
      "op": "bury 1",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "maybe_exists%2#0"
      ]
    },
    "1781": {
      "op": "bnz _transfer_partition_after_if_else@6",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1784": {
      "op": "frame_dig 6",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "1786": {
      "op": "bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%6#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "1787": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1788": {
      "block": "_transfer_partition_after_if_else@6",
      "stack_in": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ],
      "op": "frame_dig 6",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "1790": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "1791": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%6#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1792": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%6#0",
        "maybe_value%3#0"
      ]
    },
    "1793": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%6#0",
        "maybe_value%3#0",
        "amount#0 (copy)"
      ]
    },
    "1795": {
      "op": "b+",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0"
      ]
    },
    "1796": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "1797": {
      "op": "len",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "1798": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "1799": {
      "op": "<=",
      "defined_out": [
        "len_ok%1#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "1800": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0"
      ]
    },
    "1801": {
      "op": "frame_dig 1",
      "defined_out": [
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%0#0"
      ]
    },
    "1803": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%6#0",
        "arc4_encoded%1#0"
      ]
    },
    "1804": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1805": {
      "retsub": true,
      "op": "retsub"
    },
    "1806": {
      "block": "_transfer_partition_else_body@26",
      "stack_in": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ],
      "op": "frame_dig 11",
      "defined_out": [
        "tmp%4#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%4#1"
      ]
    },
    "1808": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%4#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%4#1",
        "1"
      ]
    },
    "1809": {
      "op": "+",
      "defined_out": [
        "tmp%4#1",
        "to_encode%2#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "to_encode%2#0"
      ]
    },
    "1810": {
      "op": "itob",
      "defined_out": [
        "newLastPage#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "newLastPage#0"
      ]
    },
    "1811": {
      "op": "frame_dig 4",
      "defined_out": [
        "newLastPage#0",
        "tmp%0#1",
        "tmp%4#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "newLastPage#0",
        "tmp%0#1"
      ]
    },
    "1813": {
      "op": "dig 1",
      "defined_out": [
        "newLastPage#0",
        "newLastPage#0 (copy)",
        "tmp%0#1",
        "tmp%4#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "newLastPage#0",
        "tmp%0#1",
        "newLastPage#0 (copy)"
      ]
    },
    "1815": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "newLastPage#0"
      ]
    },
    "1816": {
      "op": "frame_dig -4",
      "defined_out": [
        "newLastPage#0",
        "tmp%0#1",
        "tmp%4#1",
        "to#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "newLastPage#0",
        "to#0 (copy)"
      ]
    },
    "1818": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "to#0 (copy)",
        "newLastPage#0"
      ]
    },
    "1819": {
      "op": "concat",
      "defined_out": [
        "newPaginatedKey#0",
        "tmp%0#1",
        "tmp%4#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "newPaginatedKey#0"
      ]
    },
    "1820": {
      "op": "bytec 9 // 0x0001",
      "defined_out": [
        "0x0001",
        "newPaginatedKey#0",
        "tmp%0#1",
        "tmp%4#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "newPaginatedKey#0",
        "0x0001"
      ]
    },
    "1822": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x0001",
        "newPaginatedKey#0",
        "tmp%0#1",
        "tmp%4#1",
        "toPartition#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "newPaginatedKey#0",
        "0x0001",
        "toPartition#0 (copy)"
      ]
    },
    "1824": {
      "op": "concat",
      "defined_out": [
        "concat_result%3#0",
        "newPaginatedKey#0",
        "tmp%0#1",
        "tmp%4#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "newPaginatedKey#0",
        "concat_result%3#0"
      ]
    },
    "1825": {
      "op": "bytec 4 // \"hp_a\"",
      "defined_out": [
        "\"hp_a\"",
        "concat_result%3#0",
        "newPaginatedKey#0",
        "tmp%0#1",
        "tmp%4#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "newPaginatedKey#0",
        "concat_result%3#0",
        "\"hp_a\""
      ]
    },
    "1827": {
      "op": "uncover 2",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "concat_result%3#0",
        "\"hp_a\"",
        "newPaginatedKey#0"
      ]
    },
    "1829": {
      "op": "concat",
      "defined_out": [
        "concat_result%3#0",
        "tmp%0#1",
        "tmp%18#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "concat_result%3#0",
        "tmp%18#0"
      ]
    },
    "1830": {
      "op": "dup",
      "defined_out": [
        "concat_result%3#0",
        "tmp%0#1",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "tmp%4#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "concat_result%3#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "1831": {
      "op": "box_del",
      "defined_out": [
        "concat_result%3#0",
        "tmp%0#1",
        "tmp%18#0",
        "tmp%4#1",
        "{box_del}"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "concat_result%3#0",
        "tmp%18#0",
        "{box_del}"
      ]
    },
    "1832": {
      "op": "pop",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "concat_result%3#0",
        "tmp%18#0"
      ]
    },
    "1833": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%18#0",
        "concat_result%3#0"
      ]
    },
    "1834": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1835": {
      "op": "b _transfer_partition_after_if_else@4"
    },
    "1838": {
      "block": "_transfer_partition_after_if_else@21",
      "stack_in": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ],
      "op": "frame_dig 10",
      "defined_out": [
        "tmp%3#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%3#1"
      ]
    },
    "1840": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%3#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%3#1",
        "1"
      ]
    },
    "1841": {
      "op": "+",
      "defined_out": [
        "tmp%3#1",
        "to_encode%0#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "to_encode%0#1"
      ]
    },
    "1842": {
      "op": "itob",
      "defined_out": [
        "curPage#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "curPage#0"
      ]
    },
    "1843": {
      "op": "frame_bury 2",
      "defined_out": [
        "curPage#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1845": {
      "op": "b _transfer_partition_while_top@10"
    },
    "1848": {
      "block": "_transfer_partition_after_if_else@17",
      "stack_in": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ],
      "op": "frame_dig 9",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "item_index_internal%0#0"
      ]
    },
    "1850": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "1851": {
      "op": "+",
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "item_index_internal%0#0"
      ]
    },
    "1852": {
      "op": "frame_bury 9",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ]
    },
    "1854": {
      "op": "b _transfer_partition_for_header@14"
    },
    "1857": {
      "block": "_transfer_partition_after_for@18",
      "stack_in": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%9#1"
      ],
      "stack_out": [
        "a#0",
        "bzero%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%0#1",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#1",
        "tmp%4#1",
        "tmp%1#0",
        "tmp%9#1"
      ]
    },
    "1858": {
      "op": "b _transfer_partition_after_inlined_smart_contracts/security_token/arc1410.algo.ts::Arc1410.containsAddress@19"
    },
    "1861": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_authorize_operator_by_portion",
      "params": {
        "holder#0": "bytes",
        "operator#0": "bytes",
        "partition#0": "bytes",
        "amount#0": "bytes"
      },
      "block": "arc1410_authorize_operator_by_portion",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "1864": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1866": {
      "op": "frame_dig -4",
      "defined_out": [
        "holder#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "holder#0 (copy)"
      ]
    },
    "1868": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1869": {
      "error": "Only holder can authorize portion",
      "op": "assert // Only holder can authorize portion",
      "stack_out": []
    },
    "1870": {
      "op": "frame_dig -4",
      "stack_out": [
        "holder#0 (copy)"
      ]
    },
    "1872": {
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ]
    },
    "1874": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1875": {
      "op": "frame_dig -2",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "1877": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "1878": {
      "op": "bytec 6 // \"opa\"",
      "defined_out": [
        "\"opa\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"opa\""
      ]
    },
    "1880": {
      "op": "swap",
      "stack_out": [
        "\"opa\"",
        "key#0"
      ]
    },
    "1881": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1882": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "amount#0 (copy)"
      ]
    },
    "1884": {
      "op": "box_put",
      "stack_out": []
    },
    "1885": {
      "retsub": true,
      "op": "retsub"
    },
    "1886": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator_by_portion",
      "params": {
        "holder#0": "bytes",
        "operator#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "arc1410_is_operator_by_portion",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1889": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1890": {
      "op": "frame_dig -2",
      "defined_out": [
        "operator#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "operator#0 (copy)"
      ]
    },
    "1892": {
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "operator#0 (copy)",
        "holder#0 (copy)"
      ]
    },
    "1894": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "1895": {
      "op": "bz arc1410_is_operator_by_portion_after_if_else@2",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1898": {
      "op": "bytec_2 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x80"
      ]
    },
    "1899": {
      "op": "swap"
    },
    "1900": {
      "retsub": true,
      "op": "retsub"
    },
    "1901": {
      "block": "arc1410_is_operator_by_portion_after_if_else@2",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "holder#0 (copy)"
      ]
    },
    "1903": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "holder#0 (copy)",
        "operator#0 (copy)"
      ]
    },
    "1905": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1906": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "1908": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "key#0"
      ]
    },
    "1909": {
      "op": "bytec 6 // \"opa\"",
      "defined_out": [
        "\"opa\"",
        "key#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "key#0",
        "\"opa\""
      ]
    },
    "1911": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "\"opa\"",
        "key#0"
      ]
    },
    "1912": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1913": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1914": {
      "op": "frame_bury 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1916": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1917": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "1919": {
      "op": "bnz arc1410_is_operator_by_portion_after_if_else@4",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1922": {
      "op": "bytec 8 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x00"
      ]
    },
    "1924": {
      "op": "swap"
    },
    "1925": {
      "retsub": true,
      "op": "retsub"
    },
    "1926": {
      "block": "arc1410_is_operator_by_portion_after_if_else@4",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1928": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1929": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "1930": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "0x"
      ]
    },
    "1932": {
      "op": "b>",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "1933": {
      "op": "bytec 8 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "to_encode%0#0",
        "0x00"
      ]
    },
    "1935": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "1936": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "1938": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_bool%0#0"
      ]
    },
    "1939": {
      "op": "swap"
    },
    "1940": {
      "retsub": true,
      "op": "retsub"
    },
    "1941": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.bootstrap",
      "params": {
        "name#0": "bytes",
        "symbol#0": "bytes",
        "decimals#0": "bytes",
        "totalSupply#0": "bytes"
      },
      "block": "bootstrap",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "1944": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1946": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1948": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1949": {
      "error": "Only deployer of this smart contract can call bootstrap method",
      "op": "assert // Only deployer of this smart contract can call bootstrap method",
      "stack_out": []
    },
    "1950": {
      "op": "frame_dig -4",
      "defined_out": [
        "name#0 (copy)"
      ],
      "stack_out": [
        "name#0 (copy)"
      ]
    },
    "1952": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1955": {
      "op": "len",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1956": {
      "op": "dup",
      "defined_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "1957": {
      "error": "Name of the asset must be longer or equal to 1 character",
      "op": "assert // Name of the asset must be longer or equal to 1 character",
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1958": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "32"
      ]
    },
    "1959": {
      "op": "<=",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1960": {
      "error": "Name of the asset must be shorter or equal to 32 characters",
      "op": "assert // Name of the asset must be shorter or equal to 32 characters",
      "stack_out": []
    },
    "1961": {
      "op": "frame_dig -3",
      "defined_out": [
        "symbol#0 (copy)"
      ],
      "stack_out": [
        "symbol#0 (copy)"
      ]
    },
    "1963": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1966": {
      "op": "len",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1967": {
      "op": "dup",
      "defined_out": [
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "1968": {
      "error": "Symbol of the asset must be longer or equal to 1 character",
      "op": "assert // Symbol of the asset must be longer or equal to 1 character",
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1969": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "8"
      ]
    },
    "1970": {
      "op": "<=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1971": {
      "error": "Symbol of the asset must be shorter or equal to 8 characters",
      "op": "assert // Symbol of the asset must be shorter or equal to 8 characters",
      "stack_out": []
    },
    "1972": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1973": {
      "op": "bytec 10 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"t\""
      ]
    },
    "1975": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1976": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1978": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1979": {
      "error": "This method can be called only once",
      "op": "assert // This method can be called only once",
      "stack_out": []
    },
    "1980": {
      "op": "pushbytes \"n\"",
      "defined_out": [
        "\"n\""
      ],
      "stack_out": [
        "\"n\""
      ]
    },
    "1983": {
      "op": "frame_dig -4",
      "stack_out": [
        "\"n\"",
        "name#0 (copy)"
      ]
    },
    "1985": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1986": {
      "op": "pushbytes \"s\"",
      "defined_out": [
        "\"s\""
      ],
      "stack_out": [
        "\"s\""
      ]
    },
    "1989": {
      "op": "frame_dig -3",
      "stack_out": [
        "\"s\"",
        "symbol#0 (copy)"
      ]
    },
    "1991": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1992": {
      "op": "bytec 10 // \"t\"",
      "stack_out": [
        "\"t\""
      ]
    },
    "1994": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"t\"",
        "totalSupply#0 (copy)"
      ],
      "stack_out": [
        "\"t\"",
        "totalSupply#0 (copy)"
      ]
    },
    "1996": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1997": {
      "op": "pushbytes \"d\"",
      "defined_out": [
        "\"d\""
      ],
      "stack_out": [
        "\"d\""
      ]
    },
    "2000": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"d\"",
        "decimals#0 (copy)"
      ],
      "stack_out": [
        "\"d\"",
        "decimals#0 (copy)"
      ]
    },
    "2002": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2003": {
      "op": "txn Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "2005": {
      "op": "bytec 7 // \"b\"",
      "defined_out": [
        "\"b\"",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "\"b\""
      ]
    },
    "2007": {
      "op": "dig 1",
      "defined_out": [
        "\"b\"",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "\"b\"",
        "sender#0 (copy)"
      ]
    },
    "2009": {
      "op": "concat",
      "defined_out": [
        "sender#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%16#0"
      ]
    },
    "2010": {
      "op": "frame_dig -1",
      "stack_out": [
        "sender#0",
        "tmp%16#0",
        "totalSupply#0 (copy)"
      ]
    },
    "2012": {
      "op": "box_put",
      "stack_out": [
        "sender#0"
      ]
    },
    "2013": {
      "op": "global ZeroAddress",
      "defined_out": [
        "sender#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%17#0"
      ]
    },
    "2015": {
      "op": "swap",
      "stack_out": [
        "tmp%17#0",
        "sender#0"
      ]
    },
    "2016": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2017": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "totalSupply#0 (copy)"
      ]
    },
    "2019": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2020": {
      "op": "bytec 13 // method \"arc200_Transfer(address,address,uint256)\"",
      "defined_out": [
        "Method(arc200_Transfer(address,address,uint256))",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "Method(arc200_Transfer(address,address,uint256))"
      ]
    },
    "2022": {
      "op": "swap",
      "stack_out": [
        "Method(arc200_Transfer(address,address,uint256))",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2023": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "2024": {
      "op": "log",
      "stack_out": []
    },
    "2025": {
      "op": "bytec_2 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "0x80"
      ]
    },
    "2026": {
      "retsub": true,
      "op": "retsub"
    },
    "2027": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_name",
      "params": {},
      "block": "arc200_name",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2028": {
      "op": "pushbytes \"n\"",
      "defined_out": [
        "\"n\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"n\""
      ]
    },
    "2031": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2032": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2033": {
      "op": "extract 2 0",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2036": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "2037": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "2038": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0",
        "32"
      ]
    },
    "2039": {
      "op": "==",
      "defined_out": [
        "lengths_equal%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "lengths_equal%0#0"
      ]
    },
    "2040": {
      "error": "invalid size",
      "op": "assert // invalid size",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2041": {
      "retsub": true,
      "op": "retsub"
    },
    "2042": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_symbol",
      "params": {},
      "block": "arc200_symbol",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2043": {
      "op": "pushbytes \"s\"",
      "defined_out": [
        "\"s\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"s\""
      ]
    },
    "2046": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2047": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2048": {
      "op": "extract 2 0",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2051": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "2052": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "2053": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0",
        "8"
      ]
    },
    "2054": {
      "op": "==",
      "defined_out": [
        "lengths_equal%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "lengths_equal%0#0"
      ]
    },
    "2055": {
      "error": "invalid size",
      "op": "assert // invalid size",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2056": {
      "retsub": true,
      "op": "retsub"
    },
    "2057": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_decimals",
      "params": {},
      "block": "arc200_decimals",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2058": {
      "op": "pushbytes \"d\"",
      "defined_out": [
        "\"d\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"d\""
      ]
    },
    "2061": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2062": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2063": {
      "retsub": true,
      "op": "retsub"
    },
    "2064": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_totalSupply",
      "params": {},
      "block": "arc200_totalSupply",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2065": {
      "op": "bytec 10 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"t\""
      ]
    },
    "2067": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2068": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2069": {
      "retsub": true,
      "op": "retsub"
    },
    "2070": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_balanceOf",
      "params": {
        "owner#0": "bytes"
      },
      "block": "arc200_balanceOf",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2073": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "2075": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "op": "callsub _balanceOf",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2078": {
      "retsub": true,
      "op": "retsub"
    },
    "2079": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_transferFrom",
      "params": {
        "from#0": "bytes",
        "to#0": "bytes",
        "value#0": "bytes"
      },
      "block": "arc200_transferFrom",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "2082": {
      "op": "txn Sender",
      "defined_out": [
        "spender#0"
      ],
      "stack_out": [
        "spender#0"
      ]
    },
    "2084": {
      "op": "frame_dig -3",
      "defined_out": [
        "from#0 (copy)",
        "spender#0"
      ],
      "stack_out": [
        "spender#0",
        "from#0 (copy)"
      ]
    },
    "2086": {
      "op": "dig 1",
      "defined_out": [
        "from#0 (copy)",
        "spender#0",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "spender#0",
        "from#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "2088": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._allowance",
      "op": "callsub _allowance",
      "defined_out": [
        "spender#0",
        "spender_allowance#0"
      ],
      "stack_out": [
        "spender#0",
        "spender_allowance#0"
      ]
    },
    "2091": {
      "op": "dup",
      "defined_out": [
        "spender#0",
        "spender_allowance#0",
        "spender_allowance#0 (copy)"
      ],
      "stack_out": [
        "spender#0",
        "spender_allowance#0",
        "spender_allowance#0 (copy)"
      ]
    },
    "2092": {
      "op": "frame_dig -1",
      "defined_out": [
        "spender#0",
        "spender_allowance#0",
        "spender_allowance#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "spender#0",
        "spender_allowance#0",
        "spender_allowance#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "2094": {
      "op": "b>=",
      "defined_out": [
        "spender#0",
        "spender_allowance#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "spender#0",
        "spender_allowance#0",
        "tmp%0#0"
      ]
    },
    "2095": {
      "error": "insufficient approval",
      "op": "assert // insufficient approval",
      "stack_out": [
        "spender#0",
        "spender_allowance#0"
      ]
    },
    "2096": {
      "op": "frame_dig -1",
      "stack_out": [
        "spender#0",
        "spender_allowance#0",
        "value#0 (copy)"
      ]
    },
    "2098": {
      "op": "b-",
      "defined_out": [
        "spender#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0"
      ]
    },
    "2099": {
      "op": "dup",
      "defined_out": [
        "spender#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "2100": {
      "op": "len",
      "defined_out": [
        "spender#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "2101": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "spender#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "2102": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "spender#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "2103": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "spender#0",
        "to_encode%0#0"
      ]
    },
    "2104": {
      "op": "intc_2 // 32",
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "2105": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "spender#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "2106": {
      "op": "b|",
      "defined_out": [
        "new_spender_allowance#0",
        "spender#0"
      ],
      "stack_out": [
        "spender#0",
        "new_spender_allowance#0"
      ]
    },
    "2107": {
      "op": "frame_dig -3",
      "stack_out": [
        "spender#0",
        "new_spender_allowance#0",
        "from#0 (copy)"
      ]
    },
    "2109": {
      "op": "cover 2",
      "stack_out": [
        "from#0 (copy)",
        "spender#0",
        "new_spender_allowance#0"
      ]
    },
    "2111": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._approve",
      "op": "callsub _approve",
      "defined_out": [
        "{_approve}"
      ],
      "stack_out": [
        "{_approve}"
      ]
    },
    "2114": {
      "op": "pop",
      "stack_out": []
    },
    "2115": {
      "op": "frame_dig -3",
      "stack_out": [
        "from#0 (copy)"
      ]
    },
    "2117": {
      "op": "frame_dig -2",
      "defined_out": [
        "from#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "from#0 (copy)",
        "to#0 (copy)"
      ]
    },
    "2119": {
      "op": "frame_dig -1",
      "stack_out": [
        "from#0 (copy)",
        "to#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "2121": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._transfer",
      "op": "callsub _transfer",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2124": {
      "retsub": true,
      "op": "retsub"
    },
    "2125": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_approve",
      "params": {
        "spender#0": "bytes",
        "value#0": "bytes"
      },
      "block": "arc200_approve",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2128": {
      "op": "txn Sender",
      "defined_out": [
        "owner#0"
      ],
      "stack_out": [
        "owner#0"
      ]
    },
    "2130": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0",
        "spender#0 (copy)"
      ]
    },
    "2132": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0",
        "spender#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "owner#0",
        "spender#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "2134": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._approve",
      "op": "callsub _approve",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2137": {
      "retsub": true,
      "op": "retsub"
    },
    "2138": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_allowance",
      "params": {
        "owner#0": "bytes",
        "spender#0": "bytes"
      },
      "block": "arc200_allowance",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2141": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "2143": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "2145": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._allowance",
      "op": "callsub _allowance",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2148": {
      "retsub": true,
      "op": "retsub"
    },
    "2149": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "params": {
        "owner#0": "bytes"
      },
      "block": "_balanceOf",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2152": {
      "op": "bytec 7 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "\"b\""
      ]
    },
    "2154": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"b\"",
        "owner#0 (copy)"
      ],
      "stack_out": [
        "\"b\"",
        "owner#0 (copy)"
      ]
    },
    "2156": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2157": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2158": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2159": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2161": {
      "op": "bnz _balanceOf_after_if_else@2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2164": {
      "op": "bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "2165": {
      "op": "swap"
    },
    "2166": {
      "retsub": true,
      "op": "retsub"
    },
    "2167": {
      "block": "_balanceOf_after_if_else@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2169": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2170": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "2171": {
      "op": "swap"
    },
    "2172": {
      "retsub": true,
      "op": "retsub"
    },
    "2173": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._transfer",
      "params": {
        "sender#0": "bytes",
        "recipient#0": "bytes",
        "amount#0": "bytes"
      },
      "block": "_transfer",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "2176": {
      "op": "frame_dig -3",
      "defined_out": [
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0 (copy)"
      ]
    },
    "2178": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "op": "callsub _balanceOf",
      "defined_out": [
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0"
      ]
    },
    "2181": {
      "op": "dup",
      "defined_out": [
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "sender_balance#0"
      ]
    },
    "2182": {
      "op": "frame_dig -2",
      "defined_out": [
        "recipient#0 (copy)",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "sender_balance#0",
        "recipient#0 (copy)"
      ]
    },
    "2184": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "op": "callsub _balanceOf",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "2187": {
      "op": "swap",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender_balance#0"
      ]
    },
    "2188": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender_balance#0",
        "amount#0 (copy)"
      ]
    },
    "2190": {
      "op": "b>=",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "tmp%0#0"
      ]
    },
    "2191": {
      "error": "Insufficient balance at the sender account",
      "op": "assert // Insufficient balance at the sender account",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "2192": {
      "op": "frame_dig -3",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender#0 (copy)"
      ]
    },
    "2194": {
      "op": "frame_dig -2",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender#0 (copy)",
        "recipient#0 (copy)"
      ]
    },
    "2196": {
      "op": "!=",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "tmp%1#0"
      ]
    },
    "2197": {
      "op": "bz _transfer_after_if_else@2",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "2200": {
      "op": "frame_dig 0",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender_balance#0"
      ]
    },
    "2202": {
      "op": "frame_dig -1",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender_balance#0",
        "amount#0 (copy)"
      ]
    },
    "2204": {
      "op": "b-",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0"
      ]
    },
    "2205": {
      "op": "dup",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "2206": {
      "op": "len",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "2207": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "2208": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "2209": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0"
      ]
    },
    "2210": {
      "op": "intc_2 // 32",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "2211": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "2212": {
      "op": "swap",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%0#0"
      ]
    },
    "2213": {
      "op": "dig 1",
      "defined_out": [
        "bzero%0#0",
        "bzero%0#0 (copy)",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%0#0",
        "bzero%0#0 (copy)"
      ]
    },
    "2215": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "arc4_encoded%0#0"
      ]
    },
    "2216": {
      "op": "bytec 7 // \"b\"",
      "defined_out": [
        "\"b\"",
        "arc4_encoded%0#0",
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "arc4_encoded%0#0",
        "\"b\""
      ]
    },
    "2218": {
      "op": "frame_dig -3",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "arc4_encoded%0#0",
        "\"b\"",
        "sender#0 (copy)"
      ]
    },
    "2220": {
      "op": "concat",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "arc4_encoded%0#0",
        "tmp%2#0"
      ]
    },
    "2221": {
      "op": "swap",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "tmp%2#0",
        "arc4_encoded%0#0"
      ]
    },
    "2222": {
      "op": "box_put",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0"
      ]
    },
    "2223": {
      "op": "frame_dig 1",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "recipient_balance#0"
      ]
    },
    "2225": {
      "op": "frame_dig -1",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "recipient_balance#0",
        "amount#0 (copy)"
      ]
    },
    "2227": {
      "op": "b+",
      "defined_out": [
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0"
      ]
    },
    "2228": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "2229": {
      "op": "len",
      "defined_out": [
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "2230": {
      "op": "intc_2 // 32",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "2231": {
      "op": "<=",
      "defined_out": [
        "bzero%0#0",
        "len_ok%1#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "2232": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0"
      ]
    },
    "2233": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "arc4_encoded%1#0"
      ]
    },
    "2234": {
      "op": "bytec 7 // \"b\"",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "arc4_encoded%1#0",
        "\"b\""
      ]
    },
    "2236": {
      "op": "frame_dig -2",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "arc4_encoded%1#0",
        "\"b\"",
        "recipient#0 (copy)"
      ]
    },
    "2238": {
      "op": "concat",
      "defined_out": [
        "arc4_encoded%1#0",
        "recipient_balance#0",
        "sender_balance#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "arc4_encoded%1#0",
        "tmp%3#0"
      ]
    },
    "2239": {
      "op": "swap",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "tmp%3#0",
        "arc4_encoded%1#0"
      ]
    },
    "2240": {
      "op": "box_put",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "2241": {
      "block": "_transfer_after_if_else@2",
      "stack_in": [
        "sender_balance#0",
        "recipient_balance#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender#0 (copy)"
      ]
    },
    "2243": {
      "op": "frame_dig -2",
      "defined_out": [
        "recipient#0 (copy)",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender#0 (copy)",
        "recipient#0 (copy)"
      ]
    },
    "2245": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2246": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "encoded_tuple_buffer%2#0",
        "amount#0 (copy)"
      ]
    },
    "2248": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2249": {
      "op": "bytec 13 // method \"arc200_Transfer(address,address,uint256)\"",
      "defined_out": [
        "Method(arc200_Transfer(address,address,uint256))",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "encoded_tuple_buffer%3#0",
        "Method(arc200_Transfer(address,address,uint256))"
      ]
    },
    "2251": {
      "op": "swap",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "Method(arc200_Transfer(address,address,uint256))",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2252": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "event%0#0"
      ]
    },
    "2253": {
      "op": "log",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "2254": {
      "op": "bytec_2 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "0x80"
      ]
    },
    "2255": {
      "op": "frame_bury 0"
    },
    "2257": {
      "retsub": true,
      "op": "retsub"
    },
    "2258": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._approvalKey",
      "params": {
        "owner#0": "bytes",
        "spender#0": "bytes"
      },
      "block": "_approvalKey",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2261": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "2263": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "2265": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2266": {
      "op": "sha256",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2267": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "2268": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "2269": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0",
        "32"
      ]
    },
    "2270": {
      "op": "==",
      "defined_out": [
        "lengths_equal%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "lengths_equal%0#0"
      ]
    },
    "2271": {
      "error": "invalid size",
      "op": "assert // invalid size",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2272": {
      "retsub": true,
      "op": "retsub"
    },
    "2273": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._allowance",
      "params": {
        "owner#0": "bytes",
        "spender#0": "bytes"
      },
      "block": "_allowance",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2276": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "2278": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "2280": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._approvalKey",
      "op": "callsub _approvalKey",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "2283": {
      "op": "pushbytes \"a\"",
      "defined_out": [
        "\"a\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"a\""
      ]
    },
    "2286": {
      "op": "swap",
      "stack_out": [
        "\"a\"",
        "key#0"
      ]
    },
    "2287": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2288": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2289": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2290": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2292": {
      "op": "bnz _allowance_after_if_else@2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2295": {
      "op": "bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "2296": {
      "op": "swap"
    },
    "2297": {
      "retsub": true,
      "op": "retsub"
    },
    "2298": {
      "block": "_allowance_after_if_else@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2300": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2301": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "2302": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2305": {
      "op": "swap"
    },
    "2306": {
      "retsub": true,
      "op": "retsub"
    },
    "2307": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._approve",
      "params": {
        "owner#0": "bytes",
        "spender#0": "bytes",
        "amount#0": "bytes"
      },
      "block": "_approve",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "2310": {
      "op": "frame_dig -3",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "2312": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "2314": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._approvalKey",
      "op": "callsub _approvalKey",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "2317": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "amount#0 (copy)"
      ]
    },
    "2319": {
      "op": "frame_dig -3",
      "stack_out": [
        "key#0",
        "amount#0 (copy)",
        "owner#0 (copy)"
      ]
    },
    "2321": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2322": {
      "op": "frame_dig -2",
      "stack_out": [
        "key#0",
        "encoded_tuple_buffer%2#0",
        "spender#0 (copy)"
      ]
    },
    "2324": {
      "op": "concat",
      "defined_out": [
        "approvalBox#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "approvalBox#0"
      ]
    },
    "2325": {
      "op": "pushbytes \"a\"",
      "defined_out": [
        "\"a\"",
        "approvalBox#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "approvalBox#0",
        "\"a\""
      ]
    },
    "2328": {
      "op": "uncover 2",
      "stack_out": [
        "approvalBox#0",
        "\"a\"",
        "key#0"
      ]
    },
    "2330": {
      "op": "concat",
      "defined_out": [
        "approvalBox#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "approvalBox#0",
        "tmp%0#0"
      ]
    },
    "2331": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "approvalBox#0"
      ]
    },
    "2332": {
      "op": "box_put",
      "stack_out": []
    },
    "2333": {
      "op": "frame_dig -3",
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "2335": {
      "op": "frame_dig -2",
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "2337": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2338": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "amount#0 (copy)"
      ]
    },
    "2340": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0"
      ]
    },
    "2341": {
      "op": "pushbytes 0x1969f865 // method \"arc200_Approval(address,address,uint256)\"",
      "defined_out": [
        "Method(arc200_Approval(address,address,uint256))",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "Method(arc200_Approval(address,address,uint256))"
      ]
    },
    "2347": {
      "op": "swap",
      "stack_out": [
        "Method(arc200_Approval(address,address,uint256))",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "2348": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "2349": {
      "op": "log",
      "stack_out": []
    },
    "2350": {
      "op": "bytec_2 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "0x80"
      ]
    },
    "2351": {
      "retsub": true,
      "op": "retsub"
    }
  }
}