#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 32 0 8
    bytecblock 0x151f7c75 0x0000000000000000000000000000000000000000000000000000000000000000 "hp_a" "b" "p" "t" 0x80 0x0000000000000000 base32(AAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) 0x7983c35c
    // smart_contracts/security_token/arc1410.algo.ts:15
    // export class Arc1410 extends Arc200 {
    txn NumAppArgs
    bz main_bare_routing@17
    pushbytess 0x35f8135f 0xda7025b9 0x95b4f9e3 0x975382e2 0x657d13ec 0xb6ae1a25 0x84ec13d5 0xec996041 0x82e573c4 0x4a968f8f 0xb5422125 0xbbb319f3 // method "arc1410_balance_of_partition(address,address)uint256", method "arc200_transfer(address,uint256)bool", method "arc1410_partitions_of(address,uint64)address[]", method "bootstrap(byte[],byte[],uint8,uint256)bool", method "arc200_name()byte[32]", method "arc200_symbol()byte[8]", method "arc200_decimals()uint8", method "arc200_totalSupply()uint256", method "arc200_balanceOf(address)uint256", method "arc200_transferFrom(address,address,uint256)bool", method "arc200_approve(address,uint256)bool", method "arc200_allowance(address,address)uint256"
    txna ApplicationArgs 0
    match main_arc1410_balance_of_partition_route@3 main_arc200_transfer_route@4 main_arc1410_partitions_of_route@5 main_bootstrap_route@6 main_arc200_name_route@7 main_arc200_symbol_route@8 main_arc200_decimals_route@9 main_arc200_totalSupply_route@10 main_arc200_balanceOf_route@11 main_arc200_transferFrom_route@12 main_arc200_approve_route@13 main_arc200_allowance_route@14

main_after_if_else@21:
    // smart_contracts/security_token/arc1410.algo.ts:15
    // export class Arc1410 extends Arc200 {
    intc_2 // 0
    return

main_arc200_allowance_route@14:
    // smart_contracts/security_token/arc200.algo.ts:186
    // @arc4.abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/security_token/arc1410.algo.ts:15
    // export class Arc1410 extends Arc200 {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/security_token/arc200.algo.ts:186
    // @arc4.abimethod({ readonly: true })
    callsub arc200_allowance
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_arc200_approve_route@13:
    // smart_contracts/security_token/arc200.algo.ts:174
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/security_token/arc1410.algo.ts:15
    // export class Arc1410 extends Arc200 {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/security_token/arc200.algo.ts:174
    // @arc4.abimethod()
    callsub arc200_approve
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_arc200_transferFrom_route@12:
    // smart_contracts/security_token/arc200.algo.ts:157
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/security_token/arc1410.algo.ts:15
    // export class Arc1410 extends Arc200 {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // smart_contracts/security_token/arc200.algo.ts:157
    // @arc4.abimethod()
    callsub arc200_transferFrom
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_arc200_balanceOf_route@11:
    // smart_contracts/security_token/arc200.algo.ts:132
    // @arc4.abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/security_token/arc1410.algo.ts:15
    // export class Arc1410 extends Arc200 {
    txna ApplicationArgs 1
    // smart_contracts/security_token/arc200.algo.ts:132
    // @arc4.abimethod({ readonly: true })
    callsub arc200_balanceOf
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_arc200_totalSupply_route@10:
    // smart_contracts/security_token/arc200.algo.ts:121
    // @arc4.abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub arc200_totalSupply
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_arc200_decimals_route@9:
    // smart_contracts/security_token/arc200.algo.ts:111
    // @arc4.abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub arc200_decimals
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_arc200_symbol_route@8:
    // smart_contracts/security_token/arc200.algo.ts:101
    // @arc4.abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub arc200_symbol
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_arc200_name_route@7:
    // smart_contracts/security_token/arc200.algo.ts:91
    // @arc4.abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub arc200_name
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bootstrap_route@6:
    // smart_contracts/security_token/arc200.algo.ts:65
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/security_token/arc1410.algo.ts:15
    // export class Arc1410 extends Arc200 {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    // smart_contracts/security_token/arc200.algo.ts:65
    // @arc4.abimethod()
    callsub bootstrap
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_arc1410_partitions_of_route@5:
    // smart_contracts/security_token/arc1410.algo.ts:37
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/security_token/arc1410.algo.ts:15
    // export class Arc1410 extends Arc200 {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/security_token/arc1410.algo.ts:37
    // @arc4.abimethod()
    callsub arc1410_partitions_of
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_arc200_transfer_route@4:
    // smart_contracts/security_token/arc1410.algo.ts:31
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/security_token/arc1410.algo.ts:15
    // export class Arc1410 extends Arc200 {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/security_token/arc1410.algo.ts:31
    // @arc4.abimethod()
    callsub arc200_transfer
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_arc1410_balance_of_partition_route@3:
    // smart_contracts/security_token/arc1410.algo.ts:22
    // @arc4.abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/security_token/arc1410.algo.ts:15
    // export class Arc1410 extends Arc200 {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/security_token/arc1410.algo.ts:22
    // @arc4.abimethod({ readonly: true })
    callsub arc1410_balance_of_partition
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@17:
    // smart_contracts/security_token/arc1410.algo.ts:15
    // export class Arc1410 extends Arc200 {
    txn OnCompletion
    bnz main_after_if_else@21
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_balance_of_partition(holder: bytes, partition: bytes) -> bytes:
arc1410_balance_of_partition:
    // smart_contracts/security_token/arc1410.algo.ts:22-23
    // @arc4.abimethod({ readonly: true })
    // public arc1410_balance_of_partition(holder: arc4.Address, partition: arc4.Address): arc4.UintN256 {
    proto 2 1
    // smart_contracts/security_token/arc1410.algo.ts:24-27
    // const key = new arc1410_PartitionKey({
    //   holder: holder,
    //   partition: partition,
    // })
    frame_dig -2
    frame_dig -1
    concat
    // smart_contracts/security_token/arc1410.algo.ts:16
    // public partitions = BoxMap<arc1410_PartitionKey, arc4.UintN256>({ keyPrefix: 'p' })
    bytec 4 // "p"
    swap
    concat
    // smart_contracts/security_token/arc1410.algo.ts:28
    // return this.partitions(key).value
    box_get
    assert // Box must have value
    retsub


// smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc200_transfer(to: bytes, value: bytes) -> bytes:
arc200_transfer:
    // smart_contracts/security_token/arc1410.algo.ts:31-32
    // @arc4.abimethod()
    // public override arc200_transfer(to: arc4.Address, value: arc4.UintN256): arc4.Bool {
    proto 2 1
    intc_2 // 0
    dupn 5
    pushbytes ""
    dupn 4
    // smart_contracts/security_token/arc1410.algo.ts:33
    // this._transfer_partition(new arc4.Address(Txn.sender), new arc4.Address(), to, new arc4.Address(), value)
    txn Sender
    bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
    // smart_contracts/security_token/arc1410.algo.ts:106-109
    // var senderPartitionKey = new arc1410_PartitionKey({
    //   holder: sender,
    //   partition: senderPartition,
    // })
    concat
    // smart_contracts/security_token/arc1410.algo.ts:111-114
    // var recipientPartitionKey = new arc1410_PartitionKey({
    //   holder: recipient,
    //   partition: recipientPartition,
    // })
    frame_dig -2
    // smart_contracts/security_token/arc1410.algo.ts:33
    // this._transfer_partition(new arc4.Address(Txn.sender), new arc4.Address(), to, new arc4.Address(), value)
    bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
    // smart_contracts/security_token/arc1410.algo.ts:111-114
    // var recipientPartitionKey = new arc1410_PartitionKey({
    //   holder: recipient,
    //   partition: recipientPartition,
    // })
    concat
    // smart_contracts/security_token/arc1410.algo.ts:16
    // public partitions = BoxMap<arc1410_PartitionKey, arc4.UintN256>({ keyPrefix: 'p' })
    bytec 4 // "p"
    uncover 2
    concat
    dup
    cover 2
    // smart_contracts/security_token/arc1410.algo.ts:116
    // assert(this.partitions(senderPartitionKey).exists, 'Sender partition does not exist')
    box_len
    bury 1
    assert // Sender partition does not exist
    // smart_contracts/security_token/arc1410.algo.ts:16
    // public partitions = BoxMap<arc1410_PartitionKey, arc4.UintN256>({ keyPrefix: 'p' })
    bytec 4 // "p"
    swap
    concat
    dup
    // smart_contracts/security_token/arc1410.algo.ts:118
    // this.partitions(recipientPartitionKey).value.native >= amount.native,
    box_get
    assert // Box must have value
    frame_dig -1
    b>=
    // smart_contracts/security_token/arc1410.algo.ts:117-120
    // assert(
    //   this.partitions(recipientPartitionKey).value.native >= amount.native,
    //   'Insufficient balance in sender partition',
    // )
    assert // Insufficient balance in sender partition
    // smart_contracts/security_token/arc1410.algo.ts:17
    // public holderPartitionsCurrentPage = BoxMap<arc4.Address, arc4.UintN64>({ keyPrefix: 'hp_p' })
    pushbytes "hp_p"
    frame_dig -2
    concat
    dup
    // smart_contracts/security_token/arc1410.algo.ts:56
    // if (!this.holderPartitionsCurrentPage(holder).exists) {
    box_len
    bury 1
    bnz arc200_transfer_after_if_else@7
    // smart_contracts/security_token/arc1410.algo.ts:57
    // this.holderPartitionsCurrentPage(holder).value = page
    frame_dig 13
    // smart_contracts/security_token/arc1410.algo.ts:55
    // let page = new arc4.UintN64(0)
    bytec 7 // 0x0000000000000000
    // smart_contracts/security_token/arc1410.algo.ts:57
    // this.holderPartitionsCurrentPage(holder).value = page
    box_put

arc200_transfer_after_if_else@7:
    // smart_contracts/security_token/arc1410.algo.ts:59
    // const lastPage = this.holderPartitionsCurrentPage(holder).value
    frame_dig 13
    box_get
    swap
    frame_bury 3
    assert // Box must have value
    // smart_contracts/security_token/arc1410.algo.ts:60
    // let found = false
    intc_2 // 0
    frame_bury 7
    // smart_contracts/security_token/arc1410.algo.ts:55
    // let page = new arc4.UintN64(0)
    bytec 7 // 0x0000000000000000
    // smart_contracts/security_token/arc1410.algo.ts:61
    // for (let curPage = page; curPage.native < lastPage.native; curPage = new arc4.UintN64(curPage.native + 1)) {
    frame_bury 2

arc200_transfer_while_top@8:
    // smart_contracts/security_token/arc1410.algo.ts:61
    // for (let curPage = page; curPage.native < lastPage.native; curPage = new arc4.UintN64(curPage.native + 1)) {
    frame_dig 2
    btoi
    dup
    frame_bury 9
    frame_dig 3
    btoi
    dup
    frame_bury 10
    <
    bz arc200_transfer_block@21
    // smart_contracts/security_token/arc1410.algo.ts:62-65
    // const paginatedKey = new arc1410_HoldingPartitionsPaginatedKey({
    //   holder: holder,
    //   page: curPage,
    // })
    frame_dig -2
    frame_dig 2
    concat
    // smart_contracts/security_token/arc1410.algo.ts:19
    // keyPrefix: 'hp_a',
    bytec_2 // "hp_a"
    swap
    concat
    dup
    frame_bury 5
    // smart_contracts/security_token/arc1410.algo.ts:66
    // if (!this.holderPartitionsAddresses(paginatedKey).exists) {
    box_len
    bury 1
    bnz arc200_transfer_after_if_else@11
    // smart_contracts/security_token/arc1410.algo.ts:67
    // this.holderPartitionsAddresses(paginatedKey).value = [participation]
    frame_dig 5
    dup
    box_del
    pop
    bytec 8 // base32(AAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)
    box_put

arc200_transfer_after_if_else@11:
    // smart_contracts/security_token/arc1410.algo.ts:70
    // if (this.containsAddress(this.holderPartitionsAddresses(paginatedKey).value, participation)) {
    frame_dig 5
    box_get
    swap
    dup
    cover 2
    frame_bury 0
    assert // Box must have value
    // smart_contracts/security_token/arc1410.algo.ts:44
    // for (const v of a) {
    intc_2 // 0
    extract_uint16
    frame_bury 6
    intc_2 // 0
    frame_bury 8

arc200_transfer_for_header@12:
    // smart_contracts/security_token/arc1410.algo.ts:44
    // for (const v of a) {
    frame_dig 8
    frame_dig 6
    <
    bz arc200_transfer_after_for@16
    frame_dig 0
    extract 2 0
    frame_dig 8
    intc_1 // 32
    *
    intc_1 // 32
    extract3 // on error: Index access is out of bounds
    // smart_contracts/security_token/arc1410.algo.ts:33
    // this._transfer_partition(new arc4.Address(Txn.sender), new arc4.Address(), to, new arc4.Address(), value)
    bytec_1 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
    // smart_contracts/security_token/arc1410.algo.ts:45
    // if (v === x) return true
    ==
    bz arc200_transfer_after_if_else@15
    intc_0 // 1

arc200_transfer_after_inlined_smart_contracts/security_token/arc1410.algo.ts::Arc1410.containsAddress@17:
    // smart_contracts/security_token/arc1410.algo.ts:70
    // if (this.containsAddress(this.holderPartitionsAddresses(paginatedKey).value, participation)) {
    bz arc200_transfer_after_if_else@19
    // smart_contracts/security_token/arc1410.algo.ts:71
    // found = true
    intc_0 // 1
    frame_bury 7

arc200_transfer_block@21:
    // smart_contracts/security_token/arc1410.algo.ts:75
    // if (!found) {
    frame_dig 7
    bnz arc200_transfer_after_if_else@25
    // smart_contracts/security_token/arc1410.algo.ts:76-79
    // const paginatedKey = new arc1410_HoldingPartitionsPaginatedKey({
    //   holder: holder,
    //   page: lastPage,
    // })
    frame_dig -2
    frame_dig 3
    concat
    // smart_contracts/security_token/arc1410.algo.ts:19
    // keyPrefix: 'hp_a',
    bytec_2 // "hp_a"
    swap
    concat
    dup
    frame_bury 4
    // smart_contracts/security_token/arc1410.algo.ts:80
    // const itemsCount = new arc4.UintN64(this.holderPartitionsAddresses(paginatedKey).value.length)
    box_get
    assert // Box must have value
    intc_2 // 0
    extract_uint16
    itob
    // smart_contracts/security_token/arc1410.algo.ts:81
    // if (itemsCount.native < 10) {
    btoi
    pushint 10 // 10
    <
    bz arc200_transfer_else_body@24
    // smart_contracts/security_token/arc1410.algo.ts:84
    // ...this.holderPartitionsAddresses(paginatedKey).value,
    frame_dig 4
    dup
    box_get
    assert // Box must have value
    // smart_contracts/security_token/arc1410.algo.ts:83-86
    // this.holderPartitionsAddresses(paginatedKey).value = [
    //   ...this.holderPartitionsAddresses(paginatedKey).value,
    //   participation,
    // ]
    extract 2 0
    bytec_1 // base32(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)
    concat
    dup
    len
    intc_1 // 32
    /
    itob
    extract 6 2
    swap
    concat
    dig 1
    box_del
    pop
    box_put

arc200_transfer_after_if_else@25:
    // smart_contracts/security_token/arc1410.algo.ts:125
    // this.partitions(recipientPartitionKey).value.native - amount.native,
    frame_dig 12
    dup
    box_get
    assert // Box must have value
    frame_dig -1
    b-
    // smart_contracts/security_token/arc1410.algo.ts:124-126
    // this.partitions(senderPartitionKey).value = new arc4.UintN256(
    //   this.partitions(recipientPartitionKey).value.native - amount.native,
    // )
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    intc_1 // 32
    bzero
    dup
    frame_bury 1
    b|
    frame_dig 11
    swap
    box_put
    // smart_contracts/security_token/arc1410.algo.ts:128
    // if (!this.partitions(recipientPartitionKey).exists) {
    box_len
    bury 1
    bnz arc200_transfer_else_body@3
    // smart_contracts/security_token/arc1410.algo.ts:129
    // this.partitions(recipientPartitionKey).value = amount
    frame_dig 12
    frame_dig -1
    box_put

arc200_transfer_after_if_else@4:
    // smart_contracts/security_token/arc1410.algo.ts:34
    // return this._transfer(new arc4.Address(Txn.sender), to, value)
    txn Sender
    frame_dig -2
    frame_dig -1
    callsub _transfer
    frame_bury 0
    retsub

arc200_transfer_else_body@3:
    // smart_contracts/security_token/arc1410.algo.ts:132
    // amount.native + this.partitions(recipientPartitionKey).value.native,
    frame_dig 12
    dup
    box_get
    assert // Box must have value
    frame_dig -1
    b+
    // smart_contracts/security_token/arc1410.algo.ts:131-133
    // this.partitions(recipientPartitionKey).value = new arc4.UintN256(
    //   amount.native + this.partitions(recipientPartitionKey).value.native,
    // )
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    frame_dig 1
    b|
    box_put
    b arc200_transfer_after_if_else@4

arc200_transfer_else_body@24:
    // smart_contracts/security_token/arc1410.algo.ts:88
    // const newLastPage = new arc4.UintN64(lastPage.native + 1)
    frame_dig 10
    intc_0 // 1
    +
    itob
    // smart_contracts/security_token/arc1410.algo.ts:89
    // this.holderPartitionsCurrentPage(holder).value = newLastPage
    frame_dig 13
    dig 1
    box_put
    // smart_contracts/security_token/arc1410.algo.ts:90-93
    // const newPaginatedKey = new arc1410_HoldingPartitionsPaginatedKey({
    //   holder: holder,
    //   page: newLastPage,
    // })
    frame_dig -2
    swap
    concat
    // smart_contracts/security_token/arc1410.algo.ts:19
    // keyPrefix: 'hp_a',
    bytec_2 // "hp_a"
    swap
    concat
    // smart_contracts/security_token/arc1410.algo.ts:94
    // this.holderPartitionsAddresses(newPaginatedKey).value = [participation]
    dup
    box_del
    pop
    bytec 8 // base32(AAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)
    box_put
    b arc200_transfer_after_if_else@25

arc200_transfer_after_if_else@19:
    // smart_contracts/security_token/arc1410.algo.ts:61
    // for (let curPage = page; curPage.native < lastPage.native; curPage = new arc4.UintN64(curPage.native + 1)) {
    frame_dig 9
    intc_0 // 1
    +
    itob
    frame_bury 2
    b arc200_transfer_while_top@8

arc200_transfer_after_if_else@15:
    frame_dig 8
    intc_0 // 1
    +
    frame_bury 8
    b arc200_transfer_for_header@12

arc200_transfer_after_for@16:
    // smart_contracts/security_token/arc1410.algo.ts:47
    // return false
    intc_2 // 0
    // smart_contracts/security_token/arc1410.algo.ts:70
    // if (this.containsAddress(this.holderPartitionsAddresses(paginatedKey).value, participation)) {
    b arc200_transfer_after_inlined_smart_contracts/security_token/arc1410.algo.ts::Arc1410.containsAddress@17


// smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_partitions_of(holder: bytes, page: bytes) -> bytes:
arc1410_partitions_of:
    // smart_contracts/security_token/arc1410.algo.ts:37-38
    // @arc4.abimethod()
    // public arc1410_partitions_of(holder: arc4.Address, page: arc4.UintN64): arc4.Address[] {
    proto 2 1
    // smart_contracts/security_token/arc1410.algo.ts:39
    // const key = new arc1410_HoldingPartitionsPaginatedKey({ holder: holder, page: page })
    frame_dig -2
    frame_dig -1
    concat
    // smart_contracts/security_token/arc1410.algo.ts:19
    // keyPrefix: 'hp_a',
    bytec_2 // "hp_a"
    swap
    concat
    dup
    // smart_contracts/security_token/arc1410.algo.ts:40
    // if (!this.holderPartitionsAddresses(key).exists) return []
    box_len
    bury 1
    bnz arc1410_partitions_of_after_if_else@2
    pushbytes 0x0000
    swap
    retsub

arc1410_partitions_of_after_if_else@2:
    // smart_contracts/security_token/arc1410.algo.ts:41
    // return this.holderPartitionsAddresses(key).value
    frame_dig 0
    box_get
    assert // Box must have value
    swap
    retsub


// smart_contracts/security_token/arc200.algo.ts::Arc200.bootstrap(name: bytes, symbol: bytes, decimals: bytes, totalSupply: bytes) -> bytes:
bootstrap:
    // smart_contracts/security_token/arc200.algo.ts:65-66
    // @arc4.abimethod()
    // public bootstrap(name: DynamicBytes, symbol: DynamicBytes, decimals: UintN8, totalSupply: UintN256): Bool {
    proto 4 1
    // smart_contracts/security_token/arc200.algo.ts:67
    // assert(Txn.sender === Global.creatorAddress, 'Only deployer of this smart contract can call bootstrap method')
    txn Sender
    global CreatorAddress
    ==
    assert // Only deployer of this smart contract can call bootstrap method
    // smart_contracts/security_token/arc200.algo.ts:68
    // assert(name.native.length > 0, 'Name of the asset must be longer or equal to 1 character')
    frame_dig -4
    extract 2 0
    len
    dup
    assert // Name of the asset must be longer or equal to 1 character
    // smart_contracts/security_token/arc200.algo.ts:69
    // assert(name.native.length <= 32, 'Name of the asset must be shorter or equal to 32 characters')
    intc_1 // 32
    <=
    assert // Name of the asset must be shorter or equal to 32 characters
    // smart_contracts/security_token/arc200.algo.ts:70
    // assert(symbol.native.length > 0, 'Symbol of the asset must be longer or equal to 1 character')
    frame_dig -3
    extract 2 0
    len
    dup
    assert // Symbol of the asset must be longer or equal to 1 character
    // smart_contracts/security_token/arc200.algo.ts:71
    // assert(symbol.native.length <= 8, 'Symbol of the asset must be shorter or equal to 8 characters')
    intc_3 // 8
    <=
    assert // Symbol of the asset must be shorter or equal to 8 characters
    // smart_contracts/security_token/arc200.algo.ts:60
    // public totalSupply = GlobalState<UintN256>({ key: 't' })
    intc_2 // 0
    bytec 5 // "t"
    // smart_contracts/security_token/arc200.algo.ts:72
    // assert(!this.totalSupply.hasValue, 'This method can be called only once')
    app_global_get_ex
    bury 1
    !
    assert // This method can be called only once
    // smart_contracts/security_token/arc200.algo.ts:48
    // public name = GlobalState<DynamicBytes>({ key: 'n' })
    pushbytes "n"
    // smart_contracts/security_token/arc200.algo.ts:74
    // this.name.value = name
    frame_dig -4
    app_global_put
    // smart_contracts/security_token/arc200.algo.ts:52
    // public symbol = GlobalState<DynamicBytes>({ key: 's' })
    pushbytes "s"
    // smart_contracts/security_token/arc200.algo.ts:75
    // this.symbol.value = symbol
    frame_dig -3
    app_global_put
    // smart_contracts/security_token/arc200.algo.ts:60
    // public totalSupply = GlobalState<UintN256>({ key: 't' })
    bytec 5 // "t"
    // smart_contracts/security_token/arc200.algo.ts:76
    // this.totalSupply.value = totalSupply
    frame_dig -1
    app_global_put
    // smart_contracts/security_token/arc200.algo.ts:56
    // public decimals = GlobalState<UintN8>({ key: 'd' })
    pushbytes "d"
    // smart_contracts/security_token/arc200.algo.ts:77
    // this.decimals.value = decimals
    frame_dig -2
    app_global_put
    // smart_contracts/security_token/arc200.algo.ts:78
    // const sender = new Address(Txn.sender)
    txn Sender
    // smart_contracts/security_token/arc200.algo.ts:62
    // public balances = BoxMap<Address, UintN256>({ keyPrefix: 'b' })
    bytec_3 // "b"
    dig 1
    concat
    // smart_contracts/security_token/arc200.algo.ts:80
    // this.balances(sender).value = totalSupply
    frame_dig -1
    box_put
    // smart_contracts/security_token/arc200.algo.ts:82
    // emit(new arc200_Transfer({ from: new Address(Global.zeroAddress), to: sender, value: totalSupply }))
    global ZeroAddress
    swap
    concat
    frame_dig -1
    concat
    bytec 9 // method "arc200_Transfer(address,address,uint256)"
    swap
    concat
    log
    // smart_contracts/security_token/arc200.algo.ts:83
    // return new Bool(true)
    bytec 6 // 0x80
    retsub


// smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_name() -> bytes:
arc200_name:
    // smart_contracts/security_token/arc200.algo.ts:48
    // public name = GlobalState<DynamicBytes>({ key: 'n' })
    intc_2 // 0
    pushbytes "n"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/security_token/arc200.algo.ts:93
    // return new StaticBytes<32>(this.name.value.native)
    extract 2 0
    dup
    len
    intc_1 // 32
    ==
    assert // invalid size
    retsub


// smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_symbol() -> bytes:
arc200_symbol:
    // smart_contracts/security_token/arc200.algo.ts:52
    // public symbol = GlobalState<DynamicBytes>({ key: 's' })
    intc_2 // 0
    pushbytes "s"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/security_token/arc200.algo.ts:103
    // return new StaticBytes<8>(this.symbol.value.native)
    extract 2 0
    dup
    len
    intc_3 // 8
    ==
    assert // invalid size
    retsub


// smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_decimals() -> bytes:
arc200_decimals:
    // smart_contracts/security_token/arc200.algo.ts:56
    // public decimals = GlobalState<UintN8>({ key: 'd' })
    intc_2 // 0
    pushbytes "d"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/security_token/arc200.algo.ts:113
    // return this.decimals.value
    retsub


// smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_totalSupply() -> bytes:
arc200_totalSupply:
    // smart_contracts/security_token/arc200.algo.ts:60
    // public totalSupply = GlobalState<UintN256>({ key: 't' })
    intc_2 // 0
    bytec 5 // "t"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/security_token/arc200.algo.ts:123
    // return this.totalSupply.value
    retsub


// smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_balanceOf(owner: bytes) -> bytes:
arc200_balanceOf:
    // smart_contracts/security_token/arc200.algo.ts:132-133
    // @arc4.abimethod({ readonly: true })
    // public arc200_balanceOf(owner: Address): arc4.UintN256 {
    proto 1 1
    // smart_contracts/security_token/arc200.algo.ts:134
    // return this._balanceOf(owner)
    frame_dig -1
    callsub _balanceOf
    retsub


// smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_transferFrom(from: bytes, to: bytes, value: bytes) -> bytes:
arc200_transferFrom:
    // smart_contracts/security_token/arc200.algo.ts:157-158
    // @arc4.abimethod()
    // public arc200_transferFrom(from: Address, to: Address, value: arc4.UintN256): arc4.Bool {
    proto 3 1
    // smart_contracts/security_token/arc200.algo.ts:159
    // const spender = new Address(Txn.sender)
    txn Sender
    // smart_contracts/security_token/arc200.algo.ts:160
    // const spender_allowance = this._allowance(from, spender)
    frame_dig -3
    dig 1
    callsub _allowance
    // smart_contracts/security_token/arc200.algo.ts:161
    // assert(spender_allowance.native >= value.native, 'insufficient approval')
    dup
    frame_dig -1
    b>=
    assert // insufficient approval
    // smart_contracts/security_token/arc200.algo.ts:162
    // const new_spender_allowance = new UintN256(spender_allowance.native - value.native)
    frame_dig -1
    b-
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    intc_1 // 32
    bzero
    b|
    // smart_contracts/security_token/arc200.algo.ts:163
    // this._approve(from, spender, new_spender_allowance)
    frame_dig -3
    cover 2
    callsub _approve
    pop
    // smart_contracts/security_token/arc200.algo.ts:164
    // return this._transfer(from, to, value)
    frame_dig -3
    frame_dig -2
    frame_dig -1
    callsub _transfer
    retsub


// smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_approve(spender: bytes, value: bytes) -> bytes:
arc200_approve:
    // smart_contracts/security_token/arc200.algo.ts:174-175
    // @arc4.abimethod()
    // public arc200_approve(spender: Address, value: arc4.UintN256): Bool {
    proto 2 1
    // smart_contracts/security_token/arc200.algo.ts:176
    // const owner = new Address(Txn.sender)
    txn Sender
    // smart_contracts/security_token/arc200.algo.ts:177
    // return this._approve(owner, spender, value)
    frame_dig -2
    frame_dig -1
    callsub _approve
    retsub


// smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_allowance(owner: bytes, spender: bytes) -> bytes:
arc200_allowance:
    // smart_contracts/security_token/arc200.algo.ts:186-187
    // @arc4.abimethod({ readonly: true })
    // public arc200_allowance(owner: Address, spender: Address): arc4.UintN256 {
    proto 2 1
    // smart_contracts/security_token/arc200.algo.ts:188
    // return this._allowance(owner, spender)
    frame_dig -2
    frame_dig -1
    callsub _allowance
    retsub


// smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf(owner: bytes) -> bytes:
_balanceOf:
    // smart_contracts/security_token/arc200.algo.ts:191
    // protected _balanceOf(owner: Address): UintN256 {
    proto 1 1
    // smart_contracts/security_token/arc200.algo.ts:62
    // public balances = BoxMap<Address, UintN256>({ keyPrefix: 'b' })
    bytec_3 // "b"
    frame_dig -1
    concat
    dup
    // smart_contracts/security_token/arc200.algo.ts:192
    // if (!this.balances(owner).exists) return new UintN256(0)
    box_len
    bury 1
    bnz _balanceOf_after_if_else@2
    bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000
    swap
    retsub

_balanceOf_after_if_else@2:
    // smart_contracts/security_token/arc200.algo.ts:193
    // return this.balances(owner).value
    frame_dig 0
    box_get
    assert // Box must have value
    swap
    retsub


// smart_contracts/security_token/arc200.algo.ts::Arc200._transfer(sender: bytes, recipient: bytes, amount: bytes) -> bytes:
_transfer:
    // smart_contracts/security_token/arc200.algo.ts:196
    // protected _transfer(sender: Address, recipient: Address, amount: UintN256): Bool {
    proto 3 1
    // smart_contracts/security_token/arc200.algo.ts:197
    // const sender_balance = this._balanceOf(sender)
    frame_dig -3
    callsub _balanceOf
    dup
    // smart_contracts/security_token/arc200.algo.ts:198
    // const recipient_balance = this._balanceOf(recipient)
    frame_dig -2
    callsub _balanceOf
    swap
    // smart_contracts/security_token/arc200.algo.ts:199
    // assert(sender_balance.native >= amount.native, 'Insufficient balance at the sender account')
    frame_dig -1
    b>=
    assert // Insufficient balance at the sender account
    // smart_contracts/security_token/arc200.algo.ts:201
    // if (sender !== recipient) {
    frame_dig -3
    frame_dig -2
    !=
    bz _transfer_after_if_else@2
    // smart_contracts/security_token/arc200.algo.ts:203
    // this.balances(sender).value = new UintN256(sender_balance.native - amount.native)
    frame_dig 0
    frame_dig -1
    b-
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    intc_1 // 32
    bzero
    swap
    dig 1
    b|
    // smart_contracts/security_token/arc200.algo.ts:62
    // public balances = BoxMap<Address, UintN256>({ keyPrefix: 'b' })
    bytec_3 // "b"
    frame_dig -3
    concat
    // smart_contracts/security_token/arc200.algo.ts:203
    // this.balances(sender).value = new UintN256(sender_balance.native - amount.native)
    swap
    box_put
    // smart_contracts/security_token/arc200.algo.ts:204
    // this.balances(recipient).value = new UintN256(recipient_balance.native + amount.native)
    frame_dig 1
    frame_dig -1
    b+
    dup
    len
    intc_1 // 32
    <=
    assert // overflow
    b|
    // smart_contracts/security_token/arc200.algo.ts:62
    // public balances = BoxMap<Address, UintN256>({ keyPrefix: 'b' })
    bytec_3 // "b"
    frame_dig -2
    concat
    // smart_contracts/security_token/arc200.algo.ts:204
    // this.balances(recipient).value = new UintN256(recipient_balance.native + amount.native)
    swap
    box_put

_transfer_after_if_else@2:
    // smart_contracts/security_token/arc200.algo.ts:206
    // emit(new arc200_Transfer({ from: sender, to: recipient, value: amount }))
    frame_dig -3
    frame_dig -2
    concat
    frame_dig -1
    concat
    bytec 9 // method "arc200_Transfer(address,address,uint256)"
    swap
    concat
    log
    // smart_contracts/security_token/arc200.algo.ts:207
    // return new Bool(true)
    bytec 6 // 0x80
    frame_bury 0
    retsub


// smart_contracts/security_token/arc200.algo.ts::Arc200._approvalKey(owner: bytes, spender: bytes) -> bytes:
_approvalKey:
    // smart_contracts/security_token/arc200.algo.ts:209
    // protected _approvalKey(owner: Address, spender: Address): StaticBytes<32> {
    proto 2 1
    // smart_contracts/security_token/arc200.algo.ts:210
    // return new StaticBytes<32>(op.sha256(op.concat(owner.bytes, spender.bytes)))
    frame_dig -2
    frame_dig -1
    concat
    sha256
    dup
    len
    intc_1 // 32
    ==
    assert // invalid size
    retsub


// smart_contracts/security_token/arc200.algo.ts::Arc200._allowance(owner: bytes, spender: bytes) -> bytes:
_allowance:
    // smart_contracts/security_token/arc200.algo.ts:213
    // protected _allowance(owner: Address, spender: Address): UintN256 {
    proto 2 1
    // smart_contracts/security_token/arc200.algo.ts:214
    // const key = this._approvalKey(owner, spender)
    frame_dig -2
    frame_dig -1
    callsub _approvalKey
    // smart_contracts/security_token/arc200.algo.ts:64
    // public approvals = BoxMap<StaticBytes<32>, ApprovalStruct>({ keyPrefix: 'a' })
    pushbytes "a"
    swap
    concat
    dup
    // smart_contracts/security_token/arc200.algo.ts:215
    // if (!this.approvals(key).exists) return new UintN256(0)
    box_len
    bury 1
    bnz _allowance_after_if_else@2
    bytec_1 // 0x0000000000000000000000000000000000000000000000000000000000000000
    swap
    retsub

_allowance_after_if_else@2:
    // smart_contracts/security_token/arc200.algo.ts:216
    // return this.approvals(key).value.approvalAmount
    frame_dig 0
    box_get
    assert // Box must have value
    extract 0 32 // on error: Index access is out of bounds
    swap
    retsub


// smart_contracts/security_token/arc200.algo.ts::Arc200._approve(owner: bytes, spender: bytes, amount: bytes) -> bytes:
_approve:
    // smart_contracts/security_token/arc200.algo.ts:219
    // protected _approve(owner: Address, spender: Address, amount: UintN256): Bool {
    proto 3 1
    // smart_contracts/security_token/arc200.algo.ts:220
    // const key = this._approvalKey(owner, spender)
    frame_dig -3
    frame_dig -2
    callsub _approvalKey
    // smart_contracts/security_token/arc200.algo.ts:221-225
    // const approvalBox: ApprovalStruct = new ApprovalStruct({
    //   approvalAmount: amount,
    //   owner: owner,
    //   spender: spender,
    // })
    frame_dig -1
    frame_dig -3
    concat
    frame_dig -2
    concat
    // smart_contracts/security_token/arc200.algo.ts:64
    // public approvals = BoxMap<StaticBytes<32>, ApprovalStruct>({ keyPrefix: 'a' })
    pushbytes "a"
    uncover 2
    concat
    // smart_contracts/security_token/arc200.algo.ts:226
    // this.approvals(key).value = approvalBox.copy()
    swap
    box_put
    // smart_contracts/security_token/arc200.algo.ts:227
    // emit(new arc200_Approval({ owner: owner, spender: spender, value: amount }))
    frame_dig -3
    frame_dig -2
    concat
    frame_dig -1
    concat
    pushbytes 0x1969f865 // method "arc200_Approval(address,address,uint256)"
    swap
    concat
    log
    // smart_contracts/security_token/arc200.algo.ts:228
    // return new Bool(true)
    bytec 6 // 0x80
    retsub
