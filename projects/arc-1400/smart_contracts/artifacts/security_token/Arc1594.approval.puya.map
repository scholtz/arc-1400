{
  "version": 3,
  "sources": [
    "C:/Users/scholtz/source/repos/scholtz/arc-1400/projects/arc-1400/smart_contracts/security_token/arc1410.algo.ts",
    "C:/Users/scholtz/source/repos/scholtz/arc-1400/projects/arc-1400/smart_contracts/security_token/arc1594.algo.ts",
    "C:/Users/scholtz/source/repos/scholtz/arc-1400/projects/arc-1400/smart_contracts/security_token/arc200.algo.ts",
    "C:/Users/scholtz/source/repos/scholtz/arc-1400/projects/arc-1400/smart_contracts/security_token/arc88.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACqBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AEiFG;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AFxDH;;;AEwDG;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AFpCH;;;AEoCG;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AF5BH;;;AE4BG;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AFnBH;;;AEmBG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AD8IA;;AAAA;AAAA;AAAA;;AAAA;AD3JH;;;AAAA;;;AC2JG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AD/IH;;;AAAA;;;AC+IG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AD9HH;;;AAAA;;;AAAA;;;AC8HG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;ADrGH;;;ACqGG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA1BA;;AAAA;AAAA;AAAA;;AAAA;ADlCH;;;AAAA;;;AAAA;;;AAAA;;;ACkCG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AF+WA;;AAAA;AAAA;AAAA;;AAAA;ACjZH;;;AAAA;;;AAAA;;;AAAA;;;ADiZG;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AClYH;;;AAAA;;;AAAA;;;ADkYG;;;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;ACzWH;;;AAAA;;;AAAA;;;AAAA;;;ADyWG;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AC7VH;;;AAAA;;;AAAA;;;AD6VG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;ACjVH;;;AAAA;;;AAAA;;;AAAA;;;ADiVG;;;AAAA;;AAzLA;;AAAA;AAAA;AAAA;;AAAA;ACxJH;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;ADwJG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA9BA;;AAAA;AAAA;AAAA;;AAAA;AC1HH;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AD0HG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;ACjHH;;;AAAA;;;AAAA;;;ADiHG;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AC1GH;;;AAAA;;;AAAA;;;AD0GG;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AC5FH;;;AAAA;;;AAAA;;;AD4FG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;ACrFH;;;AAAA;;;ADqFG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;ACvEH;;;AAAA;;;AAAA;;;AAAA;;;ADuEG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;ACxDH;;;AAAA;;;ADwDG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AC/CH;;;AAAA;;;AD+CG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;ACkCA;;AAAA;AAAA;AAAA;;AAAA;AAjFH;;;AAAA;;;AAAA;;;AAAA;;;AAiFG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAnEH;;;AAAA;;;AAmEG;;;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AAjDH;;;AAAA;;;AAAA;;;AAiDG;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAxCH;;;AAAA;;;AAAA;;;AAwCG;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAjCH;;;AAAA;;;AAiCG;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA3BH;;;AAAA;;;AA2BG;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AArBH;;;AAqBG;;;AAAA;;AArBH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAiBoD;;AAAzC;;;;AAAkD;AAAW;AAA7D;AAAP;;AAIF;;;AAEE;;;AArB6C;;AAsB7C;;AAAA;;AAGF;;;AAEE;;;AAxB2D;;AAAA;;AAAA;AAyB3D;;AAAA;;AAGF;;;AAEE;;;AA7BmE;;AAAA;;AAAA;AA8BnE;;AAAA;;AAIF;;;AAEE;;;AACO;;AAAgB;;AAAhB;AAAP;AAEA;;AAAoC;AAApC;;AAAA;;AAAA;;;AACc;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAd;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;AAGF;;;;;;AAEsC;;AAA9B;AACC;;AAAA;AAAA;;;AAAmB;;AAAA;;;;AAA4B;AAAW;AAAvC;AAAnB;;;;AAAP;AACO;;AAAgB;;AAAhB;AAAP;AAEgB;;AAAoD;AAApD;ADpB2D;;AAAA;AAAA;AAAA;AAAA;;ACsBhD;AAAA;;AAAzB;;;AAA4D;;AAAA;AAAA;AAAzB;;AAAA;AAAnC;;;;AADF;AAI4E;;AAAA;AAAA;AAAA;AAAzB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAjC;AC7BuD;;AAAA;;AAAA;AAAA;AAAA;;AD8B5B;AAAA;;AAApB;;;AAAkD;;AAAA;AAAA;AAApB;;AAAA;AAA9B;;;;AAAP;AACkE;;AAAA;AAAA;AAAA;AAApB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA5B;ACjCgD;AAAA;AAAA;AAAA;ADkCL;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AClCuB;ADkChD;AAAA;AACe;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAf;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAGF;;;;;AAEoC;;AAA5B;AACC;;AAAgB;;AAAhB;AAAP;AACoE;AAApD;ADpC2D;;AAAA;AAAA;AAAA;ACqC3C;AAAA;;AAAzB;;;AAA4D;;AAAA;AAAA;AAAzB;;AAAA;AAAnC;;;;AAAP;AAC4E;;AAAA;AAAA;AAAA;AAAzB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAjC;AC1CuD;;AAAA;;AAAA;AAAA;AAAA;;AD2C5B;AAAA;;AAApB;;;AAAkD;;AAAA;AAAA;AAApB;;AAAA;AAA9B;;;;AAAP;AACkE;;AAAA;AAAA;AAAA;AAApB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA5B;AC9CgD;AAAA;AAAA;AAAA;AD+CL;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AC/CuB;AD+ChD;AAAA;AACe;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAf;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;AAIF;;;;;;AAQa;;AAAP;AAvFyC;AAAA;;AAyF/B;AAAA;;AAAV;;;AAzFyC;AAAA;;AAAA;AAAA;AAyFH;AAAW;AAA3B;;;;;AAAtB;;;AACK;;;;;;;;;;;;;;;;;AAGA;AAAA;;;;AAAT;;;AA1F2D;;AAAA;;AAAA;AAAA;AAAA;;AA2FrC;AAAA;;AAAhB;;;AAAyC;;AAAA;AAAA;AAAM;AAA/C;;;AAAoE;;;;;;;;;;AAAP;;;;;;;;;;;AAE1D;AAAA;;;;AAAT;;;AA7F2D;;AAAA;;AAAA;AAAA;AAAA;;AA8FvC;AAAA;;AAAd;;;AAAqC;;AAAA;AAAA;AAAM;AAA3C;;;AAAgE;;;;;;;;;;AAAP;;;;;;;;;;;AAGtD;AAAA;;;;AAAT;;;AACM;;AAAkB;;AAAlB;AAAJ;;;AAAiC;;;;;;;;;;AAAP;;;;;;;;;;;AAEnB;AAAA;;;;AAAT;;;AC1EuD;;AAAA;;AAAA;AAAA;AAAA;;AD2E5B;AAAA;;AAArB;;;AAAmD;;AAAA;AAAA;AAApB;;AAAA;AAA/B;;;AACK;;;;;;;;;;AAAP;;;;;;;;;;;AAIK;AAAA;;;;AAAT;;;AAzGmE;;AAAA;;AAAA;AAAA;AAAA;;AA0GtC;AAAA;;;;;;AAAvB;;;AAAwC;;AAAgC;;AAAA;AAAA;AAAM;AAA7C;;;;;AAAjC;;;AACK;;;;;;;;;;;;;;AAMX;;AAAA;ADxEF;;;AAEc;;AAAA;;AAAA;AAd+D;;AAAA;AAAA;AAkB/C;AAAA;AAA5B;AAGF;;;AAGyB;;AACrB;AAFF;;AAIE;AAJF;;AAME;;AANF;;;AAQ2C;;AAApC;;AAAA;;AAAA;;;AAAP;AAKF;;;AAOsC;;AAEhC;;AAAA;;AAAoB;;;AACxB;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AACA;AAGF;;;AAEc;;AAAA;;AAAA;AAjDD;;AAAA;AAAA;AAAA;AAkD8B;AAAA;;AAArC;;;AAAoD;;AAAP;AAAA;AACN;;AAAA;AAAA;AAA3C;AAAA;AAGF;;;;;;AAEM;;AAAA;;AAAA;AAAJ;;;AAAgC;;AAAP;;AAAA;AACR;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAvDoD;;AAAA;AAAA;AAAA;AAAA;;AAwDxC;AAAA;;AAAzB;;;AAA4D;;AAAA;AAAA;AAAM;AAAW;AAA1C;AAAnC;;;AACK;;AAAP;;AAAA;AAEgB;;AAAyE;AAAzE;AA3DmD;;AAAA;AAAA;AAAA;AAAA;;AA4DvC;AAAA;;AAA1B;;;AAA8D;;AAAA;AAAA;AAAM;AAAW;AAA3C;AAApC;;;AACK;;AAAP;;AAAA;AAEK;;AAAP;;AAAA;AAGF;;;AAE8B;;AAArB;;AAAA;AAAP;AACY;;AAAA;;AAAA;AAAA;;AAAA;AArEyD;;AAAA;AAAA;AAsEzC;;AAA5B;;AAGF;;;AAE8B;;AAArB;;AAAA;AAAP;AACY;;AAAA;;AAAA;AAAA;;AAAA;AA5EyD;;AAAA;AAAA;AAAA;AA6E7C;AAAA;;AAAxB;;;AACsB;;AAAA;;;AAIxB;;;;AAQsC;;AAEnB;;AAFX;;AAEW;;AAAA;;;;AAAkD;AAAW;AAA7D;AAAb;;AAEA;;;AAEW;;AAAA;;AAAA;AAAA;;AAAA;AA/FiF;;AAAA;AAAA;AAAA;AAAA;;AAgGrD;AAAA;;AAAzC;;;AACyD;;AAAA;AAAA;AAAA;AAChD;AAAA;;AAAA;AAAP;AACa;AAAb;;AAG+D;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA7C;;;;;;;AAGJ;AACI;;AAAA;;AAAoB;;;AACxB;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AACA;;AAAA;AAGF;;;;;;;;AA6EyB;;AAAA;;AAAA;AAlMoD;;AAAA;AAAA;AAAA;AAkMgB;AAAA;;AArEvF;;;AACK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;;AAAA;AAOkF;;AAAA;AAAA;AAAlF;;AAAA;AADF;;;AAGS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;;AAAA;AAOE;;AAAO;AAAP;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;;AAAA;AAQI;;AAAkC;AAAlC;;AACF;;AAAA;AAAJ;;;AACmB;;AAAA;;AAAA;;AAAA;;;;AAAsD;AAAW;AAAjE;AAAb;AAAA;;;;;AACA;;;AACW;;AAAA;;AAAA;AAAA;;AAAA;AArJ+E;;AAAA;AAAA;AAAA;AAAA;;AAsJnD;AAAA;;;;;;AAAzC;;;AACyD;;AAAA;AAAA;AACnD;;AAAA;AAAJ;;;AACe;AAAb;;;;;;;;AAIF;;;AACK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;;AAAA;AAQA;;AAAA;;AAAoB;;;AAEjB;;;;;AAAA;AAAA;AAEG;;;;;;;;;;;AAFH;AAAP;;AAAA;AAYF;;;AAC0B;AACJ;;AAAA;;AAAA;AA5LuD;;AAAA;AAAA;AA4Le;AAAA;;AAA1F;;;;;;;AAGA;;AAAA;AAAA;AAgBF;;;;;;;;;;AA9MqF;;;;;;AAAA;;AAAA;AAAA;AAgNrC;AAAA;;AAA1C;;;AACF;;AAFS;;AAET;AAEwD;;AAAA;AAAA;AAAA;;AAAA;AAC9C;AAAR;;AALO;;AAMF;;AAAwB;;AAAA;AAAA;AAAA;;AAAkB;;AAAA;AAAA;AAAA;;AAA1B;AAAzB;;;AACuB;;AAAA;;AAAA;AApNZ;;AAAA;AAAA;AAAA;AAAA;;AAwNyC;AAAA;;AAA9C;;;AACoD;;AAAA;;AAAA;AAAtD;;AAAA;AAAA;;AAAA;AAAA;AAGoE;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA1BxE;AAAA;AAAA;;;;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACM;;AAAA;AAAJ;;;AAAoB;AAyBpB;;;AACU;AAAR;;AAIA;;AAAA;;;AACmB;;AAAA;;AAAA;AAlOZ;;AAAA;AAAA;AAAA;AAAA;;AAsOwE;AAAA;AAAM;AAAA;AAApE;AACJ;AAAS;;AAApB;AAAJ;;;AAGoD;;AAAA;AAAA;AAAA;AADG;;;AAEnD;;AAAA;;AAAA;AAFmD;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAArD;;AAAA;;AAAA;;AAKqC;;AAAkB;AAAlB;AAAjB;AACpB;;AAAA;;AAAA;AACwB;;AAAA;AAAA;AAIiC;;AAAA;;AAAA;AApPlD;;AAAA;;AAAA;AAoPP;AAAA;;AAAA;AAAA;;AAjCkF;;AAAiB;AAAjB;AAAjB;AAAA;;;;;;;;;;;;;;AAd9D;AAuBD;;;AAsCR;;;;;AAQS;;AAAgB;;AAAhB;AAAP;AAEgB;;AAAA;;AAAA;AA/Q2D;;AAAA;AAAA;AAAA;AAgR7C;AAAA;;AAA1B;;;AACF;;AAAiC;AAAjC;AAE0E;;AAAA;AAAA;AAAA;AAAzB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAjC;AAKE;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAFF;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAYI;;AAAA;;AAAA;AAAJ;;;AACE;;AAAA;;AAAA;;;AAIY;;AAAA;;AAAA;AAvS6D;;AAAA;AAAA;AAAA;AAAA;;AAwS/C;AAAA;;AAAxB;;;AACF;;AAA+B;AAA/B;AAEsE;;AAAA;AAAA;AAAA;AAAvB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA/B;;AAGF;;;AAO8B;;AAArB;;AAAA;AAAP;AACY;;AAAA;;AAAA;AAAA;;AAAA;AAhToF;;AAAA;AAAA;AAiThG;;AAAA;;AAGF;;;;AAMM;;AAAA;;AAAA;AAAJ;;;AAAgC;;AAAP;AAAA;AACb;;AAAA;;AAAA;AAAA;;AAAA;AA3ToF;;AAAA;AAAA;AAAA;AAAA;;AA4TvD;AAAA;;AAArC;;;AAAoD;;AAAP;AAAA;AACQ;;AAAA;AAAA;AAAe;;AAAnD;AAAd;;AAAA;AAAA;;AAAA;AAAP;AAAA;AAGF;;;;;AAOkD;;AAAzC;;;;AAAkD;AAAW;AAA7D;AAAP;AACO;;AAAgB;;AAAhB;AAAP;AAEc;;AAAA;;AAAA;AAAA;AAhV6D;;AAAA;AAAA;AAAA;AAiV/C;AAAA;;AAAxB;;;AACF;;AAA+B;AAA/B;AACA;;AAAA;;AAAA;;;AAEsE;;AAAA;AAAA;AAAA;AAAvB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA/B;AEzVuD;;AAAA;;AAAA;AAAA;AAAA;;AF2VhC;AAAA;;AAAnB;;;AACF;;AAA0B;AAA1B;AAE4D;;AAAA;AAAA;AAAA;AAAlB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA1B;AEhWgD;AAAA;AAAA;AAAA;AFiWL;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AEjWuB;AFiWhD;AAAA;AACc;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAd;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;AAGF;;;AAEoC;;AAC3B;;AAAgB;;AAAhB;AAAP;AACgB;AAAA;;AAAA;AAAA;AAAA;;AAnW2D;;AAAA;AAAA;AAoW3C;AAAA;AAAA;;AAAhC;AACgC;AAAA;AAAA;AAAzB;;AAAA;AAAP;AAC4E;AAAA;AAAA;AAAzB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAjC;AE1WuD;;AAAA;AAAA;AAAA;AF4W5B;AAAA;;AAApB;;;AAAkD;;AAAA;AAAA;AAApB;;AAAA;AAA9B;;;;AAAP;AACkE;;AAAA;AAAA;AAAA;AAApB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA5B;AE/WgD;AAAA;AAAA;AAAA;AFgXL;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AEhXuB;AFgXhD;AAAA;AACe;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAf;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAGF;;;;;;AAOsC;;AAEnB;;AAFX;;AAEW;;AAAA;;;;AAAkD;AAAW;AAA7D;AAAb;;AACA;;;AACW;;AAAA;;AAAA;AAAA;;AAAA;AAnXiF;;AAAA;AAAA;AAAA;AAAA;;AAoXrD;AAAA;;AAAzC;;;AACyD;;AAAA;AAAA;AAAA;AAChD;AAAA;;AAAA;AAAP;AACa;AAAb;;AAC+D;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA7C;;;;;;;AAGJ;AAEgB;;AAAA;;AAAA;AAAA;AAAA;;AAnY2D;;AAAA;AAAA;AAoY3C;AAAA;AAAA;;AAAhC;AACgC;AAAA;AAAA;AAAzB;;AAAA;AAAP;AAC4E;AAAA;AAAA;AAAzB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAjC;AE1YuD;;AAAA;;AAAA;AAAA;AAAA;;AF2Y5B;AAAA;;AAApB;;;AAAkD;;AAAA;AAAA;AAApB;;AAAA;AAA9B;;;;AAAP;AACkE;;AAAA;AAAA;AAAA;AAApB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA5B;AE9YgD;AAAA;AAAA;AAAA;AF+YL;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AE/YuB;AF+YhD;AAAA;AACe;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAf;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AE3YF;;;AAEa;;AAAkB;;AAAtB;AAAP;AACY;;AAAA;;;AAAO;AAAnB;AAAA;AAC6B;AAAtB;AAAP;AACc;;AAAA;;;AAAO;AAArB;AAAA;AAC+B;AAAxB;AAAP;AAXgD;AAAA;AAYvB;AAAA;;AAAlB;AAAP;AAxB6C;;;AA0B7C;;AAAA;AAtB+C;;;AAuB/C;;AAAA;AAfgD;AAgBhD;;AAAA;AApB2C;;;AAqB3C;;AAAA;AAC+B;;AAhBwB;;AAAA;;AAAA;AAkBvD;;AAAA;AAEoD;;AAA/C;AAAA;AAAA;;AAAA;AAAL;;AAAA;AAAA;AAAA;AACO;;AAAP;AAnC6C;AAAA;;;AAAA;AAAA;AA6CF;;;AAApC;AAAA;AAAA;AAAA;AAAA;AAAP;AAzC+C;AAAA;;;AAAA;AAAA;AAmDH;;;AAArC;AAAA;AAAA;AAAA;AAAA;AAAP;AA/C2C;AAAA;;;AAAA;AAAA;AAyD3C;AArDgD;AAAA;AAAA;AAAA;AA+DhD;AASF;;;AAES;;AAAA;;;AAAP;AAuBF;;;AAEkC;;AAC1B;;AAAA;;AAAoB;;;AACnB;AAAA;;AAAA;AAAP;AAC2C;;AAAA;AAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9B;;AAAA;;AAAA;;;;AACO;;AAAA;;AAAA;;AAAA;;;AAAP;AAUF;;;AAEgC;;AACvB;;AAAA;;AAAA;;;AAAP;AASF;;;AAES;;AAAA;;AAAA;;;AAAP;AAGF;;;AAjIyD;;AAAA;;AAAA;AAAA;AAkI7B;AAAA;;AAAtB;;;AAAqC;AAAP;AAAA;AACN;;AAAA;AAAA;AAA5B;AAAA;AAGF;;;AACQ;;AAAiB;;;AAAjB;AACA;;AAAoB;;;AAApB;AACC;;AAAA;AAAP;AAEI;;AAAA;;AAAA;AAAJ;;;AAE6C;;AAAA;;AAAA;AAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AA7IuB;;AAAA;;AAAA;AA6IrD;AAAA;AAC8C;;AAAA;;AAAA;AAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AA9IoB;;AAAA;;AAAA;AA8IrD;AAAA;AAEG;;AAAA;;AAAA;AAAA;;AAAA;AAAL;;AAAA;AAAA;AAAA;AACO;;AAAP;;AAAA;AAEF;;;AACuC;;AAAA;;AAAA;AAAV;AAApB;AAAA;AAAA;AAAA;AAAA;AAAP;AAGF;;;AACQ;;AAAA;;AAAM;;;AAtJ0D;;;AAAA;AAAA;AAAA;AAuJ7C;AAAA;;AAArB;;;AAAoC;AAAP;AAAA;AACN;;AAAA;AAAA;AAAM;;;AAAjC;AAAA;AAGF;;;AACQ;;AAAA;;AAAM;;;AACwB;;AAAA;;AAAA;AAAA;;AAAA;AA7JkC;;;AAAA;;AAAA;AAkKtE;AAAA;AACK;;AAAA;;AAAA;AAAA;;AAAA;AAAL;;;;;;AAAA;AAAA;AAAA;AACO;;AAAP;ACxMiD;AAAA;;AAQ3B;AAAA;;AAAlB;;;AAR6C;AAAA;;AAAA;AAAA;AAQQ;AAArD;;;AAV0C;AAAA;AAW5B;AAAA;;AAAZ;;;AAXwC;AAYC;;AAA3C;AAV6C;;AAYtB;;AAAzB;;AAMF;;;AApB8C;AAAA;AAAA;AAAA;AAqB9C;AAGF;;;AAEE;;;AA1B8C;AAAA;AA2B9B;AAAA;;AAAZ;;;AAA6B;;AAAP;AA3BoB;AAAA;AAAA;AAAA;AA4BrB;AAArB;AAAJ;;;AAAoD;;AAAP;AA5BC;AAAA;AAAA;AAAA;AA6BzB;;AAAA;AAAd;;AAAA;AAAA;;AAAA;AAAP;AAIF;;;AA/BmD;AAAA;;AAiCvB;AAAA;;AAAjB;;;AAjCwC;AAAA;;AAAA;AAAA;AAiCY;AAAW;AAAlC;AAA7B;;;;AAAF;AAAP;AACO;;AAAc;AAAd;AAAP;AApC8C;AAqC9C;;AAAA;AAnCiD;;AAoCxB;;AAAzB;;;;;;AAGF;;;AAEE;;;AAC4B;;AA5CkB;AAAA;AAAA;AAAA;AA4CvC;AAAP;AACO;;AAAc;AAAd;AAAP;AA7C8C;AAAA;AAAA;AAAA;AAAA;AA+C9C;;AAAA;AACK;;AAAA;AAAL;;AAAA;AAAA;AAAA;;AAKA;;;AAC4B;;AAtDkB;AAAA;AAAA;AAAA;AAsDvC;AAAP;AAtD8C;AAAA;AAAA;AAAA;AAAA;AAwD3B;AAAnB;AACA;;;;;;AAAA;AAAA;AAAA;;AAIF;;;AAEE;;;AAC4B;;AAhEkB;AAAA;AAAA;AAAA;AAgEvC;AAAP;AACO;;AAAY;AAAZ;AAAP;AAhEqD;AAAA;;AAiE/B;AAAA;;AAAlB;;;AAjEiD;AAAA;;AAAA;AAAA;AAiES;AAA5B;AAA9B;AAAA;AAjEiD;;AAoErD;;AAAA;AArE8C;AAAA;AAAA;AAAA;AAsEzC;;AAAA;AAAL;;;;;;AAAA;AAAA;AAAA;;AAKA;;;AA1EqD;AAAA;;AA2E5B;AAAA;;AAAzB;AACoC;;AA5EiB;AAAA;;AAAA;AAAA;AA6E9C;;AAAA;AAAP;AA9E8C;AAAA;AAAA;AAAA;AAAA;AAgF9C;;AAAA;AA/EqD;;AAgF3B;AAA1B;AACK;AAAA;AAAL;;;;;;AAAA;;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;;AAKA;;;AAC4B;;AAzFkB;AAAA;AAAA;AAAA;AAyFvC;AAAP;AAxFqD;;AAyF3B;AAA1B;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 32 8"
    },
    "7": {
      "op": "bytecblock 0x0000000000000000000000000000000000000000000000000000000000000000 0x151f7c75 \"arc88_o\" \"t\" \"p\" \"b\" 0x0002 0x80 \"arc88_po\" 0x00 \"arc88_oi\" \"opa\" \"hp_a\" \"op\" \"hlt\" \"kyc\" 0x0042 0x0000000000000000 0x01 0x0001 0x0062 \"lku\" 0xd7fc4a98 0x0000 0x5c27b4fc 0x7983c35c 0x4355d2ad"
    },
    "153": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "155": {
      "op": "bz main_bare_routing@45",
      "stack_out": []
    },
    "158": {
      "op": "pushbytess 0x77d8245c 0xacb526ec 0x7d696ace 0x0130599b 0x142b5fcb 0xf8838eb9 0x3fa506a9 0x35f8135f 0xda7025b9 0x3f256713 0x95b4f9e3 0x80cc49ab 0x07962165 0xe78961da 0xfd9480d7 0xb1b1d69a 0xc1bed789 0x3bfe1833 0x599cd1a5 0x6de94166 0x28f023d7 0x975382e2 0x657d13ec 0xb6ae1a25 0x84ec13d5 0xec996041 0x82e573c4 0x4a968f8f 0xb5422125 0xbbb319f3 0x0702654e 0xd015724e 0x029fecc0 0x7349334e 0xdb7c82ef 0xfd2c2c6e 0x42a5f065 0xad4f68ea // method \"arc1594_set_halt(uint64)void\", method \"arc1594_set_kyc(address,uint64)void\", method \"arc1594_set_lockup(address,uint64)void\", method \"arc1594_issue(address,uint256,byte[])void\", method \"arc1594_redeemFrom(address,uint256,byte[])void\", method \"arc1594_redeem(uint256,byte[])void\", method \"arc1594_validate_transfer(address,address,uint256,byte[])uint64\", method \"arc1410_balance_of_partition(address,address)uint256\", method \"arc200_transfer(address,uint256)bool\", method \"arc1410_transfer_by_partition(address,address,uint256,byte[])address\", method \"arc1410_partitions_of(address,uint64)address[]\", method \"arc1410_is_operator(address,address,address)bool\", method \"arc1410_authorize_operator(address,address,address)void\", method \"arc1410_revoke_operator(address,address,address)void\", method \"arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address\", method \"arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)\", method \"arc1410_authorize_operator_by_portion(address,address,address,uint256)void\", method \"arc1410_is_operator_by_portion(address,address,address)bool\", method \"arc1410_issue_by_partition(address,address,uint256,byte[])void\", method \"arc1410_redeem_by_partition(address,uint256,byte[])void\", method \"arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void\", method \"bootstrap(byte[],byte[],uint8,uint256)bool\", method \"arc200_name()byte[32]\", method \"arc200_symbol()byte[8]\", method \"arc200_decimals()uint8\", method \"arc200_totalSupply()uint256\", method \"arc200_balanceOf(address)uint256\", method \"arc200_transferFrom(address,address,uint256)bool\", method \"arc200_approve(address,uint256)bool\", method \"arc200_allowance(address,address)uint256\", method \"arc88_owner()address\", method \"arc88_is_owner(address)bool\", method \"arc88_initialize_owner(address)void\", method \"arc88_transfer_ownership(address)void\", method \"arc88_renounce_ownership()void\", method \"arc88_transfer_ownership_request(address)void\", method \"arc88_accept_ownership()void\", method \"arc88_cancel_ownership_request()void\"",
      "defined_out": [
        "Method(arc1410_authorize_operator(address,address,address)void)",
        "Method(arc1410_authorize_operator_by_portion(address,address,address,uint256)void)",
        "Method(arc1410_balance_of_partition(address,address)uint256)",
        "Method(arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address))",
        "Method(arc1410_is_operator(address,address,address)bool)",
        "Method(arc1410_is_operator_by_portion(address,address,address)bool)",
        "Method(arc1410_issue_by_partition(address,address,uint256,byte[])void)",
        "Method(arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void)",
        "Method(arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address)",
        "Method(arc1410_partitions_of(address,uint64)address[])",
        "Method(arc1410_redeem_by_partition(address,uint256,byte[])void)",
        "Method(arc1410_revoke_operator(address,address,address)void)",
        "Method(arc1410_transfer_by_partition(address,address,uint256,byte[])address)",
        "Method(arc1594_issue(address,uint256,byte[])void)",
        "Method(arc1594_redeem(uint256,byte[])void)",
        "Method(arc1594_redeemFrom(address,uint256,byte[])void)",
        "Method(arc1594_set_halt(uint64)void)",
        "Method(arc1594_set_kyc(address,uint64)void)",
        "Method(arc1594_set_lockup(address,uint64)void)",
        "Method(arc1594_validate_transfer(address,address,uint256,byte[])uint64)",
        "Method(arc200_allowance(address,address)uint256)",
        "Method(arc200_approve(address,uint256)bool)",
        "Method(arc200_balanceOf(address)uint256)",
        "Method(arc200_decimals()uint8)",
        "Method(arc200_name()byte[32])",
        "Method(arc200_symbol()byte[8])",
        "Method(arc200_totalSupply()uint256)",
        "Method(arc200_transfer(address,uint256)bool)",
        "Method(arc200_transferFrom(address,address,uint256)bool)",
        "Method(arc88_accept_ownership()void)",
        "Method(arc88_cancel_ownership_request()void)",
        "Method(arc88_initialize_owner(address)void)",
        "Method(arc88_is_owner(address)bool)",
        "Method(arc88_owner()address)",
        "Method(arc88_renounce_ownership()void)",
        "Method(arc88_transfer_ownership(address)void)",
        "Method(arc88_transfer_ownership_request(address)void)",
        "Method(bootstrap(byte[],byte[],uint8,uint256)bool)"
      ],
      "stack_out": [
        "Method(arc1594_set_halt(uint64)void)",
        "Method(arc1594_set_kyc(address,uint64)void)",
        "Method(arc1594_set_lockup(address,uint64)void)",
        "Method(arc1594_issue(address,uint256,byte[])void)",
        "Method(arc1594_redeemFrom(address,uint256,byte[])void)",
        "Method(arc1594_redeem(uint256,byte[])void)",
        "Method(arc1594_validate_transfer(address,address,uint256,byte[])uint64)",
        "Method(arc1410_balance_of_partition(address,address)uint256)",
        "Method(arc200_transfer(address,uint256)bool)",
        "Method(arc1410_transfer_by_partition(address,address,uint256,byte[])address)",
        "Method(arc1410_partitions_of(address,uint64)address[])",
        "Method(arc1410_is_operator(address,address,address)bool)",
        "Method(arc1410_authorize_operator(address,address,address)void)",
        "Method(arc1410_revoke_operator(address,address,address)void)",
        "Method(arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address)",
        "Method(arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address))",
        "Method(arc1410_authorize_operator_by_portion(address,address,address,uint256)void)",
        "Method(arc1410_is_operator_by_portion(address,address,address)bool)",
        "Method(arc1410_issue_by_partition(address,address,uint256,byte[])void)",
        "Method(arc1410_redeem_by_partition(address,uint256,byte[])void)",
        "Method(arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void)",
        "Method(bootstrap(byte[],byte[],uint8,uint256)bool)",
        "Method(arc200_name()byte[32])",
        "Method(arc200_symbol()byte[8])",
        "Method(arc200_decimals()uint8)",
        "Method(arc200_totalSupply()uint256)",
        "Method(arc200_balanceOf(address)uint256)",
        "Method(arc200_transferFrom(address,address,uint256)bool)",
        "Method(arc200_approve(address,uint256)bool)",
        "Method(arc200_allowance(address,address)uint256)",
        "Method(arc88_owner()address)",
        "Method(arc88_is_owner(address)bool)",
        "Method(arc88_initialize_owner(address)void)",
        "Method(arc88_transfer_ownership(address)void)",
        "Method(arc88_renounce_ownership()void)",
        "Method(arc88_transfer_ownership_request(address)void)",
        "Method(arc88_accept_ownership()void)",
        "Method(arc88_cancel_ownership_request()void)"
      ]
    },
    "350": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(arc1410_authorize_operator(address,address,address)void)",
        "Method(arc1410_authorize_operator_by_portion(address,address,address,uint256)void)",
        "Method(arc1410_balance_of_partition(address,address)uint256)",
        "Method(arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address))",
        "Method(arc1410_is_operator(address,address,address)bool)",
        "Method(arc1410_is_operator_by_portion(address,address,address)bool)",
        "Method(arc1410_issue_by_partition(address,address,uint256,byte[])void)",
        "Method(arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void)",
        "Method(arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address)",
        "Method(arc1410_partitions_of(address,uint64)address[])",
        "Method(arc1410_redeem_by_partition(address,uint256,byte[])void)",
        "Method(arc1410_revoke_operator(address,address,address)void)",
        "Method(arc1410_transfer_by_partition(address,address,uint256,byte[])address)",
        "Method(arc1594_issue(address,uint256,byte[])void)",
        "Method(arc1594_redeem(uint256,byte[])void)",
        "Method(arc1594_redeemFrom(address,uint256,byte[])void)",
        "Method(arc1594_set_halt(uint64)void)",
        "Method(arc1594_set_kyc(address,uint64)void)",
        "Method(arc1594_set_lockup(address,uint64)void)",
        "Method(arc1594_validate_transfer(address,address,uint256,byte[])uint64)",
        "Method(arc200_allowance(address,address)uint256)",
        "Method(arc200_approve(address,uint256)bool)",
        "Method(arc200_balanceOf(address)uint256)",
        "Method(arc200_decimals()uint8)",
        "Method(arc200_name()byte[32])",
        "Method(arc200_symbol()byte[8])",
        "Method(arc200_totalSupply()uint256)",
        "Method(arc200_transfer(address,uint256)bool)",
        "Method(arc200_transferFrom(address,address,uint256)bool)",
        "Method(arc88_accept_ownership()void)",
        "Method(arc88_cancel_ownership_request()void)",
        "Method(arc88_initialize_owner(address)void)",
        "Method(arc88_is_owner(address)bool)",
        "Method(arc88_owner()address)",
        "Method(arc88_renounce_ownership()void)",
        "Method(arc88_transfer_ownership(address)void)",
        "Method(arc88_transfer_ownership_request(address)void)",
        "Method(bootstrap(byte[],byte[],uint8,uint256)bool)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(arc1594_set_halt(uint64)void)",
        "Method(arc1594_set_kyc(address,uint64)void)",
        "Method(arc1594_set_lockup(address,uint64)void)",
        "Method(arc1594_issue(address,uint256,byte[])void)",
        "Method(arc1594_redeemFrom(address,uint256,byte[])void)",
        "Method(arc1594_redeem(uint256,byte[])void)",
        "Method(arc1594_validate_transfer(address,address,uint256,byte[])uint64)",
        "Method(arc1410_balance_of_partition(address,address)uint256)",
        "Method(arc200_transfer(address,uint256)bool)",
        "Method(arc1410_transfer_by_partition(address,address,uint256,byte[])address)",
        "Method(arc1410_partitions_of(address,uint64)address[])",
        "Method(arc1410_is_operator(address,address,address)bool)",
        "Method(arc1410_authorize_operator(address,address,address)void)",
        "Method(arc1410_revoke_operator(address,address,address)void)",
        "Method(arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address)",
        "Method(arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address))",
        "Method(arc1410_authorize_operator_by_portion(address,address,address,uint256)void)",
        "Method(arc1410_is_operator_by_portion(address,address,address)bool)",
        "Method(arc1410_issue_by_partition(address,address,uint256,byte[])void)",
        "Method(arc1410_redeem_by_partition(address,uint256,byte[])void)",
        "Method(arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void)",
        "Method(bootstrap(byte[],byte[],uint8,uint256)bool)",
        "Method(arc200_name()byte[32])",
        "Method(arc200_symbol()byte[8])",
        "Method(arc200_decimals()uint8)",
        "Method(arc200_totalSupply()uint256)",
        "Method(arc200_balanceOf(address)uint256)",
        "Method(arc200_transferFrom(address,address,uint256)bool)",
        "Method(arc200_approve(address,uint256)bool)",
        "Method(arc200_allowance(address,address)uint256)",
        "Method(arc88_owner()address)",
        "Method(arc88_is_owner(address)bool)",
        "Method(arc88_initialize_owner(address)void)",
        "Method(arc88_transfer_ownership(address)void)",
        "Method(arc88_renounce_ownership()void)",
        "Method(arc88_transfer_ownership_request(address)void)",
        "Method(arc88_accept_ownership()void)",
        "Method(arc88_cancel_ownership_request()void)",
        "tmp%2#0"
      ]
    },
    "353": {
      "op": "match main_arc1594_set_halt_route@5 main_arc1594_set_kyc_route@6 main_arc1594_set_lockup_route@7 main_arc1594_issue_route@8 main_arc1594_redeemFrom_route@9 main_arc1594_redeem_route@10 main_arc1594_validate_transfer_route@11 main_arc1410_balance_of_partition_route@12 main_arc200_transfer_route@13 main_arc1410_transfer_by_partition_route@14 main_arc1410_partitions_of_route@15 main_arc1410_is_operator_route@16 main_arc1410_authorize_operator_route@17 main_arc1410_revoke_operator_route@18 main_arc1410_operator_transfer_by_partition_route@19 main_arc1410_can_transfer_by_partition_route@20 main_arc1410_authorize_operator_by_portion_route@21 main_arc1410_is_operator_by_portion_route@22 main_arc1410_issue_by_partition_route@23 main_arc1410_redeem_by_partition_route@24 main_arc1410_operator_redeem_by_partition_route@25 main_bootstrap_route@26 main_arc200_name_route@27 main_arc200_symbol_route@28 main_arc200_decimals_route@29 main_arc200_totalSupply_route@30 main_arc200_balanceOf_route@31 main_arc200_transferFrom_route@32 main_arc200_approve_route@33 main_arc200_allowance_route@34 main_arc88_owner_route@35 main_arc88_is_owner_route@36 main_arc88_initialize_owner_route@37 main_arc88_transfer_ownership_route@38 main_arc88_renounce_ownership_route@39 main_arc88_transfer_ownership_request_route@40 main_arc88_accept_ownership_route@41 main_arc88_cancel_ownership_request_route@42",
      "stack_out": []
    },
    "431": {
      "block": "main_after_if_else@49",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "432": {
      "op": "return",
      "stack_out": []
    },
    "433": {
      "block": "main_arc88_cancel_ownership_request_route@42",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%203#0"
      ],
      "stack_out": [
        "tmp%203#0"
      ]
    },
    "435": {
      "op": "!",
      "defined_out": [
        "tmp%204#0"
      ],
      "stack_out": [
        "tmp%204#0"
      ]
    },
    "436": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "437": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%205#0"
      ],
      "stack_out": [
        "tmp%205#0"
      ]
    },
    "439": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "440": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_cancel_ownership_request",
      "op": "callsub arc88_cancel_ownership_request"
    },
    "443": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "444": {
      "op": "return",
      "stack_out": []
    },
    "445": {
      "block": "main_arc88_accept_ownership_route@41",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%199#0"
      ],
      "stack_out": [
        "tmp%199#0"
      ]
    },
    "447": {
      "op": "!",
      "defined_out": [
        "tmp%200#0"
      ],
      "stack_out": [
        "tmp%200#0"
      ]
    },
    "448": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "449": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%201#0"
      ],
      "stack_out": [
        "tmp%201#0"
      ]
    },
    "451": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "452": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_accept_ownership",
      "op": "callsub arc88_accept_ownership"
    },
    "455": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "456": {
      "op": "return",
      "stack_out": []
    },
    "457": {
      "block": "main_arc88_transfer_ownership_request_route@40",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%195#0"
      ],
      "stack_out": [
        "tmp%195#0"
      ]
    },
    "459": {
      "op": "!",
      "defined_out": [
        "tmp%196#0"
      ],
      "stack_out": [
        "tmp%196#0"
      ]
    },
    "460": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "461": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%197#0"
      ],
      "stack_out": [
        "tmp%197#0"
      ]
    },
    "463": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "464": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%62#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%62#0"
      ]
    },
    "467": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_transfer_ownership_request",
      "op": "callsub arc88_transfer_ownership_request",
      "stack_out": []
    },
    "470": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "471": {
      "op": "return",
      "stack_out": []
    },
    "472": {
      "block": "main_arc88_renounce_ownership_route@39",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%191#0"
      ],
      "stack_out": [
        "tmp%191#0"
      ]
    },
    "474": {
      "op": "!",
      "defined_out": [
        "tmp%192#0"
      ],
      "stack_out": [
        "tmp%192#0"
      ]
    },
    "475": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "476": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%193#0"
      ],
      "stack_out": [
        "tmp%193#0"
      ]
    },
    "478": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "479": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_renounce_ownership",
      "op": "callsub arc88_renounce_ownership"
    },
    "482": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "483": {
      "op": "return",
      "stack_out": []
    },
    "484": {
      "block": "main_arc88_transfer_ownership_route@38",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%187#0"
      ],
      "stack_out": [
        "tmp%187#0"
      ]
    },
    "486": {
      "op": "!",
      "defined_out": [
        "tmp%188#0"
      ],
      "stack_out": [
        "tmp%188#0"
      ]
    },
    "487": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "488": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%189#0"
      ],
      "stack_out": [
        "tmp%189#0"
      ]
    },
    "490": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "491": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%61#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%61#0"
      ]
    },
    "494": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_transfer_ownership",
      "op": "callsub arc88_transfer_ownership",
      "stack_out": []
    },
    "497": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "498": {
      "op": "return",
      "stack_out": []
    },
    "499": {
      "block": "main_arc88_initialize_owner_route@37",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%183#0"
      ],
      "stack_out": [
        "tmp%183#0"
      ]
    },
    "501": {
      "op": "!",
      "defined_out": [
        "tmp%184#0"
      ],
      "stack_out": [
        "tmp%184#0"
      ]
    },
    "502": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "503": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%185#0"
      ],
      "stack_out": [
        "tmp%185#0"
      ]
    },
    "505": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "506": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%60#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%60#0"
      ]
    },
    "509": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_initialize_owner",
      "op": "callsub arc88_initialize_owner",
      "stack_out": []
    },
    "512": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "513": {
      "op": "return",
      "stack_out": []
    },
    "514": {
      "block": "main_arc88_is_owner_route@36",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%177#0"
      ],
      "stack_out": [
        "tmp%177#0"
      ]
    },
    "516": {
      "op": "!",
      "defined_out": [
        "tmp%178#0"
      ],
      "stack_out": [
        "tmp%178#0"
      ]
    },
    "517": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "518": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%179#0"
      ],
      "stack_out": [
        "tmp%179#0"
      ]
    },
    "520": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "521": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%59#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%59#0"
      ]
    },
    "524": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_is_owner",
      "op": "callsub arc88_is_owner",
      "defined_out": [
        "tmp%181#0"
      ],
      "stack_out": [
        "tmp%181#0"
      ]
    },
    "527": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%181#0"
      ],
      "stack_out": [
        "tmp%181#0",
        "0x151f7c75"
      ]
    },
    "528": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%181#0"
      ]
    },
    "529": {
      "op": "concat",
      "defined_out": [
        "tmp%182#0"
      ],
      "stack_out": [
        "tmp%182#0"
      ]
    },
    "530": {
      "op": "log",
      "stack_out": []
    },
    "531": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "532": {
      "op": "return",
      "stack_out": []
    },
    "533": {
      "block": "main_arc88_owner_route@35",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%171#0"
      ]
    },
    "535": {
      "op": "!",
      "defined_out": [
        "tmp%172#0"
      ],
      "stack_out": [
        "tmp%172#0"
      ]
    },
    "536": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "537": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%173#0"
      ],
      "stack_out": [
        "tmp%173#0"
      ]
    },
    "539": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "540": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_owner",
      "op": "callsub arc88_owner",
      "defined_out": [
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0"
      ]
    },
    "543": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0",
        "0x151f7c75"
      ]
    },
    "544": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%175#0"
      ]
    },
    "545": {
      "op": "concat",
      "defined_out": [
        "tmp%176#0"
      ],
      "stack_out": [
        "tmp%176#0"
      ]
    },
    "546": {
      "op": "log",
      "stack_out": []
    },
    "547": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "548": {
      "op": "return",
      "stack_out": []
    },
    "549": {
      "block": "main_arc200_allowance_route@34",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%165#0"
      ]
    },
    "551": {
      "op": "!",
      "defined_out": [
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%166#0"
      ]
    },
    "552": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "553": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%167#0"
      ],
      "stack_out": [
        "tmp%167#0"
      ]
    },
    "555": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "556": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%57#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%57#0"
      ]
    },
    "559": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%57#0",
        "reinterpret_bytes[32]%58#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%57#0",
        "reinterpret_bytes[32]%58#0"
      ]
    },
    "562": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_allowance",
      "op": "callsub arc200_allowance",
      "defined_out": [
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%169#0"
      ]
    },
    "565": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%169#0",
        "0x151f7c75"
      ]
    },
    "566": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%169#0"
      ]
    },
    "567": {
      "op": "concat",
      "defined_out": [
        "tmp%170#0"
      ],
      "stack_out": [
        "tmp%170#0"
      ]
    },
    "568": {
      "op": "log",
      "stack_out": []
    },
    "569": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "570": {
      "op": "return",
      "stack_out": []
    },
    "571": {
      "block": "main_arc200_approve_route@33",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%159#0"
      ]
    },
    "573": {
      "op": "!",
      "defined_out": [
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%160#0"
      ]
    },
    "574": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "575": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0"
      ]
    },
    "577": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "578": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%55#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%55#0"
      ]
    },
    "581": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%55#0",
        "reinterpret_bytes[32]%56#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%55#0",
        "reinterpret_bytes[32]%56#0"
      ]
    },
    "584": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_approve",
      "op": "callsub arc200_approve",
      "defined_out": [
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%163#0"
      ]
    },
    "587": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%163#0",
        "0x151f7c75"
      ]
    },
    "588": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%163#0"
      ]
    },
    "589": {
      "op": "concat",
      "defined_out": [
        "tmp%164#0"
      ],
      "stack_out": [
        "tmp%164#0"
      ]
    },
    "590": {
      "op": "log",
      "stack_out": []
    },
    "591": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "592": {
      "op": "return",
      "stack_out": []
    },
    "593": {
      "block": "main_arc200_transferFrom_route@32",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%153#0"
      ]
    },
    "595": {
      "op": "!",
      "defined_out": [
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0"
      ]
    },
    "596": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "597": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%155#0"
      ],
      "stack_out": [
        "tmp%155#0"
      ]
    },
    "599": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "600": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%52#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%52#0"
      ]
    },
    "603": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%52#0",
        "reinterpret_bytes[32]%53#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%52#0",
        "reinterpret_bytes[32]%53#0"
      ]
    },
    "606": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%52#0",
        "reinterpret_bytes[32]%53#0",
        "reinterpret_bytes[32]%54#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%52#0",
        "reinterpret_bytes[32]%53#0",
        "reinterpret_bytes[32]%54#0"
      ]
    },
    "609": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_transferFrom",
      "op": "callsub arc200_transferFrom",
      "defined_out": [
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0"
      ]
    },
    "612": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "0x151f7c75"
      ]
    },
    "613": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%157#0"
      ]
    },
    "614": {
      "op": "concat",
      "defined_out": [
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%158#0"
      ]
    },
    "615": {
      "op": "log",
      "stack_out": []
    },
    "616": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "617": {
      "op": "return",
      "stack_out": []
    },
    "618": {
      "block": "main_arc200_balanceOf_route@31",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0"
      ]
    },
    "620": {
      "op": "!",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%148#0"
      ]
    },
    "621": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "622": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%149#0"
      ]
    },
    "624": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "625": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%51#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%51#0"
      ]
    },
    "628": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_balanceOf",
      "op": "callsub arc200_balanceOf",
      "defined_out": [
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%151#0"
      ]
    },
    "631": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "0x151f7c75"
      ]
    },
    "632": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%151#0"
      ]
    },
    "633": {
      "op": "concat",
      "defined_out": [
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%152#0"
      ]
    },
    "634": {
      "op": "log",
      "stack_out": []
    },
    "635": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "636": {
      "op": "return",
      "stack_out": []
    },
    "637": {
      "block": "main_arc200_totalSupply_route@30",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "639": {
      "op": "!",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "640": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "641": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0"
      ]
    },
    "643": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "644": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_totalSupply",
      "op": "callsub arc200_totalSupply",
      "defined_out": [
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%145#0"
      ]
    },
    "647": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%145#0",
        "0x151f7c75"
      ]
    },
    "648": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%145#0"
      ]
    },
    "649": {
      "op": "concat",
      "defined_out": [
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0"
      ]
    },
    "650": {
      "op": "log",
      "stack_out": []
    },
    "651": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "652": {
      "op": "return",
      "stack_out": []
    },
    "653": {
      "block": "main_arc200_decimals_route@29",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "655": {
      "op": "!",
      "defined_out": [
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0"
      ]
    },
    "656": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "657": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0"
      ]
    },
    "659": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "660": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_decimals",
      "op": "callsub arc200_decimals",
      "defined_out": [
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%139#0"
      ]
    },
    "663": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%139#0",
        "0x151f7c75"
      ]
    },
    "664": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%139#0"
      ]
    },
    "665": {
      "op": "concat",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0"
      ]
    },
    "666": {
      "op": "log",
      "stack_out": []
    },
    "667": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "668": {
      "op": "return",
      "stack_out": []
    },
    "669": {
      "block": "main_arc200_symbol_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0"
      ]
    },
    "671": {
      "op": "!",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "672": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "673": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "675": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "676": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_symbol",
      "op": "callsub arc200_symbol",
      "defined_out": [
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%133#0"
      ]
    },
    "679": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%133#0",
        "0x151f7c75"
      ]
    },
    "680": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%133#0"
      ]
    },
    "681": {
      "op": "concat",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "682": {
      "op": "log",
      "stack_out": []
    },
    "683": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "684": {
      "op": "return",
      "stack_out": []
    },
    "685": {
      "block": "main_arc200_name_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0"
      ]
    },
    "687": {
      "op": "!",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0"
      ]
    },
    "688": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "689": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "691": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "692": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_name",
      "op": "callsub arc200_name",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "695": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0",
        "0x151f7c75"
      ]
    },
    "696": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%127#0"
      ]
    },
    "697": {
      "op": "concat",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "698": {
      "op": "log",
      "stack_out": []
    },
    "699": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "700": {
      "op": "return",
      "stack_out": []
    },
    "701": {
      "block": "main_bootstrap_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "703": {
      "op": "!",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "704": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "705": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "707": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "708": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "711": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%119#0",
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%119#0",
        "tmp%120#0"
      ]
    },
    "714": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "tmp%119#0",
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%119#0",
        "tmp%120#0",
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "717": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[32]%50#0",
        "tmp%119#0",
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%119#0",
        "tmp%120#0",
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[32]%50#0"
      ]
    },
    "720": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.bootstrap",
      "op": "callsub bootstrap",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "723": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0",
        "0x151f7c75"
      ]
    },
    "724": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%121#0"
      ]
    },
    "725": {
      "op": "concat",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "726": {
      "op": "log",
      "stack_out": []
    },
    "727": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "728": {
      "op": "return",
      "stack_out": []
    },
    "729": {
      "block": "main_arc1410_operator_redeem_by_partition_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "731": {
      "op": "!",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "732": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "733": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "735": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "736": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%47#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%47#0"
      ]
    },
    "739": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%47#0",
        "reinterpret_bytes[32]%48#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%47#0",
        "reinterpret_bytes[32]%48#0"
      ]
    },
    "742": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%47#0",
        "reinterpret_bytes[32]%48#0",
        "reinterpret_bytes[32]%49#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%47#0",
        "reinterpret_bytes[32]%48#0",
        "reinterpret_bytes[32]%49#0"
      ]
    },
    "745": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%47#0",
        "reinterpret_bytes[32]%48#0",
        "reinterpret_bytes[32]%49#0",
        "tmp%114#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%47#0",
        "reinterpret_bytes[32]%48#0",
        "reinterpret_bytes[32]%49#0",
        "tmp%114#0"
      ]
    },
    "748": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_operator_redeem_by_partition",
      "op": "callsub arc1410_operator_redeem_by_partition",
      "stack_out": []
    },
    "751": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "752": {
      "op": "return",
      "stack_out": []
    },
    "753": {
      "block": "main_arc1410_redeem_by_partition_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "755": {
      "op": "!",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "756": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "757": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "759": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "760": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%45#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%45#0"
      ]
    },
    "763": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%45#0",
        "reinterpret_bytes[32]%46#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%45#0",
        "reinterpret_bytes[32]%46#0"
      ]
    },
    "766": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%45#0",
        "reinterpret_bytes[32]%46#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%45#0",
        "reinterpret_bytes[32]%46#0",
        "tmp%109#0"
      ]
    },
    "769": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_redeem_by_partition",
      "op": "callsub arc1410_redeem_by_partition",
      "stack_out": []
    },
    "772": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "773": {
      "op": "return",
      "stack_out": []
    },
    "774": {
      "block": "main_arc1410_issue_by_partition_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "776": {
      "op": "!",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "777": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "778": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "780": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "781": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%42#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%42#0"
      ]
    },
    "784": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%42#0",
        "reinterpret_bytes[32]%43#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%42#0",
        "reinterpret_bytes[32]%43#0"
      ]
    },
    "787": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%42#0",
        "reinterpret_bytes[32]%43#0",
        "reinterpret_bytes[32]%44#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%42#0",
        "reinterpret_bytes[32]%43#0",
        "reinterpret_bytes[32]%44#0"
      ]
    },
    "790": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%42#0",
        "reinterpret_bytes[32]%43#0",
        "reinterpret_bytes[32]%44#0",
        "tmp%104#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%42#0",
        "reinterpret_bytes[32]%43#0",
        "reinterpret_bytes[32]%44#0",
        "tmp%104#0"
      ]
    },
    "793": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_issue_by_partition",
      "op": "callsub arc1410_issue_by_partition",
      "stack_out": []
    },
    "796": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "797": {
      "op": "return",
      "stack_out": []
    },
    "798": {
      "block": "main_arc1410_is_operator_by_portion_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "800": {
      "op": "!",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "801": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "802": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "804": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "805": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%39#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%39#0"
      ]
    },
    "808": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%39#0",
        "reinterpret_bytes[32]%40#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%39#0",
        "reinterpret_bytes[32]%40#0"
      ]
    },
    "811": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%39#0",
        "reinterpret_bytes[32]%40#0",
        "reinterpret_bytes[32]%41#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%39#0",
        "reinterpret_bytes[32]%40#0",
        "reinterpret_bytes[32]%41#0"
      ]
    },
    "814": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator_by_portion",
      "op": "callsub arc1410_is_operator_by_portion",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "817": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0",
        "0x151f7c75"
      ]
    },
    "818": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%98#0"
      ]
    },
    "819": {
      "op": "concat",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "820": {
      "op": "log",
      "stack_out": []
    },
    "821": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "822": {
      "op": "return",
      "stack_out": []
    },
    "823": {
      "block": "main_arc1410_authorize_operator_by_portion_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "825": {
      "op": "!",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "826": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "827": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "829": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "830": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%35#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%35#0"
      ]
    },
    "833": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%35#0",
        "reinterpret_bytes[32]%36#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%35#0",
        "reinterpret_bytes[32]%36#0"
      ]
    },
    "836": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%35#0",
        "reinterpret_bytes[32]%36#0",
        "reinterpret_bytes[32]%37#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%35#0",
        "reinterpret_bytes[32]%36#0",
        "reinterpret_bytes[32]%37#0"
      ]
    },
    "839": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%35#0",
        "reinterpret_bytes[32]%36#0",
        "reinterpret_bytes[32]%37#0",
        "reinterpret_bytes[32]%38#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%35#0",
        "reinterpret_bytes[32]%36#0",
        "reinterpret_bytes[32]%37#0",
        "reinterpret_bytes[32]%38#0"
      ]
    },
    "842": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_authorize_operator_by_portion",
      "op": "callsub arc1410_authorize_operator_by_portion",
      "stack_out": []
    },
    "845": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "846": {
      "op": "return",
      "stack_out": []
    },
    "847": {
      "block": "main_arc1410_can_transfer_by_partition_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "849": {
      "op": "!",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "850": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "851": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "853": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "854": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%31#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%31#0"
      ]
    },
    "857": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%31#0",
        "reinterpret_bytes[32]%32#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%31#0",
        "reinterpret_bytes[32]%32#0"
      ]
    },
    "860": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%31#0",
        "reinterpret_bytes[32]%32#0",
        "reinterpret_bytes[32]%33#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%31#0",
        "reinterpret_bytes[32]%32#0",
        "reinterpret_bytes[32]%33#0"
      ]
    },
    "863": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%31#0",
        "reinterpret_bytes[32]%32#0",
        "reinterpret_bytes[32]%33#0",
        "reinterpret_bytes[32]%34#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%31#0",
        "reinterpret_bytes[32]%32#0",
        "reinterpret_bytes[32]%33#0",
        "reinterpret_bytes[32]%34#0"
      ]
    },
    "866": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[32]%31#0",
        "reinterpret_bytes[32]%32#0",
        "reinterpret_bytes[32]%33#0",
        "reinterpret_bytes[32]%34#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%31#0",
        "reinterpret_bytes[32]%32#0",
        "reinterpret_bytes[32]%33#0",
        "reinterpret_bytes[32]%34#0",
        "tmp%87#0"
      ]
    },
    "869": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_can_transfer_by_partition",
      "op": "callsub arc1410_can_transfer_by_partition",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "872": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0",
        "0x151f7c75"
      ]
    },
    "873": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%88#0"
      ]
    },
    "874": {
      "op": "concat",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "875": {
      "op": "log",
      "stack_out": []
    },
    "876": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "877": {
      "op": "return",
      "stack_out": []
    },
    "878": {
      "block": "main_arc1410_operator_transfer_by_partition_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "880": {
      "op": "!",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "881": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "882": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "884": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "885": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%27#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%27#0"
      ]
    },
    "888": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%27#0",
        "reinterpret_bytes[32]%28#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%27#0",
        "reinterpret_bytes[32]%28#0"
      ]
    },
    "891": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%27#0",
        "reinterpret_bytes[32]%28#0",
        "reinterpret_bytes[32]%29#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%27#0",
        "reinterpret_bytes[32]%28#0",
        "reinterpret_bytes[32]%29#0"
      ]
    },
    "894": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%27#0",
        "reinterpret_bytes[32]%28#0",
        "reinterpret_bytes[32]%29#0",
        "reinterpret_bytes[32]%30#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%27#0",
        "reinterpret_bytes[32]%28#0",
        "reinterpret_bytes[32]%29#0",
        "reinterpret_bytes[32]%30#0"
      ]
    },
    "897": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[32]%27#0",
        "reinterpret_bytes[32]%28#0",
        "reinterpret_bytes[32]%29#0",
        "reinterpret_bytes[32]%30#0",
        "tmp%80#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%27#0",
        "reinterpret_bytes[32]%28#0",
        "reinterpret_bytes[32]%29#0",
        "reinterpret_bytes[32]%30#0",
        "tmp%80#0"
      ]
    },
    "900": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_operator_transfer_by_partition",
      "op": "callsub arc1410_operator_transfer_by_partition",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "903": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "0x151f7c75"
      ]
    },
    "904": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%81#0"
      ]
    },
    "905": {
      "op": "concat",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "906": {
      "op": "log",
      "stack_out": []
    },
    "907": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "908": {
      "op": "return",
      "stack_out": []
    },
    "909": {
      "block": "main_arc1410_revoke_operator_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "911": {
      "op": "!",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "912": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "913": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "915": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "916": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%24#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%24#0"
      ]
    },
    "919": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%24#0",
        "reinterpret_bytes[32]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%24#0",
        "reinterpret_bytes[32]%25#0"
      ]
    },
    "922": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%24#0",
        "reinterpret_bytes[32]%25#0",
        "reinterpret_bytes[32]%26#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%24#0",
        "reinterpret_bytes[32]%25#0",
        "reinterpret_bytes[32]%26#0"
      ]
    },
    "925": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_revoke_operator",
      "op": "callsub arc1410_revoke_operator",
      "stack_out": []
    },
    "928": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "929": {
      "op": "return",
      "stack_out": []
    },
    "930": {
      "block": "main_arc1410_authorize_operator_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "932": {
      "op": "!",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "933": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "934": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "936": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "937": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%21#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%21#0"
      ]
    },
    "940": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%21#0",
        "reinterpret_bytes[32]%22#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%21#0",
        "reinterpret_bytes[32]%22#0"
      ]
    },
    "943": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%21#0",
        "reinterpret_bytes[32]%22#0",
        "reinterpret_bytes[32]%23#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%21#0",
        "reinterpret_bytes[32]%22#0",
        "reinterpret_bytes[32]%23#0"
      ]
    },
    "946": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_authorize_operator",
      "op": "callsub arc1410_authorize_operator",
      "stack_out": []
    },
    "949": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "950": {
      "op": "return",
      "stack_out": []
    },
    "951": {
      "block": "main_arc1410_is_operator_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "953": {
      "op": "!",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "954": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "955": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "957": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "958": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%18#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%18#0"
      ]
    },
    "961": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%18#0",
        "reinterpret_bytes[32]%19#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%18#0",
        "reinterpret_bytes[32]%19#0"
      ]
    },
    "964": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%18#0",
        "reinterpret_bytes[32]%19#0",
        "reinterpret_bytes[32]%20#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%18#0",
        "reinterpret_bytes[32]%19#0",
        "reinterpret_bytes[32]%20#0"
      ]
    },
    "967": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator",
      "op": "callsub arc1410_is_operator",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "970": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "0x151f7c75"
      ]
    },
    "971": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%66#0"
      ]
    },
    "972": {
      "op": "concat",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "973": {
      "op": "log",
      "stack_out": []
    },
    "974": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "975": {
      "op": "return",
      "stack_out": []
    },
    "976": {
      "block": "main_arc1410_partitions_of_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "978": {
      "op": "!",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "979": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "980": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "982": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "983": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%17#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%17#0"
      ]
    },
    "986": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "989": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_partitions_of",
      "op": "callsub arc1410_partitions_of",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "992": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "0x151f7c75"
      ]
    },
    "993": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%60#0"
      ]
    },
    "994": {
      "op": "concat",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "995": {
      "op": "log",
      "stack_out": []
    },
    "996": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "997": {
      "op": "return",
      "stack_out": []
    },
    "998": {
      "block": "main_arc1410_transfer_by_partition_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "1000": {
      "op": "!",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "1001": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1002": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "1004": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1005": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%14#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%14#0"
      ]
    },
    "1008": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%14#0",
        "reinterpret_bytes[32]%15#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%14#0",
        "reinterpret_bytes[32]%15#0"
      ]
    },
    "1011": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%14#0",
        "reinterpret_bytes[32]%15#0",
        "reinterpret_bytes[32]%16#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%14#0",
        "reinterpret_bytes[32]%15#0",
        "reinterpret_bytes[32]%16#0"
      ]
    },
    "1014": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%14#0",
        "reinterpret_bytes[32]%15#0",
        "reinterpret_bytes[32]%16#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%14#0",
        "reinterpret_bytes[32]%15#0",
        "reinterpret_bytes[32]%16#0",
        "tmp%53#0"
      ]
    },
    "1017": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_transfer_by_partition",
      "op": "callsub arc1410_transfer_by_partition",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "1020": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "0x151f7c75"
      ]
    },
    "1021": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%54#0"
      ]
    },
    "1022": {
      "op": "concat",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "1023": {
      "op": "log",
      "stack_out": []
    },
    "1024": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1025": {
      "op": "return",
      "stack_out": []
    },
    "1026": {
      "block": "main_arc200_transfer_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "1028": {
      "op": "!",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "1029": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1030": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "1032": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1033": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%12#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%12#0"
      ]
    },
    "1036": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%12#0",
        "reinterpret_bytes[32]%13#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%12#0",
        "reinterpret_bytes[32]%13#0"
      ]
    },
    "1039": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc200_transfer",
      "op": "callsub arc200_transfer",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "1042": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "0x151f7c75"
      ]
    },
    "1043": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%47#0"
      ]
    },
    "1044": {
      "op": "concat",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "1045": {
      "op": "log",
      "stack_out": []
    },
    "1046": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1047": {
      "op": "return",
      "stack_out": []
    },
    "1048": {
      "block": "main_arc1410_balance_of_partition_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "1050": {
      "op": "!",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "1051": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1052": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "1054": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1055": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%10#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%10#0"
      ]
    },
    "1058": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0"
      ]
    },
    "1061": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_balance_of_partition",
      "op": "callsub arc1410_balance_of_partition",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "1064": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "0x151f7c75"
      ]
    },
    "1065": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%41#0"
      ]
    },
    "1066": {
      "op": "concat",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "1067": {
      "op": "log",
      "stack_out": []
    },
    "1068": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1069": {
      "op": "return",
      "stack_out": []
    },
    "1070": {
      "block": "main_arc1594_validate_transfer_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "1072": {
      "op": "!",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "1073": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1074": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "1076": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1077": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0"
      ]
    },
    "1080": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%7#0",
        "reinterpret_bytes[32]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0",
        "reinterpret_bytes[32]%8#0"
      ]
    },
    "1083": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%7#0",
        "reinterpret_bytes[32]%8#0",
        "reinterpret_bytes[32]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0",
        "reinterpret_bytes[32]%8#0",
        "reinterpret_bytes[32]%9#0"
      ]
    },
    "1086": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%7#0",
        "reinterpret_bytes[32]%8#0",
        "reinterpret_bytes[32]%9#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0",
        "reinterpret_bytes[32]%8#0",
        "reinterpret_bytes[32]%9#0",
        "tmp%34#0"
      ]
    },
    "1089": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_validate_transfer",
      "op": "callsub arc1594_validate_transfer",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "1092": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "0x151f7c75"
      ]
    },
    "1093": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%35#0"
      ]
    },
    "1094": {
      "op": "concat",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "1095": {
      "op": "log",
      "stack_out": []
    },
    "1096": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1097": {
      "op": "return",
      "stack_out": []
    },
    "1098": {
      "block": "main_arc1594_redeem_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "1100": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1101": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1102": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "1104": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1105": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%6#0"
      ]
    },
    "1108": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%6#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%6#0",
        "tmp%29#0"
      ]
    },
    "1111": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_redeem",
      "op": "callsub arc1594_redeem",
      "stack_out": []
    },
    "1114": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1115": {
      "op": "return",
      "stack_out": []
    },
    "1116": {
      "block": "main_arc1594_redeemFrom_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1118": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "1119": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1120": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1122": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1123": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0"
      ]
    },
    "1126": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0"
      ]
    },
    "1129": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "tmp%24#0"
      ]
    },
    "1132": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_redeemFrom",
      "op": "callsub arc1594_redeemFrom",
      "stack_out": []
    },
    "1135": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1136": {
      "op": "return",
      "stack_out": []
    },
    "1137": {
      "block": "main_arc1594_issue_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1139": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1140": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1141": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1143": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1144": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "1147": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0"
      ]
    },
    "1150": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "tmp%19#0"
      ]
    },
    "1153": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_issue",
      "op": "callsub arc1594_issue",
      "stack_out": []
    },
    "1156": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1157": {
      "op": "return",
      "stack_out": []
    },
    "1158": {
      "block": "main_arc1594_set_lockup_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1160": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1161": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1162": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1164": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1165": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "1168": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "1171": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_set_lockup",
      "op": "callsub arc1594_set_lockup",
      "stack_out": []
    },
    "1174": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1175": {
      "op": "return",
      "stack_out": []
    },
    "1176": {
      "block": "main_arc1594_set_kyc_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1178": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1179": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1180": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1182": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1183": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1186": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "1189": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_set_kyc",
      "op": "callsub arc1594_set_kyc",
      "stack_out": []
    },
    "1192": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1193": {
      "op": "return",
      "stack_out": []
    },
    "1194": {
      "block": "main_arc1594_set_halt_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1196": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1197": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1198": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1200": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1201": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "1204": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_set_halt",
      "op": "callsub arc1594_set_halt",
      "stack_out": []
    },
    "1207": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1208": {
      "op": "return",
      "stack_out": []
    },
    "1209": {
      "block": "main_bare_routing@45",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%207#0"
      ],
      "stack_out": [
        "tmp%207#0"
      ]
    },
    "1211": {
      "op": "bnz main_after_if_else@49",
      "stack_out": []
    },
    "1214": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%208#0"
      ],
      "stack_out": [
        "tmp%208#0"
      ]
    },
    "1216": {
      "op": "!",
      "defined_out": [
        "tmp%209#0"
      ],
      "stack_out": [
        "tmp%209#0"
      ]
    },
    "1217": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1218": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1219": {
      "op": "return",
      "stack_out": []
    },
    "1220": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594._onlyOwner",
      "params": {},
      "block": "_onlyOwner",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1222": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_is_owner",
      "op": "callsub arc88_is_owner",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1225": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "1226": {
      "op": "getbit",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1227": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "1"
      ]
    },
    "1228": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1229": {
      "error": "only_owner",
      "op": "assert // only_owner",
      "stack_out": []
    },
    "1230": {
      "retsub": true,
      "op": "retsub"
    },
    "1231": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_set_halt",
      "params": {
        "flag#0": "bytes"
      },
      "block": "arc1594_set_halt",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1234": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594._onlyOwner",
      "op": "callsub _onlyOwner"
    },
    "1237": {
      "op": "bytec 14 // \"hlt\"",
      "defined_out": [
        "\"hlt\""
      ],
      "stack_out": [
        "\"hlt\""
      ]
    },
    "1239": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"hlt\"",
        "flag#0 (copy)"
      ],
      "stack_out": [
        "\"hlt\"",
        "flag#0 (copy)"
      ]
    },
    "1241": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1242": {
      "retsub": true,
      "op": "retsub"
    },
    "1243": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_set_kyc",
      "params": {
        "account#0": "bytes",
        "flag#0": "bytes"
      },
      "block": "arc1594_set_kyc",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1246": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594._onlyOwner",
      "op": "callsub _onlyOwner"
    },
    "1249": {
      "op": "bytec 15 // \"kyc\"",
      "defined_out": [
        "\"kyc\""
      ],
      "stack_out": [
        "\"kyc\""
      ]
    },
    "1251": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"kyc\"",
        "account#0 (copy)"
      ],
      "stack_out": [
        "\"kyc\"",
        "account#0 (copy)"
      ]
    },
    "1253": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1254": {
      "op": "frame_dig -1",
      "defined_out": [
        "flag#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "flag#0 (copy)"
      ]
    },
    "1256": {
      "op": "box_put",
      "stack_out": []
    },
    "1257": {
      "retsub": true,
      "op": "retsub"
    },
    "1258": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_set_lockup",
      "params": {
        "account#0": "bytes",
        "round#0": "bytes"
      },
      "block": "arc1594_set_lockup",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1261": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594._onlyOwner",
      "op": "callsub _onlyOwner"
    },
    "1264": {
      "op": "bytec 21 // \"lku\"",
      "defined_out": [
        "\"lku\""
      ],
      "stack_out": [
        "\"lku\""
      ]
    },
    "1266": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"lku\"",
        "account#0 (copy)"
      ],
      "stack_out": [
        "\"lku\"",
        "account#0 (copy)"
      ]
    },
    "1268": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1269": {
      "op": "frame_dig -1",
      "defined_out": [
        "round#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "round#0 (copy)"
      ]
    },
    "1271": {
      "op": "box_put",
      "stack_out": []
    },
    "1272": {
      "retsub": true,
      "op": "retsub"
    },
    "1273": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_issue",
      "params": {
        "to#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1594_issue",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1276": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594._onlyOwner",
      "op": "callsub _onlyOwner"
    },
    "1279": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "1281": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)",
        "0x"
      ]
    },
    "1283": {
      "op": "b>",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1284": {
      "error": "invalid_amount",
      "op": "assert // invalid_amount",
      "stack_out": []
    },
    "1285": {
      "op": "frame_dig -3",
      "defined_out": [
        "to#0 (copy)"
      ],
      "stack_out": [
        "to#0 (copy)"
      ]
    },
    "1287": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "1288": {
      "op": "frame_dig -2",
      "stack_out": [
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "amount#0 (copy)"
      ]
    },
    "1290": {
      "op": "frame_dig -1",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "amount#0 (copy)",
        "data#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "amount#0 (copy)",
        "data#0 (copy)"
      ]
    },
    "1292": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_issue_by_partition",
      "op": "callsub arc1410_issue_by_partition",
      "stack_out": []
    },
    "1295": {
      "op": "frame_dig -3",
      "stack_out": [
        "to#0 (copy)"
      ]
    },
    "1297": {
      "op": "frame_dig -2",
      "stack_out": [
        "to#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "1299": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1300": {
      "op": "bytec 16 // 0x0042",
      "defined_out": [
        "0x0042",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "0x0042"
      ]
    },
    "1302": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1303": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "data#0 (copy)"
      ]
    },
    "1305": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1306": {
      "op": "bytec 6 // 0x0002",
      "defined_out": [
        "0x0002",
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "0x0002"
      ]
    },
    "1308": {
      "op": "swap",
      "stack_out": [
        "0x0002",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1309": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1310": {
      "op": "pushbytes 0xf2e998af // method \"Issue((address,uint256,byte[]))\"",
      "defined_out": [
        "Method(Issue((address,uint256,byte[])))",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "Method(Issue((address,uint256,byte[])))"
      ]
    },
    "1316": {
      "op": "swap",
      "stack_out": [
        "Method(Issue((address,uint256,byte[])))",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1317": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "1318": {
      "op": "log",
      "stack_out": []
    },
    "1319": {
      "retsub": true,
      "op": "retsub"
    },
    "1320": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_redeemFrom",
      "params": {
        "from#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1594_redeemFrom",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1323": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bzero%0#0"
      ]
    },
    "1324": {
      "op": "dupn 2",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0"
      ]
    },
    "1326": {
      "op": "txn Sender"
    },
    "1328": {
      "op": "dup"
    },
    "1329": {
      "op": "frame_dig -3",
      "defined_out": [
        "from#0 (copy)",
        "sender#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "sender#0",
        "from#0 (copy)"
      ]
    },
    "1331": {
      "op": "==",
      "defined_out": [
        "sender#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%0#0"
      ]
    },
    "1332": {
      "op": "bnz arc1594_redeemFrom_bool_true@2",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ]
    },
    "1335": {
      "op": "frame_dig 3",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "sender#0"
      ]
    },
    "1337": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_is_owner",
      "op": "callsub arc88_is_owner",
      "defined_out": [
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%1#0"
      ]
    },
    "1340": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%1#0",
        "0"
      ]
    },
    "1341": {
      "op": "getbit",
      "defined_out": [
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%2#0"
      ]
    },
    "1342": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%2#0",
        "1"
      ]
    },
    "1343": {
      "op": "==",
      "defined_out": [
        "sender#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%3#0"
      ]
    },
    "1344": {
      "op": "bz arc1594_redeemFrom_bool_false@3",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ]
    },
    "1347": {
      "block": "arc1594_redeemFrom_bool_true@2",
      "stack_in": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "or_result%0#0"
      ]
    },
    "1348": {
      "block": "arc1594_redeemFrom_bool_merge@4",
      "stack_in": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "or_result%0#0"
      ],
      "error": "not_auth",
      "op": "assert // not_auth",
      "defined_out": [],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ]
    },
    "1349": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "amount#0 (copy)"
      ]
    },
    "1351": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "amount#0 (copy)",
        "0x"
      ]
    },
    "1353": {
      "op": "b>",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%4#0"
      ]
    },
    "1354": {
      "error": "invalid_amount",
      "op": "assert // invalid_amount",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ]
    },
    "1355": {
      "op": "frame_dig -3",
      "defined_out": [
        "from#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "from#0 (copy)"
      ]
    },
    "1357": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "from#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "from#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "1358": {
      "op": "concat",
      "defined_out": [
        "partKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "partKey#0"
      ]
    },
    "1359": {
      "op": "bytec 4 // \"p\"",
      "defined_out": [
        "\"p\"",
        "partKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "partKey#0",
        "\"p\""
      ]
    },
    "1361": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "\"p\"",
        "partKey#0"
      ]
    },
    "1362": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0"
      ]
    },
    "1363": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "1364": {
      "op": "frame_bury 2",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0"
      ]
    },
    "1366": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1367": {
      "op": "bury 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "maybe_exists%0#0"
      ]
    },
    "1369": {
      "op": "bz arc1594_redeemFrom_bool_false@7",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ]
    },
    "1372": {
      "op": "frame_dig 2",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0"
      ]
    },
    "1374": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1375": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "maybe_value%1#0"
      ]
    },
    "1376": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "1378": {
      "op": "b>=",
      "defined_out": [
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%7#0"
      ]
    },
    "1379": {
      "op": "bz arc1594_redeemFrom_bool_false@7",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ]
    },
    "1382": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "and_result%0#0"
      ]
    },
    "1383": {
      "block": "arc1594_redeemFrom_bool_merge@8",
      "stack_in": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "and_result%0#0"
      ],
      "error": "insufficient_partition",
      "op": "assert // insufficient_partition",
      "defined_out": [],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ]
    },
    "1384": {
      "op": "frame_dig 2",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0"
      ]
    },
    "1386": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "1387": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1388": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "maybe_value%2#0"
      ]
    },
    "1389": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "maybe_value%2#0",
        "amount#0 (copy)"
      ]
    },
    "1391": {
      "op": "b-",
      "defined_out": [
        "tmp%5#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "to_encode%0#0"
      ]
    },
    "1392": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "1393": {
      "op": "len",
      "defined_out": [
        "tmp%5#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "1394": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%5#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "1395": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "tmp%5#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "1396": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "to_encode%0#0"
      ]
    },
    "1397": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "1398": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "tmp%5#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "1399": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "to_encode%0#0",
        "bzero%0#0",
        "bzero%0#0"
      ]
    },
    "1400": {
      "op": "frame_bury 0",
      "defined_out": [
        "bzero%0#0",
        "tmp%5#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "1402": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "arc4_encoded%0#0"
      ]
    },
    "1403": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ]
    },
    "1404": {
      "op": "bytec 5 // \"b\"",
      "defined_out": [
        "\"b\"",
        "bzero%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "\"b\""
      ]
    },
    "1406": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"b\"",
        "bzero%0#0",
        "from#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "\"b\"",
        "from#0 (copy)"
      ]
    },
    "1408": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0"
      ]
    },
    "1409": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0",
        "tmp%10#0"
      ]
    },
    "1410": {
      "op": "frame_bury 1",
      "defined_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0"
      ]
    },
    "1412": {
      "op": "box_len",
      "defined_out": [
        "bzero%0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%10#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1413": {
      "op": "bury 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "maybe_exists%3#0"
      ]
    },
    "1415": {
      "op": "bz arc1594_redeemFrom_bool_false@11",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ]
    },
    "1418": {
      "op": "frame_dig 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0"
      ]
    },
    "1420": {
      "op": "box_get",
      "defined_out": [
        "bzero%0#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%10#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1421": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "maybe_value%4#0"
      ]
    },
    "1422": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "maybe_value%4#0",
        "amount#0 (copy)"
      ]
    },
    "1424": {
      "op": "b>=",
      "defined_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%12#0"
      ]
    },
    "1425": {
      "op": "bz arc1594_redeemFrom_bool_false@11",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ]
    },
    "1428": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0",
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "and_result%1#0"
      ]
    },
    "1429": {
      "block": "arc1594_redeemFrom_bool_merge@12",
      "stack_in": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "and_result%1#0"
      ],
      "error": "insufficient_balance",
      "op": "assert // insufficient_balance",
      "defined_out": [],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ]
    },
    "1430": {
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0"
      ]
    },
    "1432": {
      "op": "dup",
      "defined_out": [
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "1433": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1434": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0",
        "maybe_value%5#0"
      ]
    },
    "1435": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%5#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0",
        "maybe_value%5#0",
        "amount#0 (copy)"
      ]
    },
    "1437": {
      "op": "b-",
      "defined_out": [
        "tmp%10#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0",
        "to_encode%1#0"
      ]
    },
    "1438": {
      "op": "dup",
      "defined_out": [
        "tmp%10#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "1439": {
      "op": "len",
      "defined_out": [
        "tmp%10#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "1440": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%10#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "1441": {
      "op": "<=",
      "defined_out": [
        "len_ok%1#0",
        "tmp%10#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "1442": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0",
        "to_encode%1#0"
      ]
    },
    "1443": {
      "op": "frame_dig 0",
      "defined_out": [
        "bzero%0#0",
        "tmp%10#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0",
        "to_encode%1#0",
        "bzero%0#0"
      ]
    },
    "1445": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "bzero%0#0 (copy)",
        "tmp%10#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0",
        "to_encode%1#0",
        "bzero%0#0 (copy)",
        "bzero%0#0 (copy)"
      ]
    },
    "1446": {
      "op": "cover 3",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "tmp%10#0",
        "to_encode%1#0",
        "bzero%0#0 (copy)"
      ]
    },
    "1448": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "bzero%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "tmp%10#0",
        "arc4_encoded%1#0"
      ]
    },
    "1449": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "bzero%0#0"
      ]
    },
    "1450": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "bzero%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "0"
      ]
    },
    "1451": {
      "op": "bytec_3 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0",
        "bzero%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "0",
        "\"t\""
      ]
    },
    "1452": {
      "op": "app_global_get_ex",
      "defined_out": [
        "bzero%0#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1453": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "maybe_value%6#0"
      ]
    },
    "1454": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "maybe_value%6#0",
        "amount#0 (copy)"
      ]
    },
    "1456": {
      "op": "b-",
      "defined_out": [
        "bzero%0#0",
        "tmp%10#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "to_encode%2#0"
      ]
    },
    "1457": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "tmp%10#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "1458": {
      "op": "len",
      "defined_out": [
        "bzero%0#0",
        "tmp%10#0",
        "to_encode%2#0",
        "value_len%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "to_encode%2#0",
        "value_len%2#0"
      ]
    },
    "1459": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "to_encode%2#0",
        "value_len%2#0",
        "32"
      ]
    },
    "1460": {
      "op": "<=",
      "defined_out": [
        "bzero%0#0",
        "len_ok%2#0",
        "tmp%10#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "to_encode%2#0",
        "len_ok%2#0"
      ]
    },
    "1461": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "to_encode%2#0"
      ]
    },
    "1462": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%2#0",
        "bzero%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "arc4_encoded%2#0"
      ]
    },
    "1463": {
      "op": "bytec_3 // \"t\"",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "arc4_encoded%2#0",
        "\"t\""
      ]
    },
    "1464": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "\"t\"",
        "arc4_encoded%2#0"
      ]
    },
    "1465": {
      "op": "app_global_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ]
    },
    "1466": {
      "op": "frame_dig -3",
      "defined_out": [
        "bzero%0#0",
        "from#0 (copy)",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "from#0 (copy)"
      ]
    },
    "1468": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "from#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "1470": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%5#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1471": {
      "op": "bytec 16 // 0x0042",
      "defined_out": [
        "0x0042",
        "bzero%0#0",
        "encoded_tuple_buffer%5#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "encoded_tuple_buffer%5#0",
        "0x0042"
      ]
    },
    "1473": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%6#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1474": {
      "op": "frame_dig -1",
      "defined_out": [
        "bzero%0#0",
        "data#0 (copy)",
        "encoded_tuple_buffer%6#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "encoded_tuple_buffer%6#0",
        "data#0 (copy)"
      ]
    },
    "1476": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%7#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1477": {
      "op": "bytec 6 // 0x0002",
      "defined_out": [
        "0x0002",
        "bzero%0#0",
        "encoded_tuple_buffer%7#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "encoded_tuple_buffer%7#0",
        "0x0002"
      ]
    },
    "1479": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "0x0002",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1480": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%10#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "1481": {
      "op": "bytec 22 // method \"Redeem((address,uint256,byte[]))\"",
      "defined_out": [
        "Method(Redeem((address,uint256,byte[])))",
        "bzero%0#0",
        "encoded_tuple_buffer%10#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "encoded_tuple_buffer%10#0",
        "Method(Redeem((address,uint256,byte[])))"
      ]
    },
    "1483": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "Method(Redeem((address,uint256,byte[])))",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "1484": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "event%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "event%0#0"
      ]
    },
    "1485": {
      "op": "log",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ]
    },
    "1486": {
      "retsub": true,
      "op": "retsub"
    },
    "1487": {
      "block": "arc1594_redeemFrom_bool_false@11",
      "stack_in": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "and_result%1#0"
      ]
    },
    "1488": {
      "op": "b arc1594_redeemFrom_bool_merge@12"
    },
    "1491": {
      "block": "arc1594_redeemFrom_bool_false@7",
      "stack_in": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "and_result%0#0"
      ]
    },
    "1492": {
      "op": "b arc1594_redeemFrom_bool_merge@8"
    },
    "1495": {
      "block": "arc1594_redeemFrom_bool_false@3",
      "stack_in": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "or_result%0#0"
      ]
    },
    "1496": {
      "op": "b arc1594_redeemFrom_bool_merge@4"
    },
    "1499": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_redeem",
      "params": {
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1594_redeem",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1502": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bzero%0#0"
      ]
    },
    "1503": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "1504": {
      "op": "txn Sender"
    },
    "1506": {
      "op": "dup"
    },
    "1507": {
      "op": "frame_dig -2"
    },
    "1509": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "amount#0 (copy)",
        "from#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "from#0",
        "amount#0 (copy)",
        "0x"
      ]
    },
    "1511": {
      "op": "b>",
      "defined_out": [
        "from#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "from#0",
        "tmp%0#0"
      ]
    },
    "1512": {
      "error": "invalid_amount",
      "op": "assert // invalid_amount",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "from#0"
      ]
    },
    "1513": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "from#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "from#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "1514": {
      "op": "concat",
      "defined_out": [
        "from#0",
        "partKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "partKey#0"
      ]
    },
    "1515": {
      "op": "bytec 4 // \"p\"",
      "defined_out": [
        "\"p\"",
        "from#0",
        "partKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "partKey#0",
        "\"p\""
      ]
    },
    "1517": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "\"p\"",
        "partKey#0"
      ]
    },
    "1518": {
      "op": "concat",
      "defined_out": [
        "from#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0"
      ]
    },
    "1519": {
      "op": "dup",
      "defined_out": [
        "from#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1520": {
      "op": "box_len",
      "defined_out": [
        "from#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1521": {
      "op": "bury 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "1523": {
      "op": "bz arc1594_redeem_bool_false@3",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0"
      ]
    },
    "1526": {
      "op": "frame_dig 3",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1528": {
      "op": "box_get",
      "defined_out": [
        "from#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1529": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "1530": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "1532": {
      "op": "b>=",
      "defined_out": [
        "from#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "1533": {
      "op": "bz arc1594_redeem_bool_false@3",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0"
      ]
    },
    "1536": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "from#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "and_result%0#0"
      ]
    },
    "1537": {
      "block": "arc1594_redeem_bool_merge@4",
      "stack_in": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "and_result%0#0"
      ],
      "error": "insufficient_partition",
      "op": "assert // insufficient_partition",
      "defined_out": [],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0"
      ]
    },
    "1538": {
      "op": "frame_dig 3",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1540": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1541": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1542": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%2#0"
      ]
    },
    "1543": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%2#0",
        "amount#0 (copy)"
      ]
    },
    "1545": {
      "op": "b-",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "1546": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "1547": {
      "op": "len",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "1548": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "1549": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "1550": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "1551": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "1552": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "1553": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0",
        "bzero%0#0"
      ]
    },
    "1554": {
      "op": "frame_bury 0",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "1556": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0",
        "arc4_encoded%0#0"
      ]
    },
    "1557": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0"
      ]
    },
    "1558": {
      "op": "bytec 5 // \"b\"",
      "defined_out": [
        "\"b\"",
        "bzero%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "\"b\""
      ]
    },
    "1560": {
      "op": "frame_dig 2",
      "defined_out": [
        "\"b\"",
        "bzero%0#0",
        "from#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "\"b\"",
        "from#0"
      ]
    },
    "1562": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "from#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "1563": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "1564": {
      "op": "frame_bury 1",
      "defined_out": [
        "bzero%0#0",
        "from#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "1566": {
      "op": "box_len",
      "defined_out": [
        "bzero%0#0",
        "from#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1567": {
      "op": "bury 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "maybe_exists%3#0"
      ]
    },
    "1569": {
      "op": "bz arc1594_redeem_bool_false@7",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0"
      ]
    },
    "1572": {
      "op": "frame_dig 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "1574": {
      "op": "box_get",
      "defined_out": [
        "bzero%0#0",
        "from#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1575": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%4#0"
      ]
    },
    "1576": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%4#0",
        "amount#0 (copy)"
      ]
    },
    "1578": {
      "op": "b>=",
      "defined_out": [
        "bzero%0#0",
        "from#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%8#0"
      ]
    },
    "1579": {
      "op": "bz arc1594_redeem_bool_false@7",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0"
      ]
    },
    "1582": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0",
        "bzero%0#0",
        "from#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "and_result%1#0"
      ]
    },
    "1583": {
      "block": "arc1594_redeem_bool_merge@8",
      "stack_in": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "and_result%1#0"
      ],
      "error": "insufficient_balance",
      "op": "assert // insufficient_balance",
      "defined_out": [],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0"
      ]
    },
    "1584": {
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "1586": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "1587": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%6#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1588": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%6#0",
        "maybe_value%5#0"
      ]
    },
    "1589": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%6#0",
        "maybe_value%5#0",
        "amount#0 (copy)"
      ]
    },
    "1591": {
      "op": "b-",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0"
      ]
    },
    "1592": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "1593": {
      "op": "len",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "1594": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "1595": {
      "op": "<=",
      "defined_out": [
        "len_ok%1#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "1596": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0"
      ]
    },
    "1597": {
      "op": "frame_dig 0",
      "defined_out": [
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%0#0"
      ]
    },
    "1599": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "bzero%0#0 (copy)",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%0#0 (copy)",
        "bzero%0#0 (copy)"
      ]
    },
    "1600": {
      "op": "cover 3",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%0#0 (copy)"
      ]
    },
    "1602": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "bzero%0#0",
        "tmp%6#0",
        "arc4_encoded%1#0"
      ]
    },
    "1603": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "bzero%0#0"
      ]
    },
    "1604": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "bzero%0#0",
        "0"
      ]
    },
    "1605": {
      "op": "bytec_3 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "bzero%0#0",
        "0",
        "\"t\""
      ]
    },
    "1606": {
      "op": "app_global_get_ex",
      "defined_out": [
        "bzero%0#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "bzero%0#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1607": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "bzero%0#0",
        "maybe_value%6#0"
      ]
    },
    "1608": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "bzero%0#0",
        "maybe_value%6#0",
        "amount#0 (copy)"
      ]
    },
    "1610": {
      "op": "b-",
      "defined_out": [
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "bzero%0#0",
        "to_encode%2#0"
      ]
    },
    "1611": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "bzero%0#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "1612": {
      "op": "len",
      "defined_out": [
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%2#0",
        "value_len%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "bzero%0#0",
        "to_encode%2#0",
        "value_len%2#0"
      ]
    },
    "1613": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "bzero%0#0",
        "to_encode%2#0",
        "value_len%2#0",
        "32"
      ]
    },
    "1614": {
      "op": "<=",
      "defined_out": [
        "bzero%0#0",
        "len_ok%2#0",
        "tmp%6#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "bzero%0#0",
        "to_encode%2#0",
        "len_ok%2#0"
      ]
    },
    "1615": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "bzero%0#0",
        "to_encode%2#0"
      ]
    },
    "1616": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%2#0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "arc4_encoded%2#0"
      ]
    },
    "1617": {
      "op": "bytec_3 // \"t\"",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "arc4_encoded%2#0",
        "\"t\""
      ]
    },
    "1618": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "\"t\"",
        "arc4_encoded%2#0"
      ]
    },
    "1619": {
      "op": "app_global_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0"
      ]
    },
    "1620": {
      "op": "frame_dig 2",
      "defined_out": [
        "bzero%0#0",
        "from#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "from#0"
      ]
    },
    "1622": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "from#0",
        "amount#0 (copy)"
      ]
    },
    "1624": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%5#0",
        "from#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1625": {
      "op": "bytec 16 // 0x0042",
      "defined_out": [
        "0x0042",
        "bzero%0#0",
        "encoded_tuple_buffer%5#0",
        "from#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "encoded_tuple_buffer%5#0",
        "0x0042"
      ]
    },
    "1627": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%6#0",
        "from#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1628": {
      "op": "frame_dig -1",
      "defined_out": [
        "bzero%0#0",
        "data#0 (copy)",
        "encoded_tuple_buffer%6#0",
        "from#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "encoded_tuple_buffer%6#0",
        "data#0 (copy)"
      ]
    },
    "1630": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%7#0",
        "from#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1631": {
      "op": "bytec 6 // 0x0002",
      "defined_out": [
        "0x0002",
        "bzero%0#0",
        "encoded_tuple_buffer%7#0",
        "from#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "encoded_tuple_buffer%7#0",
        "0x0002"
      ]
    },
    "1633": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "0x0002",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1634": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%10#0",
        "from#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "1635": {
      "op": "bytec 22 // method \"Redeem((address,uint256,byte[]))\"",
      "defined_out": [
        "Method(Redeem((address,uint256,byte[])))",
        "bzero%0#0",
        "encoded_tuple_buffer%10#0",
        "from#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "encoded_tuple_buffer%10#0",
        "Method(Redeem((address,uint256,byte[])))"
      ]
    },
    "1637": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "Method(Redeem((address,uint256,byte[])))",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "1638": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "event%0#0",
        "from#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "event%0#0"
      ]
    },
    "1639": {
      "op": "log",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0"
      ]
    },
    "1640": {
      "retsub": true,
      "op": "retsub"
    },
    "1641": {
      "block": "arc1594_redeem_bool_false@7",
      "stack_in": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "and_result%1#0"
      ]
    },
    "1642": {
      "op": "b arc1594_redeem_bool_merge@8"
    },
    "1645": {
      "block": "arc1594_redeem_bool_false@3",
      "stack_in": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0",
        "tmp%1#0",
        "and_result%0#0"
      ]
    },
    "1646": {
      "op": "b arc1594_redeem_bool_merge@4"
    },
    "1649": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_validate_transfer",
      "params": {
        "from#0": "bytes",
        "to#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1594_validate_transfer",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "1652": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1653": {
      "op": "dupn 3",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0"
      ]
    },
    "1655": {
      "op": "bytec 17 // 0x0000000000000000"
    },
    "1657": {
      "op": "dup"
    },
    "1658": {
      "op": "intc_0 // 0"
    },
    "1659": {
      "op": "bytec 14 // \"hlt\"",
      "defined_out": [
        "\"hlt\"",
        "0",
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#0",
        "0",
        "\"hlt\""
      ]
    },
    "1661": {
      "op": "app_global_get_ex",
      "defined_out": [
        "code#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1662": {
      "op": "bury 1",
      "defined_out": [
        "code#0",
        "code#21",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_exists%0#0"
      ]
    },
    "1664": {
      "op": "bz arc1594_validate_transfer_after_if_else@3",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1667": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "0"
      ]
    },
    "1668": {
      "op": "bytec 14 // \"hlt\"",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "0",
        "\"hlt\""
      ]
    },
    "1670": {
      "op": "app_global_get_ex",
      "defined_out": [
        "code#0",
        "code#21",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1671": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_value%1#0"
      ]
    },
    "1672": {
      "op": "btoi",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%0#0"
      ]
    },
    "1673": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%0#0",
        "1"
      ]
    },
    "1674": {
      "op": "==",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%1#0"
      ]
    },
    "1675": {
      "op": "frame_dig 4",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%1#0",
        "code#21"
      ]
    },
    "1677": {
      "op": "frame_bury 5",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%1#0"
      ]
    },
    "1679": {
      "op": "bz arc1594_validate_transfer_after_if_else@3",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1682": {
      "op": "pushbytes 0x000000000000000e",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#21"
      ]
    },
    "1692": {
      "op": "frame_bury 5",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1694": {
      "block": "arc1594_validate_transfer_after_if_else@3",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1696": {
      "op": "dup",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "code#0"
      ]
    },
    "1697": {
      "op": "frame_bury 4",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1699": {
      "op": "dup",
      "defined_out": [
        "code#0",
        "code#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "code#0 (copy)"
      ]
    },
    "1700": {
      "op": "btoi",
      "defined_out": [
        "code#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "tmp%2#0"
      ]
    },
    "1701": {
      "op": "swap",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%2#0",
        "code#21"
      ]
    },
    "1702": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%2#0"
      ]
    },
    "1704": {
      "op": "bnz arc1594_validate_transfer_after_if_else@8",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1707": {
      "op": "bytec 15 // \"kyc\"",
      "defined_out": [
        "\"kyc\"",
        "code#0",
        "code#21"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "\"kyc\""
      ]
    },
    "1709": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"kyc\"",
        "code#0",
        "code#21",
        "from#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "\"kyc\"",
        "from#0 (copy)"
      ]
    },
    "1711": {
      "op": "concat",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%4#0"
      ]
    },
    "1712": {
      "op": "dup",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%4#0",
        "tmp%4#0"
      ]
    },
    "1713": {
      "op": "frame_bury 3",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%4#0"
      ]
    },
    "1715": {
      "op": "box_len",
      "defined_out": [
        "code#0",
        "code#21",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1716": {
      "op": "bury 1",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_exists%2#0"
      ]
    },
    "1718": {
      "op": "bz arc1594_validate_transfer_if_body@6",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1721": {
      "op": "frame_dig 3",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%4#0"
      ]
    },
    "1723": {
      "op": "box_get",
      "defined_out": [
        "code#0",
        "code#21",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1724": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_value%3#0"
      ]
    },
    "1725": {
      "op": "btoi",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%6#0"
      ]
    },
    "1726": {
      "op": "bnz arc1594_validate_transfer_after_if_else@7",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1729": {
      "block": "arc1594_validate_transfer_if_body@6",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ],
      "op": "pushbytes 0x000000000000000a",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1739": {
      "op": "frame_bury 4",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1741": {
      "block": "arc1594_validate_transfer_after_if_else@7",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "code#21"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#21"
      ]
    },
    "1743": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#21"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1745": {
      "block": "arc1594_validate_transfer_after_if_else@8",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1747": {
      "op": "dup",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "code#0"
      ]
    },
    "1748": {
      "op": "frame_bury 4",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1750": {
      "op": "dup",
      "defined_out": [
        "code#0",
        "code#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "code#0 (copy)"
      ]
    },
    "1751": {
      "op": "btoi",
      "defined_out": [
        "code#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "tmp%8#0"
      ]
    },
    "1752": {
      "op": "swap",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%8#0",
        "code#21"
      ]
    },
    "1753": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%8#0"
      ]
    },
    "1755": {
      "op": "bnz arc1594_validate_transfer_after_if_else@13",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1758": {
      "op": "bytec 15 // \"kyc\"",
      "defined_out": [
        "\"kyc\"",
        "code#0",
        "code#21"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "\"kyc\""
      ]
    },
    "1760": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"kyc\"",
        "code#0",
        "code#21",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "\"kyc\"",
        "to#0 (copy)"
      ]
    },
    "1762": {
      "op": "concat",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%10#0"
      ]
    },
    "1763": {
      "op": "dup",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%10#0",
        "tmp%10#0"
      ]
    },
    "1764": {
      "op": "frame_bury 0",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%10#0"
      ]
    },
    "1766": {
      "op": "box_len",
      "defined_out": [
        "code#0",
        "code#21",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1767": {
      "op": "bury 1",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_exists%4#0"
      ]
    },
    "1769": {
      "op": "bz arc1594_validate_transfer_if_body@11",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1772": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%10#0"
      ]
    },
    "1774": {
      "op": "box_get",
      "defined_out": [
        "code#0",
        "code#21",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1775": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_value%5#0"
      ]
    },
    "1776": {
      "op": "btoi",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%10#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%12#0"
      ]
    },
    "1777": {
      "op": "bnz arc1594_validate_transfer_after_if_else@12",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1780": {
      "block": "arc1594_validate_transfer_if_body@11",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ],
      "op": "pushbytes 0x000000000000000b",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1790": {
      "op": "frame_bury 4",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1792": {
      "block": "arc1594_validate_transfer_after_if_else@12",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "code#21"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#21"
      ]
    },
    "1794": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#21"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1796": {
      "block": "arc1594_validate_transfer_after_if_else@13",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1798": {
      "op": "dup",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "code#0"
      ]
    },
    "1799": {
      "op": "frame_bury 4",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1801": {
      "op": "dup",
      "defined_out": [
        "code#0",
        "code#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "code#0 (copy)"
      ]
    },
    "1802": {
      "op": "btoi",
      "defined_out": [
        "code#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "tmp%14#0"
      ]
    },
    "1803": {
      "op": "swap",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%14#0",
        "code#21"
      ]
    },
    "1804": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%14#0"
      ]
    },
    "1806": {
      "op": "bnz arc1594_validate_transfer_after_if_else@17",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1809": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "code#0",
        "code#21"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "amount#0 (copy)"
      ]
    },
    "1811": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "amount#0 (copy)",
        "code#0",
        "code#21"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "amount#0 (copy)",
        "0x"
      ]
    },
    "1813": {
      "op": "b==",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%16#0"
      ]
    },
    "1814": {
      "op": "bz arc1594_validate_transfer_after_if_else@16",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1817": {
      "op": "pushbytes 0x0000000000000028",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1827": {
      "op": "frame_bury 4",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1829": {
      "block": "arc1594_validate_transfer_after_if_else@16",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "code#21"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#21"
      ]
    },
    "1831": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#21"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1833": {
      "block": "arc1594_validate_transfer_after_if_else@17",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1835": {
      "op": "dup",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "code#0"
      ]
    },
    "1836": {
      "op": "frame_bury 4",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1838": {
      "op": "dup",
      "defined_out": [
        "code#0",
        "code#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "code#0 (copy)"
      ]
    },
    "1839": {
      "op": "btoi",
      "defined_out": [
        "code#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "tmp%17#0"
      ]
    },
    "1840": {
      "op": "swap",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%17#0",
        "code#21"
      ]
    },
    "1841": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%17#0"
      ]
    },
    "1843": {
      "op": "bnz arc1594_validate_transfer_after_if_else@22",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1846": {
      "op": "bytec 5 // \"b\"",
      "defined_out": [
        "\"b\"",
        "code#0",
        "code#21"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "\"b\""
      ]
    },
    "1848": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"b\"",
        "code#0",
        "code#21",
        "from#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "\"b\"",
        "from#0 (copy)"
      ]
    },
    "1850": {
      "op": "concat",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%19#0"
      ]
    },
    "1851": {
      "op": "dup",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%19#0",
        "tmp%19#0"
      ]
    },
    "1852": {
      "op": "frame_bury 1",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%19#0"
      ]
    },
    "1854": {
      "op": "box_len",
      "defined_out": [
        "code#0",
        "code#21",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1855": {
      "op": "bury 1",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_exists%6#0"
      ]
    },
    "1857": {
      "op": "bz arc1594_validate_transfer_if_body@20",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1860": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%19#0"
      ]
    },
    "1862": {
      "op": "box_get",
      "defined_out": [
        "code#0",
        "code#21",
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "1863": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_value%7#0"
      ]
    },
    "1864": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "code#0",
        "code#21",
        "maybe_value%7#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_value%7#0",
        "amount#0 (copy)"
      ]
    },
    "1866": {
      "op": "b<",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%21#0"
      ]
    },
    "1867": {
      "op": "bz arc1594_validate_transfer_after_if_else@21",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1870": {
      "block": "arc1594_validate_transfer_if_body@20",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ],
      "op": "pushbytes 0x000000000000000d",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1880": {
      "op": "frame_bury 4",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1882": {
      "block": "arc1594_validate_transfer_after_if_else@21",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "code#21"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#21"
      ]
    },
    "1884": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#21"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1886": {
      "block": "arc1594_validate_transfer_after_if_else@22",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1888": {
      "op": "dup",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "code#0"
      ]
    },
    "1889": {
      "op": "frame_bury 4",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1891": {
      "op": "dup",
      "defined_out": [
        "code#0",
        "code#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "code#0 (copy)"
      ]
    },
    "1892": {
      "op": "btoi",
      "defined_out": [
        "code#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "tmp%22#0"
      ]
    },
    "1893": {
      "op": "swap",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%22#0",
        "code#21"
      ]
    },
    "1894": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%22#0"
      ]
    },
    "1896": {
      "op": "bnz arc1594_validate_transfer_after_if_else@27",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1899": {
      "op": "bytec 21 // \"lku\"",
      "defined_out": [
        "\"lku\"",
        "code#0",
        "code#21"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "\"lku\""
      ]
    },
    "1901": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"lku\"",
        "code#0",
        "code#21",
        "from#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "\"lku\"",
        "from#0 (copy)"
      ]
    },
    "1903": {
      "op": "concat",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%24#0"
      ]
    },
    "1904": {
      "op": "dup",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%24#0",
        "tmp%24#0"
      ]
    },
    "1905": {
      "op": "frame_bury 2",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%24#0"
      ]
    },
    "1907": {
      "op": "box_len",
      "defined_out": [
        "code#0",
        "code#21",
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "1908": {
      "op": "bury 1",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_exists%8#0"
      ]
    },
    "1910": {
      "op": "frame_dig 4",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_exists%8#0",
        "code#21"
      ]
    },
    "1912": {
      "op": "frame_bury 5",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_exists%8#0"
      ]
    },
    "1914": {
      "op": "bz arc1594_validate_transfer_after_if_else@27",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1917": {
      "op": "global Round",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%25#0"
      ]
    },
    "1919": {
      "op": "frame_dig 2",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%25#0",
        "tmp%24#0"
      ]
    },
    "1921": {
      "op": "box_get",
      "defined_out": [
        "code#0",
        "code#21",
        "maybe_exists%9#0",
        "maybe_value%9#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%25#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "1922": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%25#0",
        "maybe_value%9#0"
      ]
    },
    "1923": {
      "op": "btoi",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%25#0",
        "tmp%27#0"
      ]
    },
    "1924": {
      "op": "<=",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%24#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%28#0"
      ]
    },
    "1925": {
      "op": "frame_dig 4",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%28#0",
        "code#21"
      ]
    },
    "1927": {
      "op": "frame_bury 5",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%28#0"
      ]
    },
    "1929": {
      "op": "bz arc1594_validate_transfer_after_if_else@27",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1932": {
      "op": "pushbytes 0x000000000000000f",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#21"
      ]
    },
    "1942": {
      "op": "frame_bury 5",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1944": {
      "block": "arc1594_validate_transfer_after_if_else@27",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1946": {
      "op": "frame_bury 0"
    },
    "1948": {
      "retsub": true,
      "op": "retsub"
    },
    "1949": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_balance_of_partition",
      "params": {
        "holder#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "arc1410_balance_of_partition",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1952": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)"
      ]
    },
    "1954": {
      "op": "frame_dig -1",
      "defined_out": [
        "holder#0 (copy)",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "1956": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "1957": {
      "op": "bytec 4 // \"p\"",
      "defined_out": [
        "\"p\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"p\""
      ]
    },
    "1959": {
      "op": "swap",
      "stack_out": [
        "\"p\"",
        "key#0"
      ]
    },
    "1960": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1961": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1962": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1963": {
      "retsub": true,
      "op": "retsub"
    },
    "1964": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc200_transfer",
      "params": {
        "to#0": "bytes",
        "value#0": "bytes"
      },
      "block": "arc200_transfer",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1967": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1969": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "1970": {
      "op": "frame_dig -2",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "tmp%0#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "to#0 (copy)"
      ]
    },
    "1972": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "stack_out": [
        "tmp%0#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "1973": {
      "op": "frame_dig -1",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "tmp%0#0",
        "to#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "value#0 (copy)"
      ]
    },
    "1975": {
      "op": "bytec 23 // 0x0000",
      "defined_out": [
        "0x0000",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "tmp%0#0",
        "to#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "value#0 (copy)",
        "0x0000"
      ]
    },
    "1977": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._transfer_partition",
      "op": "callsub _transfer_partition",
      "stack_out": []
    },
    "1980": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1982": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%1#0",
        "to#0 (copy)"
      ]
    },
    "1984": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "to#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "1986": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._transfer",
      "op": "callsub _transfer",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1989": {
      "retsub": true,
      "op": "retsub"
    },
    "1990": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_transfer_by_partition",
      "params": {
        "partition#0": "bytes",
        "to#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1410_transfer_by_partition",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "1993": {
      "op": "txn Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "1995": {
      "op": "frame_dig -3",
      "defined_out": [
        "sender#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "to#0 (copy)"
      ]
    },
    "1997": {
      "op": "frame_dig -4",
      "defined_out": [
        "partition#0 (copy)",
        "sender#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "to#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "1999": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._receiverPartition",
      "op": "callsub _receiverPartition",
      "defined_out": [
        "receiverPartition#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "receiverPartition#0"
      ]
    },
    "2002": {
      "op": "swap",
      "stack_out": [
        "receiverPartition#0",
        "sender#0"
      ]
    },
    "2003": {
      "op": "frame_dig -4",
      "stack_out": [
        "receiverPartition#0",
        "sender#0",
        "partition#0 (copy)"
      ]
    },
    "2005": {
      "op": "frame_dig -3",
      "stack_out": [
        "receiverPartition#0",
        "sender#0",
        "partition#0 (copy)",
        "to#0 (copy)"
      ]
    },
    "2007": {
      "op": "dig 3",
      "defined_out": [
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "sender#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "receiverPartition#0",
        "sender#0",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)"
      ]
    },
    "2009": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "sender#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "receiverPartition#0",
        "sender#0",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "2011": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "data#0 (copy)",
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "sender#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "receiverPartition#0",
        "sender#0",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)",
        "amount#0 (copy)",
        "data#0 (copy)"
      ]
    },
    "2013": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._transfer_partition",
      "op": "callsub _transfer_partition",
      "stack_out": [
        "receiverPartition#0"
      ]
    },
    "2016": {
      "retsub": true,
      "op": "retsub"
    },
    "2017": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_partitions_of",
      "params": {
        "holder#0": "bytes",
        "page#0": "bytes"
      },
      "block": "arc1410_partitions_of",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2020": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)"
      ]
    },
    "2022": {
      "op": "frame_dig -1",
      "defined_out": [
        "holder#0 (copy)",
        "page#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)",
        "page#0 (copy)"
      ]
    },
    "2024": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "2025": {
      "op": "bytec 12 // \"hp_a\"",
      "defined_out": [
        "\"hp_a\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"hp_a\""
      ]
    },
    "2027": {
      "op": "swap",
      "stack_out": [
        "\"hp_a\"",
        "key#0"
      ]
    },
    "2028": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2029": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2030": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2031": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2033": {
      "op": "bnz arc1410_partitions_of_after_if_else@2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2036": {
      "op": "bytec 23 // 0x0000",
      "defined_out": [
        "0x0000",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x0000"
      ]
    },
    "2038": {
      "op": "swap"
    },
    "2039": {
      "retsub": true,
      "op": "retsub"
    },
    "2040": {
      "block": "arc1410_partitions_of_after_if_else@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2042": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2043": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "2044": {
      "op": "swap"
    },
    "2045": {
      "retsub": true,
      "op": "retsub"
    },
    "2046": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator",
      "params": {
        "holder#0": "bytes",
        "operator#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "arc1410_is_operator",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "2049": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2050": {
      "op": "dupn 2",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "2052": {
      "op": "frame_dig -2",
      "defined_out": [
        "operator#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "operator#0 (copy)"
      ]
    },
    "2054": {
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "operator#0 (copy)",
        "holder#0 (copy)"
      ]
    },
    "2056": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%0#0"
      ]
    },
    "2057": {
      "op": "bz arc1410_is_operator_after_if_else@2",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "2060": {
      "op": "bytec 7 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "0x80"
      ]
    },
    "2062": {
      "op": "frame_bury 0"
    },
    "2064": {
      "retsub": true,
      "op": "retsub"
    },
    "2065": {
      "block": "arc1410_is_operator_after_if_else@2",
      "stack_in": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "holder#0 (copy)"
      ]
    },
    "2067": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "holder#0 (copy)",
        "operator#0 (copy)"
      ]
    },
    "2069": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2070": {
      "op": "dup",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2071": {
      "op": "frame_bury 0",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2073": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "2075": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "specific#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "specific#0"
      ]
    },
    "2076": {
      "op": "bytec 13 // \"op\"",
      "defined_out": [
        "\"op\"",
        "encoded_tuple_buffer%2#0",
        "specific#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "specific#0",
        "\"op\""
      ]
    },
    "2078": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "\"op\"",
        "specific#0"
      ]
    },
    "2079": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%1#0"
      ]
    },
    "2080": {
      "op": "dup",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "2081": {
      "op": "frame_bury 1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%1#0"
      ]
    },
    "2083": {
      "op": "box_len",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2084": {
      "op": "bury 1",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_exists%0#0"
      ]
    },
    "2086": {
      "op": "bz arc1410_is_operator_after_if_else@5",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "2089": {
      "op": "frame_dig 1",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%1#0"
      ]
    },
    "2091": {
      "op": "box_get",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2092": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%1#0"
      ]
    },
    "2093": {
      "op": "btoi",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%3#0"
      ]
    },
    "2094": {
      "op": "intc_1 // 1",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%3#0",
        "1"
      ]
    },
    "2095": {
      "op": "==",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%4#0"
      ]
    },
    "2096": {
      "op": "bz arc1410_is_operator_after_if_else@5",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "2099": {
      "op": "bytec 7 // 0x80",
      "defined_out": [
        "0x80",
        "encoded_tuple_buffer%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "0x80"
      ]
    },
    "2101": {
      "op": "frame_bury 0"
    },
    "2103": {
      "retsub": true,
      "op": "retsub"
    },
    "2104": {
      "block": "arc1410_is_operator_after_if_else@5",
      "stack_in": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2106": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "2107": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "globalKey#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "globalKey#0"
      ]
    },
    "2108": {
      "op": "bytec 13 // \"op\"",
      "defined_out": [
        "\"op\"",
        "encoded_tuple_buffer%2#0",
        "globalKey#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "globalKey#0",
        "\"op\""
      ]
    },
    "2110": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "\"op\"",
        "globalKey#0"
      ]
    },
    "2111": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "2112": {
      "op": "dup",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "2113": {
      "op": "frame_bury 2",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "2115": {
      "op": "box_len",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2116": {
      "op": "bury 1",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_exists%2#0"
      ]
    },
    "2118": {
      "op": "bz arc1410_is_operator_after_if_else@8",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "2121": {
      "op": "frame_dig 2",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "2123": {
      "op": "box_get",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2124": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%3#0"
      ]
    },
    "2125": {
      "op": "btoi",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2126": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "encoded_tuple_buffer%2#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%7#0",
        "1"
      ]
    },
    "2127": {
      "op": "==",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%8#0"
      ]
    },
    "2128": {
      "op": "bz arc1410_is_operator_after_if_else@8",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "2131": {
      "op": "bytec 7 // 0x80",
      "defined_out": [
        "0x80",
        "encoded_tuple_buffer%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "0x80"
      ]
    },
    "2133": {
      "op": "frame_bury 0"
    },
    "2135": {
      "retsub": true,
      "op": "retsub"
    },
    "2136": {
      "block": "arc1410_is_operator_after_if_else@8",
      "stack_in": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "op": "bytec 9 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "0x00"
      ]
    },
    "2138": {
      "op": "frame_bury 0"
    },
    "2140": {
      "retsub": true,
      "op": "retsub"
    },
    "2141": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_authorize_operator",
      "params": {
        "holder#0": "bytes",
        "operator#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "arc1410_authorize_operator",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "2144": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2146": {
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "holder#0 (copy)"
      ]
    },
    "2148": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2149": {
      "error": "Only holder can authorize",
      "op": "assert // Only holder can authorize",
      "stack_out": []
    },
    "2150": {
      "op": "frame_dig -3",
      "stack_out": [
        "holder#0 (copy)"
      ]
    },
    "2152": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ]
    },
    "2154": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2155": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "2157": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "2158": {
      "op": "bytec 13 // \"op\"",
      "defined_out": [
        "\"op\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"op\""
      ]
    },
    "2160": {
      "op": "swap",
      "stack_out": [
        "\"op\"",
        "key#0"
      ]
    },
    "2161": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2162": {
      "op": "bytec 18 // 0x01",
      "defined_out": [
        "0x01",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x01"
      ]
    },
    "2164": {
      "op": "box_put",
      "stack_out": []
    },
    "2165": {
      "retsub": true,
      "op": "retsub"
    },
    "2166": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_revoke_operator",
      "params": {
        "holder#0": "bytes",
        "operator#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "arc1410_revoke_operator",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "2169": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2171": {
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "holder#0 (copy)"
      ]
    },
    "2173": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2174": {
      "error": "Only holder can revoke",
      "op": "assert // Only holder can revoke",
      "stack_out": []
    },
    "2175": {
      "op": "frame_dig -3",
      "stack_out": [
        "holder#0 (copy)"
      ]
    },
    "2177": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ]
    },
    "2179": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2180": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "2182": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "2183": {
      "op": "bytec 13 // \"op\"",
      "defined_out": [
        "\"op\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"op\""
      ]
    },
    "2185": {
      "op": "swap",
      "stack_out": [
        "\"op\"",
        "key#0"
      ]
    },
    "2186": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2187": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "2188": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2189": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "maybe_exists%0#0"
      ]
    },
    "2191": {
      "op": "bz arc1410_revoke_operator_after_if_else@2",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2194": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "2196": {
      "op": "box_del",
      "defined_out": [
        "tmp%2#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%2#0",
        "{box_del}"
      ]
    },
    "2197": {
      "op": "pop",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2198": {
      "block": "arc1410_revoke_operator_after_if_else@2",
      "stack_in": [
        "tmp%2#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "2199": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_operator_transfer_by_partition",
      "params": {
        "from#0": "bytes",
        "partition#0": "bytes",
        "to#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1410_operator_transfer_by_partition",
      "stack_in": [],
      "op": "proto 5 1"
    },
    "2202": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2203": {
      "op": "txn Sender"
    },
    "2205": {
      "op": "frame_dig -5"
    },
    "2207": {
      "op": "txn Sender"
    },
    "2209": {
      "op": "frame_dig -4",
      "defined_out": [
        "from#0 (copy)",
        "partition#0 (copy)",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "from#0 (copy)",
        "sender#0",
        "partition#0 (copy)"
      ]
    },
    "2211": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator",
      "op": "callsub arc1410_is_operator",
      "defined_out": [
        "sender#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "tmp%0#0"
      ]
    },
    "2214": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "tmp%0#0",
        "0"
      ]
    },
    "2215": {
      "op": "getbit",
      "defined_out": [
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "tmp%1#0"
      ]
    },
    "2216": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "tmp%1#0",
        "1"
      ]
    },
    "2217": {
      "op": "==",
      "defined_out": [
        "authorized#0",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0"
      ]
    },
    "2218": {
      "op": "dupn 2",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "authorized#0"
      ]
    },
    "2220": {
      "op": "bnz arc1410_operator_transfer_by_partition_after_if_else@4",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "2223": {
      "op": "frame_dig -5",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "from#0 (copy)"
      ]
    },
    "2225": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "from#0 (copy)",
        "sender#0"
      ]
    },
    "2227": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%2#0",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2228": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "2230": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "pKey#0",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "pKey#0"
      ]
    },
    "2231": {
      "op": "bytec 11 // \"opa\"",
      "defined_out": [
        "\"opa\"",
        "authorized#0",
        "authorized#9",
        "pKey#0",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "pKey#0",
        "\"opa\""
      ]
    },
    "2233": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "\"opa\"",
        "pKey#0"
      ]
    },
    "2234": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0"
      ]
    },
    "2235": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "2236": {
      "op": "frame_bury 0",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0"
      ]
    },
    "2238": {
      "op": "box_len",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2239": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_exists%0#0"
      ]
    },
    "2241": {
      "op": "bz arc1410_operator_transfer_by_partition_after_if_else@3",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "2244": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0"
      ]
    },
    "2246": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "2247": {
      "op": "box_get",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "maybe_exists%1#0",
        "remaining#0",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "maybe_exists%1#0"
      ]
    },
    "2248": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0"
      ]
    },
    "2249": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "remaining#0",
        "remaining#0 (copy)",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "remaining#0 (copy)"
      ]
    },
    "2250": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "authorized#0",
        "authorized#9",
        "remaining#0",
        "remaining#0 (copy)",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "remaining#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "2252": {
      "op": "b>=",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "remaining#0",
        "sender#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "tmp%4#0"
      ]
    },
    "2253": {
      "error": "Portion allowance exceeded",
      "op": "assert // Portion allowance exceeded",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0"
      ]
    },
    "2254": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "authorized#0"
      ]
    },
    "2255": {
      "op": "frame_bury 2",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0"
      ]
    },
    "2257": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "amount#0 (copy)"
      ]
    },
    "2259": {
      "op": "b-",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0"
      ]
    },
    "2260": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "2261": {
      "op": "len",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "2262": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "2263": {
      "op": "<=",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "len_ok%0#0",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "2264": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0"
      ]
    },
    "2265": {
      "op": "intc_2 // 32",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "2266": {
      "op": "bzero",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "bzero%0#0",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "2267": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "arc4_encoded%0#0"
      ]
    },
    "2268": {
      "op": "box_put",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "2269": {
      "block": "arc1410_operator_transfer_by_partition_after_if_else@3",
      "stack_in": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "authorized#9"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "authorized#9"
      ]
    },
    "2271": {
      "op": "frame_bury 3",
      "defined_out": [
        "authorized#9"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "2273": {
      "block": "arc1410_operator_transfer_by_partition_after_if_else@4",
      "stack_in": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "authorized#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "authorized#0"
      ]
    },
    "2275": {
      "error": "Not authorized operator",
      "op": "assert // Not authorized operator",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "2276": {
      "op": "frame_dig -3",
      "defined_out": [
        "authorized#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "to#0 (copy)"
      ]
    },
    "2278": {
      "op": "frame_dig -4",
      "defined_out": [
        "authorized#0",
        "partition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "to#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "2280": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._receiverPartition",
      "op": "callsub _receiverPartition",
      "defined_out": [
        "authorized#0",
        "receiverPartition#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0"
      ]
    },
    "2283": {
      "op": "frame_dig -5",
      "defined_out": [
        "authorized#0",
        "from#0 (copy)",
        "receiverPartition#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)"
      ]
    },
    "2285": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "2287": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "to#0 (copy)"
      ]
    },
    "2289": {
      "op": "dig 3",
      "defined_out": [
        "authorized#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)"
      ]
    },
    "2291": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "authorized#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "2293": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "authorized#0",
        "data#0 (copy)",
        "from#0 (copy)",
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)",
        "amount#0 (copy)",
        "data#0 (copy)"
      ]
    },
    "2295": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._transfer_partition",
      "op": "callsub _transfer_partition",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0"
      ]
    },
    "2298": {
      "op": "frame_bury 0"
    },
    "2300": {
      "retsub": true,
      "op": "retsub"
    },
    "2301": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_can_transfer_by_partition",
      "params": {
        "from#0": "bytes",
        "partition#0": "bytes",
        "to#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1410_can_transfer_by_partition",
      "stack_in": [],
      "op": "proto 5 1"
    },
    "2304": {
      "op": "intc_0 // 0",
      "stack_out": [
        "senderAddr#0"
      ]
    },
    "2305": {
      "op": "dup",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0"
      ]
    },
    "2306": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0"
      ]
    },
    "2308": {
      "op": "dup",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10"
      ]
    },
    "2309": {
      "op": "frame_dig -5",
      "defined_out": [
        "from#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "from#0 (copy)"
      ]
    },
    "2311": {
      "op": "frame_dig -4",
      "defined_out": [
        "from#0 (copy)",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "from#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "2313": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "encoded_tuple_buffer%2#1"
      ]
    },
    "2314": {
      "op": "bytec 4 // \"p\"",
      "defined_out": [
        "\"p\"",
        "encoded_tuple_buffer%2#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "encoded_tuple_buffer%2#1",
        "\"p\""
      ]
    },
    "2316": {
      "op": "swap",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "\"p\"",
        "encoded_tuple_buffer%2#1"
      ]
    },
    "2317": {
      "op": "concat",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "2318": {
      "op": "dup",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%0#1"
      ]
    },
    "2319": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "2320": {
      "op": "bury 1",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_exists%0#0"
      ]
    },
    "2322": {
      "op": "bnz arc1410_can_transfer_by_partition_after_if_else@2",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "2325": {
      "op": "pushbytes base32(KAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKFAYLSORUXI2LPNYQG433UEBSXQ2LTORZQ)",
      "defined_out": [
        "KAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKFAYLSORUXI2LPNYQG433UEBSXQ2LTORZQ",
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "KAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKFAYLSORUXI2LPNYQG433UEBSXQ2LTORZQ"
      ]
    },
    "2384": {
      "op": "frame_bury 0"
    },
    "2386": {
      "retsub": true,
      "op": "retsub"
    },
    "2387": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@2",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%0#1"
      ]
    },
    "2389": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2390": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_value%0#0"
      ]
    },
    "2391": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_value%0#0",
        "amount#0 (copy)"
      ]
    },
    "2393": {
      "op": "b<",
      "defined_out": [
        "tmp%0#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%2#0"
      ]
    },
    "2394": {
      "op": "bz arc1410_can_transfer_by_partition_after_if_else@4",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "2397": {
      "op": "pushbytes base32(KIACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKES3TTOVTGM2LDNFSW45BAMJQWYYLOMNSQ)",
      "defined_out": [
        "KIACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKES3TTOVTGM2LDNFSW45BAMJQWYYLOMNSQ",
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "KIACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKES3TTOVTGM2LDNFSW45BAMJQWYYLOMNSQ"
      ]
    },
    "2456": {
      "op": "frame_bury 0"
    },
    "2458": {
      "retsub": true,
      "op": "retsub"
    },
    "2459": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@4",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "to#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "to#0 (copy)"
      ]
    },
    "2461": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "2462": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%3#0"
      ]
    },
    "2463": {
      "op": "bz arc1410_can_transfer_by_partition_after_if_else@6",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "2466": {
      "op": "pushbytes base32(K4ACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIES3TWMFWGSZBAOJSWGZLJOZSXE)",
      "defined_out": [
        "K4ACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIES3TWMFWGSZBAOJSWGZLJOZSXE"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "K4ACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIES3TWMFWGSZBAOJSWGZLJOZSXE"
      ]
    },
    "2521": {
      "op": "frame_bury 0"
    },
    "2523": {
      "retsub": true,
      "op": "retsub"
    },
    "2524": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@6",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "txn Sender"
    },
    "2526": {
      "op": "dup",
      "defined_out": [
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "senderAddr#0",
        "senderAddr#0"
      ]
    },
    "2527": {
      "op": "frame_bury 0",
      "defined_out": [
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "senderAddr#0"
      ]
    },
    "2529": {
      "op": "frame_dig -5",
      "defined_out": [
        "from#0 (copy)",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "senderAddr#0",
        "from#0 (copy)"
      ]
    },
    "2531": {
      "op": "!=",
      "defined_out": [
        "senderAddr#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%4#0"
      ]
    },
    "2532": {
      "op": "bz arc1410_can_transfer_by_partition_after_if_else@16",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "2535": {
      "op": "frame_dig -5",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "from#0 (copy)"
      ]
    },
    "2537": {
      "op": "frame_dig 0",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "from#0 (copy)",
        "senderAddr#0"
      ]
    },
    "2539": {
      "op": "frame_dig -4",
      "defined_out": [
        "from#0 (copy)",
        "partition#0 (copy)",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "from#0 (copy)",
        "senderAddr#0",
        "partition#0 (copy)"
      ]
    },
    "2541": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator",
      "op": "callsub arc1410_is_operator",
      "defined_out": [
        "senderAddr#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%5#0"
      ]
    },
    "2544": {
      "op": "intc_0 // 0",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%5#0",
        "0"
      ]
    },
    "2545": {
      "op": "getbit",
      "defined_out": [
        "senderAddr#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%6#0"
      ]
    },
    "2546": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "senderAddr#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%6#0",
        "1"
      ]
    },
    "2547": {
      "op": "==",
      "defined_out": [
        "authorized#0",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0"
      ]
    },
    "2548": {
      "op": "dup",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0",
        "authorized#0"
      ]
    },
    "2549": {
      "op": "frame_bury 2",
      "defined_out": [
        "authorized#0",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0"
      ]
    },
    "2551": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0",
        "authorized#10"
      ]
    },
    "2552": {
      "op": "frame_bury 3",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0"
      ]
    },
    "2554": {
      "op": "bnz arc1410_can_transfer_by_partition_after_if_else@13",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "2557": {
      "op": "frame_dig -5",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "from#0 (copy)"
      ]
    },
    "2559": {
      "op": "frame_dig 0",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "from#0 (copy)",
        "senderAddr#0"
      ]
    },
    "2561": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "encoded_tuple_buffer%20#0",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "encoded_tuple_buffer%20#0"
      ]
    },
    "2562": {
      "op": "frame_dig -4",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "encoded_tuple_buffer%20#0",
        "partition#0 (copy)"
      ]
    },
    "2564": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "pKey#0",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "pKey#0"
      ]
    },
    "2565": {
      "op": "bytec 11 // \"opa\"",
      "defined_out": [
        "\"opa\"",
        "authorized#0",
        "authorized#10",
        "pKey#0",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "pKey#0",
        "\"opa\""
      ]
    },
    "2567": {
      "op": "swap",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "\"opa\"",
        "pKey#0"
      ]
    },
    "2568": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "senderAddr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%7#0"
      ]
    },
    "2569": {
      "op": "dup",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%7#0",
        "tmp%7#0"
      ]
    },
    "2570": {
      "op": "frame_bury 1",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "senderAddr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%7#0"
      ]
    },
    "2572": {
      "op": "box_len",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "senderAddr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2573": {
      "op": "bury 1",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_exists%1#0"
      ]
    },
    "2575": {
      "op": "frame_dig 2",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_exists%1#0",
        "authorized#10"
      ]
    },
    "2577": {
      "op": "frame_bury 3",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_exists%1#0"
      ]
    },
    "2579": {
      "op": "bz arc1410_can_transfer_by_partition_after_if_else@13",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "2582": {
      "op": "frame_dig 1",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%7#0"
      ]
    },
    "2584": {
      "op": "box_get",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "maybe_exists%2#0",
        "remaining#0",
        "senderAddr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "remaining#0",
        "maybe_exists%2#0"
      ]
    },
    "2585": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "remaining#0"
      ]
    },
    "2586": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "authorized#0",
        "authorized#10",
        "remaining#0",
        "senderAddr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "remaining#0",
        "amount#0 (copy)"
      ]
    },
    "2588": {
      "op": "b>=",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "senderAddr#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%9#0"
      ]
    },
    "2589": {
      "op": "bz arc1410_can_transfer_by_partition_after_if_else@11",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "2592": {
      "op": "intc_1 // 1",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0"
      ]
    },
    "2593": {
      "op": "frame_bury 2",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "2595": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@11",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "authorized#10"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#10"
      ]
    },
    "2597": {
      "op": "frame_bury 3",
      "defined_out": [
        "authorized#10"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "2599": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@13",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "authorized#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0"
      ]
    },
    "2601": {
      "op": "bnz arc1410_can_transfer_by_partition_after_if_else@16",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "2604": {
      "op": "pushbytes base32(LAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALU64DFOJQXI33SEBXG65BAMF2XI2DPOJUXUZLE)",
      "defined_out": [
        "LAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALU64DFOJQXI33SEBXG65BAMF2XI2DPOJUXUZLE",
        "authorized#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "LAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALU64DFOJQXI33SEBXG65BAMF2XI2DPOJUXUZLE"
      ]
    },
    "2666": {
      "op": "frame_bury 0"
    },
    "2668": {
      "retsub": true,
      "op": "retsub"
    },
    "2669": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@16",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "to#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "to#0 (copy)"
      ]
    },
    "2671": {
      "op": "frame_dig -4",
      "defined_out": [
        "partition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "to#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "2673": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._receiverPartition",
      "op": "callsub _receiverPartition",
      "defined_out": [
        "receiverPartition#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "receiverPartition#0"
      ]
    },
    "2676": {
      "op": "pushbytes 0x510023",
      "defined_out": [
        "0x510023",
        "receiverPartition#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "receiverPartition#0",
        "0x510023"
      ]
    },
    "2681": {
      "op": "swap",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "0x510023",
        "receiverPartition#0"
      ]
    },
    "2682": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%30#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "encoded_tuple_buffer%30#0"
      ]
    },
    "2683": {
      "op": "pushbytes 0x000753756363657373",
      "defined_out": [
        "0x000753756363657373",
        "encoded_tuple_buffer%30#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "encoded_tuple_buffer%30#0",
        "0x000753756363657373"
      ]
    },
    "2694": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%31#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "encoded_tuple_buffer%31#0"
      ]
    },
    "2695": {
      "op": "frame_bury 0"
    },
    "2697": {
      "retsub": true,
      "op": "retsub"
    },
    "2698": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._receiverPartition",
      "params": {
        "receiver#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "_receiverPartition",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2701": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ"
    },
    "2702": {
      "op": "frame_dig -2"
    },
    "2704": {
      "op": "frame_dig -1",
      "defined_out": [
        "partition#0 (copy)",
        "receiver#0 (copy)",
        "receiverPartition#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "receiver#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "2706": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "receiverPartition#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2707": {
      "op": "bytec 4 // \"p\"",
      "defined_out": [
        "\"p\"",
        "encoded_tuple_buffer%2#0",
        "receiverPartition#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "encoded_tuple_buffer%2#0",
        "\"p\""
      ]
    },
    "2709": {
      "op": "swap",
      "stack_out": [
        "receiverPartition#0",
        "\"p\"",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2710": {
      "op": "concat",
      "defined_out": [
        "receiverPartition#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "tmp%0#0"
      ]
    },
    "2711": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "receiverPartition#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2712": {
      "op": "bury 1",
      "stack_out": [
        "receiverPartition#0",
        "maybe_exists%0#0"
      ]
    },
    "2714": {
      "op": "bz _receiverPartition_after_if_else@2",
      "stack_out": [
        "receiverPartition#0"
      ]
    },
    "2717": {
      "op": "frame_dig -1",
      "stack_out": [
        "receiverPartition#0",
        "receiverPartition#0"
      ]
    },
    "2719": {
      "op": "frame_bury 0",
      "stack_out": [
        "receiverPartition#0"
      ]
    },
    "2721": {
      "block": "_receiverPartition_after_if_else@2",
      "stack_in": [
        "receiverPartition#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "receiverPartition#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "receiverPartition#0"
      ]
    },
    "2723": {
      "op": "swap"
    },
    "2724": {
      "retsub": true,
      "op": "retsub"
    },
    "2725": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._add_participation_to_holder",
      "params": {
        "holder#0": "bytes",
        "participation#0": "bytes"
      },
      "block": "_add_participation_to_holder",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2728": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a#0"
      ]
    },
    "2729": {
      "op": "dupn 4",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0"
      ]
    },
    "2731": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0"
      ]
    },
    "2733": {
      "op": "dupn 4",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "2735": {
      "op": "pushbytes \"hp_p\"",
      "defined_out": [
        "\"hp_p\""
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "\"hp_p\""
      ]
    },
    "2741": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"hp_p\"",
        "holder#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "\"hp_p\"",
        "holder#0 (copy)"
      ]
    },
    "2743": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2744": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2745": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2746": {
      "op": "bury 1",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2748": {
      "op": "bnz _add_participation_to_holder_after_if_else@2",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2751": {
      "op": "frame_dig 10",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2753": {
      "op": "bytec 17 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%0#0",
        "0x0000000000000000"
      ]
    },
    "2755": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2756": {
      "block": "_add_participation_to_holder_after_if_else@2",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 10",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2758": {
      "op": "box_get",
      "defined_out": [
        "lastPage#0",
        "maybe_exists%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "lastPage#0",
        "maybe_exists%1#0"
      ]
    },
    "2759": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_exists%1#0",
        "lastPage#0"
      ]
    },
    "2760": {
      "op": "frame_bury 2",
      "defined_out": [
        "lastPage#0",
        "maybe_exists%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_exists%1#0"
      ]
    },
    "2762": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2763": {
      "op": "intc_0 // 0",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "found#0"
      ]
    },
    "2764": {
      "op": "frame_bury 6",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2766": {
      "op": "bytec 17 // 0x0000000000000000",
      "defined_out": [
        "curPage#0",
        "found#0",
        "lastPage#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "curPage#0"
      ]
    },
    "2768": {
      "op": "frame_bury 1",
      "defined_out": [
        "curPage#0",
        "found#0",
        "lastPage#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2770": {
      "block": "_add_participation_to_holder_while_top@3",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "curPage#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "curPage#0"
      ]
    },
    "2772": {
      "op": "btoi",
      "defined_out": [
        "curPage#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "2773": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%3#0"
      ]
    },
    "2774": {
      "op": "frame_bury 8",
      "defined_out": [
        "curPage#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "2776": {
      "op": "frame_dig 2",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0",
        "lastPage#0"
      ]
    },
    "2778": {
      "op": "btoi",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "2779": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%4#0"
      ]
    },
    "2780": {
      "op": "frame_bury 9",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "2782": {
      "op": "<",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%5#0"
      ]
    },
    "2783": {
      "op": "bz _add_participation_to_holder_block@10",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2786": {
      "op": "frame_dig -2",
      "defined_out": [
        "curPage#0",
        "holder#0 (copy)",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "holder#0 (copy)"
      ]
    },
    "2788": {
      "op": "frame_dig 1",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "holder#0 (copy)",
        "curPage#0"
      ]
    },
    "2790": {
      "op": "concat",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "paginatedKey#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "paginatedKey#0"
      ]
    },
    "2791": {
      "op": "bytec 12 // \"hp_a\"",
      "defined_out": [
        "\"hp_a\"",
        "curPage#0",
        "lastPage#0",
        "paginatedKey#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "paginatedKey#0",
        "\"hp_a\""
      ]
    },
    "2793": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "\"hp_a\"",
        "paginatedKey#0"
      ]
    },
    "2794": {
      "op": "concat",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "2795": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "2796": {
      "op": "frame_bury 4",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "2798": {
      "op": "box_len",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2799": {
      "op": "bury 1",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_exists%2#0"
      ]
    },
    "2801": {
      "op": "bnz _add_participation_to_holder_after_if_else@6",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2804": {
      "op": "bytec 19 // 0x0001",
      "defined_out": [
        "0x0001",
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "0x0001"
      ]
    },
    "2806": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x0001",
        "curPage#0",
        "lastPage#0",
        "participation#0 (copy)",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "0x0001",
        "participation#0 (copy)"
      ]
    },
    "2808": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%0#0"
      ]
    },
    "2809": {
      "op": "frame_dig 4",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%6#0"
      ]
    },
    "2811": {
      "op": "dup",
      "defined_out": [
        "concat_result%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "2812": {
      "op": "box_del",
      "defined_out": [
        "concat_result%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0",
        "{box_del}"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%6#0",
        "{box_del}"
      ]
    },
    "2813": {
      "op": "pop",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%6#0"
      ]
    },
    "2814": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%6#0",
        "concat_result%0#0"
      ]
    },
    "2815": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2816": {
      "block": "_add_participation_to_holder_after_if_else@6",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "2818": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "a#0",
        "maybe_exists%3#0"
      ]
    },
    "2819": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_exists%3#0",
        "a#0"
      ]
    },
    "2820": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_exists%3#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "2821": {
      "op": "cover 2",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "a#0",
        "maybe_exists%3#0",
        "a#0"
      ]
    },
    "2823": {
      "op": "frame_bury 0",
      "defined_out": [
        "a#0",
        "maybe_exists%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "a#0",
        "maybe_exists%3#0"
      ]
    },
    "2825": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "a#0"
      ]
    },
    "2826": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "a#0",
        "0"
      ]
    },
    "2827": {
      "op": "extract_uint16",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "array_length%0#0"
      ]
    },
    "2828": {
      "op": "frame_bury 5",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2830": {
      "op": "intc_0 // 0",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2831": {
      "op": "frame_bury 7",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2833": {
      "block": "_add_participation_to_holder_for_header@17",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2835": {
      "op": "frame_dig 5",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "item_index_internal%0#0",
        "array_length%0#0"
      ]
    },
    "2837": {
      "op": "<",
      "defined_out": [
        "array_length%0#0",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "continue_looping%0#0"
      ]
    },
    "2838": {
      "op": "bz _add_participation_to_holder_after_for@21",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2841": {
      "op": "frame_dig 0",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "a#0"
      ]
    },
    "2843": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "2846": {
      "op": "frame_dig 7",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2848": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "a#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0",
        "32"
      ]
    },
    "2849": {
      "op": "*",
      "defined_out": [
        "a#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "2850": {
      "op": "intc_2 // 32",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "32"
      ]
    },
    "2851": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "v#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "v#0"
      ]
    },
    "2852": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "participation#0 (copy)",
        "v#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "v#0",
        "participation#0 (copy)"
      ]
    },
    "2854": {
      "op": "==",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%0#1"
      ]
    },
    "2855": {
      "op": "bz _add_participation_to_holder_after_if_else@20",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2858": {
      "op": "intc_1 // 1",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%9#0"
      ]
    },
    "2859": {
      "block": "_add_participation_to_holder_after_inlined_smart_contracts/security_token/arc1410.algo.ts::Arc1410.containsAddress@22",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%9#0"
      ],
      "op": "bz _add_participation_to_holder_after_if_else@8",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2862": {
      "op": "intc_1 // 1",
      "defined_out": [
        "found#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "found#0"
      ]
    },
    "2863": {
      "op": "frame_bury 6",
      "defined_out": [
        "found#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2865": {
      "block": "_add_participation_to_holder_block@10",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 6",
      "defined_out": [
        "found#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "found#0"
      ]
    },
    "2867": {
      "op": "bnz _add_participation_to_holder_after_if_else@15",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2870": {
      "op": "frame_dig -2",
      "defined_out": [
        "found#0",
        "holder#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "holder#0 (copy)"
      ]
    },
    "2872": {
      "op": "frame_dig 2",
      "defined_out": [
        "found#0",
        "holder#0 (copy)",
        "lastPage#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "holder#0 (copy)",
        "lastPage#0"
      ]
    },
    "2874": {
      "op": "concat",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "paginatedKey\u2081#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "paginatedKey\u2081#0"
      ]
    },
    "2875": {
      "op": "bytec 12 // \"hp_a\"",
      "defined_out": [
        "\"hp_a\"",
        "found#0",
        "lastPage#0",
        "paginatedKey\u2081#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "paginatedKey\u2081#0",
        "\"hp_a\""
      ]
    },
    "2877": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "\"hp_a\"",
        "paginatedKey\u2081#0"
      ]
    },
    "2878": {
      "op": "concat",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0"
      ]
    },
    "2879": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "tmp%11#0"
      ]
    },
    "2880": {
      "op": "frame_bury 3",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0"
      ]
    },
    "2882": {
      "op": "box_get",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2883": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_value%4#0"
      ]
    },
    "2884": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_value%4#0",
        "0"
      ]
    },
    "2885": {
      "op": "extract_uint16",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "to_encode%1#0"
      ]
    },
    "2886": {
      "op": "itob",
      "defined_out": [
        "found#0",
        "itemsCount#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "itemsCount#0"
      ]
    },
    "2887": {
      "op": "btoi",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%12#0"
      ]
    },
    "2888": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%12#0",
        "10"
      ]
    },
    "2890": {
      "op": "<",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%13#0"
      ]
    },
    "2891": {
      "op": "bz _add_participation_to_holder_else_body@13",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2894": {
      "op": "frame_dig 3",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0"
      ]
    },
    "2896": {
      "op": "dup",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ]
    },
    "2897": {
      "op": "box_get",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2898": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "maybe_value%5#0"
      ]
    },
    "2899": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%1#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "expr_value_trimmed%1#0"
      ]
    },
    "2902": {
      "op": "bytec 19 // 0x0001",
      "defined_out": [
        "0x0001",
        "expr_value_trimmed%1#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "expr_value_trimmed%1#0",
        "0x0001"
      ]
    },
    "2904": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x0001",
        "expr_value_trimmed%1#0",
        "found#0",
        "lastPage#0",
        "participation#0 (copy)",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "expr_value_trimmed%1#0",
        "0x0001",
        "participation#0 (copy)"
      ]
    },
    "2906": {
      "op": "concat",
      "defined_out": [
        "concat_result%1#0",
        "expr_value_trimmed%1#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "expr_value_trimmed%1#0",
        "concat_result%1#0"
      ]
    },
    "2907": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%1#0",
        "expr_value_trimmed%3#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "expr_value_trimmed%1#0",
        "expr_value_trimmed%3#0"
      ]
    },
    "2910": {
      "op": "concat",
      "defined_out": [
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concatenated%2#0"
      ]
    },
    "2911": {
      "op": "dup",
      "defined_out": [
        "concatenated%2#0",
        "concatenated%2#0 (copy)",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concatenated%2#0",
        "concatenated%2#0 (copy)"
      ]
    },
    "2912": {
      "op": "len",
      "defined_out": [
        "byte_len%2#0",
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concatenated%2#0",
        "byte_len%2#0"
      ]
    },
    "2913": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "byte_len%2#0",
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concatenated%2#0",
        "byte_len%2#0",
        "32"
      ]
    },
    "2914": {
      "op": "/",
      "defined_out": [
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "len_%2#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concatenated%2#0",
        "len_%2#0"
      ]
    },
    "2915": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concatenated%2#0",
        "as_bytes%2#0"
      ]
    },
    "2916": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "len_16_bit%2#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concatenated%2#0",
        "len_16_bit%2#0"
      ]
    },
    "2919": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "len_16_bit%2#0",
        "concatenated%2#0"
      ]
    },
    "2920": {
      "op": "concat",
      "defined_out": [
        "concat_result%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concat_result%2#0"
      ]
    },
    "2921": {
      "op": "dig 1",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concat_result%2#0",
        "tmp%11#0 (copy)"
      ]
    },
    "2923": {
      "op": "box_del",
      "defined_out": [
        "concat_result%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "{box_del}"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concat_result%2#0",
        "{box_del}"
      ]
    },
    "2924": {
      "op": "pop",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concat_result%2#0"
      ]
    },
    "2925": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2926": {
      "block": "_add_participation_to_holder_after_if_else@15",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "2927": {
      "block": "_add_participation_to_holder_else_body@13",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 9",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%4#0"
      ]
    },
    "2929": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%4#0",
        "1"
      ]
    },
    "2930": {
      "op": "+",
      "defined_out": [
        "tmp%4#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "to_encode%2#0"
      ]
    },
    "2931": {
      "op": "itob",
      "defined_out": [
        "newLastPage#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newLastPage#0"
      ]
    },
    "2932": {
      "op": "frame_dig 10",
      "defined_out": [
        "newLastPage#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newLastPage#0",
        "tmp%0#0"
      ]
    },
    "2934": {
      "op": "dig 1",
      "defined_out": [
        "newLastPage#0",
        "newLastPage#0 (copy)",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newLastPage#0",
        "tmp%0#0",
        "newLastPage#0 (copy)"
      ]
    },
    "2936": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newLastPage#0"
      ]
    },
    "2937": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)",
        "newLastPage#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newLastPage#0",
        "holder#0 (copy)"
      ]
    },
    "2939": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "holder#0 (copy)",
        "newLastPage#0"
      ]
    },
    "2940": {
      "op": "concat",
      "defined_out": [
        "newPaginatedKey#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newPaginatedKey#0"
      ]
    },
    "2941": {
      "op": "bytec 19 // 0x0001",
      "defined_out": [
        "0x0001",
        "newPaginatedKey#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newPaginatedKey#0",
        "0x0001"
      ]
    },
    "2943": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x0001",
        "newPaginatedKey#0",
        "participation#0 (copy)",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newPaginatedKey#0",
        "0x0001",
        "participation#0 (copy)"
      ]
    },
    "2945": {
      "op": "concat",
      "defined_out": [
        "concat_result%3#0",
        "newPaginatedKey#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newPaginatedKey#0",
        "concat_result%3#0"
      ]
    },
    "2946": {
      "op": "bytec 12 // \"hp_a\"",
      "defined_out": [
        "\"hp_a\"",
        "concat_result%3#0",
        "newPaginatedKey#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newPaginatedKey#0",
        "concat_result%3#0",
        "\"hp_a\""
      ]
    },
    "2948": {
      "op": "uncover 2",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%3#0",
        "\"hp_a\"",
        "newPaginatedKey#0"
      ]
    },
    "2950": {
      "op": "concat",
      "defined_out": [
        "concat_result%3#0",
        "tmp%0#0",
        "tmp%18#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%3#0",
        "tmp%18#0"
      ]
    },
    "2951": {
      "op": "dup",
      "defined_out": [
        "concat_result%3#0",
        "tmp%0#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%3#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "2952": {
      "op": "box_del",
      "defined_out": [
        "concat_result%3#0",
        "tmp%0#0",
        "tmp%18#0",
        "tmp%4#0",
        "{box_del}"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%3#0",
        "tmp%18#0",
        "{box_del}"
      ]
    },
    "2953": {
      "op": "pop",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%3#0",
        "tmp%18#0"
      ]
    },
    "2954": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%18#0",
        "concat_result%3#0"
      ]
    },
    "2955": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2956": {
      "retsub": true,
      "op": "retsub"
    },
    "2957": {
      "block": "_add_participation_to_holder_after_if_else@8",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 8",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "2959": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0",
        "1"
      ]
    },
    "2960": {
      "op": "+",
      "defined_out": [
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "to_encode%0#0"
      ]
    },
    "2961": {
      "op": "itob",
      "defined_out": [
        "curPage#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "curPage#0"
      ]
    },
    "2962": {
      "op": "frame_bury 1",
      "defined_out": [
        "curPage#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2964": {
      "op": "b _add_participation_to_holder_while_top@3"
    },
    "2967": {
      "block": "_add_participation_to_holder_after_if_else@20",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2969": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "2970": {
      "op": "+",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2971": {
      "op": "frame_bury 7",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2973": {
      "op": "b _add_participation_to_holder_for_header@17"
    },
    "2976": {
      "block": "_add_participation_to_holder_after_for@21",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%9#0"
      ]
    },
    "2977": {
      "op": "b _add_participation_to_holder_after_inlined_smart_contracts/security_token/arc1410.algo.ts::Arc1410.containsAddress@22"
    },
    "2980": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._transfer_partition",
      "params": {
        "from#0": "bytes",
        "fromPartition#0": "bytes",
        "to#0": "bytes",
        "toPartition#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "_transfer_partition",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "2983": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bzero%0#0"
      ]
    },
    "2984": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "2985": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "amount#0 (copy)"
      ]
    },
    "2987": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "amount#0 (copy)",
        "0x"
      ]
    },
    "2989": {
      "op": "b>",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%0#0"
      ]
    },
    "2990": {
      "error": "Invalid amount",
      "op": "assert // Invalid amount",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "2991": {
      "op": "frame_dig -6",
      "defined_out": [
        "from#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0 (copy)"
      ]
    },
    "2993": {
      "op": "frame_dig -5",
      "defined_out": [
        "from#0 (copy)",
        "fromPartition#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0 (copy)",
        "fromPartition#0 (copy)"
      ]
    },
    "2995": {
      "op": "concat",
      "defined_out": [
        "fromKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "fromKey#0"
      ]
    },
    "2996": {
      "op": "bytec 4 // \"p\"",
      "defined_out": [
        "\"p\"",
        "fromKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "fromKey#0",
        "\"p\""
      ]
    },
    "2998": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "\"p\"",
        "fromKey#0"
      ]
    },
    "2999": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "3000": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "3001": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3002": {
      "op": "bury 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "3004": {
      "op": "bnz _transfer_partition_after_if_else@2",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "3007": {
      "op": "frame_dig 2",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "3009": {
      "op": "bytec_0 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "3010": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "3011": {
      "block": "_transfer_partition_after_if_else@2",
      "stack_in": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "3013": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "3014": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3015": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "3016": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "3018": {
      "op": "b-",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "3019": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "3020": {
      "op": "len",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "3021": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "3022": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "3023": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "3024": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "3025": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "3026": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0",
        "bzero%0#0"
      ]
    },
    "3027": {
      "op": "frame_bury 0",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "3029": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "arc4_encoded%0#0"
      ]
    },
    "3030": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "3031": {
      "op": "frame_dig -6",
      "defined_out": [
        "bzero%0#0",
        "from#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "from#0 (copy)"
      ]
    },
    "3033": {
      "op": "frame_dig -4",
      "defined_out": [
        "bzero%0#0",
        "from#0 (copy)",
        "tmp%1#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "from#0 (copy)",
        "to#0 (copy)"
      ]
    },
    "3035": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%5#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "3036": {
      "op": "frame_dig -5",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%5#0",
        "fromPartition#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%5#0",
        "fromPartition#0 (copy)"
      ]
    },
    "3038": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%6#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "3039": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%6#0",
        "amount#0 (copy)"
      ]
    },
    "3041": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%7#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3042": {
      "op": "pushbytes 0x0082",
      "defined_out": [
        "0x0082",
        "bzero%0#0",
        "encoded_tuple_buffer%7#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%7#0",
        "0x0082"
      ]
    },
    "3046": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%8#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "3047": {
      "op": "frame_dig -1",
      "defined_out": [
        "bzero%0#0",
        "data#0 (copy)",
        "encoded_tuple_buffer%8#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%8#0",
        "data#0 (copy)"
      ]
    },
    "3049": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%9#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "3050": {
      "op": "bytec 6 // 0x0002",
      "defined_out": [
        "0x0002",
        "bzero%0#0",
        "encoded_tuple_buffer%9#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%9#0",
        "0x0002"
      ]
    },
    "3052": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "0x0002",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "3053": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%12#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "3054": {
      "op": "pushbytes 0x206b7940 // method \"Transfer((address,address,address,uint256,byte[]))\"",
      "defined_out": [
        "Method(Transfer((address,address,address,uint256,byte[])))",
        "bzero%0#0",
        "encoded_tuple_buffer%12#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%12#0",
        "Method(Transfer((address,address,address,uint256,byte[])))"
      ]
    },
    "3060": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "Method(Transfer((address,address,address,uint256,byte[])))",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "3061": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "event%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "event%0#0"
      ]
    },
    "3062": {
      "op": "log",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "3063": {
      "op": "frame_dig -3",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "toPartition#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "toPartition#0 (copy)"
      ]
    },
    "3065": {
      "op": "frame_dig -5",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "toPartition#0 (copy)",
        "fromPartition#0 (copy)"
      ]
    },
    "3067": {
      "op": "!=",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "3068": {
      "op": "bz _transfer_partition_after_if_else@4",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "3071": {
      "op": "frame_dig -4",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "to#0 (copy)"
      ]
    },
    "3073": {
      "op": "frame_dig -3",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "to#0 (copy)",
        "toPartition#0 (copy)"
      ]
    },
    "3075": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._add_participation_to_holder",
      "op": "callsub _add_participation_to_holder",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "3078": {
      "block": "_transfer_partition_after_if_else@4",
      "stack_in": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ],
      "op": "frame_dig -4",
      "defined_out": [
        "to#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "to#0 (copy)"
      ]
    },
    "3080": {
      "op": "frame_dig -3",
      "defined_out": [
        "to#0 (copy)",
        "toPartition#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "to#0 (copy)",
        "toPartition#0 (copy)"
      ]
    },
    "3082": {
      "op": "concat",
      "defined_out": [
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "toKey#0"
      ]
    },
    "3083": {
      "op": "bytec 4 // \"p\"",
      "defined_out": [
        "\"p\"",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "toKey#0",
        "\"p\""
      ]
    },
    "3085": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "\"p\"",
        "toKey#0"
      ]
    },
    "3086": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "3087": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "3088": {
      "op": "frame_bury 1",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "3090": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3091": {
      "op": "bury 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "maybe_exists%2#0"
      ]
    },
    "3093": {
      "op": "bnz _transfer_partition_after_if_else@6",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "3096": {
      "op": "frame_dig 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "3098": {
      "op": "bytec_0 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "3099": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "3100": {
      "block": "_transfer_partition_after_if_else@6",
      "stack_in": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "3102": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "3103": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3104": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "maybe_value%3#0"
      ]
    },
    "3105": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "maybe_value%3#0",
        "amount#0 (copy)"
      ]
    },
    "3107": {
      "op": "b+",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0"
      ]
    },
    "3108": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "3109": {
      "op": "len",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "3110": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "3111": {
      "op": "<=",
      "defined_out": [
        "len_ok%1#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "3112": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0"
      ]
    },
    "3113": {
      "op": "frame_dig 0",
      "defined_out": [
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%0#0"
      ]
    },
    "3115": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "arc4_encoded%1#0"
      ]
    },
    "3116": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "3117": {
      "retsub": true,
      "op": "retsub"
    },
    "3118": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_authorize_operator_by_portion",
      "params": {
        "holder#0": "bytes",
        "operator#0": "bytes",
        "partition#0": "bytes",
        "amount#0": "bytes"
      },
      "block": "arc1410_authorize_operator_by_portion",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "3121": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3123": {
      "op": "frame_dig -4",
      "defined_out": [
        "holder#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "holder#0 (copy)"
      ]
    },
    "3125": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3126": {
      "error": "Only holder can authorize portion",
      "op": "assert // Only holder can authorize portion",
      "stack_out": []
    },
    "3127": {
      "op": "frame_dig -4",
      "stack_out": [
        "holder#0 (copy)"
      ]
    },
    "3129": {
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ]
    },
    "3131": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3132": {
      "op": "frame_dig -2",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "3134": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "3135": {
      "op": "bytec 11 // \"opa\"",
      "defined_out": [
        "\"opa\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"opa\""
      ]
    },
    "3137": {
      "op": "swap",
      "stack_out": [
        "\"opa\"",
        "key#0"
      ]
    },
    "3138": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3139": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "amount#0 (copy)"
      ]
    },
    "3141": {
      "op": "box_put",
      "stack_out": []
    },
    "3142": {
      "retsub": true,
      "op": "retsub"
    },
    "3143": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator_by_portion",
      "params": {
        "holder#0": "bytes",
        "operator#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "arc1410_is_operator_by_portion",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "3146": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3147": {
      "op": "frame_dig -2",
      "defined_out": [
        "operator#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "operator#0 (copy)"
      ]
    },
    "3149": {
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "operator#0 (copy)",
        "holder#0 (copy)"
      ]
    },
    "3151": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "3152": {
      "op": "bz arc1410_is_operator_by_portion_after_if_else@2",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3155": {
      "op": "bytec 7 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x80"
      ]
    },
    "3157": {
      "op": "swap"
    },
    "3158": {
      "retsub": true,
      "op": "retsub"
    },
    "3159": {
      "block": "arc1410_is_operator_by_portion_after_if_else@2",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "holder#0 (copy)"
      ]
    },
    "3161": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "holder#0 (copy)",
        "operator#0 (copy)"
      ]
    },
    "3163": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3164": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "3166": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "key#0"
      ]
    },
    "3167": {
      "op": "bytec 11 // \"opa\"",
      "defined_out": [
        "\"opa\"",
        "key#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "key#0",
        "\"opa\""
      ]
    },
    "3169": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "\"opa\"",
        "key#0"
      ]
    },
    "3170": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "3171": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "3172": {
      "op": "frame_bury 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "3174": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3175": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "3177": {
      "op": "bnz arc1410_is_operator_by_portion_after_if_else@4",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3180": {
      "op": "bytec 9 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x00"
      ]
    },
    "3182": {
      "op": "swap"
    },
    "3183": {
      "retsub": true,
      "op": "retsub"
    },
    "3184": {
      "block": "arc1410_is_operator_by_portion_after_if_else@4",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "3186": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3187": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "3188": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "0x"
      ]
    },
    "3190": {
      "op": "b>",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "3191": {
      "op": "bytec 9 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "to_encode%0#0",
        "0x00"
      ]
    },
    "3193": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "3194": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "3196": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_bool%0#0"
      ]
    },
    "3197": {
      "op": "swap"
    },
    "3198": {
      "retsub": true,
      "op": "retsub"
    },
    "3199": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_issue_by_partition",
      "params": {
        "to#0": "bytes",
        "partition#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1410_issue_by_partition",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "3202": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bzero%0#0"
      ]
    },
    "3203": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0"
      ]
    },
    "3204": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "tmp%0#0"
      ]
    },
    "3206": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_is_owner",
      "op": "callsub arc88_is_owner",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "tmp%1#0"
      ]
    },
    "3209": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "tmp%1#0",
        "0"
      ]
    },
    "3210": {
      "op": "getbit",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "tmp%2#0"
      ]
    },
    "3211": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "tmp%2#0",
        "1"
      ]
    },
    "3212": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "tmp%3#0"
      ]
    },
    "3213": {
      "error": "only_owner",
      "op": "assert // only_owner",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0"
      ]
    },
    "3214": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "amount#0 (copy)"
      ]
    },
    "3216": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "amount#0 (copy)",
        "0x"
      ]
    },
    "3218": {
      "op": "b>",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "tmp%4#0"
      ]
    },
    "3219": {
      "error": "Invalid amount",
      "op": "assert // Invalid amount",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0"
      ]
    },
    "3220": {
      "op": "frame_dig -4",
      "defined_out": [
        "to#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "to#0 (copy)"
      ]
    },
    "3222": {
      "op": "frame_dig -3",
      "defined_out": [
        "partition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "to#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "3224": {
      "op": "concat",
      "defined_out": [
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0"
      ]
    },
    "3225": {
      "op": "dup",
      "defined_out": [
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "toKey#0"
      ]
    },
    "3226": {
      "op": "bytec 4 // \"p\"",
      "defined_out": [
        "\"p\"",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "toKey#0",
        "\"p\""
      ]
    },
    "3228": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "\"p\"",
        "toKey#0"
      ]
    },
    "3229": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "3230": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "3231": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%5#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3232": {
      "op": "bury 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "maybe_exists%0#0"
      ]
    },
    "3234": {
      "op": "bnz arc1410_issue_by_partition_after_if_else@2",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "3237": {
      "op": "frame_dig 3",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "3239": {
      "op": "bytec_0 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%5#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "3240": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "3241": {
      "op": "frame_dig -4",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "to#0 (copy)"
      ]
    },
    "3243": {
      "op": "frame_dig -3",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "to#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "3245": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._add_participation_to_holder",
      "op": "callsub _add_participation_to_holder",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "3248": {
      "block": "arc1410_issue_by_partition_after_if_else@2",
      "stack_in": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "3250": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "3251": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3252": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "maybe_value%1#0"
      ]
    },
    "3253": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "3255": {
      "op": "b+",
      "defined_out": [
        "tmp%5#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0"
      ]
    },
    "3256": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "3257": {
      "op": "len",
      "defined_out": [
        "tmp%5#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "3258": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%5#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "3259": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "tmp%5#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "3260": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0"
      ]
    },
    "3261": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "3262": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "tmp%5#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "3263": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "bzero%0#0",
        "bzero%0#0"
      ]
    },
    "3264": {
      "op": "frame_bury 0",
      "defined_out": [
        "bzero%0#0",
        "tmp%5#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "3266": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "arc4_encoded%0#0"
      ]
    },
    "3267": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "3268": {
      "op": "bytec 5 // \"b\"",
      "defined_out": [
        "\"b\"",
        "bzero%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "\"b\""
      ]
    },
    "3270": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"b\"",
        "bzero%0#0",
        "tmp%5#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "\"b\"",
        "to#0 (copy)"
      ]
    },
    "3272": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0"
      ]
    },
    "3273": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "tmp%9#0"
      ]
    },
    "3274": {
      "op": "frame_bury 1",
      "defined_out": [
        "bzero%0#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0"
      ]
    },
    "3276": {
      "op": "box_len",
      "defined_out": [
        "bzero%0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3277": {
      "op": "bury 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "maybe_exists%2#0"
      ]
    },
    "3279": {
      "op": "bnz arc1410_issue_by_partition_after_if_else@4",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "3282": {
      "op": "frame_dig 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0"
      ]
    },
    "3284": {
      "op": "bytec_0 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "bzero%0#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "3285": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "3286": {
      "block": "arc1410_issue_by_partition_after_if_else@4",
      "stack_in": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0"
      ]
    },
    "3288": {
      "op": "dup",
      "defined_out": [
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ]
    },
    "3289": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3290": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "maybe_value%3#0"
      ]
    },
    "3291": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "maybe_value%3#0",
        "amount#0 (copy)"
      ]
    },
    "3293": {
      "op": "b+",
      "defined_out": [
        "tmp%9#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0"
      ]
    },
    "3294": {
      "op": "dup",
      "defined_out": [
        "tmp%9#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "3295": {
      "op": "len",
      "defined_out": [
        "tmp%9#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "3296": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%9#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "3297": {
      "op": "<=",
      "defined_out": [
        "len_ok%1#0",
        "tmp%9#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "3298": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0"
      ]
    },
    "3299": {
      "op": "frame_dig 0",
      "defined_out": [
        "bzero%0#0",
        "tmp%9#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0",
        "bzero%0#0"
      ]
    },
    "3301": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "bzero%0#0 (copy)",
        "tmp%9#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0",
        "bzero%0#0 (copy)",
        "bzero%0#0 (copy)"
      ]
    },
    "3302": {
      "op": "cover 3",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "tmp%9#0",
        "to_encode%1#0",
        "bzero%0#0 (copy)"
      ]
    },
    "3304": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "bzero%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "tmp%9#0",
        "arc4_encoded%1#0"
      ]
    },
    "3305": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0"
      ]
    },
    "3306": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "bzero%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "0"
      ]
    },
    "3307": {
      "op": "bytec_3 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0",
        "bzero%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "0",
        "\"t\""
      ]
    },
    "3308": {
      "op": "app_global_get_ex",
      "defined_out": [
        "bzero%0#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3309": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "maybe_value%4#0"
      ]
    },
    "3310": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "maybe_value%4#0",
        "amount#0 (copy)"
      ]
    },
    "3312": {
      "op": "b+",
      "defined_out": [
        "bzero%0#0",
        "tmp%9#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "to_encode%2#0"
      ]
    },
    "3313": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "tmp%9#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "3314": {
      "op": "len",
      "defined_out": [
        "bzero%0#0",
        "tmp%9#0",
        "to_encode%2#0",
        "value_len%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "to_encode%2#0",
        "value_len%2#0"
      ]
    },
    "3315": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "to_encode%2#0",
        "value_len%2#0",
        "32"
      ]
    },
    "3316": {
      "op": "<=",
      "defined_out": [
        "bzero%0#0",
        "len_ok%2#0",
        "tmp%9#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "to_encode%2#0",
        "len_ok%2#0"
      ]
    },
    "3317": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "to_encode%2#0"
      ]
    },
    "3318": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%2#0",
        "bzero%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "arc4_encoded%2#0"
      ]
    },
    "3319": {
      "op": "bytec_3 // \"t\"",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "arc4_encoded%2#0",
        "\"t\""
      ]
    },
    "3320": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "\"t\"",
        "arc4_encoded%2#0"
      ]
    },
    "3321": {
      "op": "app_global_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "3322": {
      "op": "frame_dig 2",
      "defined_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "toKey#0"
      ]
    },
    "3324": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "toKey#0",
        "amount#0 (copy)"
      ]
    },
    "3326": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%6#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "3327": {
      "op": "bytec 20 // 0x0062",
      "defined_out": [
        "0x0062",
        "bzero%0#0",
        "encoded_tuple_buffer%6#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%6#0",
        "0x0062"
      ]
    },
    "3329": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%7#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3330": {
      "op": "frame_dig -1",
      "defined_out": [
        "bzero%0#0",
        "data#0 (copy)",
        "encoded_tuple_buffer%7#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%7#0",
        "data#0 (copy)"
      ]
    },
    "3332": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%8#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "3333": {
      "op": "bytec 6 // 0x0002",
      "defined_out": [
        "0x0002",
        "bzero%0#0",
        "encoded_tuple_buffer%8#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%8#0",
        "0x0002"
      ]
    },
    "3335": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "0x0002",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "3336": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%11#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3337": {
      "op": "pushbytes 0xfa443b1b // method \"Issue((address,address,uint256,byte[]))\"",
      "defined_out": [
        "Method(Issue((address,address,uint256,byte[])))",
        "bzero%0#0",
        "encoded_tuple_buffer%11#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%11#0",
        "Method(Issue((address,address,uint256,byte[])))"
      ]
    },
    "3343": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "Method(Issue((address,address,uint256,byte[])))",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3344": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "event%0#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "event%0#0"
      ]
    },
    "3345": {
      "op": "log",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "3346": {
      "retsub": true,
      "op": "retsub"
    },
    "3347": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_redeem_by_partition",
      "params": {
        "partition#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1410_redeem_by_partition",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "3350": {
      "op": "txn Sender",
      "defined_out": [
        "from#0"
      ],
      "stack_out": [
        "from#0"
      ]
    },
    "3352": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "from#0"
      ],
      "stack_out": [
        "from#0",
        "amount#0 (copy)"
      ]
    },
    "3354": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "amount#0 (copy)",
        "from#0"
      ],
      "stack_out": [
        "from#0",
        "amount#0 (copy)",
        "0x"
      ]
    },
    "3356": {
      "op": "b>",
      "defined_out": [
        "from#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%0#0"
      ]
    },
    "3357": {
      "error": "Invalid amount",
      "op": "assert // Invalid amount",
      "stack_out": [
        "from#0"
      ]
    },
    "3358": {
      "op": "dup",
      "defined_out": [
        "from#0",
        "from#0 (copy)"
      ],
      "stack_out": [
        "from#0",
        "from#0 (copy)"
      ]
    },
    "3359": {
      "op": "frame_dig -3",
      "defined_out": [
        "from#0",
        "from#0 (copy)",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "from#0",
        "from#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "3361": {
      "op": "concat",
      "defined_out": [
        "from#0",
        "fromKey#0"
      ],
      "stack_out": [
        "from#0",
        "fromKey#0"
      ]
    },
    "3362": {
      "op": "dup",
      "stack_out": [
        "from#0",
        "fromKey#0",
        "fromKey#0"
      ]
    },
    "3363": {
      "op": "cover 2",
      "defined_out": [
        "from#0",
        "fromKey#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "fromKey#0"
      ]
    },
    "3365": {
      "op": "bytec 4 // \"p\"",
      "defined_out": [
        "\"p\"",
        "from#0",
        "fromKey#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "fromKey#0",
        "\"p\""
      ]
    },
    "3367": {
      "op": "swap",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "\"p\"",
        "fromKey#0"
      ]
    },
    "3368": {
      "op": "concat",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0"
      ]
    },
    "3369": {
      "op": "dup",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "3370": {
      "op": "box_len",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3371": {
      "op": "bury 1",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "3373": {
      "error": "Partition balance missing",
      "op": "assert // Partition balance missing",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0"
      ]
    },
    "3374": {
      "op": "dup",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "3375": {
      "op": "box_get",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3376": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "3377": {
      "op": "frame_dig -2",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "3379": {
      "op": "b>=",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "3380": {
      "error": "Insufficient partition balance",
      "op": "assert // Insufficient partition balance",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0"
      ]
    },
    "3381": {
      "op": "dup",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "3382": {
      "op": "box_get",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3383": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%2#0"
      ]
    },
    "3384": {
      "op": "frame_dig -2",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%2#0",
        "amount#0 (copy)"
      ]
    },
    "3386": {
      "op": "b-",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "3387": {
      "op": "dup",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "3388": {
      "op": "len",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "3389": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "3390": {
      "op": "<=",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "len_ok%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "3391": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "3392": {
      "op": "intc_2 // 32",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "3393": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "3394": {
      "op": "dup",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0",
        "bzero%0#0"
      ]
    },
    "3395": {
      "op": "cover 4",
      "defined_out": [
        "bzero%0#0",
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "3397": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "from#0",
        "fromKey#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "from#0",
        "tmp%1#0",
        "arc4_encoded%0#0"
      ]
    },
    "3398": {
      "op": "box_put",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "from#0"
      ]
    },
    "3399": {
      "op": "bytec 5 // \"b\"",
      "defined_out": [
        "\"b\"",
        "bzero%0#0",
        "from#0",
        "fromKey#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "from#0",
        "\"b\""
      ]
    },
    "3401": {
      "op": "swap",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "\"b\"",
        "from#0"
      ]
    },
    "3402": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "3403": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "3404": {
      "op": "box_len",
      "defined_out": [
        "bzero%0#0",
        "fromKey#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3405": {
      "op": "bury 1",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "maybe_exists%3#0"
      ]
    },
    "3407": {
      "op": "bz arc1410_redeem_by_partition_bool_false@3",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "3410": {
      "op": "frame_dig 2",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "3412": {
      "op": "box_get",
      "defined_out": [
        "bzero%0#0",
        "fromKey#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3413": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "maybe_value%4#0"
      ]
    },
    "3414": {
      "op": "frame_dig -2",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "maybe_value%4#0",
        "amount#0 (copy)"
      ]
    },
    "3416": {
      "op": "b>=",
      "defined_out": [
        "bzero%0#0",
        "fromKey#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "3417": {
      "op": "bz arc1410_redeem_by_partition_bool_false@3",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "3420": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "bzero%0#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "and_result%0#0"
      ]
    },
    "3421": {
      "block": "arc1410_redeem_by_partition_bool_merge@4",
      "stack_in": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "and_result%0#0"
      ],
      "error": "Insufficient balance",
      "op": "assert // Insufficient balance",
      "defined_out": [],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "3422": {
      "op": "frame_dig 2",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "3424": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "3425": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "3426": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "maybe_value%5#0"
      ]
    },
    "3427": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "maybe_value%5#0",
        "amount#0 (copy)"
      ]
    },
    "3429": {
      "op": "b-",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0"
      ]
    },
    "3430": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "3431": {
      "op": "len",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "3432": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "3433": {
      "op": "<=",
      "defined_out": [
        "len_ok%1#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "3434": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0"
      ]
    },
    "3435": {
      "op": "frame_dig 1",
      "defined_out": [
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%0#0"
      ]
    },
    "3437": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "bzero%0#0 (copy)",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%0#0 (copy)",
        "bzero%0#0 (copy)"
      ]
    },
    "3438": {
      "op": "cover 3",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%0#0 (copy)"
      ]
    },
    "3440": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "tmp%6#0",
        "arc4_encoded%1#0"
      ]
    },
    "3441": {
      "op": "box_put",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0"
      ]
    },
    "3442": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "0"
      ]
    },
    "3443": {
      "op": "bytec_3 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "0",
        "\"t\""
      ]
    },
    "3444": {
      "op": "app_global_get_ex",
      "defined_out": [
        "bzero%0#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "3445": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "maybe_value%6#0"
      ]
    },
    "3446": {
      "op": "frame_dig -2",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "maybe_value%6#0",
        "amount#0 (copy)"
      ]
    },
    "3448": {
      "op": "b-",
      "defined_out": [
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "to_encode%2#0"
      ]
    },
    "3449": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "3450": {
      "op": "len",
      "defined_out": [
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%2#0",
        "value_len%2#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "to_encode%2#0",
        "value_len%2#0"
      ]
    },
    "3451": {
      "op": "intc_2 // 32",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "to_encode%2#0",
        "value_len%2#0",
        "32"
      ]
    },
    "3452": {
      "op": "<=",
      "defined_out": [
        "bzero%0#0",
        "len_ok%2#0",
        "tmp%6#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "to_encode%2#0",
        "len_ok%2#0"
      ]
    },
    "3453": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "to_encode%2#0"
      ]
    },
    "3454": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%2#0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "arc4_encoded%2#0"
      ]
    },
    "3455": {
      "op": "bytec_3 // \"t\"",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "arc4_encoded%2#0",
        "\"t\""
      ]
    },
    "3456": {
      "op": "swap",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "\"t\"",
        "arc4_encoded%2#0"
      ]
    },
    "3457": {
      "op": "app_global_put",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "3458": {
      "op": "frame_dig 0",
      "defined_out": [
        "bzero%0#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "fromKey#0"
      ]
    },
    "3460": {
      "op": "frame_dig -2",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "fromKey#0",
        "amount#0 (copy)"
      ]
    },
    "3462": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%6#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "3463": {
      "op": "bytec 20 // 0x0062",
      "defined_out": [
        "0x0062",
        "bzero%0#0",
        "encoded_tuple_buffer%6#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%6#0",
        "0x0062"
      ]
    },
    "3465": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%7#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3466": {
      "op": "frame_dig -1",
      "defined_out": [
        "bzero%0#0",
        "data#0 (copy)",
        "encoded_tuple_buffer%7#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%7#0",
        "data#0 (copy)"
      ]
    },
    "3468": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%8#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "3469": {
      "op": "bytec 6 // 0x0002",
      "defined_out": [
        "0x0002",
        "bzero%0#0",
        "encoded_tuple_buffer%8#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%8#0",
        "0x0002"
      ]
    },
    "3471": {
      "op": "swap",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "0x0002",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "3472": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%11#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3473": {
      "op": "bytec 24 // method \"Redeem((address,address,uint256,byte[]))\"",
      "defined_out": [
        "Method(Redeem((address,address,uint256,byte[])))",
        "bzero%0#0",
        "encoded_tuple_buffer%11#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%11#0",
        "Method(Redeem((address,address,uint256,byte[])))"
      ]
    },
    "3475": {
      "op": "swap",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "Method(Redeem((address,address,uint256,byte[])))",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3476": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "event%0#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "event%0#0"
      ]
    },
    "3477": {
      "op": "log",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "3478": {
      "retsub": true,
      "op": "retsub"
    },
    "3479": {
      "block": "arc1410_redeem_by_partition_bool_false@3",
      "stack_in": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "and_result%0#0"
      ]
    },
    "3480": {
      "op": "b arc1410_redeem_by_partition_bool_merge@4"
    },
    "3483": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_operator_redeem_by_partition",
      "params": {
        "from#0": "bytes",
        "partition#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1410_operator_redeem_by_partition",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "3486": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bzero%1#0"
      ]
    },
    "3487": {
      "op": "dupn 3",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0"
      ]
    },
    "3489": {
      "op": "txn Sender"
    },
    "3491": {
      "op": "frame_dig -4"
    },
    "3493": {
      "op": "txn Sender"
    },
    "3495": {
      "op": "frame_dig -3",
      "defined_out": [
        "from#0 (copy)",
        "partition#0 (copy)",
        "sender#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "from#0 (copy)",
        "sender#0",
        "partition#0 (copy)"
      ]
    },
    "3497": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator",
      "op": "callsub arc1410_is_operator",
      "defined_out": [
        "sender#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "tmp%0#0"
      ]
    },
    "3500": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "tmp%0#0",
        "0"
      ]
    },
    "3501": {
      "op": "getbit",
      "defined_out": [
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "tmp%1#0"
      ]
    },
    "3502": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "tmp%1#0",
        "1"
      ]
    },
    "3503": {
      "op": "==",
      "defined_out": [
        "authorized#0",
        "sender#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0"
      ]
    },
    "3504": {
      "op": "dupn 2",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "authorized#0"
      ]
    },
    "3506": {
      "op": "bnz arc1410_operator_redeem_by_partition_after_if_else@4",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "3509": {
      "op": "frame_dig -4",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "from#0 (copy)"
      ]
    },
    "3511": {
      "op": "frame_dig 4",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "from#0 (copy)",
        "sender#0"
      ]
    },
    "3513": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%2#0",
        "sender#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3514": {
      "op": "frame_dig -3",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "3516": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "pKey#0",
        "sender#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "pKey#0"
      ]
    },
    "3517": {
      "op": "bytec 11 // \"opa\"",
      "defined_out": [
        "\"opa\"",
        "authorized#0",
        "authorized#9",
        "pKey#0",
        "sender#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "pKey#0",
        "\"opa\""
      ]
    },
    "3519": {
      "op": "swap",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "\"opa\"",
        "pKey#0"
      ]
    },
    "3520": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0"
      ]
    },
    "3521": {
      "op": "dup",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "3522": {
      "op": "frame_bury 3",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0"
      ]
    },
    "3524": {
      "op": "box_len",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3525": {
      "op": "bury 1",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_exists%0#0"
      ]
    },
    "3527": {
      "op": "bz arc1410_operator_redeem_by_partition_after_if_else@3",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "3530": {
      "op": "frame_dig 3",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0"
      ]
    },
    "3532": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "3533": {
      "op": "box_get",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "maybe_exists%1#0",
        "remaining#0",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "maybe_exists%1#0"
      ]
    },
    "3534": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0"
      ]
    },
    "3535": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "remaining#0",
        "remaining#0 (copy)",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "remaining#0 (copy)"
      ]
    },
    "3536": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "authorized#0",
        "authorized#9",
        "remaining#0",
        "remaining#0 (copy)",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "remaining#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "3538": {
      "op": "b>=",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "remaining#0",
        "sender#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "tmp%4#0"
      ]
    },
    "3539": {
      "error": "Portion allowance exceeded",
      "op": "assert // Portion allowance exceeded",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0"
      ]
    },
    "3540": {
      "op": "intc_1 // 1",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "authorized#0"
      ]
    },
    "3541": {
      "op": "frame_bury 5",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0"
      ]
    },
    "3543": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "amount#0 (copy)"
      ]
    },
    "3545": {
      "op": "b-",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0"
      ]
    },
    "3546": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "3547": {
      "op": "len",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "3548": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "3549": {
      "op": "<=",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "len_ok%0#0",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "3550": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0"
      ]
    },
    "3551": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "3552": {
      "op": "bzero",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "bzero%0#0",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "3553": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "arc4_encoded%0#0"
      ]
    },
    "3554": {
      "op": "box_put",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "3555": {
      "block": "arc1410_operator_redeem_by_partition_after_if_else@3",
      "stack_in": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "authorized#9"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "authorized#9"
      ]
    },
    "3557": {
      "op": "frame_bury 6",
      "defined_out": [
        "authorized#9"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "3559": {
      "block": "arc1410_operator_redeem_by_partition_after_if_else@4",
      "stack_in": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ],
      "op": "frame_dig 6",
      "defined_out": [
        "authorized#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "authorized#0"
      ]
    },
    "3561": {
      "error": "Not authorized operator",
      "op": "assert // Not authorized operator",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "3562": {
      "op": "frame_dig -4",
      "defined_out": [
        "authorized#0",
        "from#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "from#0 (copy)"
      ]
    },
    "3564": {
      "op": "frame_dig -3",
      "defined_out": [
        "authorized#0",
        "from#0 (copy)",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "from#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "3566": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "fromKey#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "fromKey#0"
      ]
    },
    "3567": {
      "op": "dup",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "fromKey#0",
        "fromKey#0"
      ]
    },
    "3568": {
      "op": "frame_bury 1",
      "defined_out": [
        "authorized#0",
        "fromKey#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "fromKey#0"
      ]
    },
    "3570": {
      "op": "bytec 4 // \"p\"",
      "defined_out": [
        "\"p\"",
        "authorized#0",
        "fromKey#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "fromKey#0",
        "\"p\""
      ]
    },
    "3572": {
      "op": "swap",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "\"p\"",
        "fromKey#0"
      ]
    },
    "3573": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0"
      ]
    },
    "3574": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "3575": {
      "op": "box_len",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3576": {
      "op": "bury 1",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_exists%2#0"
      ]
    },
    "3578": {
      "error": "Partition balance missing",
      "op": "assert // Partition balance missing",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0"
      ]
    },
    "3579": {
      "op": "dup",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "3580": {
      "op": "box_get",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3581": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_value%3#0"
      ]
    },
    "3582": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "authorized#0",
        "fromKey#0",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_value%3#0",
        "amount#0 (copy)"
      ]
    },
    "3584": {
      "op": "b>=",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "3585": {
      "error": "Insufficient partition balance",
      "op": "assert // Insufficient partition balance",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0"
      ]
    },
    "3586": {
      "op": "dup",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "3587": {
      "op": "box_get",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3588": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_value%4#0"
      ]
    },
    "3589": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_value%4#0",
        "amount#0 (copy)"
      ]
    },
    "3591": {
      "op": "b-",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0"
      ]
    },
    "3592": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "tmp%6#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "3593": {
      "op": "len",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "3594": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "authorized#0",
        "fromKey#0",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "3595": {
      "op": "<=",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "len_ok%1#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "3596": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0"
      ]
    },
    "3597": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "32"
      ]
    },
    "3598": {
      "op": "bzero",
      "defined_out": [
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%1#0"
      ]
    },
    "3599": {
      "op": "dup",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%1#0",
        "bzero%1#0"
      ]
    },
    "3600": {
      "op": "frame_bury 0",
      "defined_out": [
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%1#0"
      ]
    },
    "3602": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "arc4_encoded%1#0"
      ]
    },
    "3603": {
      "op": "box_put",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "3604": {
      "op": "bytec 5 // \"b\"",
      "defined_out": [
        "\"b\"",
        "authorized#0",
        "bzero%1#0",
        "fromKey#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "\"b\""
      ]
    },
    "3606": {
      "op": "frame_dig -4",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "\"b\"",
        "from#0 (copy)"
      ]
    },
    "3608": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0"
      ]
    },
    "3609": {
      "op": "dup",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "tmp%11#0"
      ]
    },
    "3610": {
      "op": "frame_bury 2",
      "defined_out": [
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0"
      ]
    },
    "3612": {
      "op": "box_len",
      "defined_out": [
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "3613": {
      "op": "bury 1",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_exists%5#0"
      ]
    },
    "3615": {
      "op": "bz arc1410_operator_redeem_by_partition_bool_false@7",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "3618": {
      "op": "frame_dig 2",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0"
      ]
    },
    "3620": {
      "op": "box_get",
      "defined_out": [
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "3621": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_value%6#0"
      ]
    },
    "3622": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_value%6#0",
        "amount#0 (copy)"
      ]
    },
    "3624": {
      "op": "b>=",
      "defined_out": [
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%13#0"
      ]
    },
    "3625": {
      "op": "bz arc1410_operator_redeem_by_partition_bool_false@7",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "3628": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "and_result%0#0"
      ]
    },
    "3629": {
      "block": "arc1410_operator_redeem_by_partition_bool_merge@8",
      "stack_in": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "and_result%0#0"
      ],
      "error": "Insufficient balance",
      "op": "assert // Insufficient balance",
      "defined_out": [],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "3630": {
      "op": "frame_dig 2",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0"
      ]
    },
    "3632": {
      "op": "dup",
      "defined_out": [
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ]
    },
    "3633": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "3634": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "maybe_value%7#0"
      ]
    },
    "3635": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%7#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "maybe_value%7#0",
        "amount#0 (copy)"
      ]
    },
    "3637": {
      "op": "b-",
      "defined_out": [
        "tmp%11#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0"
      ]
    },
    "3638": {
      "op": "dup",
      "defined_out": [
        "tmp%11#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "3639": {
      "op": "len",
      "defined_out": [
        "tmp%11#0",
        "to_encode%2#0",
        "value_len%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0",
        "value_len%2#0"
      ]
    },
    "3640": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%11#0",
        "to_encode%2#0",
        "value_len%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0",
        "value_len%2#0",
        "32"
      ]
    },
    "3641": {
      "op": "<=",
      "defined_out": [
        "len_ok%2#0",
        "tmp%11#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0",
        "len_ok%2#0"
      ]
    },
    "3642": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0"
      ]
    },
    "3643": {
      "op": "frame_dig 0",
      "defined_out": [
        "bzero%1#0",
        "tmp%11#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0",
        "bzero%1#0"
      ]
    },
    "3645": {
      "op": "dup",
      "defined_out": [
        "bzero%1#0",
        "bzero%1#0 (copy)",
        "tmp%11#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0",
        "bzero%1#0 (copy)",
        "bzero%1#0 (copy)"
      ]
    },
    "3646": {
      "op": "cover 3",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "tmp%11#0",
        "to_encode%2#0",
        "bzero%1#0 (copy)"
      ]
    },
    "3648": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%2#0",
        "bzero%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "tmp%11#0",
        "arc4_encoded%2#0"
      ]
    },
    "3649": {
      "op": "box_put",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0"
      ]
    },
    "3650": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "bzero%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "0"
      ]
    },
    "3651": {
      "op": "bytec_3 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0",
        "bzero%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "0",
        "\"t\""
      ]
    },
    "3652": {
      "op": "app_global_get_ex",
      "defined_out": [
        "bzero%1#0",
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "3653": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "maybe_value%8#0"
      ]
    },
    "3654": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "maybe_value%8#0",
        "amount#0 (copy)"
      ]
    },
    "3656": {
      "op": "b-",
      "defined_out": [
        "bzero%1#0",
        "tmp%11#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "to_encode%3#0"
      ]
    },
    "3657": {
      "op": "dup",
      "defined_out": [
        "bzero%1#0",
        "tmp%11#0",
        "to_encode%3#0",
        "to_encode%3#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "to_encode%3#0",
        "to_encode%3#0 (copy)"
      ]
    },
    "3658": {
      "op": "len",
      "defined_out": [
        "bzero%1#0",
        "tmp%11#0",
        "to_encode%3#0",
        "value_len%3#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "to_encode%3#0",
        "value_len%3#0"
      ]
    },
    "3659": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "to_encode%3#0",
        "value_len%3#0",
        "32"
      ]
    },
    "3660": {
      "op": "<=",
      "defined_out": [
        "bzero%1#0",
        "len_ok%3#0",
        "tmp%11#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "to_encode%3#0",
        "len_ok%3#0"
      ]
    },
    "3661": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "to_encode%3#0"
      ]
    },
    "3662": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%3#0",
        "bzero%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "arc4_encoded%3#0"
      ]
    },
    "3663": {
      "op": "bytec_3 // \"t\"",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "arc4_encoded%3#0",
        "\"t\""
      ]
    },
    "3664": {
      "op": "swap",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "\"t\"",
        "arc4_encoded%3#0"
      ]
    },
    "3665": {
      "op": "app_global_put",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "3666": {
      "op": "frame_dig 1",
      "defined_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "fromKey#0"
      ]
    },
    "3668": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "fromKey#0",
        "amount#0 (copy)"
      ]
    },
    "3670": {
      "op": "concat",
      "defined_out": [
        "bzero%1#0",
        "encoded_tuple_buffer%10#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "3671": {
      "op": "bytec 20 // 0x0062",
      "defined_out": [
        "0x0062",
        "bzero%1#0",
        "encoded_tuple_buffer%10#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%10#0",
        "0x0062"
      ]
    },
    "3673": {
      "op": "concat",
      "defined_out": [
        "bzero%1#0",
        "encoded_tuple_buffer%11#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3674": {
      "op": "frame_dig -1",
      "defined_out": [
        "bzero%1#0",
        "data#0 (copy)",
        "encoded_tuple_buffer%11#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%11#0",
        "data#0 (copy)"
      ]
    },
    "3676": {
      "op": "concat",
      "defined_out": [
        "bzero%1#0",
        "encoded_tuple_buffer%12#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "3677": {
      "op": "bytec 6 // 0x0002",
      "defined_out": [
        "0x0002",
        "bzero%1#0",
        "encoded_tuple_buffer%12#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%12#0",
        "0x0002"
      ]
    },
    "3679": {
      "op": "swap",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "0x0002",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "3680": {
      "op": "concat",
      "defined_out": [
        "bzero%1#0",
        "encoded_tuple_buffer%15#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "3681": {
      "op": "bytec 24 // method \"Redeem((address,address,uint256,byte[]))\"",
      "defined_out": [
        "Method(Redeem((address,address,uint256,byte[])))",
        "bzero%1#0",
        "encoded_tuple_buffer%15#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%15#0",
        "Method(Redeem((address,address,uint256,byte[])))"
      ]
    },
    "3683": {
      "op": "swap",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "Method(Redeem((address,address,uint256,byte[])))",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "3684": {
      "op": "concat",
      "defined_out": [
        "bzero%1#0",
        "event%0#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "event%0#0"
      ]
    },
    "3685": {
      "op": "log",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "3686": {
      "retsub": true,
      "op": "retsub"
    },
    "3687": {
      "block": "arc1410_operator_redeem_by_partition_bool_false@7",
      "stack_in": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "and_result%0#0"
      ]
    },
    "3688": {
      "op": "b arc1410_operator_redeem_by_partition_bool_merge@8"
    },
    "3691": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.bootstrap",
      "params": {
        "name#0": "bytes",
        "symbol#0": "bytes",
        "decimals#0": "bytes",
        "totalSupply#0": "bytes"
      },
      "block": "bootstrap",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "3694": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3696": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3698": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3699": {
      "error": "Only deployer of this smart contract can call bootstrap method",
      "op": "assert // Only deployer of this smart contract can call bootstrap method",
      "stack_out": []
    },
    "3700": {
      "op": "frame_dig -4",
      "defined_out": [
        "name#0 (copy)"
      ],
      "stack_out": [
        "name#0 (copy)"
      ]
    },
    "3702": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "3705": {
      "op": "len",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "3706": {
      "op": "dup",
      "defined_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "3707": {
      "error": "Name of the asset must be longer or equal to 1 character",
      "op": "assert // Name of the asset must be longer or equal to 1 character",
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "3708": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "32"
      ]
    },
    "3709": {
      "op": "<=",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "3710": {
      "error": "Name of the asset must be shorter or equal to 32 characters",
      "op": "assert // Name of the asset must be shorter or equal to 32 characters",
      "stack_out": []
    },
    "3711": {
      "op": "frame_dig -3",
      "defined_out": [
        "symbol#0 (copy)"
      ],
      "stack_out": [
        "symbol#0 (copy)"
      ]
    },
    "3713": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "3716": {
      "op": "len",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "3717": {
      "op": "dup",
      "defined_out": [
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "3718": {
      "error": "Symbol of the asset must be longer or equal to 1 character",
      "op": "assert // Symbol of the asset must be longer or equal to 1 character",
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "3719": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "8"
      ]
    },
    "3720": {
      "op": "<=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "3721": {
      "error": "Symbol of the asset must be shorter or equal to 8 characters",
      "op": "assert // Symbol of the asset must be shorter or equal to 8 characters",
      "stack_out": []
    },
    "3722": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3723": {
      "op": "bytec_3 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"t\""
      ]
    },
    "3724": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3725": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "3727": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "3728": {
      "error": "This method can be called only once",
      "op": "assert // This method can be called only once",
      "stack_out": []
    },
    "3729": {
      "op": "pushbytes \"n\"",
      "defined_out": [
        "\"n\""
      ],
      "stack_out": [
        "\"n\""
      ]
    },
    "3732": {
      "op": "frame_dig -4",
      "stack_out": [
        "\"n\"",
        "name#0 (copy)"
      ]
    },
    "3734": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3735": {
      "op": "pushbytes \"s\"",
      "defined_out": [
        "\"s\""
      ],
      "stack_out": [
        "\"s\""
      ]
    },
    "3738": {
      "op": "frame_dig -3",
      "stack_out": [
        "\"s\"",
        "symbol#0 (copy)"
      ]
    },
    "3740": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3741": {
      "op": "bytec_3 // \"t\"",
      "stack_out": [
        "\"t\""
      ]
    },
    "3742": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"t\"",
        "totalSupply#0 (copy)"
      ],
      "stack_out": [
        "\"t\"",
        "totalSupply#0 (copy)"
      ]
    },
    "3744": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3745": {
      "op": "pushbytes \"d\"",
      "defined_out": [
        "\"d\""
      ],
      "stack_out": [
        "\"d\""
      ]
    },
    "3748": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"d\"",
        "decimals#0 (copy)"
      ],
      "stack_out": [
        "\"d\"",
        "decimals#0 (copy)"
      ]
    },
    "3750": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3751": {
      "op": "txn Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "3753": {
      "op": "bytec 5 // \"b\"",
      "defined_out": [
        "\"b\"",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "\"b\""
      ]
    },
    "3755": {
      "op": "dig 1",
      "defined_out": [
        "\"b\"",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "\"b\"",
        "sender#0 (copy)"
      ]
    },
    "3757": {
      "op": "concat",
      "defined_out": [
        "sender#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%16#0"
      ]
    },
    "3758": {
      "op": "frame_dig -1",
      "stack_out": [
        "sender#0",
        "tmp%16#0",
        "totalSupply#0 (copy)"
      ]
    },
    "3760": {
      "op": "box_put",
      "stack_out": [
        "sender#0"
      ]
    },
    "3761": {
      "op": "global ZeroAddress",
      "defined_out": [
        "sender#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%17#0"
      ]
    },
    "3763": {
      "op": "swap",
      "stack_out": [
        "tmp%17#0",
        "sender#0"
      ]
    },
    "3764": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3765": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "totalSupply#0 (copy)"
      ]
    },
    "3767": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3768": {
      "op": "bytec 25 // method \"arc200_Transfer(address,address,uint256)\"",
      "defined_out": [
        "Method(arc200_Transfer(address,address,uint256))",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "Method(arc200_Transfer(address,address,uint256))"
      ]
    },
    "3770": {
      "op": "swap",
      "stack_out": [
        "Method(arc200_Transfer(address,address,uint256))",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3771": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "3772": {
      "op": "log",
      "stack_out": []
    },
    "3773": {
      "op": "bytec 7 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "0x80"
      ]
    },
    "3775": {
      "retsub": true,
      "op": "retsub"
    },
    "3776": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_name",
      "params": {},
      "block": "arc200_name",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3777": {
      "op": "pushbytes \"n\"",
      "defined_out": [
        "\"n\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"n\""
      ]
    },
    "3780": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3781": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3782": {
      "op": "extract 2 0",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "3785": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "3786": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "3787": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0",
        "32"
      ]
    },
    "3788": {
      "op": "==",
      "defined_out": [
        "lengths_equal%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "lengths_equal%0#0"
      ]
    },
    "3789": {
      "error": "invalid size",
      "op": "assert // invalid size",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "3790": {
      "retsub": true,
      "op": "retsub"
    },
    "3791": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_symbol",
      "params": {},
      "block": "arc200_symbol",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3792": {
      "op": "pushbytes \"s\"",
      "defined_out": [
        "\"s\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"s\""
      ]
    },
    "3795": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3796": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3797": {
      "op": "extract 2 0",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "3800": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "3801": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "3802": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0",
        "8"
      ]
    },
    "3803": {
      "op": "==",
      "defined_out": [
        "lengths_equal%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "lengths_equal%0#0"
      ]
    },
    "3804": {
      "error": "invalid size",
      "op": "assert // invalid size",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "3805": {
      "retsub": true,
      "op": "retsub"
    },
    "3806": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_decimals",
      "params": {},
      "block": "arc200_decimals",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3807": {
      "op": "pushbytes \"d\"",
      "defined_out": [
        "\"d\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"d\""
      ]
    },
    "3810": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3811": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3812": {
      "retsub": true,
      "op": "retsub"
    },
    "3813": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_totalSupply",
      "params": {},
      "block": "arc200_totalSupply",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3814": {
      "op": "bytec_3 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"t\""
      ]
    },
    "3815": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3816": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3817": {
      "retsub": true,
      "op": "retsub"
    },
    "3818": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_balanceOf",
      "params": {
        "owner#0": "bytes"
      },
      "block": "arc200_balanceOf",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "3821": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "3823": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "op": "callsub _balanceOf",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3826": {
      "retsub": true,
      "op": "retsub"
    },
    "3827": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_transferFrom",
      "params": {
        "from#0": "bytes",
        "to#0": "bytes",
        "value#0": "bytes"
      },
      "block": "arc200_transferFrom",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "3830": {
      "op": "txn Sender",
      "defined_out": [
        "spender#0"
      ],
      "stack_out": [
        "spender#0"
      ]
    },
    "3832": {
      "op": "frame_dig -3",
      "defined_out": [
        "from#0 (copy)",
        "spender#0"
      ],
      "stack_out": [
        "spender#0",
        "from#0 (copy)"
      ]
    },
    "3834": {
      "op": "dig 1",
      "defined_out": [
        "from#0 (copy)",
        "spender#0",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "spender#0",
        "from#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "3836": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._allowance",
      "op": "callsub _allowance",
      "defined_out": [
        "spender#0",
        "spender_allowance#0"
      ],
      "stack_out": [
        "spender#0",
        "spender_allowance#0"
      ]
    },
    "3839": {
      "op": "dup",
      "defined_out": [
        "spender#0",
        "spender_allowance#0",
        "spender_allowance#0 (copy)"
      ],
      "stack_out": [
        "spender#0",
        "spender_allowance#0",
        "spender_allowance#0 (copy)"
      ]
    },
    "3840": {
      "op": "frame_dig -1",
      "defined_out": [
        "spender#0",
        "spender_allowance#0",
        "spender_allowance#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "spender#0",
        "spender_allowance#0",
        "spender_allowance#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "3842": {
      "op": "b>=",
      "defined_out": [
        "spender#0",
        "spender_allowance#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "spender#0",
        "spender_allowance#0",
        "tmp%0#0"
      ]
    },
    "3843": {
      "error": "insufficient approval",
      "op": "assert // insufficient approval",
      "stack_out": [
        "spender#0",
        "spender_allowance#0"
      ]
    },
    "3844": {
      "op": "frame_dig -1",
      "stack_out": [
        "spender#0",
        "spender_allowance#0",
        "value#0 (copy)"
      ]
    },
    "3846": {
      "op": "b-",
      "defined_out": [
        "spender#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0"
      ]
    },
    "3847": {
      "op": "dup",
      "defined_out": [
        "spender#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "3848": {
      "op": "len",
      "defined_out": [
        "spender#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "3849": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "spender#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "3850": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "spender#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "3851": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "spender#0",
        "to_encode%0#0"
      ]
    },
    "3852": {
      "op": "intc_2 // 32",
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "3853": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "spender#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "3854": {
      "op": "b|",
      "defined_out": [
        "new_spender_allowance#0",
        "spender#0"
      ],
      "stack_out": [
        "spender#0",
        "new_spender_allowance#0"
      ]
    },
    "3855": {
      "op": "frame_dig -3",
      "stack_out": [
        "spender#0",
        "new_spender_allowance#0",
        "from#0 (copy)"
      ]
    },
    "3857": {
      "op": "cover 2",
      "stack_out": [
        "from#0 (copy)",
        "spender#0",
        "new_spender_allowance#0"
      ]
    },
    "3859": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._approve",
      "op": "callsub _approve",
      "defined_out": [
        "{_approve}"
      ],
      "stack_out": [
        "{_approve}"
      ]
    },
    "3862": {
      "op": "pop",
      "stack_out": []
    },
    "3863": {
      "op": "frame_dig -3",
      "stack_out": [
        "from#0 (copy)"
      ]
    },
    "3865": {
      "op": "frame_dig -2",
      "defined_out": [
        "from#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "from#0 (copy)",
        "to#0 (copy)"
      ]
    },
    "3867": {
      "op": "frame_dig -1",
      "stack_out": [
        "from#0 (copy)",
        "to#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "3869": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._transfer",
      "op": "callsub _transfer",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3872": {
      "retsub": true,
      "op": "retsub"
    },
    "3873": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_approve",
      "params": {
        "spender#0": "bytes",
        "value#0": "bytes"
      },
      "block": "arc200_approve",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "3876": {
      "op": "txn Sender",
      "defined_out": [
        "owner#0"
      ],
      "stack_out": [
        "owner#0"
      ]
    },
    "3878": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0",
        "spender#0 (copy)"
      ]
    },
    "3880": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0",
        "spender#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "owner#0",
        "spender#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "3882": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._approve",
      "op": "callsub _approve",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3885": {
      "retsub": true,
      "op": "retsub"
    },
    "3886": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_allowance",
      "params": {
        "owner#0": "bytes",
        "spender#0": "bytes"
      },
      "block": "arc200_allowance",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "3889": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "3891": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "3893": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._allowance",
      "op": "callsub _allowance",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3896": {
      "retsub": true,
      "op": "retsub"
    },
    "3897": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "params": {
        "owner#0": "bytes"
      },
      "block": "_balanceOf",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "3900": {
      "op": "bytec 5 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "\"b\""
      ]
    },
    "3902": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"b\"",
        "owner#0 (copy)"
      ],
      "stack_out": [
        "\"b\"",
        "owner#0 (copy)"
      ]
    },
    "3904": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3905": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3906": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3907": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3909": {
      "op": "bnz _balanceOf_after_if_else@2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3912": {
      "op": "bytec_0 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "3913": {
      "op": "swap"
    },
    "3914": {
      "retsub": true,
      "op": "retsub"
    },
    "3915": {
      "block": "_balanceOf_after_if_else@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3917": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3918": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "3919": {
      "op": "swap"
    },
    "3920": {
      "retsub": true,
      "op": "retsub"
    },
    "3921": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._transfer",
      "params": {
        "sender#0": "bytes",
        "recipient#0": "bytes",
        "amount#0": "bytes"
      },
      "block": "_transfer",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "3924": {
      "op": "frame_dig -3",
      "defined_out": [
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0 (copy)"
      ]
    },
    "3926": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "op": "callsub _balanceOf",
      "defined_out": [
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0"
      ]
    },
    "3929": {
      "op": "dup",
      "defined_out": [
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "sender_balance#0"
      ]
    },
    "3930": {
      "op": "frame_dig -2",
      "defined_out": [
        "recipient#0 (copy)",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "sender_balance#0",
        "recipient#0 (copy)"
      ]
    },
    "3932": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "op": "callsub _balanceOf",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "3935": {
      "op": "swap",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender_balance#0"
      ]
    },
    "3936": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender_balance#0",
        "amount#0 (copy)"
      ]
    },
    "3938": {
      "op": "b>=",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "tmp%0#0"
      ]
    },
    "3939": {
      "error": "Insufficient balance at the sender account",
      "op": "assert // Insufficient balance at the sender account",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "3940": {
      "op": "frame_dig -3",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender#0 (copy)"
      ]
    },
    "3942": {
      "op": "frame_dig -2",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender#0 (copy)",
        "recipient#0 (copy)"
      ]
    },
    "3944": {
      "op": "!=",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "tmp%1#0"
      ]
    },
    "3945": {
      "op": "bz _transfer_after_if_else@2",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "3948": {
      "op": "frame_dig 0",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender_balance#0"
      ]
    },
    "3950": {
      "op": "frame_dig -1",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender_balance#0",
        "amount#0 (copy)"
      ]
    },
    "3952": {
      "op": "b-",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0"
      ]
    },
    "3953": {
      "op": "dup",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "3954": {
      "op": "len",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "3955": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "3956": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "3957": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0"
      ]
    },
    "3958": {
      "op": "intc_2 // 32",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "3959": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "3960": {
      "op": "swap",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%0#0"
      ]
    },
    "3961": {
      "op": "dig 1",
      "defined_out": [
        "bzero%0#0",
        "bzero%0#0 (copy)",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%0#0",
        "bzero%0#0 (copy)"
      ]
    },
    "3963": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "arc4_encoded%0#0"
      ]
    },
    "3964": {
      "op": "bytec 5 // \"b\"",
      "defined_out": [
        "\"b\"",
        "arc4_encoded%0#0",
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "arc4_encoded%0#0",
        "\"b\""
      ]
    },
    "3966": {
      "op": "frame_dig -3",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "arc4_encoded%0#0",
        "\"b\"",
        "sender#0 (copy)"
      ]
    },
    "3968": {
      "op": "concat",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "arc4_encoded%0#0",
        "tmp%2#0"
      ]
    },
    "3969": {
      "op": "swap",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "tmp%2#0",
        "arc4_encoded%0#0"
      ]
    },
    "3970": {
      "op": "box_put",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0"
      ]
    },
    "3971": {
      "op": "frame_dig 1",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "recipient_balance#0"
      ]
    },
    "3973": {
      "op": "frame_dig -1",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "recipient_balance#0",
        "amount#0 (copy)"
      ]
    },
    "3975": {
      "op": "b+",
      "defined_out": [
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0"
      ]
    },
    "3976": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "3977": {
      "op": "len",
      "defined_out": [
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "3978": {
      "op": "intc_2 // 32",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "3979": {
      "op": "<=",
      "defined_out": [
        "bzero%0#0",
        "len_ok%1#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "3980": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0"
      ]
    },
    "3981": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "arc4_encoded%1#0"
      ]
    },
    "3982": {
      "op": "bytec 5 // \"b\"",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "arc4_encoded%1#0",
        "\"b\""
      ]
    },
    "3984": {
      "op": "frame_dig -2",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "arc4_encoded%1#0",
        "\"b\"",
        "recipient#0 (copy)"
      ]
    },
    "3986": {
      "op": "concat",
      "defined_out": [
        "arc4_encoded%1#0",
        "recipient_balance#0",
        "sender_balance#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "arc4_encoded%1#0",
        "tmp%3#0"
      ]
    },
    "3987": {
      "op": "swap",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "tmp%3#0",
        "arc4_encoded%1#0"
      ]
    },
    "3988": {
      "op": "box_put",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "3989": {
      "block": "_transfer_after_if_else@2",
      "stack_in": [
        "sender_balance#0",
        "recipient_balance#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender#0 (copy)"
      ]
    },
    "3991": {
      "op": "frame_dig -2",
      "defined_out": [
        "recipient#0 (copy)",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender#0 (copy)",
        "recipient#0 (copy)"
      ]
    },
    "3993": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3994": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "encoded_tuple_buffer%2#0",
        "amount#0 (copy)"
      ]
    },
    "3996": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3997": {
      "op": "bytec 25 // method \"arc200_Transfer(address,address,uint256)\"",
      "defined_out": [
        "Method(arc200_Transfer(address,address,uint256))",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "encoded_tuple_buffer%3#0",
        "Method(arc200_Transfer(address,address,uint256))"
      ]
    },
    "3999": {
      "op": "swap",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "Method(arc200_Transfer(address,address,uint256))",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4000": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "event%0#0"
      ]
    },
    "4001": {
      "op": "log",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "4002": {
      "op": "bytec 7 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "0x80"
      ]
    },
    "4004": {
      "op": "frame_bury 0"
    },
    "4006": {
      "retsub": true,
      "op": "retsub"
    },
    "4007": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._approvalKey",
      "params": {
        "owner#0": "bytes",
        "spender#0": "bytes"
      },
      "block": "_approvalKey",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "4010": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "4012": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "4014": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4015": {
      "op": "sha256",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "4016": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "4017": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "4018": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0",
        "32"
      ]
    },
    "4019": {
      "op": "==",
      "defined_out": [
        "lengths_equal%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "lengths_equal%0#0"
      ]
    },
    "4020": {
      "error": "invalid size",
      "op": "assert // invalid size",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "4021": {
      "retsub": true,
      "op": "retsub"
    },
    "4022": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._allowance",
      "params": {
        "owner#0": "bytes",
        "spender#0": "bytes"
      },
      "block": "_allowance",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "4025": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "4027": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "4029": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._approvalKey",
      "op": "callsub _approvalKey",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "4032": {
      "op": "pushbytes \"a\"",
      "defined_out": [
        "\"a\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"a\""
      ]
    },
    "4035": {
      "op": "swap",
      "stack_out": [
        "\"a\"",
        "key#0"
      ]
    },
    "4036": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4037": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "4038": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4039": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4041": {
      "op": "bnz _allowance_after_if_else@2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4044": {
      "op": "bytec_0 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "4045": {
      "op": "swap"
    },
    "4046": {
      "retsub": true,
      "op": "retsub"
    },
    "4047": {
      "block": "_allowance_after_if_else@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "4049": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4050": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "4051": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "4054": {
      "op": "swap"
    },
    "4055": {
      "retsub": true,
      "op": "retsub"
    },
    "4056": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._approve",
      "params": {
        "owner#0": "bytes",
        "spender#0": "bytes",
        "amount#0": "bytes"
      },
      "block": "_approve",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "4059": {
      "op": "frame_dig -3",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "4061": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "4063": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._approvalKey",
      "op": "callsub _approvalKey",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "4066": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "amount#0 (copy)"
      ]
    },
    "4068": {
      "op": "frame_dig -3",
      "stack_out": [
        "key#0",
        "amount#0 (copy)",
        "owner#0 (copy)"
      ]
    },
    "4070": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4071": {
      "op": "frame_dig -2",
      "stack_out": [
        "key#0",
        "encoded_tuple_buffer%2#0",
        "spender#0 (copy)"
      ]
    },
    "4073": {
      "op": "concat",
      "defined_out": [
        "approvalBox#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "approvalBox#0"
      ]
    },
    "4074": {
      "op": "pushbytes \"a\"",
      "defined_out": [
        "\"a\"",
        "approvalBox#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "approvalBox#0",
        "\"a\""
      ]
    },
    "4077": {
      "op": "uncover 2",
      "stack_out": [
        "approvalBox#0",
        "\"a\"",
        "key#0"
      ]
    },
    "4079": {
      "op": "concat",
      "defined_out": [
        "approvalBox#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "approvalBox#0",
        "tmp%0#0"
      ]
    },
    "4080": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "approvalBox#0"
      ]
    },
    "4081": {
      "op": "box_put",
      "stack_out": []
    },
    "4082": {
      "op": "frame_dig -3",
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "4084": {
      "op": "frame_dig -2",
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "4086": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "4087": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "amount#0 (copy)"
      ]
    },
    "4089": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0"
      ]
    },
    "4090": {
      "op": "pushbytes 0x1969f865 // method \"arc200_Approval(address,address,uint256)\"",
      "defined_out": [
        "Method(arc200_Approval(address,address,uint256))",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "Method(arc200_Approval(address,address,uint256))"
      ]
    },
    "4096": {
      "op": "swap",
      "stack_out": [
        "Method(arc200_Approval(address,address,uint256))",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "4097": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "4098": {
      "op": "log",
      "stack_out": []
    },
    "4099": {
      "op": "bytec 7 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "0x80"
      ]
    },
    "4101": {
      "retsub": true,
      "op": "retsub"
    },
    "4102": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "params": {},
      "block": "_ensureDefaultOwner",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4103": {
      "op": "bytec 10 // \"arc88_oi\"",
      "defined_out": [
        "\"arc88_oi\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_oi\""
      ]
    },
    "4105": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4106": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "4108": {
      "op": "bz _ensureDefaultOwner_if_body@2",
      "stack_out": []
    },
    "4111": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "4112": {
      "op": "bytec 10 // \"arc88_oi\"",
      "stack_out": [
        "0",
        "\"arc88_oi\""
      ]
    },
    "4114": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4115": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "4116": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4117": {
      "op": "bnz _ensureDefaultOwner_after_if_else@5",
      "stack_out": []
    },
    "4120": {
      "block": "_ensureDefaultOwner_if_body@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4121": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "4122": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4123": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%2#0"
      ]
    },
    "4125": {
      "op": "bnz _ensureDefaultOwner_after_if_else@4",
      "stack_out": []
    },
    "4128": {
      "op": "bytec_2 // \"arc88_o\"",
      "stack_out": [
        "\"arc88_o\""
      ]
    },
    "4129": {
      "op": "global CreatorAddress",
      "defined_out": [
        "\"arc88_o\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"arc88_o\"",
        "new_state_value%0#0"
      ]
    },
    "4131": {
      "op": "app_global_put",
      "stack_out": []
    },
    "4132": {
      "block": "_ensureDefaultOwner_after_if_else@4",
      "stack_in": [],
      "op": "bytec 10 // \"arc88_oi\"",
      "defined_out": [
        "\"arc88_oi\""
      ],
      "stack_out": [
        "\"arc88_oi\""
      ]
    },
    "4134": {
      "op": "bytec 18 // 0x01",
      "defined_out": [
        "\"arc88_oi\"",
        "0x01"
      ],
      "stack_out": [
        "\"arc88_oi\"",
        "0x01"
      ]
    },
    "4136": {
      "op": "app_global_put",
      "stack_out": []
    },
    "4137": {
      "block": "_ensureDefaultOwner_after_if_else@5",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "4138": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_owner",
      "params": {},
      "block": "arc88_owner",
      "stack_in": [],
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "4141": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4142": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "4143": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4144": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "4145": {
      "retsub": true,
      "op": "retsub"
    },
    "4146": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_is_owner",
      "params": {
        "query#0": "bytes"
      },
      "block": "arc88_is_owner",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "4149": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "4152": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4153": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "4154": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4155": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "4157": {
      "op": "bnz arc88_is_owner_after_if_else@2",
      "stack_out": []
    },
    "4160": {
      "op": "bytec 9 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "4162": {
      "retsub": true,
      "op": "retsub"
    },
    "4163": {
      "block": "arc88_is_owner_after_if_else@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4164": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "4165": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4166": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "4167": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "4168": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4169": {
      "op": "bz arc88_is_owner_after_if_else@4",
      "stack_out": []
    },
    "4172": {
      "op": "bytec 9 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "4174": {
      "retsub": true,
      "op": "retsub"
    },
    "4175": {
      "block": "arc88_is_owner_after_if_else@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4176": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "4177": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4178": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "4179": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%2#0",
        "query#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "query#0 (copy)"
      ]
    },
    "4181": {
      "op": "==",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "4182": {
      "op": "bytec 9 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "4184": {
      "op": "intc_0 // 0",
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "4185": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "4187": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "4188": {
      "retsub": true,
      "op": "retsub"
    },
    "4189": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_initialize_owner",
      "params": {
        "new_owner#0": "bytes"
      },
      "block": "arc88_initialize_owner",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "4192": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4193": {
      "op": "bytec 10 // \"arc88_oi\"",
      "defined_out": [
        "\"arc88_oi\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_oi\""
      ]
    },
    "4195": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4196": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "4198": {
      "op": "bz arc88_initialize_owner_bool_false@3",
      "stack_out": []
    },
    "4201": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "4202": {
      "op": "bytec 10 // \"arc88_oi\"",
      "stack_out": [
        "0",
        "\"arc88_oi\""
      ]
    },
    "4204": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4205": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "4206": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4207": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "4208": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "4209": {
      "op": "bz arc88_initialize_owner_bool_false@3",
      "stack_out": []
    },
    "4212": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "4213": {
      "block": "arc88_initialize_owner_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "4214": {
      "error": "already_initialized",
      "op": "assert // already_initialized",
      "stack_out": []
    },
    "4215": {
      "op": "frame_dig -1",
      "defined_out": [
        "new_owner#0 (copy)"
      ],
      "stack_out": [
        "new_owner#0 (copy)"
      ]
    },
    "4217": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "new_owner#0 (copy)"
      ],
      "stack_out": [
        "new_owner#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "4218": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "4219": {
      "error": "zero_address_not_allowed",
      "op": "assert // zero_address_not_allowed",
      "stack_out": []
    },
    "4220": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\""
      ],
      "stack_out": [
        "\"arc88_o\""
      ]
    },
    "4221": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"arc88_o\"",
        "new_owner#0 (copy)"
      ]
    },
    "4223": {
      "op": "app_global_put",
      "stack_out": []
    },
    "4224": {
      "op": "bytec 10 // \"arc88_oi\"",
      "defined_out": [
        "\"arc88_oi\""
      ],
      "stack_out": [
        "\"arc88_oi\""
      ]
    },
    "4226": {
      "op": "bytec 18 // 0x01",
      "defined_out": [
        "\"arc88_oi\"",
        "0x01"
      ],
      "stack_out": [
        "\"arc88_oi\"",
        "0x01"
      ]
    },
    "4228": {
      "op": "app_global_put",
      "stack_out": []
    },
    "4229": {
      "retsub": true,
      "op": "retsub"
    },
    "4230": {
      "block": "arc88_initialize_owner_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "4231": {
      "op": "b arc88_initialize_owner_bool_merge@4"
    },
    "4234": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_transfer_ownership",
      "params": {
        "new_owner#0": "bytes"
      },
      "block": "arc88_transfer_ownership",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "4237": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "4240": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4242": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "4243": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "4244": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4245": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "4246": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "4247": {
      "error": "not_owner",
      "op": "assert // not_owner",
      "stack_out": []
    },
    "4248": {
      "op": "frame_dig -1",
      "defined_out": [
        "new_owner#0 (copy)"
      ],
      "stack_out": [
        "new_owner#0 (copy)"
      ]
    },
    "4250": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "new_owner#0 (copy)"
      ],
      "stack_out": [
        "new_owner#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "4251": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "4252": {
      "error": "zero_address_not_allowed",
      "op": "assert // zero_address_not_allowed",
      "stack_out": []
    },
    "4253": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "4254": {
      "op": "bytec_2 // \"arc88_o\"",
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "4255": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "previous#0"
      ],
      "stack_out": [
        "previous#0",
        "maybe_exists%1#0"
      ]
    },
    "4256": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "previous#0"
      ]
    },
    "4257": {
      "op": "bytec_2 // \"arc88_o\"",
      "stack_out": [
        "previous#0",
        "\"arc88_o\""
      ]
    },
    "4258": {
      "op": "frame_dig -1",
      "stack_out": [
        "previous#0",
        "\"arc88_o\"",
        "new_owner#0 (copy)"
      ]
    },
    "4260": {
      "op": "app_global_put",
      "stack_out": [
        "previous#0"
      ]
    },
    "4261": {
      "op": "frame_dig -1",
      "stack_out": [
        "previous#0",
        "new_owner#0 (copy)"
      ]
    },
    "4263": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4264": {
      "op": "bytec 26 // method \"arc88_OwnershipTransferred(address,address)\"",
      "defined_out": [
        "Method(arc88_OwnershipTransferred(address,address))",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferred(address,address))"
      ]
    },
    "4266": {
      "op": "swap",
      "stack_out": [
        "Method(arc88_OwnershipTransferred(address,address))",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4267": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "4268": {
      "op": "log",
      "stack_out": []
    },
    "4269": {
      "retsub": true,
      "op": "retsub"
    },
    "4270": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_renounce_ownership",
      "params": {},
      "block": "arc88_renounce_ownership",
      "stack_in": [],
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "4273": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4275": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "4276": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "4277": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4278": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "4279": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "4280": {
      "error": "not_owner",
      "op": "assert // not_owner",
      "stack_out": []
    },
    "4281": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "4282": {
      "op": "bytec_2 // \"arc88_o\"",
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "4283": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "previous#0"
      ],
      "stack_out": [
        "previous#0",
        "maybe_exists%1#0"
      ]
    },
    "4284": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "previous#0"
      ]
    },
    "4285": {
      "op": "bytec_2 // \"arc88_o\"",
      "stack_out": [
        "previous#0",
        "\"arc88_o\""
      ]
    },
    "4286": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "\"arc88_o\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "previous#0"
      ],
      "stack_out": [
        "previous#0",
        "\"arc88_o\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "4287": {
      "op": "app_global_put",
      "stack_out": [
        "previous#0"
      ]
    },
    "4288": {
      "op": "pushbytes 0x346aa166 // method \"arc88_OwnershipRenounced(address)\"",
      "defined_out": [
        "Method(arc88_OwnershipRenounced(address))",
        "previous#0"
      ],
      "stack_out": [
        "previous#0",
        "Method(arc88_OwnershipRenounced(address))"
      ]
    },
    "4294": {
      "op": "swap",
      "stack_out": [
        "Method(arc88_OwnershipRenounced(address))",
        "previous#0"
      ]
    },
    "4295": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "4296": {
      "op": "log",
      "stack_out": []
    },
    "4297": {
      "retsub": true,
      "op": "retsub"
    },
    "4298": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_transfer_ownership_request",
      "params": {
        "pending#0": "bytes"
      },
      "block": "arc88_transfer_ownership_request",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "4301": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "4304": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4306": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "4307": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "4308": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4309": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "4310": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "4311": {
      "error": "not_owner",
      "op": "assert // not_owner",
      "stack_out": []
    },
    "4312": {
      "op": "frame_dig -1",
      "defined_out": [
        "pending#0 (copy)"
      ],
      "stack_out": [
        "pending#0 (copy)"
      ]
    },
    "4314": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "pending#0 (copy)"
      ],
      "stack_out": [
        "pending#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "4315": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "4316": {
      "error": "zero_address_not_allowed",
      "op": "assert // zero_address_not_allowed",
      "stack_out": []
    },
    "4317": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "4318": {
      "op": "bytec 8 // \"arc88_po\"",
      "defined_out": [
        "\"arc88_po\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_po\""
      ]
    },
    "4320": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4321": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "4323": {
      "op": "bz arc88_transfer_ownership_request_after_if_else@3",
      "stack_out": []
    },
    "4326": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "4327": {
      "op": "bytec 8 // \"arc88_po\"",
      "stack_out": [
        "0",
        "\"arc88_po\""
      ]
    },
    "4329": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4330": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "4331": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "stack_out": [
        "maybe_value%2#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "4332": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "4333": {
      "op": "!",
      "defined_out": [
        "not%tmp%3#0"
      ],
      "stack_out": [
        "not%tmp%3#0"
      ]
    },
    "4334": {
      "error": "pending_transfer_exists",
      "op": "assert // pending_transfer_exists",
      "stack_out": []
    },
    "4335": {
      "block": "arc88_transfer_ownership_request_after_if_else@3",
      "stack_in": [],
      "op": "bytec 8 // \"arc88_po\"",
      "defined_out": [
        "\"arc88_po\""
      ],
      "stack_out": [
        "\"arc88_po\""
      ]
    },
    "4337": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"arc88_po\"",
        "pending#0 (copy)"
      ],
      "stack_out": [
        "\"arc88_po\"",
        "pending#0 (copy)"
      ]
    },
    "4339": {
      "op": "app_global_put",
      "stack_out": []
    },
    "4340": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4341": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "4342": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4343": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "4344": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%3#0",
        "pending#0 (copy)"
      ]
    },
    "4346": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4347": {
      "op": "pushbytes 0x16bf1f91 // method \"arc88_OwnershipTransferRequested(address,address)\"",
      "defined_out": [
        "Method(arc88_OwnershipTransferRequested(address,address))",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferRequested(address,address))"
      ]
    },
    "4353": {
      "op": "swap",
      "stack_out": [
        "Method(arc88_OwnershipTransferRequested(address,address))",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4354": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "4355": {
      "op": "log",
      "stack_out": []
    },
    "4356": {
      "retsub": true,
      "op": "retsub"
    },
    "4357": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_accept_ownership",
      "params": {},
      "block": "arc88_accept_ownership",
      "stack_in": [],
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "4360": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4361": {
      "op": "bytec 8 // \"arc88_po\"",
      "defined_out": [
        "\"arc88_po\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_po\""
      ]
    },
    "4363": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4364": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "4366": {
      "error": "not_pending_owner",
      "op": "assert // not_pending_owner",
      "stack_out": []
    },
    "4367": {
      "op": "txn Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "4369": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sender#0",
        "0"
      ]
    },
    "4370": {
      "op": "bytec 8 // \"arc88_po\"",
      "stack_out": [
        "sender#0",
        "0",
        "\"arc88_po\""
      ]
    },
    "4372": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4373": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "sender#0",
        "maybe_value%1#0"
      ]
    },
    "4374": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%1#0",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "maybe_value%1#0",
        "sender#0 (copy)"
      ]
    },
    "4376": {
      "op": "==",
      "defined_out": [
        "sender#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%0#0"
      ]
    },
    "4377": {
      "error": "not_pending_owner",
      "op": "assert // not_pending_owner",
      "stack_out": [
        "sender#0"
      ]
    },
    "4378": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sender#0",
        "0"
      ]
    },
    "4379": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "4380": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "previous#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "previous#0",
        "maybe_exists%2#0"
      ]
    },
    "4381": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "sender#0",
        "previous#0"
      ]
    },
    "4382": {
      "op": "bytec_2 // \"arc88_o\"",
      "stack_out": [
        "sender#0",
        "previous#0",
        "\"arc88_o\""
      ]
    },
    "4383": {
      "op": "dig 2",
      "stack_out": [
        "sender#0",
        "previous#0",
        "\"arc88_o\"",
        "sender#0 (copy)"
      ]
    },
    "4385": {
      "op": "app_global_put",
      "stack_out": [
        "sender#0",
        "previous#0"
      ]
    },
    "4386": {
      "op": "bytec 8 // \"arc88_po\"",
      "stack_out": [
        "sender#0",
        "previous#0",
        "\"arc88_po\""
      ]
    },
    "4388": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "\"arc88_po\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "previous#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "previous#0",
        "\"arc88_po\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "4389": {
      "op": "app_global_put",
      "stack_out": [
        "sender#0",
        "previous#0"
      ]
    },
    "4390": {
      "op": "swap",
      "stack_out": [
        "previous#0",
        "sender#0"
      ]
    },
    "4391": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4392": {
      "op": "pushbytes 0xf7e36b37 // method \"arc88_OwnershipTransferAccepted(address,address)\"",
      "defined_out": [
        "Method(arc88_OwnershipTransferAccepted(address,address))",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferAccepted(address,address))"
      ]
    },
    "4398": {
      "op": "dig 1",
      "defined_out": [
        "Method(arc88_OwnershipTransferAccepted(address,address))",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%2#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferAccepted(address,address))",
        "encoded_tuple_buffer%2#0 (copy)"
      ]
    },
    "4400": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "event%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "event%0#0"
      ]
    },
    "4401": {
      "op": "log",
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4402": {
      "op": "bytec 26 // method \"arc88_OwnershipTransferred(address,address)\"",
      "defined_out": [
        "Method(arc88_OwnershipTransferred(address,address))",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferred(address,address))"
      ]
    },
    "4404": {
      "op": "swap",
      "stack_out": [
        "Method(arc88_OwnershipTransferred(address,address))",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4405": {
      "op": "concat",
      "defined_out": [
        "event%1#0"
      ],
      "stack_out": [
        "event%1#0"
      ]
    },
    "4406": {
      "op": "log",
      "stack_out": []
    },
    "4407": {
      "retsub": true,
      "op": "retsub"
    },
    "4408": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_cancel_ownership_request",
      "params": {},
      "block": "arc88_cancel_ownership_request",
      "stack_in": [],
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "4411": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4413": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "4414": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "4415": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4416": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "4417": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "4418": {
      "error": "not_owner",
      "op": "assert // not_owner",
      "stack_out": []
    },
    "4419": {
      "op": "bytec 8 // \"arc88_po\"",
      "defined_out": [
        "\"arc88_po\""
      ],
      "stack_out": [
        "\"arc88_po\""
      ]
    },
    "4421": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "\"arc88_po\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ],
      "stack_out": [
        "\"arc88_po\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "4422": {
      "op": "app_global_put",
      "stack_out": []
    },
    "4423": {
      "retsub": true,
      "op": "retsub"
    }
  }
}