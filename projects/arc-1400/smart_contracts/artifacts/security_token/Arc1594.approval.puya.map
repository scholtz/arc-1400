{
  "version": 3,
  "sources": [
    "C:/Users/scholtz/source/repos/scholtz/arc-1400/projects/arc-1400/smart_contracts/security_token/arc1594.algo.ts",
    "C:/Users/scholtz/source/repos/scholtz/arc-1400/projects/arc-1400/smart_contracts/security_token/arc200.algo.ts",
    "C:/Users/scholtz/source/repos/scholtz/arc-1400/projects/arc-1400/smart_contracts/security_token/arc88.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AEoFG;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AF3DH;;;AE2DG;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AFvCH;;;AEuCG;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AF/BH;;;AE+BG;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AFtBH;;;AEsBG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AD8IA;;AAAA;AAAA;AAAA;;AAAA;AD9JH;;;AAAA;;;AC8JG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;ADlJH;;;AAAA;;;ACkJG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;ADjIH;;;AAAA;;;AAAA;;;ACiIG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;ADpHH;;;AAAA;;;ACoHG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;ADxGH;;;ACwGG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA1BA;;AAAA;AAAA;AAAA;;AAAA;ADrCH;;;AAAA;;;AAAA;;;AAAA;;;ACqCG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;ADwCA;;AAAA;AAAA;AAAA;;AAAA;AA7EH;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AA6EG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAjEH;;;AAAA;;;AAAA;;;AAAA;;;AAiEG;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AApDH;;;AAAA;;;AAAA;;;AAAA;;;AAoDG;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AA7CH;;;AAAA;;;AA6CG;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAvCH;;;AAAA;;;AAuCG;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAjCH;;;AAiCG;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA3BH;;;AA2BG;;;AAAA;;AA3BH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAiBE;;;AAfiD;AAAA;;AAgB9B;AAAA;;AAAb;;;AAA8B;AAAP;AAhBoB;AAAA;;AAAA;AAAA;AAiBxC;;AAAA;AAAP;AAI2C;;AAApC;;;AAAA;;;AAAyF;;AAAzC;;;;AAAkD;AAAW;AAA7D;AAAhD;;;;AAAP;;;;;;AAIF;;;AAzBiD;AAAA;;AA2B3B;AAAA;;AAAb;;;AAAkE;;AAAzC;;;;AAAkD;AAAW;AAA7D;AAAzB;;;;AAAP;AA3B+C;;AA4B/C;;AAAA;;;;;;AAGF;;;AAEE;;;AAhC6C;;AAiC7C;;AAAA;;AAGF;;;AAEE;;;AAnC2D;;AAAA;;AAAA;AAoC3D;;AAAA;;AAGF;;;AAEE;;;AAxCmE;;AAAA;;AAAA;AAyCnE;;AAAA;;AAIF;;;AAEE;;;AACO;;AAAgB;;AAAhB;AAAP;ACrBuD;AAAA;;AAAA;AAAA;ADuBhC;AAAA;;AAAnB;;;AACF;;AAA0B;AAA1B;AAE4D;;AAAA;AAAA;AAAA;AAAlB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA1B;;AAAA;AAAA;AC5BgD;AAAA;;AAAA;AAAA;AD6BL;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AC7BuB;;AD6BhD;AAAA;AACc;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAd;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;AAGF;;;;AAEsC;;AAA9B;AACC;;AAAA;AAAA;;;AAAmB;;AAAA;;;AAAnB;;;;AAAP;AACO;;AAAgB;;AAAhB;AAAP;ACnCuD;AAAA;;AAAA;AAAA;AAAA;;ADoC5B;AAAA;;AAApB;;;AAAkD;;AAAA;AAAA;AAApB;;AAAA;AAA9B;;;;AAAP;AACkE;;AAAA;AAAA;AAAA;AAApB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA5B;;AAAA;AAAA;ACvCgD;AAAA;;AAAA;AAAA;ADwCL;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;ACxCuB;;ADwChD;AAAA;AACe;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAf;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;;;;;;;;;AAIF;;;;;;AASa;;;;;;;;;;AAAP;AAnFyC;AAAA;;AAqF/B;AAAA;;AAAV;;;AArFyC;AAAA;;AAAA;AAAA;AAqFH;AAAW;AAA3B;;;;;AAAtB;;;AACK;;;;;;;;;;;;;;;;;AAGA;AAAA;;;;AAAT;;;AAtF2D;;AAAA;;AAAA;AAAA;AAAA;;AAuFrC;AAAA;;AAAhB;;;AAAyC;;AAAA;AAAA;AAAM;AAA/C;;;AAAoE;;;;;;;;;;AAAP;;;;;;;;;;;AAE1D;AAAA;;;;AAAT;;;AAzF2D;;AAAA;;AAAA;AAAA;AAAA;;AA0FvC;AAAA;;AAAd;;;AAAqC;;AAAA;AAAA;AAAM;AAA3C;;;AAAgE;;;;;;;;;;AAAP;;;;;;;;;;;AAGtD;AAAA;;;;AAAT;;;AACM;;AAAkB;;AAAlB;AAAJ;;;AAAiC;;;;;;;;;;AAAP;;;;;;;;;;;AAEnB;AAAA;;;;AAAT;;;ACpEuD;AAAA;;AAAA;AAAA;AAAA;;ADqE5B;AAAA;;AAArB;;;AAAmD;;AAAA;AAAA;AAApB;;AAAA;AAA/B;;;AACK;;;;;;;;;;AAAP;;;;;;;;;;;AAIK;AAAA;;;;AAAT;;;AArGmE;;AAAA;;AAAA;AAAA;AAAA;;AAsGtC;AAAA;;;;;;AAAvB;;;AAAwC;;AAAgC;;AAAA;AAAA;AAAM;AAA7C;;;;;AAAjC;;;AACK;;;;;;;;;;;;;;;;;AAIF;AAAA;;;;AAAT;;;AACM;;AAAc;AAAd;AAAJ;;;AAES;;;;;;;;;;AAAP;;;;;;;;AAIJ;;AAAA;ACpFF;;;AAEa;;AAAkB;;AAAtB;AAAP;AACY;;AAAA;;;AAAO;AAAnB;AAAA;AAC6B;AAAtB;AAAP;AACc;;AAAA;;;AAAO;AAArB;AAAA;AAC+B;AAAxB;AAAP;AAXgD;AAAA;;AAYvB;AAAA;;AAAlB;AAAP;AAxB6C;;;AA0B7C;;AAAA;AAtB+C;;;AAuB/C;;AAAA;AAfgD;;AAgBhD;;AAAA;AApB2C;;;AAqB3C;;AAAA;AAC+B;;AAhBwB;AAAA;;AAAA;AAkBvD;;AAAA;AAEoD;;AAA/C;AAAA;AAAA;;AAAA;AAAL;;AAAA;AAAA;AAAA;AACO;;AAAP;AAnC6C;AAAA;;;AAAA;AAAA;AA6CF;;;AAApC;AAAA;AAAA;AAAA;AAAA;AAAP;AAzC+C;AAAA;;;AAAA;AAAA;AAmDH;;;AAArC;AAAA;AAAA;AAAA;AAAA;AAAP;AA/C2C;AAAA;;;AAAA;AAAA;AAyD3C;AArDgD;AAAA;;AAAA;AAAA;AA+DhD;AASF;;;AAES;;AAAA;;;AAAP;AAUF;;;AAEwC;;AAA/B;;AAAA;;AAAA;;;AAAP;AAWF;;;AAEkC;;AAC1B;;AAAA;;AAAoB;;;AACnB;AAAA;;AAAA;AAAP;AAC2C;;AAAA;AAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9B;;AAAA;;AAAA;;;;AACO;;AAAA;;AAAA;;AAAA;;;AAAP;AAUF;;;AAEgC;;AACvB;;AAAA;;AAAA;;;AAAP;AASF;;;AAES;;AAAA;;AAAA;;;AAAP;AAGF;;;AAjIyD;AAAA;;AAAA;AAAA;AAkI7B;AAAA;;AAAtB;;;AAAqC;AAAP;AAAA;AACN;;AAAA;AAAA;AAA5B;AAAA;AAGF;;;AACQ;;AAAiB;;;AAAjB;AACA;;AAAoB;;;AAApB;AACC;;AAAA;AAAP;AAEI;;AAAA;;AAAA;AAAJ;;;AAE6C;;AAAA;;AAAA;AAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AA7IuB;AAAA;;AAAA;AA6IrD;AAAA;AAC8C;;AAAA;;AAAA;AAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AA9IoB;AAAA;;AAAA;AA8IrD;AAAA;AAEG;;AAAA;;AAAA;AAAA;;AAAA;AAAL;;AAAA;AAAA;AAAA;AACO;;AAAP;;AAAA;AAEF;;;AACuC;;AAAA;;AAAA;AAAV;AAApB;AAAA;AAAA;AAAA;AAAA;AAAP;AAGF;;;AACQ;;AAAA;;AAAM;;;AAtJ0D;;;AAAA;AAAA;AAAA;AAuJ7C;AAAA;;AAArB;;;AAAoC;AAAP;AAAA;AACN;;AAAA;AAAA;AAAM;;;AAAjC;AAAA;AAGF;;;AACQ;;AAAA;;AAAM;;;AACwB;;AAAA;;AAAA;AAAA;;AAAA;AA7JkC;;;AAAA;;AAAA;AAkKtE;AAAA;AACK;;AAAA;;AAAA;AAAA;;AAAA;AAAL;;;;;;AAAA;AAAA;AAAA;AACO;;AAAP;ACxMiD;AAAA;;AAQ3B;AAAA;;AAAlB;;;AAR6C;AAAA;;AAAA;AAAA;AAQQ;AAArD;;;AAV0C;AAAA;AAW5B;AAAA;;AAAZ;;;AAXwC;AAYC;;AAA3C;AAV6C;;AAYtB;;;AAAzB;;AAMF;;;AApB8C;AAAA;AAAA;AAAA;AAqB9C;AAGF;;;AAEE;;;AA1B8C;AAAA;AA2B9B;AAAA;;AAAZ;;;AAA6B;;AAAP;AA3BoB;AAAA;AAAA;AAAA;AA4BrB;AAArB;AAAJ;;;AAAoD;;AAAP;AA5BC;AAAA;AAAA;AAAA;AA6BzB;;AAAA;AAAd;;AAAA;AAAA;;AAAA;AAAP;AAIF;;;AA/BmD;AAAA;;AAiCvB;AAAA;;AAAjB;;;AAjCwC;AAAA;;AAAA;AAAA;AAiCY;AAAW;AAAlC;AAA7B;;;;AAAF;AAAP;AACO;;AAAc;AAAd;AAAP;AApC8C;AAqC9C;;AAAA;AAnCiD;;AAoCxB;;;AAAzB;;;;;;AAGF;;;AAEE;;;AAC4B;;AA5CkB;AAAA;AAAA;AAAA;AA4CvC;AAAP;AACO;;AAAc;AAAd;AAAP;AA7C8C;AAAA;AAAA;AAAA;AAAA;AA+C9C;;AAAA;AACK;;AAAA;AAAL;;AAAA;AAAA;AAAA;;AAKA;;;AAC4B;;AAtDkB;AAAA;AAAA;AAAA;AAsDvC;AAAP;AAtD8C;AAAA;AAAA;AAAA;AAAA;AAwD3B;AAAnB;AACA;;;;;;AAAA;AAAA;AAAA;;AAIF;;;AAEE;;;AAC4B;;AAhEkB;AAAA;AAAA;AAAA;AAgEvC;AAAP;AACO;;AAAY;AAAZ;AAAP;AAhEqD;AAAA;;AAiE/B;AAAA;;AAAlB;;;AAjEiD;AAAA;;AAAA;AAAA;AAiES;AAA5B;AAA9B;AAAA;AAjEiD;;AAoErD;;AAAA;AArE8C;AAAA;AAAA;AAAA;AAsEzC;;AAAA;AAAL;;;;;;AAAA;AAAA;AAAA;;AAKA;;;AA1EqD;AAAA;;AA2E5B;AAAA;;AAAzB;AACoC;;AA5EiB;AAAA;;AAAA;AAAA;AA6E9C;;AAAA;AAAP;AA9E8C;AAAA;AAAA;AAAA;AAAA;AAgF9C;;AAAA;AA/EqD;;AAgF3B;AAA1B;AACK;AAAA;AAAL;;;;;;AAAA;;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;;AAKA;;;AAC4B;;AAzFkB;AAAA;AAAA;AAAA;AAyFvC;AAAP;AAxFqD;;AAyF3B;AAA1B;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 32 8"
    },
    "7": {
      "op": "bytecblock \"arc88_o\" 0x151f7c75 0x0000000000000000000000000000000000000000000000000000000000000000 \"b\" \"t\" \"arc88_po\" \"arc88_oi\" \"isr\" \"hlt\" \"kyc\" 0x80 0x00 \"lku\" 0x0062 0x0002 0x7983c35c 0x4355d2ad"
    },
    "113": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "115": {
      "op": "bz main_bare_routing@32",
      "stack_out": []
    },
    "118": {
      "op": "pushbytess 0x8bb0ca33 0x77d8245c 0xacb526ec 0x7d696ace 0x7e3a84d9 0xf42952f0 0x23ad52af 0x975382e2 0x657d13ec 0xb6ae1a25 0x84ec13d5 0xec996041 0x82e573c4 0xda7025b9 0x4a968f8f 0xb5422125 0xbbb319f3 0x0702654e 0xd015724e 0x029fecc0 0x7349334e 0xdb7c82ef 0xfd2c2c6e 0x42a5f065 0xad4f68ea // method \"arc1594_set_issuer(address)void\", method \"arc1594_set_halt(uint64)void\", method \"arc1594_set_kyc(address,uint64)void\", method \"arc1594_set_lockup(address,uint64)void\", method \"arc1594_issue(address,uint256,address,byte[])void\", method \"arc1594_redeem(address,uint256,address,byte[])void\", method \"arc1594_validate_transfer(address,address,address,uint256,byte[])uint64\", method \"bootstrap(byte[],byte[],uint8,uint256)bool\", method \"arc200_name()byte[32]\", method \"arc200_symbol()byte[8]\", method \"arc200_decimals()uint8\", method \"arc200_totalSupply()uint256\", method \"arc200_balanceOf(address)uint256\", method \"arc200_transfer(address,uint256)bool\", method \"arc200_transferFrom(address,address,uint256)bool\", method \"arc200_approve(address,uint256)bool\", method \"arc200_allowance(address,address)uint256\", method \"arc88_owner()address\", method \"arc88_is_owner(address)bool\", method \"arc88_initialize_owner(address)void\", method \"arc88_transfer_ownership(address)void\", method \"arc88_renounce_ownership()void\", method \"arc88_transfer_ownership_request(address)void\", method \"arc88_accept_ownership()void\", method \"arc88_cancel_ownership_request()void\"",
      "defined_out": [
        "Method(arc1594_issue(address,uint256,address,byte[])void)",
        "Method(arc1594_redeem(address,uint256,address,byte[])void)",
        "Method(arc1594_set_halt(uint64)void)",
        "Method(arc1594_set_issuer(address)void)",
        "Method(arc1594_set_kyc(address,uint64)void)",
        "Method(arc1594_set_lockup(address,uint64)void)",
        "Method(arc1594_validate_transfer(address,address,address,uint256,byte[])uint64)",
        "Method(arc200_allowance(address,address)uint256)",
        "Method(arc200_approve(address,uint256)bool)",
        "Method(arc200_balanceOf(address)uint256)",
        "Method(arc200_decimals()uint8)",
        "Method(arc200_name()byte[32])",
        "Method(arc200_symbol()byte[8])",
        "Method(arc200_totalSupply()uint256)",
        "Method(arc200_transfer(address,uint256)bool)",
        "Method(arc200_transferFrom(address,address,uint256)bool)",
        "Method(arc88_accept_ownership()void)",
        "Method(arc88_cancel_ownership_request()void)",
        "Method(arc88_initialize_owner(address)void)",
        "Method(arc88_is_owner(address)bool)",
        "Method(arc88_owner()address)",
        "Method(arc88_renounce_ownership()void)",
        "Method(arc88_transfer_ownership(address)void)",
        "Method(arc88_transfer_ownership_request(address)void)",
        "Method(bootstrap(byte[],byte[],uint8,uint256)bool)"
      ],
      "stack_out": [
        "Method(arc1594_set_issuer(address)void)",
        "Method(arc1594_set_halt(uint64)void)",
        "Method(arc1594_set_kyc(address,uint64)void)",
        "Method(arc1594_set_lockup(address,uint64)void)",
        "Method(arc1594_issue(address,uint256,address,byte[])void)",
        "Method(arc1594_redeem(address,uint256,address,byte[])void)",
        "Method(arc1594_validate_transfer(address,address,address,uint256,byte[])uint64)",
        "Method(bootstrap(byte[],byte[],uint8,uint256)bool)",
        "Method(arc200_name()byte[32])",
        "Method(arc200_symbol()byte[8])",
        "Method(arc200_decimals()uint8)",
        "Method(arc200_totalSupply()uint256)",
        "Method(arc200_balanceOf(address)uint256)",
        "Method(arc200_transfer(address,uint256)bool)",
        "Method(arc200_transferFrom(address,address,uint256)bool)",
        "Method(arc200_approve(address,uint256)bool)",
        "Method(arc200_allowance(address,address)uint256)",
        "Method(arc88_owner()address)",
        "Method(arc88_is_owner(address)bool)",
        "Method(arc88_initialize_owner(address)void)",
        "Method(arc88_transfer_ownership(address)void)",
        "Method(arc88_renounce_ownership()void)",
        "Method(arc88_transfer_ownership_request(address)void)",
        "Method(arc88_accept_ownership()void)",
        "Method(arc88_cancel_ownership_request()void)"
      ]
    },
    "245": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(arc1594_issue(address,uint256,address,byte[])void)",
        "Method(arc1594_redeem(address,uint256,address,byte[])void)",
        "Method(arc1594_set_halt(uint64)void)",
        "Method(arc1594_set_issuer(address)void)",
        "Method(arc1594_set_kyc(address,uint64)void)",
        "Method(arc1594_set_lockup(address,uint64)void)",
        "Method(arc1594_validate_transfer(address,address,address,uint256,byte[])uint64)",
        "Method(arc200_allowance(address,address)uint256)",
        "Method(arc200_approve(address,uint256)bool)",
        "Method(arc200_balanceOf(address)uint256)",
        "Method(arc200_decimals()uint8)",
        "Method(arc200_name()byte[32])",
        "Method(arc200_symbol()byte[8])",
        "Method(arc200_totalSupply()uint256)",
        "Method(arc200_transfer(address,uint256)bool)",
        "Method(arc200_transferFrom(address,address,uint256)bool)",
        "Method(arc88_accept_ownership()void)",
        "Method(arc88_cancel_ownership_request()void)",
        "Method(arc88_initialize_owner(address)void)",
        "Method(arc88_is_owner(address)bool)",
        "Method(arc88_owner()address)",
        "Method(arc88_renounce_ownership()void)",
        "Method(arc88_transfer_ownership(address)void)",
        "Method(arc88_transfer_ownership_request(address)void)",
        "Method(bootstrap(byte[],byte[],uint8,uint256)bool)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(arc1594_set_issuer(address)void)",
        "Method(arc1594_set_halt(uint64)void)",
        "Method(arc1594_set_kyc(address,uint64)void)",
        "Method(arc1594_set_lockup(address,uint64)void)",
        "Method(arc1594_issue(address,uint256,address,byte[])void)",
        "Method(arc1594_redeem(address,uint256,address,byte[])void)",
        "Method(arc1594_validate_transfer(address,address,address,uint256,byte[])uint64)",
        "Method(bootstrap(byte[],byte[],uint8,uint256)bool)",
        "Method(arc200_name()byte[32])",
        "Method(arc200_symbol()byte[8])",
        "Method(arc200_decimals()uint8)",
        "Method(arc200_totalSupply()uint256)",
        "Method(arc200_balanceOf(address)uint256)",
        "Method(arc200_transfer(address,uint256)bool)",
        "Method(arc200_transferFrom(address,address,uint256)bool)",
        "Method(arc200_approve(address,uint256)bool)",
        "Method(arc200_allowance(address,address)uint256)",
        "Method(arc88_owner()address)",
        "Method(arc88_is_owner(address)bool)",
        "Method(arc88_initialize_owner(address)void)",
        "Method(arc88_transfer_ownership(address)void)",
        "Method(arc88_renounce_ownership()void)",
        "Method(arc88_transfer_ownership_request(address)void)",
        "Method(arc88_accept_ownership()void)",
        "Method(arc88_cancel_ownership_request()void)",
        "tmp%2#0"
      ]
    },
    "248": {
      "op": "match main_arc1594_set_issuer_route@5 main_arc1594_set_halt_route@6 main_arc1594_set_kyc_route@7 main_arc1594_set_lockup_route@8 main_arc1594_issue_route@9 main_arc1594_redeem_route@10 main_arc1594_validate_transfer_route@11 main_bootstrap_route@12 main_arc200_name_route@13 main_arc200_symbol_route@14 main_arc200_decimals_route@15 main_arc200_totalSupply_route@16 main_arc200_balanceOf_route@17 main_arc200_transfer_route@18 main_arc200_transferFrom_route@19 main_arc200_approve_route@20 main_arc200_allowance_route@21 main_arc88_owner_route@22 main_arc88_is_owner_route@23 main_arc88_initialize_owner_route@24 main_arc88_transfer_ownership_route@25 main_arc88_renounce_ownership_route@26 main_arc88_transfer_ownership_request_route@27 main_arc88_accept_ownership_route@28 main_arc88_cancel_ownership_request_route@29",
      "stack_out": []
    },
    "300": {
      "block": "main_after_if_else@36",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "301": {
      "op": "return",
      "stack_out": []
    },
    "302": {
      "block": "main_arc88_cancel_ownership_request_route@29",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "304": {
      "op": "!",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "305": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "306": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%132#0"
      ]
    },
    "308": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "309": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_cancel_ownership_request",
      "op": "callsub arc88_cancel_ownership_request"
    },
    "312": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "313": {
      "op": "return",
      "stack_out": []
    },
    "314": {
      "block": "main_arc88_accept_ownership_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "316": {
      "op": "!",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "317": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "318": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "320": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "321": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_accept_ownership",
      "op": "callsub arc88_accept_ownership"
    },
    "324": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "325": {
      "op": "return",
      "stack_out": []
    },
    "326": {
      "block": "main_arc88_transfer_ownership_request_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "328": {
      "op": "!",
      "defined_out": [
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0"
      ]
    },
    "329": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "330": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0"
      ]
    },
    "332": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "333": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%27#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%27#0"
      ]
    },
    "336": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_transfer_ownership_request",
      "op": "callsub arc88_transfer_ownership_request",
      "stack_out": []
    },
    "339": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "340": {
      "op": "return",
      "stack_out": []
    },
    "341": {
      "block": "main_arc88_renounce_ownership_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "343": {
      "op": "!",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "344": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "345": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "347": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "348": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_renounce_ownership",
      "op": "callsub arc88_renounce_ownership"
    },
    "351": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "352": {
      "op": "return",
      "stack_out": []
    },
    "353": {
      "block": "main_arc88_transfer_ownership_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "355": {
      "op": "!",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "356": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "357": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "359": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "360": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%26#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%26#0"
      ]
    },
    "363": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_transfer_ownership",
      "op": "callsub arc88_transfer_ownership",
      "stack_out": []
    },
    "366": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "367": {
      "op": "return",
      "stack_out": []
    },
    "368": {
      "block": "main_arc88_initialize_owner_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "370": {
      "op": "!",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "371": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "372": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "374": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "375": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%25#0"
      ]
    },
    "378": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_initialize_owner",
      "op": "callsub arc88_initialize_owner",
      "stack_out": []
    },
    "381": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "382": {
      "op": "return",
      "stack_out": []
    },
    "383": {
      "block": "main_arc88_is_owner_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "385": {
      "op": "!",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "386": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "387": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "389": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "390": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%24#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%24#0"
      ]
    },
    "393": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_is_owner",
      "op": "callsub arc88_is_owner",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "396": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0",
        "0x151f7c75"
      ]
    },
    "397": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%108#0"
      ]
    },
    "398": {
      "op": "concat",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "399": {
      "op": "log",
      "stack_out": []
    },
    "400": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "401": {
      "op": "return",
      "stack_out": []
    },
    "402": {
      "block": "main_arc88_owner_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "404": {
      "op": "!",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "405": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "406": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "408": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "409": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_owner",
      "op": "callsub arc88_owner",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "412": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0",
        "0x151f7c75"
      ]
    },
    "413": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%102#0"
      ]
    },
    "414": {
      "op": "concat",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "415": {
      "op": "log",
      "stack_out": []
    },
    "416": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "417": {
      "op": "return",
      "stack_out": []
    },
    "418": {
      "block": "main_arc200_allowance_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "420": {
      "op": "!",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "421": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "422": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "424": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "425": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%22#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%22#0"
      ]
    },
    "428": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%22#0",
        "reinterpret_bytes[32]%23#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%22#0",
        "reinterpret_bytes[32]%23#0"
      ]
    },
    "431": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_allowance",
      "op": "callsub arc200_allowance",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "434": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0",
        "0x151f7c75"
      ]
    },
    "435": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%96#0"
      ]
    },
    "436": {
      "op": "concat",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "437": {
      "op": "log",
      "stack_out": []
    },
    "438": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "439": {
      "op": "return",
      "stack_out": []
    },
    "440": {
      "block": "main_arc200_approve_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "442": {
      "op": "!",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "443": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "444": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "446": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "447": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%20#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%20#0"
      ]
    },
    "450": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%20#0",
        "reinterpret_bytes[32]%21#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%20#0",
        "reinterpret_bytes[32]%21#0"
      ]
    },
    "453": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_approve",
      "op": "callsub arc200_approve",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "456": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0",
        "0x151f7c75"
      ]
    },
    "457": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%90#0"
      ]
    },
    "458": {
      "op": "concat",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "459": {
      "op": "log",
      "stack_out": []
    },
    "460": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "461": {
      "op": "return",
      "stack_out": []
    },
    "462": {
      "block": "main_arc200_transferFrom_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "464": {
      "op": "!",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "465": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "466": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "468": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "469": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%17#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%17#0"
      ]
    },
    "472": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0"
      ]
    },
    "475": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0",
        "reinterpret_bytes[32]%19#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0",
        "reinterpret_bytes[32]%19#0"
      ]
    },
    "478": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_transferFrom",
      "op": "callsub arc200_transferFrom",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "481": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "0x151f7c75"
      ]
    },
    "482": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%84#0"
      ]
    },
    "483": {
      "op": "concat",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "484": {
      "op": "log",
      "stack_out": []
    },
    "485": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "486": {
      "op": "return",
      "stack_out": []
    },
    "487": {
      "block": "main_arc200_transfer_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "489": {
      "op": "!",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "490": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "491": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "493": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "494": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%15#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%15#0"
      ]
    },
    "497": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%15#0",
        "reinterpret_bytes[32]%16#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%15#0",
        "reinterpret_bytes[32]%16#0"
      ]
    },
    "500": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_transfer",
      "op": "callsub arc200_transfer",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "503": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0",
        "0x151f7c75"
      ]
    },
    "504": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%78#0"
      ]
    },
    "505": {
      "op": "concat",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "506": {
      "op": "log",
      "stack_out": []
    },
    "507": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "508": {
      "op": "return",
      "stack_out": []
    },
    "509": {
      "block": "main_arc200_balanceOf_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "511": {
      "op": "!",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "512": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "513": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "515": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "516": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%14#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%14#0"
      ]
    },
    "519": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_balanceOf",
      "op": "callsub arc200_balanceOf",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "522": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0",
        "0x151f7c75"
      ]
    },
    "523": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%72#0"
      ]
    },
    "524": {
      "op": "concat",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "525": {
      "op": "log",
      "stack_out": []
    },
    "526": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "527": {
      "op": "return",
      "stack_out": []
    },
    "528": {
      "block": "main_arc200_totalSupply_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "530": {
      "op": "!",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "531": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "532": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "534": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "535": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_totalSupply",
      "op": "callsub arc200_totalSupply",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "538": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "0x151f7c75"
      ]
    },
    "539": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%66#0"
      ]
    },
    "540": {
      "op": "concat",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "541": {
      "op": "log",
      "stack_out": []
    },
    "542": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "543": {
      "op": "return",
      "stack_out": []
    },
    "544": {
      "block": "main_arc200_decimals_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "546": {
      "op": "!",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "547": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "548": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "550": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "551": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_decimals",
      "op": "callsub arc200_decimals",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "554": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "0x151f7c75"
      ]
    },
    "555": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%60#0"
      ]
    },
    "556": {
      "op": "concat",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "557": {
      "op": "log",
      "stack_out": []
    },
    "558": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "559": {
      "op": "return",
      "stack_out": []
    },
    "560": {
      "block": "main_arc200_symbol_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "562": {
      "op": "!",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "563": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "564": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "566": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "567": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_symbol",
      "op": "callsub arc200_symbol",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "570": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "0x151f7c75"
      ]
    },
    "571": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%54#0"
      ]
    },
    "572": {
      "op": "concat",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "573": {
      "op": "log",
      "stack_out": []
    },
    "574": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "575": {
      "op": "return",
      "stack_out": []
    },
    "576": {
      "block": "main_arc200_name_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "578": {
      "op": "!",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "579": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "580": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "582": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "583": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_name",
      "op": "callsub arc200_name",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "586": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "0x151f7c75"
      ]
    },
    "587": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%48#0"
      ]
    },
    "588": {
      "op": "concat",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "589": {
      "op": "log",
      "stack_out": []
    },
    "590": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "591": {
      "op": "return",
      "stack_out": []
    },
    "592": {
      "block": "main_bootstrap_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "594": {
      "op": "!",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "595": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "596": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "598": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "599": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "602": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%40#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "tmp%41#0"
      ]
    },
    "605": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "tmp%40#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "tmp%41#0",
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "608": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[32]%13#0",
        "tmp%40#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "tmp%41#0",
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[32]%13#0"
      ]
    },
    "611": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.bootstrap",
      "op": "callsub bootstrap",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "614": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "0x151f7c75"
      ]
    },
    "615": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%42#0"
      ]
    },
    "616": {
      "op": "concat",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "617": {
      "op": "log",
      "stack_out": []
    },
    "618": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "619": {
      "op": "return",
      "stack_out": []
    },
    "620": {
      "block": "main_arc1594_validate_transfer_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "622": {
      "op": "!",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "623": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "624": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "626": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "627": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%9#0"
      ]
    },
    "630": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[32]%10#0"
      ]
    },
    "633": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[32]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0"
      ]
    },
    "636": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[32]%12#0",
        "reinterpret_bytes[32]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[32]%12#0"
      ]
    },
    "639": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[32]%12#0",
        "reinterpret_bytes[32]%9#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[32]%12#0",
        "tmp%33#0"
      ]
    },
    "642": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_validate_transfer",
      "op": "callsub arc1594_validate_transfer",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "645": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "0x151f7c75"
      ]
    },
    "646": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%34#0"
      ]
    },
    "647": {
      "op": "concat",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "648": {
      "op": "log",
      "stack_out": []
    },
    "649": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "650": {
      "op": "return",
      "stack_out": []
    },
    "651": {
      "block": "main_arc1594_redeem_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "653": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "654": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "655": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "657": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "658": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%6#0"
      ]
    },
    "661": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[32]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[32]%7#0"
      ]
    },
    "664": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[32]%7#0",
        "reinterpret_bytes[32]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[32]%7#0",
        "reinterpret_bytes[32]%8#0"
      ]
    },
    "667": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[32]%7#0",
        "reinterpret_bytes[32]%8#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[32]%7#0",
        "reinterpret_bytes[32]%8#0",
        "tmp%28#0"
      ]
    },
    "670": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_redeem",
      "op": "callsub arc1594_redeem",
      "stack_out": []
    },
    "673": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "674": {
      "op": "return",
      "stack_out": []
    },
    "675": {
      "block": "main_arc1594_issue_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "677": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "678": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "679": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "681": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "682": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%3#0"
      ]
    },
    "685": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[32]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[32]%4#0"
      ]
    },
    "688": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0"
      ]
    },
    "691": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "tmp%23#0"
      ]
    },
    "694": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_issue",
      "op": "callsub arc1594_issue",
      "stack_out": []
    },
    "697": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "698": {
      "op": "return",
      "stack_out": []
    },
    "699": {
      "block": "main_arc1594_set_lockup_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "701": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "702": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "703": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "705": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "706": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "709": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "712": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_set_lockup",
      "op": "callsub arc1594_set_lockup",
      "stack_out": []
    },
    "715": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "716": {
      "op": "return",
      "stack_out": []
    },
    "717": {
      "block": "main_arc1594_set_kyc_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "719": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "720": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "721": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "723": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "724": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "727": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "730": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_set_kyc",
      "op": "callsub arc1594_set_kyc",
      "stack_out": []
    },
    "733": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "734": {
      "op": "return",
      "stack_out": []
    },
    "735": {
      "block": "main_arc1594_set_halt_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "737": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "738": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "739": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "741": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "742": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "745": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_set_halt",
      "op": "callsub arc1594_set_halt",
      "stack_out": []
    },
    "748": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "749": {
      "op": "return",
      "stack_out": []
    },
    "750": {
      "block": "main_arc1594_set_issuer_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "752": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "753": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "754": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "756": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "757": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "760": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_set_issuer",
      "op": "callsub arc1594_set_issuer",
      "stack_out": []
    },
    "763": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "764": {
      "op": "return",
      "stack_out": []
    },
    "765": {
      "block": "main_bare_routing@32",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "767": {
      "op": "bnz main_after_if_else@36",
      "stack_out": []
    },
    "770": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "772": {
      "op": "!",
      "defined_out": [
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0"
      ]
    },
    "773": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "774": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "775": {
      "op": "return",
      "stack_out": []
    },
    "776": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594._isIssuer",
      "params": {
        "addr#0": "bytes"
      },
      "block": "_isIssuer",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "779": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "780": {
      "op": "bytec 7 // \"isr\"",
      "defined_out": [
        "\"isr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"isr\""
      ]
    },
    "782": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "783": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "785": {
      "op": "bnz _isIssuer_after_if_else@2",
      "stack_out": []
    },
    "788": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "789": {
      "retsub": true,
      "op": "retsub"
    },
    "790": {
      "block": "_isIssuer_after_if_else@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "791": {
      "op": "bytec 7 // \"isr\"",
      "defined_out": [
        "\"isr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"isr\""
      ]
    },
    "793": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "794": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "795": {
      "op": "frame_dig -1",
      "defined_out": [
        "addr#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "addr#0 (copy)"
      ]
    },
    "797": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "798": {
      "retsub": true,
      "op": "retsub"
    },
    "799": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594._onlyIssuer",
      "params": {},
      "block": "_onlyIssuer",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "801": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594._isIssuer",
      "op": "callsub _isIssuer",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "804": {
      "op": "bnz _onlyIssuer_bool_true@2",
      "stack_out": []
    },
    "807": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "809": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_is_owner",
      "op": "callsub arc88_is_owner",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "812": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "813": {
      "op": "getbit",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "814": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "1"
      ]
    },
    "815": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "816": {
      "op": "bz _onlyIssuer_bool_false@3",
      "stack_out": []
    },
    "819": {
      "block": "_onlyIssuer_bool_true@2",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "820": {
      "block": "_onlyIssuer_bool_merge@4",
      "stack_in": [
        "or_result%0#0"
      ],
      "error": "not_issuer",
      "op": "assert // not_issuer",
      "defined_out": [],
      "stack_out": []
    },
    "821": {
      "retsub": true,
      "op": "retsub"
    },
    "822": {
      "block": "_onlyIssuer_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "823": {
      "op": "b _onlyIssuer_bool_merge@4"
    },
    "826": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_set_issuer",
      "params": {
        "issuer#0": "bytes"
      },
      "block": "arc1594_set_issuer",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "829": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "830": {
      "op": "bytec 7 // \"isr\"",
      "defined_out": [
        "\"isr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"isr\""
      ]
    },
    "832": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "833": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "835": {
      "op": "bz arc1594_set_issuer_bool_true@2",
      "stack_out": []
    },
    "838": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "840": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_is_owner",
      "op": "callsub arc88_is_owner",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "843": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "844": {
      "op": "getbit",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "845": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "1"
      ]
    },
    "846": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "847": {
      "op": "bz arc1594_set_issuer_bool_false@3",
      "stack_out": []
    },
    "850": {
      "block": "arc1594_set_issuer_bool_true@2",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "851": {
      "block": "arc1594_set_issuer_bool_merge@4",
      "stack_in": [
        "or_result%0#0"
      ],
      "error": "only_owner_once_set",
      "op": "assert // only_owner_once_set",
      "defined_out": [],
      "stack_out": []
    },
    "852": {
      "op": "bytec 7 // \"isr\"",
      "defined_out": [
        "\"isr\""
      ],
      "stack_out": [
        "\"isr\""
      ]
    },
    "854": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"isr\"",
        "issuer#0 (copy)"
      ],
      "stack_out": [
        "\"isr\"",
        "issuer#0 (copy)"
      ]
    },
    "856": {
      "op": "app_global_put",
      "stack_out": []
    },
    "857": {
      "retsub": true,
      "op": "retsub"
    },
    "858": {
      "block": "arc1594_set_issuer_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "859": {
      "op": "b arc1594_set_issuer_bool_merge@4"
    },
    "862": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_set_halt",
      "params": {
        "flag#0": "bytes"
      },
      "block": "arc1594_set_halt",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "865": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594._onlyIssuer",
      "op": "callsub _onlyIssuer"
    },
    "868": {
      "op": "bytec 8 // \"hlt\"",
      "defined_out": [
        "\"hlt\""
      ],
      "stack_out": [
        "\"hlt\""
      ]
    },
    "870": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"hlt\"",
        "flag#0 (copy)"
      ],
      "stack_out": [
        "\"hlt\"",
        "flag#0 (copy)"
      ]
    },
    "872": {
      "op": "app_global_put",
      "stack_out": []
    },
    "873": {
      "retsub": true,
      "op": "retsub"
    },
    "874": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_set_kyc",
      "params": {
        "account#0": "bytes",
        "flag#0": "bytes"
      },
      "block": "arc1594_set_kyc",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "877": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594._onlyIssuer",
      "op": "callsub _onlyIssuer"
    },
    "880": {
      "op": "bytec 9 // \"kyc\"",
      "defined_out": [
        "\"kyc\""
      ],
      "stack_out": [
        "\"kyc\""
      ]
    },
    "882": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"kyc\"",
        "account#0 (copy)"
      ],
      "stack_out": [
        "\"kyc\"",
        "account#0 (copy)"
      ]
    },
    "884": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "885": {
      "op": "frame_dig -1",
      "defined_out": [
        "flag#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "flag#0 (copy)"
      ]
    },
    "887": {
      "op": "box_put",
      "stack_out": []
    },
    "888": {
      "retsub": true,
      "op": "retsub"
    },
    "889": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_set_lockup",
      "params": {
        "account#0": "bytes",
        "round#0": "bytes"
      },
      "block": "arc1594_set_lockup",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "892": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594._onlyIssuer",
      "op": "callsub _onlyIssuer"
    },
    "895": {
      "op": "bytec 12 // \"lku\"",
      "defined_out": [
        "\"lku\""
      ],
      "stack_out": [
        "\"lku\""
      ]
    },
    "897": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"lku\"",
        "account#0 (copy)"
      ],
      "stack_out": [
        "\"lku\"",
        "account#0 (copy)"
      ]
    },
    "899": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "900": {
      "op": "frame_dig -1",
      "defined_out": [
        "round#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "round#0 (copy)"
      ]
    },
    "902": {
      "op": "box_put",
      "stack_out": []
    },
    "903": {
      "retsub": true,
      "op": "retsub"
    },
    "904": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_issue",
      "params": {
        "to#0": "bytes",
        "amount#0": "bytes",
        "partition#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1594_issue",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "907": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594._onlyIssuer",
      "op": "callsub _onlyIssuer"
    },
    "910": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "912": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)",
        "0x"
      ]
    },
    "914": {
      "op": "b>",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "915": {
      "error": "invalid_amount",
      "op": "assert // invalid_amount",
      "stack_out": []
    },
    "916": {
      "op": "bytec_3 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "\"b\""
      ]
    },
    "917": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"b\"",
        "to#0 (copy)"
      ],
      "stack_out": [
        "\"b\"",
        "to#0 (copy)"
      ]
    },
    "919": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "920": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "921": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "922": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "924": {
      "op": "bnz arc1594_issue_after_if_else@2",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "927": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "929": {
      "op": "bytec_2 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "930": {
      "op": "box_put",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "931": {
      "block": "arc1594_issue_after_if_else@2",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "933": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "934": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "935": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "936": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "938": {
      "op": "b+",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "939": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "940": {
      "op": "len",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "941": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "942": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "943": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "944": {
      "op": "intc_2 // 32",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "945": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "946": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "bzero%0#0",
        "to_encode%0#0"
      ]
    },
    "947": {
      "op": "dig 1",
      "defined_out": [
        "bzero%0#0",
        "bzero%0#0 (copy)",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "bzero%0#0",
        "to_encode%0#0",
        "bzero%0#0 (copy)"
      ]
    },
    "949": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "bzero%0#0",
        "arc4_encoded%0#0"
      ]
    },
    "950": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "bzero%0#0",
        "arc4_encoded%0#0",
        "tmp%1#0"
      ]
    },
    "952": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "bzero%0#0",
        "tmp%1#0",
        "arc4_encoded%0#0"
      ]
    },
    "953": {
      "op": "box_put",
      "stack_out": [
        "tmp%1#0",
        "bzero%0#0"
      ]
    },
    "954": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "bzero%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "bzero%0#0",
        "0"
      ]
    },
    "955": {
      "op": "bytec 4 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0",
        "bzero%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "bzero%0#0",
        "0",
        "\"t\""
      ]
    },
    "957": {
      "op": "app_global_get_ex",
      "defined_out": [
        "bzero%0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "bzero%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "958": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%1#0",
        "bzero%0#0",
        "maybe_value%2#0"
      ]
    },
    "959": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%1#0",
        "bzero%0#0",
        "maybe_value%2#0",
        "amount#0 (copy)"
      ]
    },
    "961": {
      "op": "b+",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "bzero%0#0",
        "to_encode%1#0"
      ]
    },
    "962": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "bzero%0#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "963": {
      "op": "len",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "bzero%0#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "964": {
      "op": "intc_2 // 32",
      "stack_out": [
        "tmp%1#0",
        "bzero%0#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "965": {
      "op": "<=",
      "defined_out": [
        "bzero%0#0",
        "len_ok%1#0",
        "tmp%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "bzero%0#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "966": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%1#0",
        "bzero%0#0",
        "to_encode%1#0"
      ]
    },
    "967": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "arc4_encoded%1#0"
      ]
    },
    "968": {
      "op": "bytec 4 // \"t\"",
      "stack_out": [
        "tmp%1#0",
        "arc4_encoded%1#0",
        "\"t\""
      ]
    },
    "970": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "\"t\"",
        "arc4_encoded%1#0"
      ]
    },
    "971": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "972": {
      "op": "frame_dig -4",
      "defined_out": [
        "tmp%1#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "to#0 (copy)"
      ]
    },
    "974": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%1#0",
        "to#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "976": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "977": {
      "op": "frame_dig -2",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "979": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "980": {
      "op": "bytec 13 // 0x0062",
      "defined_out": [
        "0x0062",
        "encoded_tuple_buffer%3#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%3#0",
        "0x0062"
      ]
    },
    "982": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "983": {
      "op": "frame_dig -1",
      "defined_out": [
        "data#0 (copy)",
        "encoded_tuple_buffer%4#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%4#0",
        "data#0 (copy)"
      ]
    },
    "985": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "986": {
      "op": "bytec 14 // 0x0002",
      "defined_out": [
        "0x0002",
        "encoded_tuple_buffer%5#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%5#0",
        "0x0002"
      ]
    },
    "988": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "0x0002",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "989": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "990": {
      "op": "pushbytes 0x552200a6 // method \"Issue((address,uint256,address,byte[]))\"",
      "defined_out": [
        "Method(Issue((address,uint256,address,byte[])))",
        "encoded_tuple_buffer%8#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%8#0",
        "Method(Issue((address,uint256,address,byte[])))"
      ]
    },
    "996": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "Method(Issue((address,uint256,address,byte[])))",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "997": {
      "op": "concat",
      "defined_out": [
        "event%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "event%0#0"
      ]
    },
    "998": {
      "op": "log",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "999": {
      "retsub": true,
      "op": "retsub"
    },
    "1000": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_redeem",
      "params": {
        "from#0": "bytes",
        "amount#0": "bytes",
        "partition#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1594_redeem",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "1003": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1004": {
      "op": "txn Sender"
    },
    "1006": {
      "op": "dup"
    },
    "1007": {
      "op": "frame_dig -4",
      "defined_out": [
        "from#0 (copy)",
        "sender#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "sender#0",
        "from#0 (copy)"
      ]
    },
    "1009": {
      "op": "==",
      "defined_out": [
        "sender#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "tmp%0#0"
      ]
    },
    "1010": {
      "op": "bnz arc1594_redeem_bool_true@2",
      "stack_out": [
        "tmp%3#0",
        "sender#0"
      ]
    },
    "1013": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "sender#0"
      ]
    },
    "1015": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594._isIssuer",
      "op": "callsub _isIssuer",
      "defined_out": [
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "tmp%1#0"
      ]
    },
    "1018": {
      "op": "bz arc1594_redeem_bool_false@3",
      "stack_out": [
        "tmp%3#0",
        "sender#0"
      ]
    },
    "1021": {
      "block": "arc1594_redeem_bool_true@2",
      "stack_in": [
        "tmp%3#0",
        "sender#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "or_result%0#0"
      ]
    },
    "1022": {
      "block": "arc1594_redeem_bool_merge@4",
      "stack_in": [
        "tmp%3#0",
        "sender#0",
        "or_result%0#0"
      ],
      "error": "not_auth",
      "op": "assert // not_auth",
      "defined_out": [],
      "stack_out": [
        "tmp%3#0",
        "sender#0"
      ]
    },
    "1023": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "amount#0 (copy)"
      ]
    },
    "1025": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "amount#0 (copy)",
        "0x"
      ]
    },
    "1027": {
      "op": "b>",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "tmp%2#0"
      ]
    },
    "1028": {
      "error": "invalid_amount",
      "op": "assert // invalid_amount",
      "stack_out": [
        "tmp%3#0",
        "sender#0"
      ]
    },
    "1029": {
      "op": "bytec_3 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "\"b\""
      ]
    },
    "1030": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"b\"",
        "from#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "\"b\"",
        "from#0 (copy)"
      ]
    },
    "1032": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "tmp%3#0"
      ]
    },
    "1033": {
      "op": "dup",
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "tmp%3#0",
        "tmp%3#0"
      ]
    },
    "1034": {
      "op": "frame_bury 0",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "tmp%3#0"
      ]
    },
    "1036": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1037": {
      "op": "bury 1",
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "maybe_exists%0#0"
      ]
    },
    "1039": {
      "op": "bz arc1594_redeem_bool_false@7",
      "stack_out": [
        "tmp%3#0",
        "sender#0"
      ]
    },
    "1042": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "tmp%3#0"
      ]
    },
    "1044": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1045": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "maybe_value%1#0"
      ]
    },
    "1046": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "1048": {
      "op": "b>=",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "tmp%5#0"
      ]
    },
    "1049": {
      "op": "bz arc1594_redeem_bool_false@7",
      "stack_out": [
        "tmp%3#0",
        "sender#0"
      ]
    },
    "1052": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "and_result%0#0"
      ]
    },
    "1053": {
      "block": "arc1594_redeem_bool_merge@8",
      "stack_in": [
        "tmp%3#0",
        "sender#0",
        "and_result%0#0"
      ],
      "error": "insufficient_balance",
      "op": "assert // insufficient_balance",
      "defined_out": [],
      "stack_out": [
        "tmp%3#0",
        "sender#0"
      ]
    },
    "1054": {
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "tmp%3#0"
      ]
    },
    "1056": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "1057": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "tmp%3#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1058": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "tmp%3#0",
        "maybe_value%2#0"
      ]
    },
    "1059": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "tmp%3#0",
        "maybe_value%2#0",
        "amount#0 (copy)"
      ]
    },
    "1061": {
      "op": "b-",
      "defined_out": [
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "tmp%3#0",
        "to_encode%0#0"
      ]
    },
    "1062": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "tmp%3#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "1063": {
      "op": "len",
      "defined_out": [
        "tmp%3#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "tmp%3#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "1064": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%3#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "tmp%3#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "1065": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "tmp%3#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "1066": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "tmp%3#0",
        "to_encode%0#0"
      ]
    },
    "1067": {
      "op": "intc_2 // 32",
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "tmp%3#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "1068": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "tmp%3#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "1069": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "tmp%3#0",
        "bzero%0#0",
        "to_encode%0#0"
      ]
    },
    "1070": {
      "op": "dig 1",
      "defined_out": [
        "bzero%0#0",
        "bzero%0#0 (copy)",
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "tmp%3#0",
        "bzero%0#0",
        "to_encode%0#0",
        "bzero%0#0 (copy)"
      ]
    },
    "1072": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "tmp%3#0",
        "bzero%0#0",
        "arc4_encoded%0#0"
      ]
    },
    "1073": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "bzero%0#0",
        "arc4_encoded%0#0",
        "tmp%3#0"
      ]
    },
    "1075": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "bzero%0#0",
        "tmp%3#0",
        "arc4_encoded%0#0"
      ]
    },
    "1076": {
      "op": "box_put",
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "bzero%0#0"
      ]
    },
    "1077": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "bzero%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "bzero%0#0",
        "0"
      ]
    },
    "1078": {
      "op": "bytec 4 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0",
        "bzero%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "bzero%0#0",
        "0",
        "\"t\""
      ]
    },
    "1080": {
      "op": "app_global_get_ex",
      "defined_out": [
        "bzero%0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "bzero%0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1081": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "bzero%0#0",
        "maybe_value%3#0"
      ]
    },
    "1082": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "bzero%0#0",
        "maybe_value%3#0",
        "amount#0 (copy)"
      ]
    },
    "1084": {
      "op": "b-",
      "defined_out": [
        "bzero%0#0",
        "tmp%3#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "bzero%0#0",
        "to_encode%1#0"
      ]
    },
    "1085": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "tmp%3#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "bzero%0#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "1086": {
      "op": "len",
      "defined_out": [
        "bzero%0#0",
        "tmp%3#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "bzero%0#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "1087": {
      "op": "intc_2 // 32",
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "bzero%0#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "1088": {
      "op": "<=",
      "defined_out": [
        "bzero%0#0",
        "len_ok%1#0",
        "tmp%3#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "bzero%0#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "1089": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "bzero%0#0",
        "to_encode%1#0"
      ]
    },
    "1090": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "arc4_encoded%1#0"
      ]
    },
    "1091": {
      "op": "bytec 4 // \"t\"",
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "arc4_encoded%1#0",
        "\"t\""
      ]
    },
    "1093": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "\"t\"",
        "arc4_encoded%1#0"
      ]
    },
    "1094": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%3#0",
        "sender#0"
      ]
    },
    "1095": {
      "op": "frame_dig -4",
      "defined_out": [
        "from#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "from#0 (copy)"
      ]
    },
    "1097": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "from#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "1099": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1100": {
      "op": "frame_dig -2",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "1102": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1103": {
      "op": "bytec 13 // 0x0062",
      "defined_out": [
        "0x0062",
        "encoded_tuple_buffer%3#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "encoded_tuple_buffer%3#0",
        "0x0062"
      ]
    },
    "1105": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1106": {
      "op": "frame_dig -1",
      "defined_out": [
        "data#0 (copy)",
        "encoded_tuple_buffer%4#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "encoded_tuple_buffer%4#0",
        "data#0 (copy)"
      ]
    },
    "1108": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1109": {
      "op": "bytec 14 // 0x0002",
      "defined_out": [
        "0x0002",
        "encoded_tuple_buffer%5#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "encoded_tuple_buffer%5#0",
        "0x0002"
      ]
    },
    "1111": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "0x0002",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1112": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "1113": {
      "op": "pushbytes 0x0a2fb99b // method \"Redeem((address,uint256,address,byte[]))\"",
      "defined_out": [
        "Method(Redeem((address,uint256,address,byte[])))",
        "encoded_tuple_buffer%8#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "encoded_tuple_buffer%8#0",
        "Method(Redeem((address,uint256,address,byte[])))"
      ]
    },
    "1119": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "Method(Redeem((address,uint256,address,byte[])))",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "1120": {
      "op": "concat",
      "defined_out": [
        "event%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "event%0#0"
      ]
    },
    "1121": {
      "op": "log",
      "stack_out": [
        "tmp%3#0",
        "sender#0"
      ]
    },
    "1122": {
      "retsub": true,
      "op": "retsub"
    },
    "1123": {
      "block": "arc1594_redeem_bool_false@7",
      "stack_in": [
        "tmp%3#0",
        "sender#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "and_result%0#0"
      ]
    },
    "1124": {
      "op": "b arc1594_redeem_bool_merge@8"
    },
    "1127": {
      "block": "arc1594_redeem_bool_false@3",
      "stack_in": [
        "tmp%3#0",
        "sender#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "sender#0",
        "or_result%0#0"
      ]
    },
    "1128": {
      "op": "b arc1594_redeem_bool_merge@4"
    },
    "1131": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_validate_transfer",
      "params": {
        "partition#0": "bytes",
        "from#0": "bytes",
        "to#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1594_validate_transfer",
      "stack_in": [],
      "op": "proto 5 1"
    },
    "1134": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1135": {
      "op": "dupn 3",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0"
      ]
    },
    "1137": {
      "op": "pushbytes 0x0000000000000000"
    },
    "1147": {
      "op": "dup"
    },
    "1148": {
      "op": "intc_0 // 0"
    },
    "1149": {
      "op": "bytec 8 // \"hlt\"",
      "defined_out": [
        "\"hlt\"",
        "0",
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#0",
        "0",
        "\"hlt\""
      ]
    },
    "1151": {
      "op": "app_global_get_ex",
      "defined_out": [
        "code#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1152": {
      "op": "bury 1",
      "defined_out": [
        "code#0",
        "code#24",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "maybe_exists%0#0"
      ]
    },
    "1154": {
      "op": "bz arc1594_validate_transfer_after_if_else@3",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1157": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "0"
      ]
    },
    "1158": {
      "op": "bytec 8 // \"hlt\"",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "0",
        "\"hlt\""
      ]
    },
    "1160": {
      "op": "app_global_get_ex",
      "defined_out": [
        "code#0",
        "code#24",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1161": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "maybe_value%1#0"
      ]
    },
    "1162": {
      "op": "btoi",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%0#0"
      ]
    },
    "1163": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "code#0",
        "code#24",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%0#0",
        "1"
      ]
    },
    "1164": {
      "op": "==",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%1#0"
      ]
    },
    "1165": {
      "op": "frame_dig 4",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%1#0",
        "code#24"
      ]
    },
    "1167": {
      "op": "frame_bury 5",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%1#0"
      ]
    },
    "1169": {
      "op": "bz arc1594_validate_transfer_after_if_else@3",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1172": {
      "op": "pushbytes 0x000000000000000e",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#24"
      ]
    },
    "1182": {
      "op": "frame_bury 5",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1184": {
      "block": "arc1594_validate_transfer_after_if_else@3",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0"
      ]
    },
    "1186": {
      "op": "dup",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0",
        "code#0"
      ]
    },
    "1187": {
      "op": "frame_bury 4",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0"
      ]
    },
    "1189": {
      "op": "dup",
      "defined_out": [
        "code#0",
        "code#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0",
        "code#0 (copy)"
      ]
    },
    "1190": {
      "op": "btoi",
      "defined_out": [
        "code#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0",
        "tmp%2#0"
      ]
    },
    "1191": {
      "op": "swap",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%2#0",
        "code#24"
      ]
    },
    "1192": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%2#0"
      ]
    },
    "1194": {
      "op": "bnz arc1594_validate_transfer_after_if_else@8",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1197": {
      "op": "bytec 9 // \"kyc\"",
      "defined_out": [
        "\"kyc\"",
        "code#0",
        "code#24"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "\"kyc\""
      ]
    },
    "1199": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"kyc\"",
        "code#0",
        "code#24",
        "from#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "\"kyc\"",
        "from#0 (copy)"
      ]
    },
    "1201": {
      "op": "concat",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%4#0"
      ]
    },
    "1202": {
      "op": "dup",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%4#0",
        "tmp%4#0"
      ]
    },
    "1203": {
      "op": "frame_bury 3",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%4#0"
      ]
    },
    "1205": {
      "op": "box_len",
      "defined_out": [
        "code#0",
        "code#24",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1206": {
      "op": "bury 1",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "maybe_exists%2#0"
      ]
    },
    "1208": {
      "op": "bz arc1594_validate_transfer_if_body@6",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1211": {
      "op": "frame_dig 3",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%4#0"
      ]
    },
    "1213": {
      "op": "box_get",
      "defined_out": [
        "code#0",
        "code#24",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1214": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "maybe_value%3#0"
      ]
    },
    "1215": {
      "op": "btoi",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%6#0"
      ]
    },
    "1216": {
      "op": "bnz arc1594_validate_transfer_after_if_else@7",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1219": {
      "block": "arc1594_validate_transfer_if_body@6",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ],
      "op": "pushbytes 0x000000000000000a",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0"
      ]
    },
    "1229": {
      "op": "frame_bury 4",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1231": {
      "block": "arc1594_validate_transfer_after_if_else@7",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "code#24"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#24"
      ]
    },
    "1233": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#24"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1235": {
      "block": "arc1594_validate_transfer_after_if_else@8",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0"
      ]
    },
    "1237": {
      "op": "dup",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0",
        "code#0"
      ]
    },
    "1238": {
      "op": "frame_bury 4",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0"
      ]
    },
    "1240": {
      "op": "dup",
      "defined_out": [
        "code#0",
        "code#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0",
        "code#0 (copy)"
      ]
    },
    "1241": {
      "op": "btoi",
      "defined_out": [
        "code#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0",
        "tmp%8#0"
      ]
    },
    "1242": {
      "op": "swap",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%8#0",
        "code#24"
      ]
    },
    "1243": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%8#0"
      ]
    },
    "1245": {
      "op": "bnz arc1594_validate_transfer_after_if_else@13",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1248": {
      "op": "bytec 9 // \"kyc\"",
      "defined_out": [
        "\"kyc\"",
        "code#0",
        "code#24"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "\"kyc\""
      ]
    },
    "1250": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"kyc\"",
        "code#0",
        "code#24",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "\"kyc\"",
        "to#0 (copy)"
      ]
    },
    "1252": {
      "op": "concat",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%10#0"
      ]
    },
    "1253": {
      "op": "dup",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%10#0",
        "tmp%10#0"
      ]
    },
    "1254": {
      "op": "frame_bury 0",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%10#0"
      ]
    },
    "1256": {
      "op": "box_len",
      "defined_out": [
        "code#0",
        "code#24",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1257": {
      "op": "bury 1",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "maybe_exists%4#0"
      ]
    },
    "1259": {
      "op": "bz arc1594_validate_transfer_if_body@11",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1262": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%10#0"
      ]
    },
    "1264": {
      "op": "box_get",
      "defined_out": [
        "code#0",
        "code#24",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1265": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "maybe_value%5#0"
      ]
    },
    "1266": {
      "op": "btoi",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%10#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%12#0"
      ]
    },
    "1267": {
      "op": "bnz arc1594_validate_transfer_after_if_else@12",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1270": {
      "block": "arc1594_validate_transfer_if_body@11",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ],
      "op": "pushbytes 0x000000000000000b",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0"
      ]
    },
    "1280": {
      "op": "frame_bury 4",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1282": {
      "block": "arc1594_validate_transfer_after_if_else@12",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "code#24"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#24"
      ]
    },
    "1284": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#24"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1286": {
      "block": "arc1594_validate_transfer_after_if_else@13",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0"
      ]
    },
    "1288": {
      "op": "dup",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0",
        "code#0"
      ]
    },
    "1289": {
      "op": "frame_bury 4",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0"
      ]
    },
    "1291": {
      "op": "dup",
      "defined_out": [
        "code#0",
        "code#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0",
        "code#0 (copy)"
      ]
    },
    "1292": {
      "op": "btoi",
      "defined_out": [
        "code#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0",
        "tmp%14#0"
      ]
    },
    "1293": {
      "op": "swap",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%14#0",
        "code#24"
      ]
    },
    "1294": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%14#0"
      ]
    },
    "1296": {
      "op": "bnz arc1594_validate_transfer_after_if_else@17",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1299": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "code#0",
        "code#24"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "amount#0 (copy)"
      ]
    },
    "1301": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "amount#0 (copy)",
        "code#0",
        "code#24"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "amount#0 (copy)",
        "0x"
      ]
    },
    "1303": {
      "op": "b==",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%16#0"
      ]
    },
    "1304": {
      "op": "bz arc1594_validate_transfer_after_if_else@16",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1307": {
      "op": "pushbytes 0x0000000000000028",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0"
      ]
    },
    "1317": {
      "op": "frame_bury 4",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1319": {
      "block": "arc1594_validate_transfer_after_if_else@16",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "code#24"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#24"
      ]
    },
    "1321": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#24"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1323": {
      "block": "arc1594_validate_transfer_after_if_else@17",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0"
      ]
    },
    "1325": {
      "op": "dup",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0",
        "code#0"
      ]
    },
    "1326": {
      "op": "frame_bury 4",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0"
      ]
    },
    "1328": {
      "op": "dup",
      "defined_out": [
        "code#0",
        "code#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0",
        "code#0 (copy)"
      ]
    },
    "1329": {
      "op": "btoi",
      "defined_out": [
        "code#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0",
        "tmp%17#0"
      ]
    },
    "1330": {
      "op": "swap",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%17#0",
        "code#24"
      ]
    },
    "1331": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%17#0"
      ]
    },
    "1333": {
      "op": "bnz arc1594_validate_transfer_after_if_else@22",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1336": {
      "op": "bytec_3 // \"b\"",
      "defined_out": [
        "\"b\"",
        "code#0",
        "code#24"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "\"b\""
      ]
    },
    "1337": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"b\"",
        "code#0",
        "code#24",
        "from#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "\"b\"",
        "from#0 (copy)"
      ]
    },
    "1339": {
      "op": "concat",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%19#0"
      ]
    },
    "1340": {
      "op": "dup",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%19#0",
        "tmp%19#0"
      ]
    },
    "1341": {
      "op": "frame_bury 1",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%19#0"
      ]
    },
    "1343": {
      "op": "box_len",
      "defined_out": [
        "code#0",
        "code#24",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1344": {
      "op": "bury 1",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "maybe_exists%6#0"
      ]
    },
    "1346": {
      "op": "bz arc1594_validate_transfer_if_body@20",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1349": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%19#0"
      ]
    },
    "1351": {
      "op": "box_get",
      "defined_out": [
        "code#0",
        "code#24",
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "1352": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "maybe_value%7#0"
      ]
    },
    "1353": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "code#0",
        "code#24",
        "maybe_value%7#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "maybe_value%7#0",
        "amount#0 (copy)"
      ]
    },
    "1355": {
      "op": "b<",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%21#0"
      ]
    },
    "1356": {
      "op": "bz arc1594_validate_transfer_after_if_else@21",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1359": {
      "block": "arc1594_validate_transfer_if_body@20",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ],
      "op": "pushbytes 0x000000000000000d",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0"
      ]
    },
    "1369": {
      "op": "frame_bury 4",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1371": {
      "block": "arc1594_validate_transfer_after_if_else@21",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "code#24"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#24"
      ]
    },
    "1373": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#24"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1375": {
      "block": "arc1594_validate_transfer_after_if_else@22",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0"
      ]
    },
    "1377": {
      "op": "dup",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0",
        "code#0"
      ]
    },
    "1378": {
      "op": "frame_bury 4",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0"
      ]
    },
    "1380": {
      "op": "dup",
      "defined_out": [
        "code#0",
        "code#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0",
        "code#0 (copy)"
      ]
    },
    "1381": {
      "op": "btoi",
      "defined_out": [
        "code#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0",
        "tmp%22#0"
      ]
    },
    "1382": {
      "op": "swap",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%22#0",
        "code#24"
      ]
    },
    "1383": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%22#0"
      ]
    },
    "1385": {
      "op": "bnz arc1594_validate_transfer_after_if_else@27",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1388": {
      "op": "bytec 12 // \"lku\"",
      "defined_out": [
        "\"lku\"",
        "code#0",
        "code#24"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "\"lku\""
      ]
    },
    "1390": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"lku\"",
        "code#0",
        "code#24",
        "from#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "\"lku\"",
        "from#0 (copy)"
      ]
    },
    "1392": {
      "op": "concat",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%24#0"
      ]
    },
    "1393": {
      "op": "dup",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%24#0",
        "tmp%24#0"
      ]
    },
    "1394": {
      "op": "frame_bury 2",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%24#0"
      ]
    },
    "1396": {
      "op": "box_len",
      "defined_out": [
        "code#0",
        "code#24",
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "1397": {
      "op": "bury 1",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "maybe_exists%8#0"
      ]
    },
    "1399": {
      "op": "frame_dig 4",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "maybe_exists%8#0",
        "code#24"
      ]
    },
    "1401": {
      "op": "frame_bury 5",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "maybe_exists%8#0"
      ]
    },
    "1403": {
      "op": "bz arc1594_validate_transfer_after_if_else@27",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1406": {
      "op": "global Round",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%25#0"
      ]
    },
    "1408": {
      "op": "frame_dig 2",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%25#0",
        "tmp%24#0"
      ]
    },
    "1410": {
      "op": "box_get",
      "defined_out": [
        "code#0",
        "code#24",
        "maybe_exists%9#0",
        "maybe_value%9#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%25#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "1411": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%25#0",
        "maybe_value%9#0"
      ]
    },
    "1412": {
      "op": "btoi",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%25#0",
        "tmp%27#0"
      ]
    },
    "1413": {
      "op": "<=",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%24#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%28#0"
      ]
    },
    "1414": {
      "op": "frame_dig 4",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%28#0",
        "code#24"
      ]
    },
    "1416": {
      "op": "frame_bury 5",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%28#0"
      ]
    },
    "1418": {
      "op": "bz arc1594_validate_transfer_after_if_else@27",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1421": {
      "op": "pushbytes 0x000000000000000f",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#24"
      ]
    },
    "1431": {
      "op": "frame_bury 5",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1433": {
      "block": "arc1594_validate_transfer_after_if_else@27",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0"
      ]
    },
    "1435": {
      "op": "dup",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0",
        "code#0"
      ]
    },
    "1436": {
      "op": "frame_bury 4",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0"
      ]
    },
    "1438": {
      "op": "dup",
      "defined_out": [
        "code#0",
        "code#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0",
        "code#0 (copy)"
      ]
    },
    "1439": {
      "op": "btoi",
      "defined_out": [
        "code#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0",
        "tmp%29#0"
      ]
    },
    "1440": {
      "op": "swap",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%29#0",
        "code#24"
      ]
    },
    "1441": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%29#0"
      ]
    },
    "1443": {
      "op": "bnz arc1594_validate_transfer_after_if_else@31",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1446": {
      "op": "frame_dig -5",
      "defined_out": [
        "code#0",
        "code#24",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "partition#0 (copy)"
      ]
    },
    "1448": {
      "op": "bytec_2 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "code#0",
        "code#24",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "partition#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "1449": {
      "op": "!=",
      "defined_out": [
        "code#0",
        "code#24",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "tmp%31#0"
      ]
    },
    "1450": {
      "op": "bz arc1594_validate_transfer_after_if_else@30",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1453": {
      "op": "pushbytes 0x0000000000000014",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0"
      ]
    },
    "1463": {
      "op": "frame_bury 4",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1465": {
      "block": "arc1594_validate_transfer_after_if_else@30",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "code#24"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#24"
      ]
    },
    "1467": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#24"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ]
    },
    "1469": {
      "block": "arc1594_validate_transfer_after_if_else@31",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#24",
        "code#0"
      ]
    },
    "1471": {
      "op": "frame_bury 0"
    },
    "1473": {
      "retsub": true,
      "op": "retsub"
    },
    "1474": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.bootstrap",
      "params": {
        "name#0": "bytes",
        "symbol#0": "bytes",
        "decimals#0": "bytes",
        "totalSupply#0": "bytes"
      },
      "block": "bootstrap",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "1477": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1479": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1481": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1482": {
      "error": "Only deployer of this smart contract can call bootstrap method",
      "op": "assert // Only deployer of this smart contract can call bootstrap method",
      "stack_out": []
    },
    "1483": {
      "op": "frame_dig -4",
      "defined_out": [
        "name#0 (copy)"
      ],
      "stack_out": [
        "name#0 (copy)"
      ]
    },
    "1485": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1488": {
      "op": "len",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1489": {
      "op": "dup",
      "defined_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "1490": {
      "error": "Name of the asset must be longer or equal to 1 character",
      "op": "assert // Name of the asset must be longer or equal to 1 character",
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1491": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "32"
      ]
    },
    "1492": {
      "op": "<=",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1493": {
      "error": "Name of the asset must be shorter or equal to 32 characters",
      "op": "assert // Name of the asset must be shorter or equal to 32 characters",
      "stack_out": []
    },
    "1494": {
      "op": "frame_dig -3",
      "defined_out": [
        "symbol#0 (copy)"
      ],
      "stack_out": [
        "symbol#0 (copy)"
      ]
    },
    "1496": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1499": {
      "op": "len",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1500": {
      "op": "dup",
      "defined_out": [
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "1501": {
      "error": "Symbol of the asset must be longer or equal to 1 character",
      "op": "assert // Symbol of the asset must be longer or equal to 1 character",
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1502": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "8"
      ]
    },
    "1503": {
      "op": "<=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1504": {
      "error": "Symbol of the asset must be shorter or equal to 8 characters",
      "op": "assert // Symbol of the asset must be shorter or equal to 8 characters",
      "stack_out": []
    },
    "1505": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1506": {
      "op": "bytec 4 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"t\""
      ]
    },
    "1508": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1509": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1511": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1512": {
      "error": "This method can be called only once",
      "op": "assert // This method can be called only once",
      "stack_out": []
    },
    "1513": {
      "op": "pushbytes \"n\"",
      "defined_out": [
        "\"n\""
      ],
      "stack_out": [
        "\"n\""
      ]
    },
    "1516": {
      "op": "frame_dig -4",
      "stack_out": [
        "\"n\"",
        "name#0 (copy)"
      ]
    },
    "1518": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1519": {
      "op": "pushbytes \"s\"",
      "defined_out": [
        "\"s\""
      ],
      "stack_out": [
        "\"s\""
      ]
    },
    "1522": {
      "op": "frame_dig -3",
      "stack_out": [
        "\"s\"",
        "symbol#0 (copy)"
      ]
    },
    "1524": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1525": {
      "op": "bytec 4 // \"t\"",
      "stack_out": [
        "\"t\""
      ]
    },
    "1527": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"t\"",
        "totalSupply#0 (copy)"
      ],
      "stack_out": [
        "\"t\"",
        "totalSupply#0 (copy)"
      ]
    },
    "1529": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1530": {
      "op": "pushbytes \"d\"",
      "defined_out": [
        "\"d\""
      ],
      "stack_out": [
        "\"d\""
      ]
    },
    "1533": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"d\"",
        "decimals#0 (copy)"
      ],
      "stack_out": [
        "\"d\"",
        "decimals#0 (copy)"
      ]
    },
    "1535": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1536": {
      "op": "txn Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "1538": {
      "op": "bytec_3 // \"b\"",
      "defined_out": [
        "\"b\"",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "\"b\""
      ]
    },
    "1539": {
      "op": "dig 1",
      "defined_out": [
        "\"b\"",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "\"b\"",
        "sender#0 (copy)"
      ]
    },
    "1541": {
      "op": "concat",
      "defined_out": [
        "sender#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%16#0"
      ]
    },
    "1542": {
      "op": "frame_dig -1",
      "stack_out": [
        "sender#0",
        "tmp%16#0",
        "totalSupply#0 (copy)"
      ]
    },
    "1544": {
      "op": "box_put",
      "stack_out": [
        "sender#0"
      ]
    },
    "1545": {
      "op": "global ZeroAddress",
      "defined_out": [
        "sender#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%17#0"
      ]
    },
    "1547": {
      "op": "swap",
      "stack_out": [
        "tmp%17#0",
        "sender#0"
      ]
    },
    "1548": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1549": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "totalSupply#0 (copy)"
      ]
    },
    "1551": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1552": {
      "op": "bytec 15 // method \"arc200_Transfer(address,address,uint256)\"",
      "defined_out": [
        "Method(arc200_Transfer(address,address,uint256))",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "Method(arc200_Transfer(address,address,uint256))"
      ]
    },
    "1554": {
      "op": "swap",
      "stack_out": [
        "Method(arc200_Transfer(address,address,uint256))",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1555": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "1556": {
      "op": "log",
      "stack_out": []
    },
    "1557": {
      "op": "bytec 10 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "0x80"
      ]
    },
    "1559": {
      "retsub": true,
      "op": "retsub"
    },
    "1560": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_name",
      "params": {},
      "block": "arc200_name",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1561": {
      "op": "pushbytes \"n\"",
      "defined_out": [
        "\"n\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"n\""
      ]
    },
    "1564": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1565": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1566": {
      "op": "extract 2 0",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1569": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "1570": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "1571": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0",
        "32"
      ]
    },
    "1572": {
      "op": "==",
      "defined_out": [
        "lengths_equal%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "lengths_equal%0#0"
      ]
    },
    "1573": {
      "error": "invalid size",
      "op": "assert // invalid size",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1574": {
      "retsub": true,
      "op": "retsub"
    },
    "1575": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_symbol",
      "params": {},
      "block": "arc200_symbol",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1576": {
      "op": "pushbytes \"s\"",
      "defined_out": [
        "\"s\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"s\""
      ]
    },
    "1579": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1580": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1581": {
      "op": "extract 2 0",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1584": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "1585": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "1586": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0",
        "8"
      ]
    },
    "1587": {
      "op": "==",
      "defined_out": [
        "lengths_equal%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "lengths_equal%0#0"
      ]
    },
    "1588": {
      "error": "invalid size",
      "op": "assert // invalid size",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1589": {
      "retsub": true,
      "op": "retsub"
    },
    "1590": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_decimals",
      "params": {},
      "block": "arc200_decimals",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1591": {
      "op": "pushbytes \"d\"",
      "defined_out": [
        "\"d\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"d\""
      ]
    },
    "1594": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1595": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1596": {
      "retsub": true,
      "op": "retsub"
    },
    "1597": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_totalSupply",
      "params": {},
      "block": "arc200_totalSupply",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1598": {
      "op": "bytec 4 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"t\""
      ]
    },
    "1600": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1601": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1602": {
      "retsub": true,
      "op": "retsub"
    },
    "1603": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_balanceOf",
      "params": {
        "owner#0": "bytes"
      },
      "block": "arc200_balanceOf",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1606": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "1608": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "op": "callsub _balanceOf",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1611": {
      "retsub": true,
      "op": "retsub"
    },
    "1612": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_transfer",
      "params": {
        "to#0": "bytes",
        "value#0": "bytes"
      },
      "block": "arc200_transfer",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1615": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1617": {
      "op": "frame_dig -2",
      "defined_out": [
        "tmp%0#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "to#0 (copy)"
      ]
    },
    "1619": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%0#0",
        "to#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "to#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "1621": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._transfer",
      "op": "callsub _transfer",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1624": {
      "retsub": true,
      "op": "retsub"
    },
    "1625": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_transferFrom",
      "params": {
        "from#0": "bytes",
        "to#0": "bytes",
        "value#0": "bytes"
      },
      "block": "arc200_transferFrom",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1628": {
      "op": "txn Sender",
      "defined_out": [
        "spender#0"
      ],
      "stack_out": [
        "spender#0"
      ]
    },
    "1630": {
      "op": "frame_dig -3",
      "defined_out": [
        "from#0 (copy)",
        "spender#0"
      ],
      "stack_out": [
        "spender#0",
        "from#0 (copy)"
      ]
    },
    "1632": {
      "op": "dig 1",
      "defined_out": [
        "from#0 (copy)",
        "spender#0",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "spender#0",
        "from#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "1634": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._allowance",
      "op": "callsub _allowance",
      "defined_out": [
        "spender#0",
        "spender_allowance#0"
      ],
      "stack_out": [
        "spender#0",
        "spender_allowance#0"
      ]
    },
    "1637": {
      "op": "dup",
      "defined_out": [
        "spender#0",
        "spender_allowance#0",
        "spender_allowance#0 (copy)"
      ],
      "stack_out": [
        "spender#0",
        "spender_allowance#0",
        "spender_allowance#0 (copy)"
      ]
    },
    "1638": {
      "op": "frame_dig -1",
      "defined_out": [
        "spender#0",
        "spender_allowance#0",
        "spender_allowance#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "spender#0",
        "spender_allowance#0",
        "spender_allowance#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "1640": {
      "op": "b>=",
      "defined_out": [
        "spender#0",
        "spender_allowance#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "spender#0",
        "spender_allowance#0",
        "tmp%0#0"
      ]
    },
    "1641": {
      "error": "insufficient approval",
      "op": "assert // insufficient approval",
      "stack_out": [
        "spender#0",
        "spender_allowance#0"
      ]
    },
    "1642": {
      "op": "frame_dig -1",
      "stack_out": [
        "spender#0",
        "spender_allowance#0",
        "value#0 (copy)"
      ]
    },
    "1644": {
      "op": "b-",
      "defined_out": [
        "spender#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0"
      ]
    },
    "1645": {
      "op": "dup",
      "defined_out": [
        "spender#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "1646": {
      "op": "len",
      "defined_out": [
        "spender#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "1647": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "spender#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "1648": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "spender#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "1649": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "spender#0",
        "to_encode%0#0"
      ]
    },
    "1650": {
      "op": "intc_2 // 32",
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "1651": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "spender#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "1652": {
      "op": "b|",
      "defined_out": [
        "new_spender_allowance#0",
        "spender#0"
      ],
      "stack_out": [
        "spender#0",
        "new_spender_allowance#0"
      ]
    },
    "1653": {
      "op": "frame_dig -3",
      "stack_out": [
        "spender#0",
        "new_spender_allowance#0",
        "from#0 (copy)"
      ]
    },
    "1655": {
      "op": "cover 2",
      "stack_out": [
        "from#0 (copy)",
        "spender#0",
        "new_spender_allowance#0"
      ]
    },
    "1657": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._approve",
      "op": "callsub _approve",
      "defined_out": [
        "{_approve}"
      ],
      "stack_out": [
        "{_approve}"
      ]
    },
    "1660": {
      "op": "pop",
      "stack_out": []
    },
    "1661": {
      "op": "frame_dig -3",
      "stack_out": [
        "from#0 (copy)"
      ]
    },
    "1663": {
      "op": "frame_dig -2",
      "defined_out": [
        "from#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "from#0 (copy)",
        "to#0 (copy)"
      ]
    },
    "1665": {
      "op": "frame_dig -1",
      "stack_out": [
        "from#0 (copy)",
        "to#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "1667": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._transfer",
      "op": "callsub _transfer",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1670": {
      "retsub": true,
      "op": "retsub"
    },
    "1671": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_approve",
      "params": {
        "spender#0": "bytes",
        "value#0": "bytes"
      },
      "block": "arc200_approve",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1674": {
      "op": "txn Sender",
      "defined_out": [
        "owner#0"
      ],
      "stack_out": [
        "owner#0"
      ]
    },
    "1676": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0",
        "spender#0 (copy)"
      ]
    },
    "1678": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0",
        "spender#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "owner#0",
        "spender#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "1680": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._approve",
      "op": "callsub _approve",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1683": {
      "retsub": true,
      "op": "retsub"
    },
    "1684": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_allowance",
      "params": {
        "owner#0": "bytes",
        "spender#0": "bytes"
      },
      "block": "arc200_allowance",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1687": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "1689": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "1691": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._allowance",
      "op": "callsub _allowance",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1694": {
      "retsub": true,
      "op": "retsub"
    },
    "1695": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "params": {
        "owner#0": "bytes"
      },
      "block": "_balanceOf",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1698": {
      "op": "bytec_3 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "\"b\""
      ]
    },
    "1699": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"b\"",
        "owner#0 (copy)"
      ],
      "stack_out": [
        "\"b\"",
        "owner#0 (copy)"
      ]
    },
    "1701": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1702": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1703": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1704": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1706": {
      "op": "bnz _balanceOf_after_if_else@2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1709": {
      "op": "bytec_2 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "1710": {
      "op": "swap"
    },
    "1711": {
      "retsub": true,
      "op": "retsub"
    },
    "1712": {
      "block": "_balanceOf_after_if_else@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1714": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1715": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "1716": {
      "op": "swap"
    },
    "1717": {
      "retsub": true,
      "op": "retsub"
    },
    "1718": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._transfer",
      "params": {
        "sender#0": "bytes",
        "recipient#0": "bytes",
        "amount#0": "bytes"
      },
      "block": "_transfer",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1721": {
      "op": "frame_dig -3",
      "defined_out": [
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0 (copy)"
      ]
    },
    "1723": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "op": "callsub _balanceOf",
      "defined_out": [
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0"
      ]
    },
    "1726": {
      "op": "dup",
      "defined_out": [
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "sender_balance#0"
      ]
    },
    "1727": {
      "op": "frame_dig -2",
      "defined_out": [
        "recipient#0 (copy)",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "sender_balance#0",
        "recipient#0 (copy)"
      ]
    },
    "1729": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "op": "callsub _balanceOf",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "1732": {
      "op": "swap",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender_balance#0"
      ]
    },
    "1733": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender_balance#0",
        "amount#0 (copy)"
      ]
    },
    "1735": {
      "op": "b>=",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "tmp%0#0"
      ]
    },
    "1736": {
      "error": "Insufficient balance at the sender account",
      "op": "assert // Insufficient balance at the sender account",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "1737": {
      "op": "frame_dig -3",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender#0 (copy)"
      ]
    },
    "1739": {
      "op": "frame_dig -2",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender#0 (copy)",
        "recipient#0 (copy)"
      ]
    },
    "1741": {
      "op": "!=",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "tmp%1#0"
      ]
    },
    "1742": {
      "op": "bz _transfer_after_if_else@2",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "1745": {
      "op": "frame_dig 0",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender_balance#0"
      ]
    },
    "1747": {
      "op": "frame_dig -1",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender_balance#0",
        "amount#0 (copy)"
      ]
    },
    "1749": {
      "op": "b-",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0"
      ]
    },
    "1750": {
      "op": "dup",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "1751": {
      "op": "len",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "1752": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "1753": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "1754": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0"
      ]
    },
    "1755": {
      "op": "intc_2 // 32",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "1756": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "1757": {
      "op": "swap",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%0#0"
      ]
    },
    "1758": {
      "op": "dig 1",
      "defined_out": [
        "bzero%0#0",
        "bzero%0#0 (copy)",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%0#0",
        "bzero%0#0 (copy)"
      ]
    },
    "1760": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "arc4_encoded%0#0"
      ]
    },
    "1761": {
      "op": "bytec_3 // \"b\"",
      "defined_out": [
        "\"b\"",
        "arc4_encoded%0#0",
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "arc4_encoded%0#0",
        "\"b\""
      ]
    },
    "1762": {
      "op": "frame_dig -3",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "arc4_encoded%0#0",
        "\"b\"",
        "sender#0 (copy)"
      ]
    },
    "1764": {
      "op": "concat",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "arc4_encoded%0#0",
        "tmp%2#0"
      ]
    },
    "1765": {
      "op": "swap",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "tmp%2#0",
        "arc4_encoded%0#0"
      ]
    },
    "1766": {
      "op": "box_put",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0"
      ]
    },
    "1767": {
      "op": "frame_dig 1",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "recipient_balance#0"
      ]
    },
    "1769": {
      "op": "frame_dig -1",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "recipient_balance#0",
        "amount#0 (copy)"
      ]
    },
    "1771": {
      "op": "b+",
      "defined_out": [
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0"
      ]
    },
    "1772": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "1773": {
      "op": "len",
      "defined_out": [
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "1774": {
      "op": "intc_2 // 32",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "1775": {
      "op": "<=",
      "defined_out": [
        "bzero%0#0",
        "len_ok%1#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "1776": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0"
      ]
    },
    "1777": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "arc4_encoded%1#0"
      ]
    },
    "1778": {
      "op": "bytec_3 // \"b\"",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "arc4_encoded%1#0",
        "\"b\""
      ]
    },
    "1779": {
      "op": "frame_dig -2",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "arc4_encoded%1#0",
        "\"b\"",
        "recipient#0 (copy)"
      ]
    },
    "1781": {
      "op": "concat",
      "defined_out": [
        "arc4_encoded%1#0",
        "recipient_balance#0",
        "sender_balance#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "arc4_encoded%1#0",
        "tmp%3#0"
      ]
    },
    "1782": {
      "op": "swap",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "tmp%3#0",
        "arc4_encoded%1#0"
      ]
    },
    "1783": {
      "op": "box_put",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "1784": {
      "block": "_transfer_after_if_else@2",
      "stack_in": [
        "sender_balance#0",
        "recipient_balance#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender#0 (copy)"
      ]
    },
    "1786": {
      "op": "frame_dig -2",
      "defined_out": [
        "recipient#0 (copy)",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender#0 (copy)",
        "recipient#0 (copy)"
      ]
    },
    "1788": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1789": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "encoded_tuple_buffer%2#0",
        "amount#0 (copy)"
      ]
    },
    "1791": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1792": {
      "op": "bytec 15 // method \"arc200_Transfer(address,address,uint256)\"",
      "defined_out": [
        "Method(arc200_Transfer(address,address,uint256))",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "encoded_tuple_buffer%3#0",
        "Method(arc200_Transfer(address,address,uint256))"
      ]
    },
    "1794": {
      "op": "swap",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "Method(arc200_Transfer(address,address,uint256))",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1795": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "event%0#0"
      ]
    },
    "1796": {
      "op": "log",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "1797": {
      "op": "bytec 10 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "0x80"
      ]
    },
    "1799": {
      "op": "frame_bury 0"
    },
    "1801": {
      "retsub": true,
      "op": "retsub"
    },
    "1802": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._approvalKey",
      "params": {
        "owner#0": "bytes",
        "spender#0": "bytes"
      },
      "block": "_approvalKey",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1805": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "1807": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "1809": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1810": {
      "op": "sha256",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1811": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "1812": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "1813": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0",
        "32"
      ]
    },
    "1814": {
      "op": "==",
      "defined_out": [
        "lengths_equal%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "lengths_equal%0#0"
      ]
    },
    "1815": {
      "error": "invalid size",
      "op": "assert // invalid size",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1816": {
      "retsub": true,
      "op": "retsub"
    },
    "1817": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._allowance",
      "params": {
        "owner#0": "bytes",
        "spender#0": "bytes"
      },
      "block": "_allowance",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1820": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "1822": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "1824": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._approvalKey",
      "op": "callsub _approvalKey",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "1827": {
      "op": "pushbytes \"a\"",
      "defined_out": [
        "\"a\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"a\""
      ]
    },
    "1830": {
      "op": "swap",
      "stack_out": [
        "\"a\"",
        "key#0"
      ]
    },
    "1831": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1832": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1833": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1834": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1836": {
      "op": "bnz _allowance_after_if_else@2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1839": {
      "op": "bytec_2 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "1840": {
      "op": "swap"
    },
    "1841": {
      "retsub": true,
      "op": "retsub"
    },
    "1842": {
      "block": "_allowance_after_if_else@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1844": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1845": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "1846": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1849": {
      "op": "swap"
    },
    "1850": {
      "retsub": true,
      "op": "retsub"
    },
    "1851": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._approve",
      "params": {
        "owner#0": "bytes",
        "spender#0": "bytes",
        "amount#0": "bytes"
      },
      "block": "_approve",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1854": {
      "op": "frame_dig -3",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "1856": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "1858": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._approvalKey",
      "op": "callsub _approvalKey",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "1861": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "amount#0 (copy)"
      ]
    },
    "1863": {
      "op": "frame_dig -3",
      "stack_out": [
        "key#0",
        "amount#0 (copy)",
        "owner#0 (copy)"
      ]
    },
    "1865": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1866": {
      "op": "frame_dig -2",
      "stack_out": [
        "key#0",
        "encoded_tuple_buffer%2#0",
        "spender#0 (copy)"
      ]
    },
    "1868": {
      "op": "concat",
      "defined_out": [
        "approvalBox#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "approvalBox#0"
      ]
    },
    "1869": {
      "op": "pushbytes \"a\"",
      "defined_out": [
        "\"a\"",
        "approvalBox#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "approvalBox#0",
        "\"a\""
      ]
    },
    "1872": {
      "op": "uncover 2",
      "stack_out": [
        "approvalBox#0",
        "\"a\"",
        "key#0"
      ]
    },
    "1874": {
      "op": "concat",
      "defined_out": [
        "approvalBox#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "approvalBox#0",
        "tmp%0#0"
      ]
    },
    "1875": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "approvalBox#0"
      ]
    },
    "1876": {
      "op": "box_put",
      "stack_out": []
    },
    "1877": {
      "op": "frame_dig -3",
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "1879": {
      "op": "frame_dig -2",
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "1881": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1882": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "amount#0 (copy)"
      ]
    },
    "1884": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1885": {
      "op": "pushbytes 0x1969f865 // method \"arc200_Approval(address,address,uint256)\"",
      "defined_out": [
        "Method(arc200_Approval(address,address,uint256))",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "Method(arc200_Approval(address,address,uint256))"
      ]
    },
    "1891": {
      "op": "swap",
      "stack_out": [
        "Method(arc200_Approval(address,address,uint256))",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1892": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "1893": {
      "op": "log",
      "stack_out": []
    },
    "1894": {
      "op": "bytec 10 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "0x80"
      ]
    },
    "1896": {
      "retsub": true,
      "op": "retsub"
    },
    "1897": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "params": {},
      "block": "_ensureDefaultOwner",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1898": {
      "op": "bytec 6 // \"arc88_oi\"",
      "defined_out": [
        "\"arc88_oi\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_oi\""
      ]
    },
    "1900": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1901": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1903": {
      "op": "bz _ensureDefaultOwner_if_body@2",
      "stack_out": []
    },
    "1906": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1907": {
      "op": "bytec 6 // \"arc88_oi\"",
      "stack_out": [
        "0",
        "\"arc88_oi\""
      ]
    },
    "1909": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1910": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1911": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1912": {
      "op": "bnz _ensureDefaultOwner_after_if_else@5",
      "stack_out": []
    },
    "1915": {
      "block": "_ensureDefaultOwner_if_body@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1916": {
      "op": "bytec_0 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "1917": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1918": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%2#0"
      ]
    },
    "1920": {
      "op": "bnz _ensureDefaultOwner_after_if_else@4",
      "stack_out": []
    },
    "1923": {
      "op": "bytec_0 // \"arc88_o\"",
      "stack_out": [
        "\"arc88_o\""
      ]
    },
    "1924": {
      "op": "global CreatorAddress",
      "defined_out": [
        "\"arc88_o\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"arc88_o\"",
        "new_state_value%0#0"
      ]
    },
    "1926": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1927": {
      "block": "_ensureDefaultOwner_after_if_else@4",
      "stack_in": [],
      "op": "bytec 6 // \"arc88_oi\"",
      "defined_out": [
        "\"arc88_oi\""
      ],
      "stack_out": [
        "\"arc88_oi\""
      ]
    },
    "1929": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "\"arc88_oi\"",
        "0x01"
      ],
      "stack_out": [
        "\"arc88_oi\"",
        "0x01"
      ]
    },
    "1932": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1933": {
      "block": "_ensureDefaultOwner_after_if_else@5",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "1934": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_owner",
      "params": {},
      "block": "arc88_owner",
      "stack_in": [],
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "1937": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1938": {
      "op": "bytec_0 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "1939": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1940": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1941": {
      "retsub": true,
      "op": "retsub"
    },
    "1942": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_is_owner",
      "params": {
        "query#0": "bytes"
      },
      "block": "arc88_is_owner",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1945": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "1948": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1949": {
      "op": "bytec_0 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "1950": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1951": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1953": {
      "op": "bnz arc88_is_owner_after_if_else@2",
      "stack_out": []
    },
    "1956": {
      "op": "bytec 11 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "1958": {
      "retsub": true,
      "op": "retsub"
    },
    "1959": {
      "block": "arc88_is_owner_after_if_else@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1960": {
      "op": "bytec_0 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "1961": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1962": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1963": {
      "op": "bytec_2 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "1964": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1965": {
      "op": "bz arc88_is_owner_after_if_else@4",
      "stack_out": []
    },
    "1968": {
      "op": "bytec 11 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "1970": {
      "retsub": true,
      "op": "retsub"
    },
    "1971": {
      "block": "arc88_is_owner_after_if_else@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1972": {
      "op": "bytec_0 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "1973": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1974": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1975": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%2#0",
        "query#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "query#0 (copy)"
      ]
    },
    "1977": {
      "op": "==",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1978": {
      "op": "bytec 11 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "1980": {
      "op": "intc_0 // 0",
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "1981": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "1983": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "1984": {
      "retsub": true,
      "op": "retsub"
    },
    "1985": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_initialize_owner",
      "params": {
        "new_owner#0": "bytes"
      },
      "block": "arc88_initialize_owner",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1988": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1989": {
      "op": "bytec 6 // \"arc88_oi\"",
      "defined_out": [
        "\"arc88_oi\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_oi\""
      ]
    },
    "1991": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1992": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1994": {
      "op": "bz arc88_initialize_owner_bool_false@3",
      "stack_out": []
    },
    "1997": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1998": {
      "op": "bytec 6 // \"arc88_oi\"",
      "stack_out": [
        "0",
        "\"arc88_oi\""
      ]
    },
    "2000": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2001": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2002": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2003": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "2004": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2005": {
      "op": "bz arc88_initialize_owner_bool_false@3",
      "stack_out": []
    },
    "2008": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2009": {
      "block": "arc88_initialize_owner_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2010": {
      "error": "already_initialized",
      "op": "assert // already_initialized",
      "stack_out": []
    },
    "2011": {
      "op": "frame_dig -1",
      "defined_out": [
        "new_owner#0 (copy)"
      ],
      "stack_out": [
        "new_owner#0 (copy)"
      ]
    },
    "2013": {
      "op": "bytec_2 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "new_owner#0 (copy)"
      ],
      "stack_out": [
        "new_owner#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "2014": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2015": {
      "error": "zero_address_not_allowed",
      "op": "assert // zero_address_not_allowed",
      "stack_out": []
    },
    "2016": {
      "op": "bytec_0 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\""
      ],
      "stack_out": [
        "\"arc88_o\""
      ]
    },
    "2017": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"arc88_o\"",
        "new_owner#0 (copy)"
      ]
    },
    "2019": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2020": {
      "op": "bytec 6 // \"arc88_oi\"",
      "defined_out": [
        "\"arc88_oi\""
      ],
      "stack_out": [
        "\"arc88_oi\""
      ]
    },
    "2022": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "\"arc88_oi\"",
        "0x01"
      ],
      "stack_out": [
        "\"arc88_oi\"",
        "0x01"
      ]
    },
    "2025": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2026": {
      "retsub": true,
      "op": "retsub"
    },
    "2027": {
      "block": "arc88_initialize_owner_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2028": {
      "op": "b arc88_initialize_owner_bool_merge@4"
    },
    "2031": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_transfer_ownership",
      "params": {
        "new_owner#0": "bytes"
      },
      "block": "arc88_transfer_ownership",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2034": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "2037": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2039": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2040": {
      "op": "bytec_0 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "2041": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2042": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2043": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2044": {
      "error": "not_owner",
      "op": "assert // not_owner",
      "stack_out": []
    },
    "2045": {
      "op": "frame_dig -1",
      "defined_out": [
        "new_owner#0 (copy)"
      ],
      "stack_out": [
        "new_owner#0 (copy)"
      ]
    },
    "2047": {
      "op": "bytec_2 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "new_owner#0 (copy)"
      ],
      "stack_out": [
        "new_owner#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "2048": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2049": {
      "error": "zero_address_not_allowed",
      "op": "assert // zero_address_not_allowed",
      "stack_out": []
    },
    "2050": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2051": {
      "op": "bytec_0 // \"arc88_o\"",
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "2052": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "previous#0"
      ],
      "stack_out": [
        "previous#0",
        "maybe_exists%1#0"
      ]
    },
    "2053": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "previous#0"
      ]
    },
    "2054": {
      "op": "bytec_0 // \"arc88_o\"",
      "stack_out": [
        "previous#0",
        "\"arc88_o\""
      ]
    },
    "2055": {
      "op": "frame_dig -1",
      "stack_out": [
        "previous#0",
        "\"arc88_o\"",
        "new_owner#0 (copy)"
      ]
    },
    "2057": {
      "op": "app_global_put",
      "stack_out": [
        "previous#0"
      ]
    },
    "2058": {
      "op": "frame_dig -1",
      "stack_out": [
        "previous#0",
        "new_owner#0 (copy)"
      ]
    },
    "2060": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2061": {
      "op": "bytec 16 // method \"arc88_OwnershipTransferred(address,address)\"",
      "defined_out": [
        "Method(arc88_OwnershipTransferred(address,address))",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferred(address,address))"
      ]
    },
    "2063": {
      "op": "swap",
      "stack_out": [
        "Method(arc88_OwnershipTransferred(address,address))",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2064": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "2065": {
      "op": "log",
      "stack_out": []
    },
    "2066": {
      "retsub": true,
      "op": "retsub"
    },
    "2067": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_renounce_ownership",
      "params": {},
      "block": "arc88_renounce_ownership",
      "stack_in": [],
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "2070": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2072": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2073": {
      "op": "bytec_0 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "2074": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2075": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2076": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2077": {
      "error": "not_owner",
      "op": "assert // not_owner",
      "stack_out": []
    },
    "2078": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2079": {
      "op": "bytec_0 // \"arc88_o\"",
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "2080": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "previous#0"
      ],
      "stack_out": [
        "previous#0",
        "maybe_exists%1#0"
      ]
    },
    "2081": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "previous#0"
      ]
    },
    "2082": {
      "op": "bytec_0 // \"arc88_o\"",
      "stack_out": [
        "previous#0",
        "\"arc88_o\""
      ]
    },
    "2083": {
      "op": "bytec_2 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "\"arc88_o\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "previous#0"
      ],
      "stack_out": [
        "previous#0",
        "\"arc88_o\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "2084": {
      "op": "app_global_put",
      "stack_out": [
        "previous#0"
      ]
    },
    "2085": {
      "op": "pushbytes 0x346aa166 // method \"arc88_OwnershipRenounced(address)\"",
      "defined_out": [
        "Method(arc88_OwnershipRenounced(address))",
        "previous#0"
      ],
      "stack_out": [
        "previous#0",
        "Method(arc88_OwnershipRenounced(address))"
      ]
    },
    "2091": {
      "op": "swap",
      "stack_out": [
        "Method(arc88_OwnershipRenounced(address))",
        "previous#0"
      ]
    },
    "2092": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "2093": {
      "op": "log",
      "stack_out": []
    },
    "2094": {
      "retsub": true,
      "op": "retsub"
    },
    "2095": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_transfer_ownership_request",
      "params": {
        "pending#0": "bytes"
      },
      "block": "arc88_transfer_ownership_request",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2098": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "2101": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2103": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2104": {
      "op": "bytec_0 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "2105": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2106": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2107": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2108": {
      "error": "not_owner",
      "op": "assert // not_owner",
      "stack_out": []
    },
    "2109": {
      "op": "frame_dig -1",
      "defined_out": [
        "pending#0 (copy)"
      ],
      "stack_out": [
        "pending#0 (copy)"
      ]
    },
    "2111": {
      "op": "bytec_2 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "pending#0 (copy)"
      ],
      "stack_out": [
        "pending#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "2112": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2113": {
      "error": "zero_address_not_allowed",
      "op": "assert // zero_address_not_allowed",
      "stack_out": []
    },
    "2114": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2115": {
      "op": "bytec 5 // \"arc88_po\"",
      "defined_out": [
        "\"arc88_po\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_po\""
      ]
    },
    "2117": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2118": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "2120": {
      "op": "bz arc88_transfer_ownership_request_after_if_else@3",
      "stack_out": []
    },
    "2123": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2124": {
      "op": "bytec 5 // \"arc88_po\"",
      "stack_out": [
        "0",
        "\"arc88_po\""
      ]
    },
    "2126": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2127": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2128": {
      "op": "bytec_2 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "stack_out": [
        "maybe_value%2#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "2129": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2130": {
      "op": "!",
      "defined_out": [
        "not%tmp%3#0"
      ],
      "stack_out": [
        "not%tmp%3#0"
      ]
    },
    "2131": {
      "error": "pending_transfer_exists",
      "op": "assert // pending_transfer_exists",
      "stack_out": []
    },
    "2132": {
      "block": "arc88_transfer_ownership_request_after_if_else@3",
      "stack_in": [],
      "op": "bytec 5 // \"arc88_po\"",
      "defined_out": [
        "\"arc88_po\""
      ],
      "stack_out": [
        "\"arc88_po\""
      ]
    },
    "2134": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"arc88_po\"",
        "pending#0 (copy)"
      ],
      "stack_out": [
        "\"arc88_po\"",
        "pending#0 (copy)"
      ]
    },
    "2136": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2137": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2138": {
      "op": "bytec_0 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "2139": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2140": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "2141": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%3#0",
        "pending#0 (copy)"
      ]
    },
    "2143": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2144": {
      "op": "pushbytes 0x16bf1f91 // method \"arc88_OwnershipTransferRequested(address,address)\"",
      "defined_out": [
        "Method(arc88_OwnershipTransferRequested(address,address))",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferRequested(address,address))"
      ]
    },
    "2150": {
      "op": "swap",
      "stack_out": [
        "Method(arc88_OwnershipTransferRequested(address,address))",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2151": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "2152": {
      "op": "log",
      "stack_out": []
    },
    "2153": {
      "retsub": true,
      "op": "retsub"
    },
    "2154": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_accept_ownership",
      "params": {},
      "block": "arc88_accept_ownership",
      "stack_in": [],
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "2157": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2158": {
      "op": "bytec 5 // \"arc88_po\"",
      "defined_out": [
        "\"arc88_po\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_po\""
      ]
    },
    "2160": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2161": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "2163": {
      "error": "not_pending_owner",
      "op": "assert // not_pending_owner",
      "stack_out": []
    },
    "2164": {
      "op": "txn Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "2166": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sender#0",
        "0"
      ]
    },
    "2167": {
      "op": "bytec 5 // \"arc88_po\"",
      "stack_out": [
        "sender#0",
        "0",
        "\"arc88_po\""
      ]
    },
    "2169": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2170": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "sender#0",
        "maybe_value%1#0"
      ]
    },
    "2171": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%1#0",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "maybe_value%1#0",
        "sender#0 (copy)"
      ]
    },
    "2173": {
      "op": "==",
      "defined_out": [
        "sender#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%0#0"
      ]
    },
    "2174": {
      "error": "not_pending_owner",
      "op": "assert // not_pending_owner",
      "stack_out": [
        "sender#0"
      ]
    },
    "2175": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sender#0",
        "0"
      ]
    },
    "2176": {
      "op": "bytec_0 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "2177": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "previous#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "previous#0",
        "maybe_exists%2#0"
      ]
    },
    "2178": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "sender#0",
        "previous#0"
      ]
    },
    "2179": {
      "op": "bytec_0 // \"arc88_o\"",
      "stack_out": [
        "sender#0",
        "previous#0",
        "\"arc88_o\""
      ]
    },
    "2180": {
      "op": "dig 2",
      "stack_out": [
        "sender#0",
        "previous#0",
        "\"arc88_o\"",
        "sender#0 (copy)"
      ]
    },
    "2182": {
      "op": "app_global_put",
      "stack_out": [
        "sender#0",
        "previous#0"
      ]
    },
    "2183": {
      "op": "bytec 5 // \"arc88_po\"",
      "stack_out": [
        "sender#0",
        "previous#0",
        "\"arc88_po\""
      ]
    },
    "2185": {
      "op": "bytec_2 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "\"arc88_po\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "previous#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "previous#0",
        "\"arc88_po\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "2186": {
      "op": "app_global_put",
      "stack_out": [
        "sender#0",
        "previous#0"
      ]
    },
    "2187": {
      "op": "swap",
      "stack_out": [
        "previous#0",
        "sender#0"
      ]
    },
    "2188": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2189": {
      "op": "pushbytes 0xf7e36b37 // method \"arc88_OwnershipTransferAccepted(address,address)\"",
      "defined_out": [
        "Method(arc88_OwnershipTransferAccepted(address,address))",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferAccepted(address,address))"
      ]
    },
    "2195": {
      "op": "dig 1",
      "defined_out": [
        "Method(arc88_OwnershipTransferAccepted(address,address))",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%2#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferAccepted(address,address))",
        "encoded_tuple_buffer%2#0 (copy)"
      ]
    },
    "2197": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "event%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "event%0#0"
      ]
    },
    "2198": {
      "op": "log",
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2199": {
      "op": "bytec 16 // method \"arc88_OwnershipTransferred(address,address)\"",
      "defined_out": [
        "Method(arc88_OwnershipTransferred(address,address))",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferred(address,address))"
      ]
    },
    "2201": {
      "op": "swap",
      "stack_out": [
        "Method(arc88_OwnershipTransferred(address,address))",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2202": {
      "op": "concat",
      "defined_out": [
        "event%1#0"
      ],
      "stack_out": [
        "event%1#0"
      ]
    },
    "2203": {
      "op": "log",
      "stack_out": []
    },
    "2204": {
      "retsub": true,
      "op": "retsub"
    },
    "2205": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_cancel_ownership_request",
      "params": {},
      "block": "arc88_cancel_ownership_request",
      "stack_in": [],
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "2208": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2210": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2211": {
      "op": "bytec_0 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "2212": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2213": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2214": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2215": {
      "error": "not_owner",
      "op": "assert // not_owner",
      "stack_out": []
    },
    "2216": {
      "op": "bytec 5 // \"arc88_po\"",
      "defined_out": [
        "\"arc88_po\""
      ],
      "stack_out": [
        "\"arc88_po\""
      ]
    },
    "2218": {
      "op": "bytec_2 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "\"arc88_po\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ],
      "stack_out": [
        "\"arc88_po\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "2219": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2220": {
      "retsub": true,
      "op": "retsub"
    }
  }
}