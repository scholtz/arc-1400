{
  "version": 3,
  "sources": [
    "C:/Users/scholtz/source/repos/scholtz/arc-1400/projects/arc-1400/smart_contracts/security_token/arc1410.algo.ts",
    "C:/Users/scholtz/source/repos/scholtz/arc-1400/projects/arc-1400/smart_contracts/security_token/arc1594.algo.ts",
    "C:/Users/scholtz/source/repos/scholtz/arc-1400/projects/arc-1400/smart_contracts/security_token/arc200.algo.ts",
    "C:/Users/scholtz/source/repos/scholtz/arc-1400/projects/arc-1400/smart_contracts/security_token/arc88.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACiBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AEqFG;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AF5DH;;;AE4DG;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AFxCH;;;AEwCG;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AFhCH;;;AEgCG;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AFvBH;;;AEuBG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AD8IA;;AAAA;AAAA;AAAA;;AAAA;AD/JH;;;AAAA;;;AC+JG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;ADnJH;;;AAAA;;;ACmJG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;ADlIH;;;AAAA;;;AAAA;;;ACkIG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;ADzGH;;;ACyGG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA1BA;;AAAA;AAAA;AAAA;;AAAA;ADtCH;;;AAAA;;;AAAA;;;AAAA;;;ACsCG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AF+WA;;AAAA;AAAA;AAAA;;AAAA;ACrZH;;;AAAA;;;AAAA;;;AAAA;;;ADqZG;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;ACtYH;;;AAAA;;;AAAA;;;ADsYG;;;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;AC7WH;;;AAAA;;;AAAA;;;AAAA;;;AD6WG;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;ACjWH;;;AAAA;;;AAAA;;;ADiWG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;ACrVH;;;AAAA;;;AAAA;;;AAAA;;;ADqVG;;;AAAA;;AAzLA;;AAAA;AAAA;AAAA;;AAAA;AC5JH;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AD4JG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA9BA;;AAAA;AAAA;AAAA;;AAAA;AC9HH;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AD8HG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;ACrHH;;;AAAA;;;AAAA;;;ADqHG;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AC9GH;;;AAAA;;;AAAA;;;AD8GG;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AChGH;;;AAAA;;;AAAA;;;ADgGG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;ACzFH;;;AAAA;;;ADyFG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AC3EH;;;AAAA;;;AAAA;;;AAAA;;;AD2EG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AC5DH;;;AAAA;;;AD4DG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;ACnDH;;;AAAA;;;ADmDG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;ACcA;;AAAA;AAAA;AAAA;;AAAA;AAjEH;;;AAAA;;;AAAA;;;AAAA;;;AAiEG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAjDH;;;AAAA;;;AAAA;;;AAiDG;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAxCH;;;AAAA;;;AAAA;;;AAwCG;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAjCH;;;AAAA;;;AAiCG;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA3BH;;;AAAA;;;AA2BG;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AArBH;;;AAqBG;;;AAAA;;AArBH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAiBoD;;AAAzC;;;;AAAkD;AAAW;AAA7D;AAAP;;AAIF;;;AAEE;;;AArB6C;;AAsB7C;;AAAA;;AAGF;;;AAEE;;;AAxB2D;;AAAA;;AAAA;AAyB3D;;AAAA;;AAGF;;;AAEE;;;AA7BmE;;AAAA;;AAAA;AA8BnE;;AAAA;;AAIF;;;AAEE;;;AACO;;AAAgB;;AAAhB;AAAP;AAEA;;AAAoC;AAApC;;AAAA;;AAAA;;;AACc;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAd;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;AAGF;;;;;;AAEsC;;AAA9B;AACC;;AAAA;AAAA;;;AAAmB;;AAAA;;;;AAA4B;AAAW;AAAvC;AAAnB;;;;AAAP;AACO;;AAAgB;;AAAhB;AAAP;AAEgB;;AAAoD;AAApD;ADhB2D;;AAAA;AAAA;AAAA;AAAA;;ACiB3C;AAAA;;AAAzB;;;AAA4D;;AAAA;AAAA;AAAzB;;AAAA;AAAnC;;;;AAAP;AAC4E;;AAAA;AAAA;AAAA;AAAzB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAjC;ACtBuD;;AAAA;;AAAA;AAAA;AAAA;;ADuB5B;AAAA;;AAApB;;;AAAkD;;AAAA;AAAA;AAApB;;AAAA;AAA9B;;;;AAAP;AACkE;;AAAA;AAAA;AAAA;AAApB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA5B;AC1BgD;AAAA;AAAA;AAAA;AD2BL;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AC3BuB;AD2BhD;AAAA;AACe;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAf;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAIF;;;;;;AAQa;;AAAP;AAvEyC;AAAA;;AAyE/B;AAAA;;AAAV;;;AAzEyC;AAAA;;AAAA;AAAA;AAyEH;AAAW;AAA3B;;;;;AAAtB;;;AACK;;;;;;;;;;;;;;;;;AAGA;AAAA;;;;AAAT;;;AA1E2D;;AAAA;;AAAA;AAAA;AAAA;;AA2ErC;AAAA;;AAAhB;;;AAAyC;;AAAA;AAAA;AAAM;AAA/C;;;AAAoE;;;;;;;;;;AAAP;;;;;;;;;;;AAE1D;AAAA;;;;AAAT;;;AA7E2D;;AAAA;;AAAA;AAAA;AAAA;;AA8EvC;AAAA;;AAAd;;;AAAqC;;AAAA;AAAA;AAAM;AAA3C;;;AAAgE;;;;;;;;;;AAAP;;;;;;;;;;;AAGtD;AAAA;;;;AAAT;;;AACM;;AAAkB;;AAAlB;AAAJ;;;AAAiC;;;;;;;;;;AAAP;;;;;;;;;;;AAEnB;AAAA;;;;AAAT;;;ACtDuD;;AAAA;;AAAA;AAAA;AAAA;;ADuD5B;AAAA;;AAArB;;;AAAmD;;AAAA;AAAA;AAApB;;AAAA;AAA/B;;;AACK;;;;;;;;;;AAAP;;;;;;;;;;;AAIK;AAAA;;;;AAAT;;;AAzFmE;;AAAA;;AAAA;AAAA;AAAA;;AA0FtC;AAAA;;;;;;AAAvB;;;AAAwC;;AAAgC;;AAAA;AAAA;AAAM;AAA7C;;;;;AAAjC;;;AACK;;;;;;;;;;;;;;AAMX;;AAAA;ADpDF;;;AAEc;;AAAA;;AAAA;AAd+D;;AAAA;AAAA;AAkB/C;AAAA;AAA5B;AAGF;;;AAGyB;;AACrB;AAFF;;AAIE;AAJF;;AAME;;AANF;;;AAQ2C;;AAApC;;AAAA;;AAAA;;;AAAP;AAKF;;;AAOsC;;AAEhC;;AAAA;;AAAoB;;;AACxB;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AACA;AAGF;;;AAEc;;AAAA;;AAAA;AAjDD;;AAAA;AAAA;AAAA;AAkD8B;AAAA;;AAArC;;;AAAoD;;AAAP;AAAA;AACN;;AAAA;AAAA;AAA3C;AAAA;AAGF;;;;;;AAEM;;AAAA;;AAAA;AAAJ;;;AAAgC;;AAAP;;AAAA;AACR;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAvDoD;;AAAA;AAAA;AAAA;AAAA;;AAwDxC;AAAA;;AAAzB;;;AAA4D;;AAAA;AAAA;AAAM;AAAW;AAA1C;AAAnC;;;AACK;;AAAP;;AAAA;AAEgB;;AAAyE;AAAzE;AA3DmD;;AAAA;AAAA;AAAA;AAAA;;AA4DvC;AAAA;;AAA1B;;;AAA8D;;AAAA;AAAA;AAAM;AAAW;AAA3C;AAApC;;;AACK;;AAAP;;AAAA;AAEK;;AAAP;;AAAA;AAGF;;;AAE8B;;AAArB;;AAAA;AAAP;AACY;;AAAA;;AAAA;AAAA;;AAAA;AArEyD;;AAAA;AAAA;AAsEzC;;AAA5B;;AAGF;;;AAE8B;;AAArB;;AAAA;AAAP;AACY;;AAAA;;AAAA;AAAA;;AAAA;AA5EyD;;AAAA;AAAA;AAAA;AA6E7C;AAAA;;AAAxB;;;AACsB;;AAAA;;;AAIxB;;;;AAQsC;;AAEnB;;AAFX;;AAEW;;AAAA;;;;AAAkD;AAAW;AAA7D;AAAb;;AAEA;;;AAEW;;AAAA;;AAAA;AAAA;;AAAA;AA/FiF;;AAAA;AAAA;AAAA;AAAA;;AAgGrD;AAAA;;AAAzC;;;AACyD;;AAAA;AAAA;AAAA;AAChD;AAAA;;AAAA;AAAP;AACa;AAAb;;AAG+D;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA7C;;;;;;;AAGJ;AACI;;AAAA;;AAAoB;;;AACxB;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AACA;;AAAA;AAGF;;;;;;;;AA6EyB;;AAAA;;AAAA;AAlMoD;;AAAA;AAAA;AAAA;AAkMgB;AAAA;;AArEvF;;;AACK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;;AAAA;AAOkF;;AAAA;AAAA;AAAlF;;AAAA;AADF;;;AAGS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;;AAAA;AAOE;;AAAO;AAAP;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;;AAAA;AAQI;;AAAkC;AAAlC;;AACF;;AAAA;AAAJ;;;AACmB;;AAAA;;AAAA;;AAAA;;;;AAAsD;AAAW;AAAjE;AAAb;AAAA;;;;;AACA;;;AACW;;AAAA;;AAAA;AAAA;;AAAA;AArJ+E;;AAAA;AAAA;AAAA;AAAA;;AAsJnD;AAAA;;;;;;AAAzC;;;AACyD;;AAAA;AAAA;AACnD;;AAAA;AAAJ;;;AACe;AAAb;;;;;;;;AAIF;;;AACK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;;AAAA;AAQA;;AAAA;;AAAoB;;;AAEjB;;;;;AAAA;AAAA;AAEG;;;;;;;;;;;AAFH;AAAP;;AAAA;AAYF;;;AAC0B;AACJ;;AAAA;;AAAA;AA5LuD;;AAAA;AAAA;AA4Le;AAAA;;AAA1F;;;;;;;AAGA;;AAAA;AAAA;AAgBF;;;;;;;;;;AA9MqF;;;;;;AAAA;;AAAA;AAAA;AAgNrC;AAAA;;AAA1C;;;AACF;;AAFS;;AAET;AAEwD;;AAAA;AAAA;AAAA;;AAAA;AAC9C;AAAR;;AALO;;AAMF;;AAAwB;;AAAA;AAAA;AAAA;;AAAkB;;AAAA;AAAA;AAAA;;AAA1B;AAAzB;;;AACuB;;AAAA;;AAAA;AApNZ;;AAAA;AAAA;AAAA;AAAA;;AAwNyC;AAAA;;AAA9C;;;AACoD;;AAAA;;AAAA;AAAtD;;AAAA;AAAA;;AAAA;AAAA;AAGoE;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA1BxE;AAAA;AAAA;;;;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACM;;AAAA;AAAJ;;;AAAoB;AAyBpB;;;AACU;AAAR;;AAIA;;AAAA;;;AACmB;;AAAA;;AAAA;AAlOZ;;AAAA;AAAA;AAAA;AAAA;;AAsOwE;AAAA;AAAM;AAAA;AAApE;AACJ;AAAS;;AAApB;AAAJ;;;AAGoD;;AAAA;AAAA;AAAA;AADG;;;AAEnD;;AAAA;;AAAA;AAFmD;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAArD;;AAAA;;AAAA;;AAKqC;;AAAkB;AAAlB;AAAjB;AACpB;;AAAA;;AAAA;AACwB;;AAAA;AAAA;AAIiC;;AAAA;;AAAA;AApPlD;;AAAA;;AAAA;AAoPP;AAAA;;AAAA;AAAA;;AAjCkF;;AAAiB;AAAjB;AAAjB;AAAA;;;;;;;;;;;;;;AAd9D;AAuBD;;;AAsCR;;;;;AAQS;;AAAgB;;AAAhB;AAAP;AAEgB;;AAAA;;AAAA;AA/Q2D;;AAAA;AAAA;AAAA;AAgR7C;AAAA;;AAA1B;;;AACF;;AAAiC;AAAjC;AAE0E;;AAAA;AAAA;AAAA;AAAzB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAjC;AAKE;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAFF;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAYI;;AAAA;;AAAA;AAAJ;;;AACE;;AAAA;;AAAA;;;AAIY;;AAAA;;AAAA;AAvS6D;;AAAA;AAAA;AAAA;AAAA;;AAwS/C;AAAA;;AAAxB;;;AACF;;AAA+B;AAA/B;AAEsE;;AAAA;AAAA;AAAA;AAAvB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA/B;;AAGF;;;AAO8B;;AAArB;;AAAA;AAAP;AACY;;AAAA;;AAAA;AAAA;;AAAA;AAhToF;;AAAA;AAAA;AAiThG;;AAAA;;AAGF;;;;AAMM;;AAAA;;AAAA;AAAJ;;;AAAgC;;AAAP;AAAA;AACb;;AAAA;;AAAA;AAAA;;AAAA;AA3ToF;;AAAA;AAAA;AAAA;AAAA;;AA4TvD;AAAA;;AAArC;;;AAAoD;;AAAP;AAAA;AACQ;;AAAA;AAAA;AAAe;;AAAnD;AAAd;;AAAA;AAAA;;AAAA;AAAP;AAAA;AAGF;;;;;AAOkD;;AAAzC;;;;AAAkD;AAAW;AAA7D;AAAP;AACO;;AAAgB;;AAAhB;AAAP;AAEc;;AAAA;;AAAA;AAAA;AAhV6D;;AAAA;AAAA;AAAA;AAiV/C;AAAA;;AAAxB;;;AACF;;AAA+B;AAA/B;AACA;;AAAA;;AAAA;;;AAEsE;;AAAA;AAAA;AAAA;AAAvB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA/B;AEzVuD;;AAAA;;AAAA;AAAA;AAAA;;AF2VhC;AAAA;;AAAnB;;;AACF;;AAA0B;AAA1B;AAE4D;;AAAA;AAAA;AAAA;AAAlB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA1B;AEhWgD;AAAA;AAAA;AAAA;AFiWL;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AEjWuB;AFiWhD;AAAA;AACc;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAd;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;AAGF;;;AAEoC;;AAC3B;;AAAgB;;AAAhB;AAAP;AACgB;AAAA;;AAAA;AAAA;AAAA;;AAnW2D;;AAAA;AAAA;AAoW3C;AAAA;AAAA;;AAAhC;AACgC;AAAA;AAAA;AAAzB;;AAAA;AAAP;AAC4E;AAAA;AAAA;AAAzB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAjC;AE1WuD;;AAAA;AAAA;AAAA;AF4W5B;AAAA;;AAApB;;;AAAkD;;AAAA;AAAA;AAApB;;AAAA;AAA9B;;;;AAAP;AACkE;;AAAA;AAAA;AAAA;AAApB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA5B;AE/WgD;AAAA;AAAA;AAAA;AFgXL;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AEhXuB;AFgXhD;AAAA;AACe;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAf;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAGF;;;;;;AAOsC;;AAEnB;;AAFX;;AAEW;;AAAA;;;;AAAkD;AAAW;AAA7D;AAAb;;AACA;;;AACW;;AAAA;;AAAA;AAAA;;AAAA;AAnXiF;;AAAA;AAAA;AAAA;AAAA;;AAoXrD;AAAA;;AAAzC;;;AACyD;;AAAA;AAAA;AAAA;AAChD;AAAA;;AAAA;AAAP;AACa;AAAb;;AAC+D;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA7C;;;;;;;AAGJ;AAEgB;;AAAA;;AAAA;AAAA;AAAA;;AAnY2D;;AAAA;AAAA;AAoY3C;AAAA;AAAA;;AAAhC;AACgC;AAAA;AAAA;AAAzB;;AAAA;AAAP;AAC4E;AAAA;AAAA;AAAzB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAjC;AE1YuD;;AAAA;;AAAA;AAAA;AAAA;;AF2Y5B;AAAA;;AAApB;;;AAAkD;;AAAA;AAAA;AAApB;;AAAA;AAA9B;;;;AAAP;AACkE;;AAAA;AAAA;AAAA;AAApB;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA5B;AE9YgD;AAAA;AAAA;AAAA;AF+YL;;AAAA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AE/YuB;AF+YhD;AAAA;AACe;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAf;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AE3YF;;;AAEa;;AAAkB;;AAAtB;AAAP;AACY;;AAAA;;;AAAO;AAAnB;AAAA;AAC6B;AAAtB;AAAP;AACc;;AAAA;;;AAAO;AAArB;AAAA;AAC+B;AAAxB;AAAP;AAXgD;AAAA;AAYvB;AAAA;;AAAlB;AAAP;AAxB6C;;;AA0B7C;;AAAA;AAtB+C;;;AAuB/C;;AAAA;AAfgD;AAgBhD;;AAAA;AApB2C;;;AAqB3C;;AAAA;AAC+B;;AAhBwB;;AAAA;;AAAA;AAkBvD;;AAAA;AAEoD;;AAA/C;AAAA;AAAA;;AAAA;AAAL;;AAAA;AAAA;AAAA;AACO;;AAAP;AAnC6C;AAAA;;;AAAA;AAAA;AA6CF;;;AAApC;AAAA;AAAA;AAAA;AAAA;AAAP;AAzC+C;AAAA;;;AAAA;AAAA;AAmDH;;;AAArC;AAAA;AAAA;AAAA;AAAA;AAAP;AA/C2C;AAAA;;;AAAA;AAAA;AAyD3C;AArDgD;AAAA;AAAA;AAAA;AA+DhD;AASF;;;AAES;;AAAA;;;AAAP;AAuBF;;;AAEkC;;AAC1B;;AAAA;;AAAoB;;;AACnB;AAAA;;AAAA;AAAP;AAC2C;;AAAA;AAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9B;;AAAA;;AAAA;;;;AACO;;AAAA;;AAAA;;AAAA;;;AAAP;AAUF;;;AAEgC;;AACvB;;AAAA;;AAAA;;;AAAP;AASF;;;AAES;;AAAA;;AAAA;;;AAAP;AAGF;;;AAjIyD;;AAAA;;AAAA;AAAA;AAkI7B;AAAA;;AAAtB;;;AAAqC;AAAP;AAAA;AACN;;AAAA;AAAA;AAA5B;AAAA;AAGF;;;AACQ;;AAAiB;;;AAAjB;AACA;;AAAoB;;;AAApB;AACC;;AAAA;AAAP;AAEI;;AAAA;;AAAA;AAAJ;;;AAE6C;;AAAA;;AAAA;AAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AA7IuB;;AAAA;;AAAA;AA6IrD;AAAA;AAC8C;;AAAA;;AAAA;AAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AA9IoB;;AAAA;;AAAA;AA8IrD;AAAA;AAEG;;AAAA;;AAAA;AAAA;;AAAA;AAAL;;AAAA;AAAA;AAAA;AACO;;AAAP;;AAAA;AAEF;;;AACuC;;AAAA;;AAAA;AAAV;AAApB;AAAA;AAAA;AAAA;AAAA;AAAP;AAGF;;;AACQ;;AAAA;;AAAM;;;AAtJ0D;;;AAAA;AAAA;AAAA;AAuJ7C;AAAA;;AAArB;;;AAAoC;AAAP;AAAA;AACN;;AAAA;AAAA;AAAM;;;AAAjC;AAAA;AAGF;;;AACQ;;AAAA;;AAAM;;;AACwB;;AAAA;;AAAA;AAAA;;AAAA;AA7JkC;;;AAAA;;AAAA;AAkKtE;AAAA;AACK;;AAAA;;AAAA;AAAA;;AAAA;AAAL;;;;;;AAAA;AAAA;AAAA;AACO;;AAAP;ACxMiD;AAAA;;AAQ3B;AAAA;;AAAlB;;;AAR6C;AAAA;;AAAA;AAAA;AAQQ;AAArD;;;AAV0C;AAAA;AAW5B;AAAA;;AAAZ;;;AAXwC;AAYC;;AAA3C;AAV6C;;AAYtB;;AAAzB;;AAMF;;;AApB8C;AAAA;AAAA;AAAA;AAqB9C;AAGF;;;AAEE;;;AA1B8C;AAAA;AA2B9B;AAAA;;AAAZ;;;AAA6B;;AAAP;AA3BoB;AAAA;AAAA;AAAA;AA4BrB;AAArB;AAAJ;;;AAAoD;;AAAP;AA5BC;AAAA;AAAA;AAAA;AA6BzB;;AAAA;AAAd;;AAAA;AAAA;;AAAA;AAAP;AAIF;;;AA/BmD;AAAA;;AAiCvB;AAAA;;AAAjB;;;AAjCwC;AAAA;;AAAA;AAAA;AAiCY;AAAW;AAAlC;AAA7B;;;;AAAF;AAAP;AACO;;AAAc;AAAd;AAAP;AApC8C;AAqC9C;;AAAA;AAnCiD;;AAoCxB;;AAAzB;;;;;;AAGF;;;AAEE;;;AAC4B;;AA5CkB;AAAA;AAAA;AAAA;AA4CvC;AAAP;AACO;;AAAc;AAAd;AAAP;AA7C8C;AAAA;AAAA;AAAA;AAAA;AA+C9C;;AAAA;AACK;;AAAA;AAAL;;AAAA;AAAA;AAAA;;AAKA;;;AAC4B;;AAtDkB;AAAA;AAAA;AAAA;AAsDvC;AAAP;AAtD8C;AAAA;AAAA;AAAA;AAAA;AAwD3B;AAAnB;AACA;;;;;;AAAA;AAAA;AAAA;;AAIF;;;AAEE;;;AAC4B;;AAhEkB;AAAA;AAAA;AAAA;AAgEvC;AAAP;AACO;;AAAY;AAAZ;AAAP;AAhEqD;AAAA;;AAiE/B;AAAA;;AAAlB;;;AAjEiD;AAAA;;AAAA;AAAA;AAiES;AAA5B;AAA9B;AAAA;AAjEiD;;AAoErD;;AAAA;AArE8C;AAAA;AAAA;AAAA;AAsEzC;;AAAA;AAAL;;;;;;AAAA;AAAA;AAAA;;AAKA;;;AA1EqD;AAAA;;AA2E5B;AAAA;;AAAzB;AACoC;;AA5EiB;AAAA;;AAAA;AAAA;AA6E9C;;AAAA;AAAP;AA9E8C;AAAA;AAAA;AAAA;AAAA;AAgF9C;;AAAA;AA/EqD;;AAgF3B;AAA1B;AACK;AAAA;AAAL;;;;;;AAAA;;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;;AAKA;;;AAC4B;;AAzFkB;AAAA;AAAA;AAAA;AAyFvC;AAAP;AAxFqD;;AAyF3B;AAA1B;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 32 8"
    },
    "7": {
      "op": "bytecblock 0x0000000000000000000000000000000000000000000000000000000000000000 0x151f7c75 \"arc88_o\" \"t\" \"p\" \"b\" 0x80 \"arc88_po\" 0x0002 0x00 \"arc88_oi\" \"opa\" \"hp_a\" \"op\" \"hlt\" \"kyc\" 0x0000000000000000 0x01 0x0001 0x0062 \"lku\" 0x0042 0x0000 0x5c27b4fc 0x7983c35c 0x4355d2ad"
    },
    "148": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "150": {
      "op": "bz main_bare_routing@44",
      "stack_out": []
    },
    "153": {
      "op": "pushbytess 0x77d8245c 0xacb526ec 0x7d696ace 0x0130599b 0x24bf167e 0x3fa506a9 0x35f8135f 0xda7025b9 0x3f256713 0x95b4f9e3 0x80cc49ab 0x07962165 0xe78961da 0xfd9480d7 0xb1b1d69a 0xc1bed789 0x3bfe1833 0x599cd1a5 0x6de94166 0x28f023d7 0x975382e2 0x657d13ec 0xb6ae1a25 0x84ec13d5 0xec996041 0x82e573c4 0x4a968f8f 0xb5422125 0xbbb319f3 0x0702654e 0xd015724e 0x029fecc0 0x7349334e 0xdb7c82ef 0xfd2c2c6e 0x42a5f065 0xad4f68ea // method \"arc1594_set_halt(uint64)void\", method \"arc1594_set_kyc(address,uint64)void\", method \"arc1594_set_lockup(address,uint64)void\", method \"arc1594_issue(address,uint256,byte[])void\", method \"arc1594_redeem(address,uint256,byte[])void\", method \"arc1594_validate_transfer(address,address,uint256,byte[])uint64\", method \"arc1410_balance_of_partition(address,address)uint256\", method \"arc200_transfer(address,uint256)bool\", method \"arc1410_transfer_by_partition(address,address,uint256,byte[])address\", method \"arc1410_partitions_of(address,uint64)address[]\", method \"arc1410_is_operator(address,address,address)bool\", method \"arc1410_authorize_operator(address,address,address)void\", method \"arc1410_revoke_operator(address,address,address)void\", method \"arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address\", method \"arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address)\", method \"arc1410_authorize_operator_by_portion(address,address,address,uint256)void\", method \"arc1410_is_operator_by_portion(address,address,address)bool\", method \"arc1410_issue_by_partition(address,address,uint256,byte[])void\", method \"arc1410_redeem_by_partition(address,uint256,byte[])void\", method \"arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void\", method \"bootstrap(byte[],byte[],uint8,uint256)bool\", method \"arc200_name()byte[32]\", method \"arc200_symbol()byte[8]\", method \"arc200_decimals()uint8\", method \"arc200_totalSupply()uint256\", method \"arc200_balanceOf(address)uint256\", method \"arc200_transferFrom(address,address,uint256)bool\", method \"arc200_approve(address,uint256)bool\", method \"arc200_allowance(address,address)uint256\", method \"arc88_owner()address\", method \"arc88_is_owner(address)bool\", method \"arc88_initialize_owner(address)void\", method \"arc88_transfer_ownership(address)void\", method \"arc88_renounce_ownership()void\", method \"arc88_transfer_ownership_request(address)void\", method \"arc88_accept_ownership()void\", method \"arc88_cancel_ownership_request()void\"",
      "defined_out": [
        "Method(arc1410_authorize_operator(address,address,address)void)",
        "Method(arc1410_authorize_operator_by_portion(address,address,address,uint256)void)",
        "Method(arc1410_balance_of_partition(address,address)uint256)",
        "Method(arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address))",
        "Method(arc1410_is_operator(address,address,address)bool)",
        "Method(arc1410_is_operator_by_portion(address,address,address)bool)",
        "Method(arc1410_issue_by_partition(address,address,uint256,byte[])void)",
        "Method(arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void)",
        "Method(arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address)",
        "Method(arc1410_partitions_of(address,uint64)address[])",
        "Method(arc1410_redeem_by_partition(address,uint256,byte[])void)",
        "Method(arc1410_revoke_operator(address,address,address)void)",
        "Method(arc1410_transfer_by_partition(address,address,uint256,byte[])address)",
        "Method(arc1594_issue(address,uint256,byte[])void)",
        "Method(arc1594_redeem(address,uint256,byte[])void)",
        "Method(arc1594_set_halt(uint64)void)",
        "Method(arc1594_set_kyc(address,uint64)void)",
        "Method(arc1594_set_lockup(address,uint64)void)",
        "Method(arc1594_validate_transfer(address,address,uint256,byte[])uint64)",
        "Method(arc200_allowance(address,address)uint256)",
        "Method(arc200_approve(address,uint256)bool)",
        "Method(arc200_balanceOf(address)uint256)",
        "Method(arc200_decimals()uint8)",
        "Method(arc200_name()byte[32])",
        "Method(arc200_symbol()byte[8])",
        "Method(arc200_totalSupply()uint256)",
        "Method(arc200_transfer(address,uint256)bool)",
        "Method(arc200_transferFrom(address,address,uint256)bool)",
        "Method(arc88_accept_ownership()void)",
        "Method(arc88_cancel_ownership_request()void)",
        "Method(arc88_initialize_owner(address)void)",
        "Method(arc88_is_owner(address)bool)",
        "Method(arc88_owner()address)",
        "Method(arc88_renounce_ownership()void)",
        "Method(arc88_transfer_ownership(address)void)",
        "Method(arc88_transfer_ownership_request(address)void)",
        "Method(bootstrap(byte[],byte[],uint8,uint256)bool)"
      ],
      "stack_out": [
        "Method(arc1594_set_halt(uint64)void)",
        "Method(arc1594_set_kyc(address,uint64)void)",
        "Method(arc1594_set_lockup(address,uint64)void)",
        "Method(arc1594_issue(address,uint256,byte[])void)",
        "Method(arc1594_redeem(address,uint256,byte[])void)",
        "Method(arc1594_validate_transfer(address,address,uint256,byte[])uint64)",
        "Method(arc1410_balance_of_partition(address,address)uint256)",
        "Method(arc200_transfer(address,uint256)bool)",
        "Method(arc1410_transfer_by_partition(address,address,uint256,byte[])address)",
        "Method(arc1410_partitions_of(address,uint64)address[])",
        "Method(arc1410_is_operator(address,address,address)bool)",
        "Method(arc1410_authorize_operator(address,address,address)void)",
        "Method(arc1410_revoke_operator(address,address,address)void)",
        "Method(arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address)",
        "Method(arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address))",
        "Method(arc1410_authorize_operator_by_portion(address,address,address,uint256)void)",
        "Method(arc1410_is_operator_by_portion(address,address,address)bool)",
        "Method(arc1410_issue_by_partition(address,address,uint256,byte[])void)",
        "Method(arc1410_redeem_by_partition(address,uint256,byte[])void)",
        "Method(arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void)",
        "Method(bootstrap(byte[],byte[],uint8,uint256)bool)",
        "Method(arc200_name()byte[32])",
        "Method(arc200_symbol()byte[8])",
        "Method(arc200_decimals()uint8)",
        "Method(arc200_totalSupply()uint256)",
        "Method(arc200_balanceOf(address)uint256)",
        "Method(arc200_transferFrom(address,address,uint256)bool)",
        "Method(arc200_approve(address,uint256)bool)",
        "Method(arc200_allowance(address,address)uint256)",
        "Method(arc88_owner()address)",
        "Method(arc88_is_owner(address)bool)",
        "Method(arc88_initialize_owner(address)void)",
        "Method(arc88_transfer_ownership(address)void)",
        "Method(arc88_renounce_ownership()void)",
        "Method(arc88_transfer_ownership_request(address)void)",
        "Method(arc88_accept_ownership()void)",
        "Method(arc88_cancel_ownership_request()void)"
      ]
    },
    "340": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(arc1410_authorize_operator(address,address,address)void)",
        "Method(arc1410_authorize_operator_by_portion(address,address,address,uint256)void)",
        "Method(arc1410_balance_of_partition(address,address)uint256)",
        "Method(arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address))",
        "Method(arc1410_is_operator(address,address,address)bool)",
        "Method(arc1410_is_operator_by_portion(address,address,address)bool)",
        "Method(arc1410_issue_by_partition(address,address,uint256,byte[])void)",
        "Method(arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void)",
        "Method(arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address)",
        "Method(arc1410_partitions_of(address,uint64)address[])",
        "Method(arc1410_redeem_by_partition(address,uint256,byte[])void)",
        "Method(arc1410_revoke_operator(address,address,address)void)",
        "Method(arc1410_transfer_by_partition(address,address,uint256,byte[])address)",
        "Method(arc1594_issue(address,uint256,byte[])void)",
        "Method(arc1594_redeem(address,uint256,byte[])void)",
        "Method(arc1594_set_halt(uint64)void)",
        "Method(arc1594_set_kyc(address,uint64)void)",
        "Method(arc1594_set_lockup(address,uint64)void)",
        "Method(arc1594_validate_transfer(address,address,uint256,byte[])uint64)",
        "Method(arc200_allowance(address,address)uint256)",
        "Method(arc200_approve(address,uint256)bool)",
        "Method(arc200_balanceOf(address)uint256)",
        "Method(arc200_decimals()uint8)",
        "Method(arc200_name()byte[32])",
        "Method(arc200_symbol()byte[8])",
        "Method(arc200_totalSupply()uint256)",
        "Method(arc200_transfer(address,uint256)bool)",
        "Method(arc200_transferFrom(address,address,uint256)bool)",
        "Method(arc88_accept_ownership()void)",
        "Method(arc88_cancel_ownership_request()void)",
        "Method(arc88_initialize_owner(address)void)",
        "Method(arc88_is_owner(address)bool)",
        "Method(arc88_owner()address)",
        "Method(arc88_renounce_ownership()void)",
        "Method(arc88_transfer_ownership(address)void)",
        "Method(arc88_transfer_ownership_request(address)void)",
        "Method(bootstrap(byte[],byte[],uint8,uint256)bool)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(arc1594_set_halt(uint64)void)",
        "Method(arc1594_set_kyc(address,uint64)void)",
        "Method(arc1594_set_lockup(address,uint64)void)",
        "Method(arc1594_issue(address,uint256,byte[])void)",
        "Method(arc1594_redeem(address,uint256,byte[])void)",
        "Method(arc1594_validate_transfer(address,address,uint256,byte[])uint64)",
        "Method(arc1410_balance_of_partition(address,address)uint256)",
        "Method(arc200_transfer(address,uint256)bool)",
        "Method(arc1410_transfer_by_partition(address,address,uint256,byte[])address)",
        "Method(arc1410_partitions_of(address,uint64)address[])",
        "Method(arc1410_is_operator(address,address,address)bool)",
        "Method(arc1410_authorize_operator(address,address,address)void)",
        "Method(arc1410_revoke_operator(address,address,address)void)",
        "Method(arc1410_operator_transfer_by_partition(address,address,address,uint256,byte[])address)",
        "Method(arc1410_can_transfer_by_partition(address,address,address,uint256,byte[])(byte,string,address))",
        "Method(arc1410_authorize_operator_by_portion(address,address,address,uint256)void)",
        "Method(arc1410_is_operator_by_portion(address,address,address)bool)",
        "Method(arc1410_issue_by_partition(address,address,uint256,byte[])void)",
        "Method(arc1410_redeem_by_partition(address,uint256,byte[])void)",
        "Method(arc1410_operator_redeem_by_partition(address,address,uint256,byte[])void)",
        "Method(bootstrap(byte[],byte[],uint8,uint256)bool)",
        "Method(arc200_name()byte[32])",
        "Method(arc200_symbol()byte[8])",
        "Method(arc200_decimals()uint8)",
        "Method(arc200_totalSupply()uint256)",
        "Method(arc200_balanceOf(address)uint256)",
        "Method(arc200_transferFrom(address,address,uint256)bool)",
        "Method(arc200_approve(address,uint256)bool)",
        "Method(arc200_allowance(address,address)uint256)",
        "Method(arc88_owner()address)",
        "Method(arc88_is_owner(address)bool)",
        "Method(arc88_initialize_owner(address)void)",
        "Method(arc88_transfer_ownership(address)void)",
        "Method(arc88_renounce_ownership()void)",
        "Method(arc88_transfer_ownership_request(address)void)",
        "Method(arc88_accept_ownership()void)",
        "Method(arc88_cancel_ownership_request()void)",
        "tmp%2#0"
      ]
    },
    "343": {
      "op": "match main_arc1594_set_halt_route@5 main_arc1594_set_kyc_route@6 main_arc1594_set_lockup_route@7 main_arc1594_issue_route@8 main_arc1594_redeem_route@9 main_arc1594_validate_transfer_route@10 main_arc1410_balance_of_partition_route@11 main_arc200_transfer_route@12 main_arc1410_transfer_by_partition_route@13 main_arc1410_partitions_of_route@14 main_arc1410_is_operator_route@15 main_arc1410_authorize_operator_route@16 main_arc1410_revoke_operator_route@17 main_arc1410_operator_transfer_by_partition_route@18 main_arc1410_can_transfer_by_partition_route@19 main_arc1410_authorize_operator_by_portion_route@20 main_arc1410_is_operator_by_portion_route@21 main_arc1410_issue_by_partition_route@22 main_arc1410_redeem_by_partition_route@23 main_arc1410_operator_redeem_by_partition_route@24 main_bootstrap_route@25 main_arc200_name_route@26 main_arc200_symbol_route@27 main_arc200_decimals_route@28 main_arc200_totalSupply_route@29 main_arc200_balanceOf_route@30 main_arc200_transferFrom_route@31 main_arc200_approve_route@32 main_arc200_allowance_route@33 main_arc88_owner_route@34 main_arc88_is_owner_route@35 main_arc88_initialize_owner_route@36 main_arc88_transfer_ownership_route@37 main_arc88_renounce_ownership_route@38 main_arc88_transfer_ownership_request_route@39 main_arc88_accept_ownership_route@40 main_arc88_cancel_ownership_request_route@41",
      "stack_out": []
    },
    "419": {
      "block": "main_after_if_else@48",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "420": {
      "op": "return",
      "stack_out": []
    },
    "421": {
      "block": "main_arc88_cancel_ownership_request_route@41",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%198#0"
      ],
      "stack_out": [
        "tmp%198#0"
      ]
    },
    "423": {
      "op": "!",
      "defined_out": [
        "tmp%199#0"
      ],
      "stack_out": [
        "tmp%199#0"
      ]
    },
    "424": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "425": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%200#0"
      ],
      "stack_out": [
        "tmp%200#0"
      ]
    },
    "427": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "428": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_cancel_ownership_request",
      "op": "callsub arc88_cancel_ownership_request"
    },
    "431": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "432": {
      "op": "return",
      "stack_out": []
    },
    "433": {
      "block": "main_arc88_accept_ownership_route@40",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%194#0"
      ],
      "stack_out": [
        "tmp%194#0"
      ]
    },
    "435": {
      "op": "!",
      "defined_out": [
        "tmp%195#0"
      ],
      "stack_out": [
        "tmp%195#0"
      ]
    },
    "436": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "437": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%196#0"
      ],
      "stack_out": [
        "tmp%196#0"
      ]
    },
    "439": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "440": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_accept_ownership",
      "op": "callsub arc88_accept_ownership"
    },
    "443": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "444": {
      "op": "return",
      "stack_out": []
    },
    "445": {
      "block": "main_arc88_transfer_ownership_request_route@39",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%190#0"
      ],
      "stack_out": [
        "tmp%190#0"
      ]
    },
    "447": {
      "op": "!",
      "defined_out": [
        "tmp%191#0"
      ],
      "stack_out": [
        "tmp%191#0"
      ]
    },
    "448": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "449": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%192#0"
      ],
      "stack_out": [
        "tmp%192#0"
      ]
    },
    "451": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "452": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%61#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%61#0"
      ]
    },
    "455": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_transfer_ownership_request",
      "op": "callsub arc88_transfer_ownership_request",
      "stack_out": []
    },
    "458": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "459": {
      "op": "return",
      "stack_out": []
    },
    "460": {
      "block": "main_arc88_renounce_ownership_route@38",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%186#0"
      ],
      "stack_out": [
        "tmp%186#0"
      ]
    },
    "462": {
      "op": "!",
      "defined_out": [
        "tmp%187#0"
      ],
      "stack_out": [
        "tmp%187#0"
      ]
    },
    "463": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "464": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%188#0"
      ],
      "stack_out": [
        "tmp%188#0"
      ]
    },
    "466": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "467": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_renounce_ownership",
      "op": "callsub arc88_renounce_ownership"
    },
    "470": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "471": {
      "op": "return",
      "stack_out": []
    },
    "472": {
      "block": "main_arc88_transfer_ownership_route@37",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%182#0"
      ],
      "stack_out": [
        "tmp%182#0"
      ]
    },
    "474": {
      "op": "!",
      "defined_out": [
        "tmp%183#0"
      ],
      "stack_out": [
        "tmp%183#0"
      ]
    },
    "475": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "476": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%184#0"
      ],
      "stack_out": [
        "tmp%184#0"
      ]
    },
    "478": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "479": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%60#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%60#0"
      ]
    },
    "482": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_transfer_ownership",
      "op": "callsub arc88_transfer_ownership",
      "stack_out": []
    },
    "485": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "486": {
      "op": "return",
      "stack_out": []
    },
    "487": {
      "block": "main_arc88_initialize_owner_route@36",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%178#0"
      ],
      "stack_out": [
        "tmp%178#0"
      ]
    },
    "489": {
      "op": "!",
      "defined_out": [
        "tmp%179#0"
      ],
      "stack_out": [
        "tmp%179#0"
      ]
    },
    "490": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "491": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%180#0"
      ],
      "stack_out": [
        "tmp%180#0"
      ]
    },
    "493": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "494": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%59#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%59#0"
      ]
    },
    "497": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_initialize_owner",
      "op": "callsub arc88_initialize_owner",
      "stack_out": []
    },
    "500": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "501": {
      "op": "return",
      "stack_out": []
    },
    "502": {
      "block": "main_arc88_is_owner_route@35",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%172#0"
      ],
      "stack_out": [
        "tmp%172#0"
      ]
    },
    "504": {
      "op": "!",
      "defined_out": [
        "tmp%173#0"
      ],
      "stack_out": [
        "tmp%173#0"
      ]
    },
    "505": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "506": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%174#0"
      ],
      "stack_out": [
        "tmp%174#0"
      ]
    },
    "508": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "509": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%58#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%58#0"
      ]
    },
    "512": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_is_owner",
      "op": "callsub arc88_is_owner",
      "defined_out": [
        "tmp%176#0"
      ],
      "stack_out": [
        "tmp%176#0"
      ]
    },
    "515": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%176#0"
      ],
      "stack_out": [
        "tmp%176#0",
        "0x151f7c75"
      ]
    },
    "516": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%176#0"
      ]
    },
    "517": {
      "op": "concat",
      "defined_out": [
        "tmp%177#0"
      ],
      "stack_out": [
        "tmp%177#0"
      ]
    },
    "518": {
      "op": "log",
      "stack_out": []
    },
    "519": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "520": {
      "op": "return",
      "stack_out": []
    },
    "521": {
      "block": "main_arc88_owner_route@34",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%166#0"
      ]
    },
    "523": {
      "op": "!",
      "defined_out": [
        "tmp%167#0"
      ],
      "stack_out": [
        "tmp%167#0"
      ]
    },
    "524": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "525": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%168#0"
      ]
    },
    "527": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "528": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_owner",
      "op": "callsub arc88_owner",
      "defined_out": [
        "tmp%170#0"
      ],
      "stack_out": [
        "tmp%170#0"
      ]
    },
    "531": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%170#0"
      ],
      "stack_out": [
        "tmp%170#0",
        "0x151f7c75"
      ]
    },
    "532": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%170#0"
      ]
    },
    "533": {
      "op": "concat",
      "defined_out": [
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%171#0"
      ]
    },
    "534": {
      "op": "log",
      "stack_out": []
    },
    "535": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "536": {
      "op": "return",
      "stack_out": []
    },
    "537": {
      "block": "main_arc200_allowance_route@33",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%160#0"
      ]
    },
    "539": {
      "op": "!",
      "defined_out": [
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0"
      ]
    },
    "540": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "541": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%162#0"
      ],
      "stack_out": [
        "tmp%162#0"
      ]
    },
    "543": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "544": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%56#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%56#0"
      ]
    },
    "547": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%56#0",
        "reinterpret_bytes[32]%57#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%56#0",
        "reinterpret_bytes[32]%57#0"
      ]
    },
    "550": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_allowance",
      "op": "callsub arc200_allowance",
      "defined_out": [
        "tmp%164#0"
      ],
      "stack_out": [
        "tmp%164#0"
      ]
    },
    "553": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%164#0"
      ],
      "stack_out": [
        "tmp%164#0",
        "0x151f7c75"
      ]
    },
    "554": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%164#0"
      ]
    },
    "555": {
      "op": "concat",
      "defined_out": [
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%165#0"
      ]
    },
    "556": {
      "op": "log",
      "stack_out": []
    },
    "557": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "558": {
      "op": "return",
      "stack_out": []
    },
    "559": {
      "block": "main_arc200_approve_route@32",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0"
      ]
    },
    "561": {
      "op": "!",
      "defined_out": [
        "tmp%155#0"
      ],
      "stack_out": [
        "tmp%155#0"
      ]
    },
    "562": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "563": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%156#0"
      ]
    },
    "565": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "566": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%54#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%54#0"
      ]
    },
    "569": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%54#0",
        "reinterpret_bytes[32]%55#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%54#0",
        "reinterpret_bytes[32]%55#0"
      ]
    },
    "572": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_approve",
      "op": "callsub arc200_approve",
      "defined_out": [
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%158#0"
      ]
    },
    "575": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%158#0",
        "0x151f7c75"
      ]
    },
    "576": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%158#0"
      ]
    },
    "577": {
      "op": "concat",
      "defined_out": [
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%159#0"
      ]
    },
    "578": {
      "op": "log",
      "stack_out": []
    },
    "579": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "580": {
      "op": "return",
      "stack_out": []
    },
    "581": {
      "block": "main_arc200_transferFrom_route@31",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%148#0"
      ]
    },
    "583": {
      "op": "!",
      "defined_out": [
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%149#0"
      ]
    },
    "584": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "585": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%150#0"
      ]
    },
    "587": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "588": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%51#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%51#0"
      ]
    },
    "591": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%51#0",
        "reinterpret_bytes[32]%52#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%51#0",
        "reinterpret_bytes[32]%52#0"
      ]
    },
    "594": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%51#0",
        "reinterpret_bytes[32]%52#0",
        "reinterpret_bytes[32]%53#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%51#0",
        "reinterpret_bytes[32]%52#0",
        "reinterpret_bytes[32]%53#0"
      ]
    },
    "597": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_transferFrom",
      "op": "callsub arc200_transferFrom",
      "defined_out": [
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%152#0"
      ]
    },
    "600": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%152#0",
        "0x151f7c75"
      ]
    },
    "601": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%152#0"
      ]
    },
    "602": {
      "op": "concat",
      "defined_out": [
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%153#0"
      ]
    },
    "603": {
      "op": "log",
      "stack_out": []
    },
    "604": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "605": {
      "op": "return",
      "stack_out": []
    },
    "606": {
      "block": "main_arc200_balanceOf_route@30",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "608": {
      "op": "!",
      "defined_out": [
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0"
      ]
    },
    "609": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "610": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0"
      ]
    },
    "612": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "613": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%50#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%50#0"
      ]
    },
    "616": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_balanceOf",
      "op": "callsub arc200_balanceOf",
      "defined_out": [
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0"
      ]
    },
    "619": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0",
        "0x151f7c75"
      ]
    },
    "620": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%146#0"
      ]
    },
    "621": {
      "op": "concat",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0"
      ]
    },
    "622": {
      "op": "log",
      "stack_out": []
    },
    "623": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "624": {
      "op": "return",
      "stack_out": []
    },
    "625": {
      "block": "main_arc200_totalSupply_route@29",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0"
      ]
    },
    "627": {
      "op": "!",
      "defined_out": [
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0"
      ]
    },
    "628": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "629": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%138#0"
      ]
    },
    "631": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "632": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_totalSupply",
      "op": "callsub arc200_totalSupply",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0"
      ]
    },
    "635": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0",
        "0x151f7c75"
      ]
    },
    "636": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%140#0"
      ]
    },
    "637": {
      "op": "concat",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "638": {
      "op": "log",
      "stack_out": []
    },
    "639": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "640": {
      "op": "return",
      "stack_out": []
    },
    "641": {
      "block": "main_arc200_decimals_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "643": {
      "op": "!",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "644": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "645": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%132#0"
      ]
    },
    "647": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "648": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_decimals",
      "op": "callsub arc200_decimals",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "651": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0",
        "0x151f7c75"
      ]
    },
    "652": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%134#0"
      ]
    },
    "653": {
      "op": "concat",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "654": {
      "op": "log",
      "stack_out": []
    },
    "655": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "656": {
      "op": "return",
      "stack_out": []
    },
    "657": {
      "block": "main_arc200_symbol_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0"
      ]
    },
    "659": {
      "op": "!",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "660": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "661": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "663": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "664": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_symbol",
      "op": "callsub arc200_symbol",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "667": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0",
        "0x151f7c75"
      ]
    },
    "668": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%128#0"
      ]
    },
    "669": {
      "op": "concat",
      "defined_out": [
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0"
      ]
    },
    "670": {
      "op": "log",
      "stack_out": []
    },
    "671": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "672": {
      "op": "return",
      "stack_out": []
    },
    "673": {
      "block": "main_arc200_name_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "675": {
      "op": "!",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "676": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "677": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "679": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "680": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_name",
      "op": "callsub arc200_name",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "683": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0",
        "0x151f7c75"
      ]
    },
    "684": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%122#0"
      ]
    },
    "685": {
      "op": "concat",
      "defined_out": [
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0"
      ]
    },
    "686": {
      "op": "log",
      "stack_out": []
    },
    "687": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "688": {
      "op": "return",
      "stack_out": []
    },
    "689": {
      "block": "main_bootstrap_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "691": {
      "op": "!",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "692": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "693": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "695": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "696": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "699": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%114#0",
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%114#0",
        "tmp%115#0"
      ]
    },
    "702": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "tmp%114#0",
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%114#0",
        "tmp%115#0",
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "705": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[32]%49#0",
        "tmp%114#0",
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%114#0",
        "tmp%115#0",
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[32]%49#0"
      ]
    },
    "708": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200.bootstrap",
      "op": "callsub bootstrap",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "711": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0",
        "0x151f7c75"
      ]
    },
    "712": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%116#0"
      ]
    },
    "713": {
      "op": "concat",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "714": {
      "op": "log",
      "stack_out": []
    },
    "715": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "716": {
      "op": "return",
      "stack_out": []
    },
    "717": {
      "block": "main_arc1410_operator_redeem_by_partition_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "719": {
      "op": "!",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "720": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "721": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "723": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "724": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%46#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%46#0"
      ]
    },
    "727": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%46#0",
        "reinterpret_bytes[32]%47#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%46#0",
        "reinterpret_bytes[32]%47#0"
      ]
    },
    "730": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%46#0",
        "reinterpret_bytes[32]%47#0",
        "reinterpret_bytes[32]%48#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%46#0",
        "reinterpret_bytes[32]%47#0",
        "reinterpret_bytes[32]%48#0"
      ]
    },
    "733": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%46#0",
        "reinterpret_bytes[32]%47#0",
        "reinterpret_bytes[32]%48#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%46#0",
        "reinterpret_bytes[32]%47#0",
        "reinterpret_bytes[32]%48#0",
        "tmp%109#0"
      ]
    },
    "736": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_operator_redeem_by_partition",
      "op": "callsub arc1410_operator_redeem_by_partition",
      "stack_out": []
    },
    "739": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "740": {
      "op": "return",
      "stack_out": []
    },
    "741": {
      "block": "main_arc1410_redeem_by_partition_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "743": {
      "op": "!",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "744": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "745": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "747": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "748": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%44#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%44#0"
      ]
    },
    "751": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%44#0",
        "reinterpret_bytes[32]%45#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%44#0",
        "reinterpret_bytes[32]%45#0"
      ]
    },
    "754": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%44#0",
        "reinterpret_bytes[32]%45#0",
        "tmp%104#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%44#0",
        "reinterpret_bytes[32]%45#0",
        "tmp%104#0"
      ]
    },
    "757": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_redeem_by_partition",
      "op": "callsub arc1410_redeem_by_partition",
      "stack_out": []
    },
    "760": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "761": {
      "op": "return",
      "stack_out": []
    },
    "762": {
      "block": "main_arc1410_issue_by_partition_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "764": {
      "op": "!",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "765": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "766": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "768": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "769": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%41#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%41#0"
      ]
    },
    "772": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%41#0",
        "reinterpret_bytes[32]%42#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%41#0",
        "reinterpret_bytes[32]%42#0"
      ]
    },
    "775": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%41#0",
        "reinterpret_bytes[32]%42#0",
        "reinterpret_bytes[32]%43#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%41#0",
        "reinterpret_bytes[32]%42#0",
        "reinterpret_bytes[32]%43#0"
      ]
    },
    "778": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%41#0",
        "reinterpret_bytes[32]%42#0",
        "reinterpret_bytes[32]%43#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%41#0",
        "reinterpret_bytes[32]%42#0",
        "reinterpret_bytes[32]%43#0",
        "tmp%99#0"
      ]
    },
    "781": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_issue_by_partition",
      "op": "callsub arc1410_issue_by_partition",
      "stack_out": []
    },
    "784": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "785": {
      "op": "return",
      "stack_out": []
    },
    "786": {
      "block": "main_arc1410_is_operator_by_portion_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "788": {
      "op": "!",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "789": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "790": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "792": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "793": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%38#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%38#0"
      ]
    },
    "796": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%38#0",
        "reinterpret_bytes[32]%39#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%38#0",
        "reinterpret_bytes[32]%39#0"
      ]
    },
    "799": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%38#0",
        "reinterpret_bytes[32]%39#0",
        "reinterpret_bytes[32]%40#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%38#0",
        "reinterpret_bytes[32]%39#0",
        "reinterpret_bytes[32]%40#0"
      ]
    },
    "802": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator_by_portion",
      "op": "callsub arc1410_is_operator_by_portion",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "805": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0",
        "0x151f7c75"
      ]
    },
    "806": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%93#0"
      ]
    },
    "807": {
      "op": "concat",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "808": {
      "op": "log",
      "stack_out": []
    },
    "809": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "810": {
      "op": "return",
      "stack_out": []
    },
    "811": {
      "block": "main_arc1410_authorize_operator_by_portion_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "813": {
      "op": "!",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "814": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "815": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "817": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "818": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%34#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%34#0"
      ]
    },
    "821": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%34#0",
        "reinterpret_bytes[32]%35#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%34#0",
        "reinterpret_bytes[32]%35#0"
      ]
    },
    "824": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%34#0",
        "reinterpret_bytes[32]%35#0",
        "reinterpret_bytes[32]%36#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%34#0",
        "reinterpret_bytes[32]%35#0",
        "reinterpret_bytes[32]%36#0"
      ]
    },
    "827": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%34#0",
        "reinterpret_bytes[32]%35#0",
        "reinterpret_bytes[32]%36#0",
        "reinterpret_bytes[32]%37#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%34#0",
        "reinterpret_bytes[32]%35#0",
        "reinterpret_bytes[32]%36#0",
        "reinterpret_bytes[32]%37#0"
      ]
    },
    "830": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_authorize_operator_by_portion",
      "op": "callsub arc1410_authorize_operator_by_portion",
      "stack_out": []
    },
    "833": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "834": {
      "op": "return",
      "stack_out": []
    },
    "835": {
      "block": "main_arc1410_can_transfer_by_partition_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "837": {
      "op": "!",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "838": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "839": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "841": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "842": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%30#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%30#0"
      ]
    },
    "845": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%30#0",
        "reinterpret_bytes[32]%31#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%30#0",
        "reinterpret_bytes[32]%31#0"
      ]
    },
    "848": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%30#0",
        "reinterpret_bytes[32]%31#0",
        "reinterpret_bytes[32]%32#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%30#0",
        "reinterpret_bytes[32]%31#0",
        "reinterpret_bytes[32]%32#0"
      ]
    },
    "851": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%30#0",
        "reinterpret_bytes[32]%31#0",
        "reinterpret_bytes[32]%32#0",
        "reinterpret_bytes[32]%33#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%30#0",
        "reinterpret_bytes[32]%31#0",
        "reinterpret_bytes[32]%32#0",
        "reinterpret_bytes[32]%33#0"
      ]
    },
    "854": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[32]%30#0",
        "reinterpret_bytes[32]%31#0",
        "reinterpret_bytes[32]%32#0",
        "reinterpret_bytes[32]%33#0",
        "tmp%82#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%30#0",
        "reinterpret_bytes[32]%31#0",
        "reinterpret_bytes[32]%32#0",
        "reinterpret_bytes[32]%33#0",
        "tmp%82#0"
      ]
    },
    "857": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_can_transfer_by_partition",
      "op": "callsub arc1410_can_transfer_by_partition",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "860": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0",
        "0x151f7c75"
      ]
    },
    "861": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%83#0"
      ]
    },
    "862": {
      "op": "concat",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "863": {
      "op": "log",
      "stack_out": []
    },
    "864": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "865": {
      "op": "return",
      "stack_out": []
    },
    "866": {
      "block": "main_arc1410_operator_transfer_by_partition_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "868": {
      "op": "!",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "869": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "870": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "872": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "873": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%26#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%26#0"
      ]
    },
    "876": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%26#0",
        "reinterpret_bytes[32]%27#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%26#0",
        "reinterpret_bytes[32]%27#0"
      ]
    },
    "879": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%26#0",
        "reinterpret_bytes[32]%27#0",
        "reinterpret_bytes[32]%28#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%26#0",
        "reinterpret_bytes[32]%27#0",
        "reinterpret_bytes[32]%28#0"
      ]
    },
    "882": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%26#0",
        "reinterpret_bytes[32]%27#0",
        "reinterpret_bytes[32]%28#0",
        "reinterpret_bytes[32]%29#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%26#0",
        "reinterpret_bytes[32]%27#0",
        "reinterpret_bytes[32]%28#0",
        "reinterpret_bytes[32]%29#0"
      ]
    },
    "885": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[32]%26#0",
        "reinterpret_bytes[32]%27#0",
        "reinterpret_bytes[32]%28#0",
        "reinterpret_bytes[32]%29#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%26#0",
        "reinterpret_bytes[32]%27#0",
        "reinterpret_bytes[32]%28#0",
        "reinterpret_bytes[32]%29#0",
        "tmp%75#0"
      ]
    },
    "888": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_operator_transfer_by_partition",
      "op": "callsub arc1410_operator_transfer_by_partition",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "891": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0",
        "0x151f7c75"
      ]
    },
    "892": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%76#0"
      ]
    },
    "893": {
      "op": "concat",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "894": {
      "op": "log",
      "stack_out": []
    },
    "895": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "896": {
      "op": "return",
      "stack_out": []
    },
    "897": {
      "block": "main_arc1410_revoke_operator_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "899": {
      "op": "!",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "900": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "901": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "903": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "904": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%23#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%23#0"
      ]
    },
    "907": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%23#0",
        "reinterpret_bytes[32]%24#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%23#0",
        "reinterpret_bytes[32]%24#0"
      ]
    },
    "910": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%23#0",
        "reinterpret_bytes[32]%24#0",
        "reinterpret_bytes[32]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%23#0",
        "reinterpret_bytes[32]%24#0",
        "reinterpret_bytes[32]%25#0"
      ]
    },
    "913": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_revoke_operator",
      "op": "callsub arc1410_revoke_operator",
      "stack_out": []
    },
    "916": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "917": {
      "op": "return",
      "stack_out": []
    },
    "918": {
      "block": "main_arc1410_authorize_operator_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "920": {
      "op": "!",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "921": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "922": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "924": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "925": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%20#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%20#0"
      ]
    },
    "928": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%20#0",
        "reinterpret_bytes[32]%21#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%20#0",
        "reinterpret_bytes[32]%21#0"
      ]
    },
    "931": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%20#0",
        "reinterpret_bytes[32]%21#0",
        "reinterpret_bytes[32]%22#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%20#0",
        "reinterpret_bytes[32]%21#0",
        "reinterpret_bytes[32]%22#0"
      ]
    },
    "934": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_authorize_operator",
      "op": "callsub arc1410_authorize_operator",
      "stack_out": []
    },
    "937": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "938": {
      "op": "return",
      "stack_out": []
    },
    "939": {
      "block": "main_arc1410_is_operator_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "941": {
      "op": "!",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "942": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "943": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "945": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "946": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%17#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%17#0"
      ]
    },
    "949": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0"
      ]
    },
    "952": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0",
        "reinterpret_bytes[32]%19#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%17#0",
        "reinterpret_bytes[32]%18#0",
        "reinterpret_bytes[32]%19#0"
      ]
    },
    "955": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator",
      "op": "callsub arc1410_is_operator",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "958": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0",
        "0x151f7c75"
      ]
    },
    "959": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%61#0"
      ]
    },
    "960": {
      "op": "concat",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "961": {
      "op": "log",
      "stack_out": []
    },
    "962": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "963": {
      "op": "return",
      "stack_out": []
    },
    "964": {
      "block": "main_arc1410_partitions_of_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "966": {
      "op": "!",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "967": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "968": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "970": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "971": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%16#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%16#0"
      ]
    },
    "974": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%16#0",
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%16#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "977": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_partitions_of",
      "op": "callsub arc1410_partitions_of",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "980": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0",
        "0x151f7c75"
      ]
    },
    "981": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%55#0"
      ]
    },
    "982": {
      "op": "concat",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "983": {
      "op": "log",
      "stack_out": []
    },
    "984": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "985": {
      "op": "return",
      "stack_out": []
    },
    "986": {
      "block": "main_arc1410_transfer_by_partition_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "988": {
      "op": "!",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "989": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "990": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "992": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "993": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%13#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%13#0"
      ]
    },
    "996": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%13#0",
        "reinterpret_bytes[32]%14#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%13#0",
        "reinterpret_bytes[32]%14#0"
      ]
    },
    "999": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%13#0",
        "reinterpret_bytes[32]%14#0",
        "reinterpret_bytes[32]%15#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%13#0",
        "reinterpret_bytes[32]%14#0",
        "reinterpret_bytes[32]%15#0"
      ]
    },
    "1002": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%13#0",
        "reinterpret_bytes[32]%14#0",
        "reinterpret_bytes[32]%15#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%13#0",
        "reinterpret_bytes[32]%14#0",
        "reinterpret_bytes[32]%15#0",
        "tmp%48#0"
      ]
    },
    "1005": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_transfer_by_partition",
      "op": "callsub arc1410_transfer_by_partition",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "1008": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "0x151f7c75"
      ]
    },
    "1009": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%49#0"
      ]
    },
    "1010": {
      "op": "concat",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "1011": {
      "op": "log",
      "stack_out": []
    },
    "1012": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1013": {
      "op": "return",
      "stack_out": []
    },
    "1014": {
      "block": "main_arc200_transfer_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "1016": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "1017": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1018": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "1020": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1021": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%11#0"
      ]
    },
    "1024": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[32]%12#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[32]%12#0"
      ]
    },
    "1027": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc200_transfer",
      "op": "callsub arc200_transfer",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "1030": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "0x151f7c75"
      ]
    },
    "1031": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%42#0"
      ]
    },
    "1032": {
      "op": "concat",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "1033": {
      "op": "log",
      "stack_out": []
    },
    "1034": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1035": {
      "op": "return",
      "stack_out": []
    },
    "1036": {
      "block": "main_arc1410_balance_of_partition_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "1038": {
      "op": "!",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "1039": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1040": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "1042": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1043": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%9#0"
      ]
    },
    "1046": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[32]%10#0"
      ]
    },
    "1049": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_balance_of_partition",
      "op": "callsub arc1410_balance_of_partition",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "1052": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "0x151f7c75"
      ]
    },
    "1053": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%36#0"
      ]
    },
    "1054": {
      "op": "concat",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "1055": {
      "op": "log",
      "stack_out": []
    },
    "1056": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1057": {
      "op": "return",
      "stack_out": []
    },
    "1058": {
      "block": "main_arc1594_validate_transfer_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "1060": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1061": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1062": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "1064": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1065": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%6#0"
      ]
    },
    "1068": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[32]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[32]%7#0"
      ]
    },
    "1071": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[32]%7#0",
        "reinterpret_bytes[32]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[32]%7#0",
        "reinterpret_bytes[32]%8#0"
      ]
    },
    "1074": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[32]%7#0",
        "reinterpret_bytes[32]%8#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[32]%7#0",
        "reinterpret_bytes[32]%8#0",
        "tmp%29#0"
      ]
    },
    "1077": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_validate_transfer",
      "op": "callsub arc1594_validate_transfer",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "1080": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "0x151f7c75"
      ]
    },
    "1081": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%30#0"
      ]
    },
    "1082": {
      "op": "concat",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "1083": {
      "op": "log",
      "stack_out": []
    },
    "1084": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1085": {
      "op": "return",
      "stack_out": []
    },
    "1086": {
      "block": "main_arc1594_redeem_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1088": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "1089": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1090": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1092": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1093": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0"
      ]
    },
    "1096": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0"
      ]
    },
    "1099": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "tmp%24#0"
      ]
    },
    "1102": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_redeem",
      "op": "callsub arc1594_redeem",
      "stack_out": []
    },
    "1105": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1106": {
      "op": "return",
      "stack_out": []
    },
    "1107": {
      "block": "main_arc1594_issue_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1109": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1110": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1111": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1113": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1114": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "1117": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0"
      ]
    },
    "1120": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "tmp%19#0"
      ]
    },
    "1123": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_issue",
      "op": "callsub arc1594_issue",
      "stack_out": []
    },
    "1126": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1127": {
      "op": "return",
      "stack_out": []
    },
    "1128": {
      "block": "main_arc1594_set_lockup_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1130": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1131": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1132": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1134": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1135": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "1138": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "1141": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_set_lockup",
      "op": "callsub arc1594_set_lockup",
      "stack_out": []
    },
    "1144": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1145": {
      "op": "return",
      "stack_out": []
    },
    "1146": {
      "block": "main_arc1594_set_kyc_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1148": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1149": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1150": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1152": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1153": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1156": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "1159": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_set_kyc",
      "op": "callsub arc1594_set_kyc",
      "stack_out": []
    },
    "1162": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1163": {
      "op": "return",
      "stack_out": []
    },
    "1164": {
      "block": "main_arc1594_set_halt_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1166": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1167": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1168": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1170": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1171": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "1174": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_set_halt",
      "op": "callsub arc1594_set_halt",
      "stack_out": []
    },
    "1177": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1178": {
      "op": "return",
      "stack_out": []
    },
    "1179": {
      "block": "main_bare_routing@44",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%202#0"
      ],
      "stack_out": [
        "tmp%202#0"
      ]
    },
    "1181": {
      "op": "bnz main_after_if_else@48",
      "stack_out": []
    },
    "1184": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%203#0"
      ],
      "stack_out": [
        "tmp%203#0"
      ]
    },
    "1186": {
      "op": "!",
      "defined_out": [
        "tmp%204#0"
      ],
      "stack_out": [
        "tmp%204#0"
      ]
    },
    "1187": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1188": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1189": {
      "op": "return",
      "stack_out": []
    },
    "1190": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594._onlyOwner",
      "params": {},
      "block": "_onlyOwner",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1192": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_is_owner",
      "op": "callsub arc88_is_owner",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1195": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "1196": {
      "op": "getbit",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1197": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "1"
      ]
    },
    "1198": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1199": {
      "error": "only_owner",
      "op": "assert // only_owner",
      "stack_out": []
    },
    "1200": {
      "retsub": true,
      "op": "retsub"
    },
    "1201": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_set_halt",
      "params": {
        "flag#0": "bytes"
      },
      "block": "arc1594_set_halt",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1204": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594._onlyOwner",
      "op": "callsub _onlyOwner"
    },
    "1207": {
      "op": "bytec 14 // \"hlt\"",
      "defined_out": [
        "\"hlt\""
      ],
      "stack_out": [
        "\"hlt\""
      ]
    },
    "1209": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"hlt\"",
        "flag#0 (copy)"
      ],
      "stack_out": [
        "\"hlt\"",
        "flag#0 (copy)"
      ]
    },
    "1211": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1212": {
      "retsub": true,
      "op": "retsub"
    },
    "1213": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_set_kyc",
      "params": {
        "account#0": "bytes",
        "flag#0": "bytes"
      },
      "block": "arc1594_set_kyc",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1216": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594._onlyOwner",
      "op": "callsub _onlyOwner"
    },
    "1219": {
      "op": "bytec 15 // \"kyc\"",
      "defined_out": [
        "\"kyc\""
      ],
      "stack_out": [
        "\"kyc\""
      ]
    },
    "1221": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"kyc\"",
        "account#0 (copy)"
      ],
      "stack_out": [
        "\"kyc\"",
        "account#0 (copy)"
      ]
    },
    "1223": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1224": {
      "op": "frame_dig -1",
      "defined_out": [
        "flag#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "flag#0 (copy)"
      ]
    },
    "1226": {
      "op": "box_put",
      "stack_out": []
    },
    "1227": {
      "retsub": true,
      "op": "retsub"
    },
    "1228": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_set_lockup",
      "params": {
        "account#0": "bytes",
        "round#0": "bytes"
      },
      "block": "arc1594_set_lockup",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1231": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594._onlyOwner",
      "op": "callsub _onlyOwner"
    },
    "1234": {
      "op": "bytec 20 // \"lku\"",
      "defined_out": [
        "\"lku\""
      ],
      "stack_out": [
        "\"lku\""
      ]
    },
    "1236": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"lku\"",
        "account#0 (copy)"
      ],
      "stack_out": [
        "\"lku\"",
        "account#0 (copy)"
      ]
    },
    "1238": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1239": {
      "op": "frame_dig -1",
      "defined_out": [
        "round#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "round#0 (copy)"
      ]
    },
    "1241": {
      "op": "box_put",
      "stack_out": []
    },
    "1242": {
      "retsub": true,
      "op": "retsub"
    },
    "1243": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_issue",
      "params": {
        "to#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1594_issue",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1246": {
      "callsub": "smart_contracts/security_token/arc1594.algo.ts::Arc1594._onlyOwner",
      "op": "callsub _onlyOwner"
    },
    "1249": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "1251": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)",
        "0x"
      ]
    },
    "1253": {
      "op": "b>",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1254": {
      "error": "invalid_amount",
      "op": "assert // invalid_amount",
      "stack_out": []
    },
    "1255": {
      "op": "frame_dig -3",
      "defined_out": [
        "to#0 (copy)"
      ],
      "stack_out": [
        "to#0 (copy)"
      ]
    },
    "1257": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "1258": {
      "op": "frame_dig -2",
      "stack_out": [
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "amount#0 (copy)"
      ]
    },
    "1260": {
      "op": "frame_dig -1",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "amount#0 (copy)",
        "data#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "amount#0 (copy)",
        "data#0 (copy)"
      ]
    },
    "1262": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_issue_by_partition",
      "op": "callsub arc1410_issue_by_partition",
      "stack_out": []
    },
    "1265": {
      "op": "frame_dig -3",
      "stack_out": [
        "to#0 (copy)"
      ]
    },
    "1267": {
      "op": "frame_dig -2",
      "stack_out": [
        "to#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "1269": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1270": {
      "op": "bytec 21 // 0x0042",
      "defined_out": [
        "0x0042",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "0x0042"
      ]
    },
    "1272": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1273": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "data#0 (copy)"
      ]
    },
    "1275": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1276": {
      "op": "bytec 8 // 0x0002",
      "defined_out": [
        "0x0002",
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "0x0002"
      ]
    },
    "1278": {
      "op": "swap",
      "stack_out": [
        "0x0002",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1279": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1280": {
      "op": "pushbytes 0xf2e998af // method \"Issue((address,uint256,byte[]))\"",
      "defined_out": [
        "Method(Issue((address,uint256,byte[])))",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "Method(Issue((address,uint256,byte[])))"
      ]
    },
    "1286": {
      "op": "swap",
      "stack_out": [
        "Method(Issue((address,uint256,byte[])))",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1287": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "1288": {
      "op": "log",
      "stack_out": []
    },
    "1289": {
      "retsub": true,
      "op": "retsub"
    },
    "1290": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_redeem",
      "params": {
        "from#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1594_redeem",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1293": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bzero%0#0"
      ]
    },
    "1294": {
      "op": "dupn 2",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0"
      ]
    },
    "1296": {
      "op": "txn Sender"
    },
    "1298": {
      "op": "dup"
    },
    "1299": {
      "op": "frame_dig -3",
      "defined_out": [
        "from#0 (copy)",
        "sender#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "sender#0",
        "from#0 (copy)"
      ]
    },
    "1301": {
      "op": "==",
      "defined_out": [
        "sender#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%0#0"
      ]
    },
    "1302": {
      "op": "bnz arc1594_redeem_bool_true@2",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ]
    },
    "1305": {
      "op": "frame_dig 3",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "sender#0"
      ]
    },
    "1307": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_is_owner",
      "op": "callsub arc88_is_owner",
      "defined_out": [
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%1#0"
      ]
    },
    "1310": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%1#0",
        "0"
      ]
    },
    "1311": {
      "op": "getbit",
      "defined_out": [
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%2#0"
      ]
    },
    "1312": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%2#0",
        "1"
      ]
    },
    "1313": {
      "op": "==",
      "defined_out": [
        "sender#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%3#0"
      ]
    },
    "1314": {
      "op": "bz arc1594_redeem_bool_false@3",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ]
    },
    "1317": {
      "block": "arc1594_redeem_bool_true@2",
      "stack_in": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "or_result%0#0"
      ]
    },
    "1318": {
      "block": "arc1594_redeem_bool_merge@4",
      "stack_in": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "or_result%0#0"
      ],
      "error": "not_auth",
      "op": "assert // not_auth",
      "defined_out": [],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ]
    },
    "1319": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "amount#0 (copy)"
      ]
    },
    "1321": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "amount#0 (copy)",
        "0x"
      ]
    },
    "1323": {
      "op": "b>",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%4#0"
      ]
    },
    "1324": {
      "error": "invalid_amount",
      "op": "assert // invalid_amount",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ]
    },
    "1325": {
      "op": "frame_dig -3",
      "defined_out": [
        "from#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "from#0 (copy)"
      ]
    },
    "1327": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "from#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "from#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "1328": {
      "op": "concat",
      "defined_out": [
        "partKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "partKey#0"
      ]
    },
    "1329": {
      "op": "bytec 4 // \"p\"",
      "defined_out": [
        "\"p\"",
        "partKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "partKey#0",
        "\"p\""
      ]
    },
    "1331": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "\"p\"",
        "partKey#0"
      ]
    },
    "1332": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0"
      ]
    },
    "1333": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "1334": {
      "op": "frame_bury 2",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0"
      ]
    },
    "1336": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1337": {
      "op": "bury 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "maybe_exists%0#0"
      ]
    },
    "1339": {
      "op": "bz arc1594_redeem_bool_false@7",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ]
    },
    "1342": {
      "op": "frame_dig 2",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0"
      ]
    },
    "1344": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1345": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "maybe_value%1#0"
      ]
    },
    "1346": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "1348": {
      "op": "b>=",
      "defined_out": [
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%7#0"
      ]
    },
    "1349": {
      "op": "bz arc1594_redeem_bool_false@7",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ]
    },
    "1352": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "and_result%0#0"
      ]
    },
    "1353": {
      "block": "arc1594_redeem_bool_merge@8",
      "stack_in": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "and_result%0#0"
      ],
      "error": "insufficient_partition",
      "op": "assert // insufficient_partition",
      "defined_out": [],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ]
    },
    "1354": {
      "op": "frame_dig 2",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0"
      ]
    },
    "1356": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "1357": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1358": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "maybe_value%2#0"
      ]
    },
    "1359": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "maybe_value%2#0",
        "amount#0 (copy)"
      ]
    },
    "1361": {
      "op": "b-",
      "defined_out": [
        "tmp%5#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "to_encode%0#0"
      ]
    },
    "1362": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "1363": {
      "op": "len",
      "defined_out": [
        "tmp%5#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "1364": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%5#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "1365": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "tmp%5#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "1366": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "to_encode%0#0"
      ]
    },
    "1367": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "1368": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "tmp%5#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "1369": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "to_encode%0#0",
        "bzero%0#0",
        "bzero%0#0"
      ]
    },
    "1370": {
      "op": "frame_bury 0",
      "defined_out": [
        "bzero%0#0",
        "tmp%5#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "1372": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%5#0",
        "arc4_encoded%0#0"
      ]
    },
    "1373": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ]
    },
    "1374": {
      "op": "bytec 5 // \"b\"",
      "defined_out": [
        "\"b\"",
        "bzero%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "\"b\""
      ]
    },
    "1376": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"b\"",
        "bzero%0#0",
        "from#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "\"b\"",
        "from#0 (copy)"
      ]
    },
    "1378": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0"
      ]
    },
    "1379": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0",
        "tmp%10#0"
      ]
    },
    "1380": {
      "op": "frame_bury 1",
      "defined_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0"
      ]
    },
    "1382": {
      "op": "box_len",
      "defined_out": [
        "bzero%0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%10#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1383": {
      "op": "bury 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "maybe_exists%3#0"
      ]
    },
    "1385": {
      "op": "bz arc1594_redeem_bool_false@11",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ]
    },
    "1388": {
      "op": "frame_dig 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0"
      ]
    },
    "1390": {
      "op": "box_get",
      "defined_out": [
        "bzero%0#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%10#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1391": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "maybe_value%4#0"
      ]
    },
    "1392": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "maybe_value%4#0",
        "amount#0 (copy)"
      ]
    },
    "1394": {
      "op": "b>=",
      "defined_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%12#0"
      ]
    },
    "1395": {
      "op": "bz arc1594_redeem_bool_false@11",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ]
    },
    "1398": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0",
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "and_result%1#0"
      ]
    },
    "1399": {
      "block": "arc1594_redeem_bool_merge@12",
      "stack_in": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "and_result%1#0"
      ],
      "error": "insufficient_balance",
      "op": "assert // insufficient_balance",
      "defined_out": [],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ]
    },
    "1400": {
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0"
      ]
    },
    "1402": {
      "op": "dup",
      "defined_out": [
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "1403": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1404": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0",
        "maybe_value%5#0"
      ]
    },
    "1405": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%5#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0",
        "maybe_value%5#0",
        "amount#0 (copy)"
      ]
    },
    "1407": {
      "op": "b-",
      "defined_out": [
        "tmp%10#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0",
        "to_encode%1#0"
      ]
    },
    "1408": {
      "op": "dup",
      "defined_out": [
        "tmp%10#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "1409": {
      "op": "len",
      "defined_out": [
        "tmp%10#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "1410": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%10#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "1411": {
      "op": "<=",
      "defined_out": [
        "len_ok%1#0",
        "tmp%10#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "1412": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0",
        "to_encode%1#0"
      ]
    },
    "1413": {
      "op": "frame_dig 0",
      "defined_out": [
        "bzero%0#0",
        "tmp%10#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0",
        "to_encode%1#0",
        "bzero%0#0"
      ]
    },
    "1415": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "bzero%0#0 (copy)",
        "tmp%10#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "tmp%10#0",
        "to_encode%1#0",
        "bzero%0#0 (copy)",
        "bzero%0#0 (copy)"
      ]
    },
    "1416": {
      "op": "cover 3",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "tmp%10#0",
        "to_encode%1#0",
        "bzero%0#0 (copy)"
      ]
    },
    "1418": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "bzero%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "tmp%10#0",
        "arc4_encoded%1#0"
      ]
    },
    "1419": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "bzero%0#0"
      ]
    },
    "1420": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "bzero%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "0"
      ]
    },
    "1421": {
      "op": "bytec_3 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0",
        "bzero%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "0",
        "\"t\""
      ]
    },
    "1422": {
      "op": "app_global_get_ex",
      "defined_out": [
        "bzero%0#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1423": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "maybe_value%6#0"
      ]
    },
    "1424": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "maybe_value%6#0",
        "amount#0 (copy)"
      ]
    },
    "1426": {
      "op": "b-",
      "defined_out": [
        "bzero%0#0",
        "tmp%10#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "to_encode%2#0"
      ]
    },
    "1427": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "tmp%10#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "1428": {
      "op": "len",
      "defined_out": [
        "bzero%0#0",
        "tmp%10#0",
        "to_encode%2#0",
        "value_len%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "to_encode%2#0",
        "value_len%2#0"
      ]
    },
    "1429": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "to_encode%2#0",
        "value_len%2#0",
        "32"
      ]
    },
    "1430": {
      "op": "<=",
      "defined_out": [
        "bzero%0#0",
        "len_ok%2#0",
        "tmp%10#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "to_encode%2#0",
        "len_ok%2#0"
      ]
    },
    "1431": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "bzero%0#0",
        "to_encode%2#0"
      ]
    },
    "1432": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%2#0",
        "bzero%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "arc4_encoded%2#0"
      ]
    },
    "1433": {
      "op": "bytec_3 // \"t\"",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "arc4_encoded%2#0",
        "\"t\""
      ]
    },
    "1434": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "\"t\"",
        "arc4_encoded%2#0"
      ]
    },
    "1435": {
      "op": "app_global_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ]
    },
    "1436": {
      "op": "frame_dig -3",
      "defined_out": [
        "bzero%0#0",
        "from#0 (copy)",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "from#0 (copy)"
      ]
    },
    "1438": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "from#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "1440": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%5#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1441": {
      "op": "bytec 21 // 0x0042",
      "defined_out": [
        "0x0042",
        "bzero%0#0",
        "encoded_tuple_buffer%5#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "encoded_tuple_buffer%5#0",
        "0x0042"
      ]
    },
    "1443": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%6#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1444": {
      "op": "frame_dig -1",
      "defined_out": [
        "bzero%0#0",
        "data#0 (copy)",
        "encoded_tuple_buffer%6#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "encoded_tuple_buffer%6#0",
        "data#0 (copy)"
      ]
    },
    "1446": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%7#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1447": {
      "op": "bytec 8 // 0x0002",
      "defined_out": [
        "0x0002",
        "bzero%0#0",
        "encoded_tuple_buffer%7#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "encoded_tuple_buffer%7#0",
        "0x0002"
      ]
    },
    "1449": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "0x0002",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1450": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%10#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "1451": {
      "op": "pushbytes 0xd7fc4a98 // method \"Redeem((address,uint256,byte[]))\"",
      "defined_out": [
        "Method(Redeem((address,uint256,byte[])))",
        "bzero%0#0",
        "encoded_tuple_buffer%10#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "encoded_tuple_buffer%10#0",
        "Method(Redeem((address,uint256,byte[])))"
      ]
    },
    "1457": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "Method(Redeem((address,uint256,byte[])))",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "1458": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "event%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "event%0#0"
      ]
    },
    "1459": {
      "op": "log",
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ]
    },
    "1460": {
      "retsub": true,
      "op": "retsub"
    },
    "1461": {
      "block": "arc1594_redeem_bool_false@11",
      "stack_in": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "and_result%1#0"
      ]
    },
    "1462": {
      "op": "b arc1594_redeem_bool_merge@12"
    },
    "1465": {
      "block": "arc1594_redeem_bool_false@7",
      "stack_in": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "and_result%0#0"
      ]
    },
    "1466": {
      "op": "b arc1594_redeem_bool_merge@8"
    },
    "1469": {
      "block": "arc1594_redeem_bool_false@3",
      "stack_in": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%10#0",
        "tmp%5#0",
        "sender#0",
        "or_result%0#0"
      ]
    },
    "1470": {
      "op": "b arc1594_redeem_bool_merge@4"
    },
    "1473": {
      "subroutine": "smart_contracts/security_token/arc1594.algo.ts::Arc1594.arc1594_validate_transfer",
      "params": {
        "from#0": "bytes",
        "to#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1594_validate_transfer",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "1476": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1477": {
      "op": "dupn 3",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0"
      ]
    },
    "1479": {
      "op": "bytec 16 // 0x0000000000000000"
    },
    "1481": {
      "op": "dup"
    },
    "1482": {
      "op": "intc_0 // 0"
    },
    "1483": {
      "op": "bytec 14 // \"hlt\"",
      "defined_out": [
        "\"hlt\"",
        "0",
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#0",
        "0",
        "\"hlt\""
      ]
    },
    "1485": {
      "op": "app_global_get_ex",
      "defined_out": [
        "code#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1486": {
      "op": "bury 1",
      "defined_out": [
        "code#0",
        "code#21",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_exists%0#0"
      ]
    },
    "1488": {
      "op": "bz arc1594_validate_transfer_after_if_else@3",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1491": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "0"
      ]
    },
    "1492": {
      "op": "bytec 14 // \"hlt\"",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "0",
        "\"hlt\""
      ]
    },
    "1494": {
      "op": "app_global_get_ex",
      "defined_out": [
        "code#0",
        "code#21",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1495": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_value%1#0"
      ]
    },
    "1496": {
      "op": "btoi",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%0#0"
      ]
    },
    "1497": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%0#0",
        "1"
      ]
    },
    "1498": {
      "op": "==",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%1#0"
      ]
    },
    "1499": {
      "op": "frame_dig 4",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%1#0",
        "code#21"
      ]
    },
    "1501": {
      "op": "frame_bury 5",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%1#0"
      ]
    },
    "1503": {
      "op": "bz arc1594_validate_transfer_after_if_else@3",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1506": {
      "op": "pushbytes 0x000000000000000e",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#21"
      ]
    },
    "1516": {
      "op": "frame_bury 5",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1518": {
      "block": "arc1594_validate_transfer_after_if_else@3",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1520": {
      "op": "dup",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "code#0"
      ]
    },
    "1521": {
      "op": "frame_bury 4",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1523": {
      "op": "dup",
      "defined_out": [
        "code#0",
        "code#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "code#0 (copy)"
      ]
    },
    "1524": {
      "op": "btoi",
      "defined_out": [
        "code#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "tmp%2#0"
      ]
    },
    "1525": {
      "op": "swap",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%2#0",
        "code#21"
      ]
    },
    "1526": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%2#0"
      ]
    },
    "1528": {
      "op": "bnz arc1594_validate_transfer_after_if_else@8",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1531": {
      "op": "bytec 15 // \"kyc\"",
      "defined_out": [
        "\"kyc\"",
        "code#0",
        "code#21"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "\"kyc\""
      ]
    },
    "1533": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"kyc\"",
        "code#0",
        "code#21",
        "from#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "\"kyc\"",
        "from#0 (copy)"
      ]
    },
    "1535": {
      "op": "concat",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%4#0"
      ]
    },
    "1536": {
      "op": "dup",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%4#0",
        "tmp%4#0"
      ]
    },
    "1537": {
      "op": "frame_bury 3",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%4#0"
      ]
    },
    "1539": {
      "op": "box_len",
      "defined_out": [
        "code#0",
        "code#21",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1540": {
      "op": "bury 1",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_exists%2#0"
      ]
    },
    "1542": {
      "op": "bz arc1594_validate_transfer_if_body@6",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1545": {
      "op": "frame_dig 3",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%4#0"
      ]
    },
    "1547": {
      "op": "box_get",
      "defined_out": [
        "code#0",
        "code#21",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1548": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_value%3#0"
      ]
    },
    "1549": {
      "op": "btoi",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%6#0"
      ]
    },
    "1550": {
      "op": "bnz arc1594_validate_transfer_after_if_else@7",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1553": {
      "block": "arc1594_validate_transfer_if_body@6",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ],
      "op": "pushbytes 0x000000000000000a",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1563": {
      "op": "frame_bury 4",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1565": {
      "block": "arc1594_validate_transfer_after_if_else@7",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "code#21"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#21"
      ]
    },
    "1567": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#21"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1569": {
      "block": "arc1594_validate_transfer_after_if_else@8",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1571": {
      "op": "dup",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "code#0"
      ]
    },
    "1572": {
      "op": "frame_bury 4",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1574": {
      "op": "dup",
      "defined_out": [
        "code#0",
        "code#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "code#0 (copy)"
      ]
    },
    "1575": {
      "op": "btoi",
      "defined_out": [
        "code#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "tmp%8#0"
      ]
    },
    "1576": {
      "op": "swap",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%8#0",
        "code#21"
      ]
    },
    "1577": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%8#0"
      ]
    },
    "1579": {
      "op": "bnz arc1594_validate_transfer_after_if_else@13",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1582": {
      "op": "bytec 15 // \"kyc\"",
      "defined_out": [
        "\"kyc\"",
        "code#0",
        "code#21"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "\"kyc\""
      ]
    },
    "1584": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"kyc\"",
        "code#0",
        "code#21",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "\"kyc\"",
        "to#0 (copy)"
      ]
    },
    "1586": {
      "op": "concat",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%10#0"
      ]
    },
    "1587": {
      "op": "dup",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%10#0",
        "tmp%10#0"
      ]
    },
    "1588": {
      "op": "frame_bury 0",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%10#0"
      ]
    },
    "1590": {
      "op": "box_len",
      "defined_out": [
        "code#0",
        "code#21",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1591": {
      "op": "bury 1",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_exists%4#0"
      ]
    },
    "1593": {
      "op": "bz arc1594_validate_transfer_if_body@11",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1596": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%10#0"
      ]
    },
    "1598": {
      "op": "box_get",
      "defined_out": [
        "code#0",
        "code#21",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1599": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_value%5#0"
      ]
    },
    "1600": {
      "op": "btoi",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%10#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%12#0"
      ]
    },
    "1601": {
      "op": "bnz arc1594_validate_transfer_after_if_else@12",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1604": {
      "block": "arc1594_validate_transfer_if_body@11",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ],
      "op": "pushbytes 0x000000000000000b",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1614": {
      "op": "frame_bury 4",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1616": {
      "block": "arc1594_validate_transfer_after_if_else@12",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "code#21"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#21"
      ]
    },
    "1618": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#21"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1620": {
      "block": "arc1594_validate_transfer_after_if_else@13",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1622": {
      "op": "dup",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "code#0"
      ]
    },
    "1623": {
      "op": "frame_bury 4",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1625": {
      "op": "dup",
      "defined_out": [
        "code#0",
        "code#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "code#0 (copy)"
      ]
    },
    "1626": {
      "op": "btoi",
      "defined_out": [
        "code#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "tmp%14#0"
      ]
    },
    "1627": {
      "op": "swap",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%14#0",
        "code#21"
      ]
    },
    "1628": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%14#0"
      ]
    },
    "1630": {
      "op": "bnz arc1594_validate_transfer_after_if_else@17",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1633": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "code#0",
        "code#21"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "amount#0 (copy)"
      ]
    },
    "1635": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "amount#0 (copy)",
        "code#0",
        "code#21"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "amount#0 (copy)",
        "0x"
      ]
    },
    "1637": {
      "op": "b==",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%16#0"
      ]
    },
    "1638": {
      "op": "bz arc1594_validate_transfer_after_if_else@16",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1641": {
      "op": "pushbytes 0x0000000000000028",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1651": {
      "op": "frame_bury 4",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1653": {
      "block": "arc1594_validate_transfer_after_if_else@16",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "code#21"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#21"
      ]
    },
    "1655": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#21"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1657": {
      "block": "arc1594_validate_transfer_after_if_else@17",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1659": {
      "op": "dup",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "code#0"
      ]
    },
    "1660": {
      "op": "frame_bury 4",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1662": {
      "op": "dup",
      "defined_out": [
        "code#0",
        "code#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "code#0 (copy)"
      ]
    },
    "1663": {
      "op": "btoi",
      "defined_out": [
        "code#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "tmp%17#0"
      ]
    },
    "1664": {
      "op": "swap",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%17#0",
        "code#21"
      ]
    },
    "1665": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%17#0"
      ]
    },
    "1667": {
      "op": "bnz arc1594_validate_transfer_after_if_else@22",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1670": {
      "op": "bytec 5 // \"b\"",
      "defined_out": [
        "\"b\"",
        "code#0",
        "code#21"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "\"b\""
      ]
    },
    "1672": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"b\"",
        "code#0",
        "code#21",
        "from#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "\"b\"",
        "from#0 (copy)"
      ]
    },
    "1674": {
      "op": "concat",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%19#0"
      ]
    },
    "1675": {
      "op": "dup",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%19#0",
        "tmp%19#0"
      ]
    },
    "1676": {
      "op": "frame_bury 1",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%19#0"
      ]
    },
    "1678": {
      "op": "box_len",
      "defined_out": [
        "code#0",
        "code#21",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1679": {
      "op": "bury 1",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_exists%6#0"
      ]
    },
    "1681": {
      "op": "bz arc1594_validate_transfer_if_body@20",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1684": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%19#0"
      ]
    },
    "1686": {
      "op": "box_get",
      "defined_out": [
        "code#0",
        "code#21",
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "1687": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_value%7#0"
      ]
    },
    "1688": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "code#0",
        "code#21",
        "maybe_value%7#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_value%7#0",
        "amount#0 (copy)"
      ]
    },
    "1690": {
      "op": "b<",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%21#0"
      ]
    },
    "1691": {
      "op": "bz arc1594_validate_transfer_after_if_else@21",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1694": {
      "block": "arc1594_validate_transfer_if_body@20",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ],
      "op": "pushbytes 0x000000000000000d",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1704": {
      "op": "frame_bury 4",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1706": {
      "block": "arc1594_validate_transfer_after_if_else@21",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "code#21"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#21"
      ]
    },
    "1708": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#21"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1710": {
      "block": "arc1594_validate_transfer_after_if_else@22",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1712": {
      "op": "dup",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "code#0"
      ]
    },
    "1713": {
      "op": "frame_bury 4",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1715": {
      "op": "dup",
      "defined_out": [
        "code#0",
        "code#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "code#0 (copy)"
      ]
    },
    "1716": {
      "op": "btoi",
      "defined_out": [
        "code#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0",
        "tmp%22#0"
      ]
    },
    "1717": {
      "op": "swap",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%22#0",
        "code#21"
      ]
    },
    "1718": {
      "op": "frame_bury 5",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%22#0"
      ]
    },
    "1720": {
      "op": "bnz arc1594_validate_transfer_after_if_else@27",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1723": {
      "op": "bytec 20 // \"lku\"",
      "defined_out": [
        "\"lku\"",
        "code#0",
        "code#21"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "\"lku\""
      ]
    },
    "1725": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"lku\"",
        "code#0",
        "code#21",
        "from#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "\"lku\"",
        "from#0 (copy)"
      ]
    },
    "1727": {
      "op": "concat",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%24#0"
      ]
    },
    "1728": {
      "op": "dup",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%24#0",
        "tmp%24#0"
      ]
    },
    "1729": {
      "op": "frame_bury 2",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%24#0"
      ]
    },
    "1731": {
      "op": "box_len",
      "defined_out": [
        "code#0",
        "code#21",
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "1732": {
      "op": "bury 1",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_exists%8#0"
      ]
    },
    "1734": {
      "op": "frame_dig 4",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_exists%8#0",
        "code#21"
      ]
    },
    "1736": {
      "op": "frame_bury 5",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "maybe_exists%8#0"
      ]
    },
    "1738": {
      "op": "bz arc1594_validate_transfer_after_if_else@27",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1741": {
      "op": "global Round",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%25#0"
      ]
    },
    "1743": {
      "op": "frame_dig 2",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%25#0",
        "tmp%24#0"
      ]
    },
    "1745": {
      "op": "box_get",
      "defined_out": [
        "code#0",
        "code#21",
        "maybe_exists%9#0",
        "maybe_value%9#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%25#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "1746": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%25#0",
        "maybe_value%9#0"
      ]
    },
    "1747": {
      "op": "btoi",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%25#0",
        "tmp%27#0"
      ]
    },
    "1748": {
      "op": "<=",
      "defined_out": [
        "code#0",
        "code#21",
        "tmp%24#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%28#0"
      ]
    },
    "1749": {
      "op": "frame_dig 4",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%28#0",
        "code#21"
      ]
    },
    "1751": {
      "op": "frame_bury 5",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "tmp%28#0"
      ]
    },
    "1753": {
      "op": "bz arc1594_validate_transfer_after_if_else@27",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1756": {
      "op": "pushbytes 0x000000000000000f",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#21"
      ]
    },
    "1766": {
      "op": "frame_bury 5",
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ]
    },
    "1768": {
      "block": "arc1594_validate_transfer_after_if_else@27",
      "stack_in": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%19#0",
        "tmp%24#0",
        "tmp%4#0",
        "code#0",
        "code#21",
        "code#0"
      ]
    },
    "1770": {
      "op": "frame_bury 0"
    },
    "1772": {
      "retsub": true,
      "op": "retsub"
    },
    "1773": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_balance_of_partition",
      "params": {
        "holder#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "arc1410_balance_of_partition",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1776": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)"
      ]
    },
    "1778": {
      "op": "frame_dig -1",
      "defined_out": [
        "holder#0 (copy)",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "1780": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "1781": {
      "op": "bytec 4 // \"p\"",
      "defined_out": [
        "\"p\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"p\""
      ]
    },
    "1783": {
      "op": "swap",
      "stack_out": [
        "\"p\"",
        "key#0"
      ]
    },
    "1784": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1785": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1786": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1787": {
      "retsub": true,
      "op": "retsub"
    },
    "1788": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc200_transfer",
      "params": {
        "to#0": "bytes",
        "value#0": "bytes"
      },
      "block": "arc200_transfer",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1791": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1793": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "1794": {
      "op": "frame_dig -2",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "tmp%0#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "to#0 (copy)"
      ]
    },
    "1796": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "stack_out": [
        "tmp%0#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "1797": {
      "op": "frame_dig -1",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "tmp%0#0",
        "to#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "value#0 (copy)"
      ]
    },
    "1799": {
      "op": "bytec 22 // 0x0000",
      "defined_out": [
        "0x0000",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "tmp%0#0",
        "to#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "value#0 (copy)",
        "0x0000"
      ]
    },
    "1801": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._transfer_partition",
      "op": "callsub _transfer_partition",
      "stack_out": []
    },
    "1804": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1806": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%1#0",
        "to#0 (copy)"
      ]
    },
    "1808": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "to#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "1810": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._transfer",
      "op": "callsub _transfer",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1813": {
      "retsub": true,
      "op": "retsub"
    },
    "1814": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_transfer_by_partition",
      "params": {
        "partition#0": "bytes",
        "to#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1410_transfer_by_partition",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "1817": {
      "op": "txn Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "1819": {
      "op": "frame_dig -3",
      "defined_out": [
        "sender#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "to#0 (copy)"
      ]
    },
    "1821": {
      "op": "frame_dig -4",
      "defined_out": [
        "partition#0 (copy)",
        "sender#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "to#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "1823": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._receiverPartition",
      "op": "callsub _receiverPartition",
      "defined_out": [
        "receiverPartition#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "receiverPartition#0"
      ]
    },
    "1826": {
      "op": "swap",
      "stack_out": [
        "receiverPartition#0",
        "sender#0"
      ]
    },
    "1827": {
      "op": "frame_dig -4",
      "stack_out": [
        "receiverPartition#0",
        "sender#0",
        "partition#0 (copy)"
      ]
    },
    "1829": {
      "op": "frame_dig -3",
      "stack_out": [
        "receiverPartition#0",
        "sender#0",
        "partition#0 (copy)",
        "to#0 (copy)"
      ]
    },
    "1831": {
      "op": "dig 3",
      "defined_out": [
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "sender#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "receiverPartition#0",
        "sender#0",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)"
      ]
    },
    "1833": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "sender#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "receiverPartition#0",
        "sender#0",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "1835": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "data#0 (copy)",
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "sender#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "receiverPartition#0",
        "sender#0",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)",
        "amount#0 (copy)",
        "data#0 (copy)"
      ]
    },
    "1837": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._transfer_partition",
      "op": "callsub _transfer_partition",
      "stack_out": [
        "receiverPartition#0"
      ]
    },
    "1840": {
      "retsub": true,
      "op": "retsub"
    },
    "1841": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_partitions_of",
      "params": {
        "holder#0": "bytes",
        "page#0": "bytes"
      },
      "block": "arc1410_partitions_of",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1844": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)"
      ]
    },
    "1846": {
      "op": "frame_dig -1",
      "defined_out": [
        "holder#0 (copy)",
        "page#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)",
        "page#0 (copy)"
      ]
    },
    "1848": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "1849": {
      "op": "bytec 12 // \"hp_a\"",
      "defined_out": [
        "\"hp_a\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"hp_a\""
      ]
    },
    "1851": {
      "op": "swap",
      "stack_out": [
        "\"hp_a\"",
        "key#0"
      ]
    },
    "1852": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1853": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1854": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1855": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1857": {
      "op": "bnz arc1410_partitions_of_after_if_else@2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1860": {
      "op": "bytec 22 // 0x0000",
      "defined_out": [
        "0x0000",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x0000"
      ]
    },
    "1862": {
      "op": "swap"
    },
    "1863": {
      "retsub": true,
      "op": "retsub"
    },
    "1864": {
      "block": "arc1410_partitions_of_after_if_else@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1866": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1867": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "1868": {
      "op": "swap"
    },
    "1869": {
      "retsub": true,
      "op": "retsub"
    },
    "1870": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator",
      "params": {
        "holder#0": "bytes",
        "operator#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "arc1410_is_operator",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1873": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1874": {
      "op": "dupn 2",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "1876": {
      "op": "frame_dig -2",
      "defined_out": [
        "operator#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "operator#0 (copy)"
      ]
    },
    "1878": {
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "operator#0 (copy)",
        "holder#0 (copy)"
      ]
    },
    "1880": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%0#0"
      ]
    },
    "1881": {
      "op": "bz arc1410_is_operator_after_if_else@2",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "1884": {
      "op": "bytec 6 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "0x80"
      ]
    },
    "1886": {
      "op": "frame_bury 0"
    },
    "1888": {
      "retsub": true,
      "op": "retsub"
    },
    "1889": {
      "block": "arc1410_is_operator_after_if_else@2",
      "stack_in": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "holder#0 (copy)"
      ]
    },
    "1891": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "holder#0 (copy)",
        "operator#0 (copy)"
      ]
    },
    "1893": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1894": {
      "op": "dup",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1895": {
      "op": "frame_bury 0",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1897": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "1899": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "specific#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "specific#0"
      ]
    },
    "1900": {
      "op": "bytec 13 // \"op\"",
      "defined_out": [
        "\"op\"",
        "encoded_tuple_buffer%2#0",
        "specific#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "specific#0",
        "\"op\""
      ]
    },
    "1902": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "\"op\"",
        "specific#0"
      ]
    },
    "1903": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%1#0"
      ]
    },
    "1904": {
      "op": "dup",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1905": {
      "op": "frame_bury 1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%1#0"
      ]
    },
    "1907": {
      "op": "box_len",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1908": {
      "op": "bury 1",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_exists%0#0"
      ]
    },
    "1910": {
      "op": "bz arc1410_is_operator_after_if_else@5",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "1913": {
      "op": "frame_dig 1",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%1#0"
      ]
    },
    "1915": {
      "op": "box_get",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1916": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%1#0"
      ]
    },
    "1917": {
      "op": "btoi",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%3#0"
      ]
    },
    "1918": {
      "op": "intc_1 // 1",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%3#0",
        "1"
      ]
    },
    "1919": {
      "op": "==",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%4#0"
      ]
    },
    "1920": {
      "op": "bz arc1410_is_operator_after_if_else@5",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "1923": {
      "op": "bytec 6 // 0x80",
      "defined_out": [
        "0x80",
        "encoded_tuple_buffer%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "0x80"
      ]
    },
    "1925": {
      "op": "frame_bury 0"
    },
    "1927": {
      "retsub": true,
      "op": "retsub"
    },
    "1928": {
      "block": "arc1410_is_operator_after_if_else@5",
      "stack_in": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1930": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "1931": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "globalKey#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "globalKey#0"
      ]
    },
    "1932": {
      "op": "bytec 13 // \"op\"",
      "defined_out": [
        "\"op\"",
        "encoded_tuple_buffer%2#0",
        "globalKey#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "globalKey#0",
        "\"op\""
      ]
    },
    "1934": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "\"op\"",
        "globalKey#0"
      ]
    },
    "1935": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "1936": {
      "op": "dup",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "1937": {
      "op": "frame_bury 2",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "1939": {
      "op": "box_len",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1940": {
      "op": "bury 1",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_exists%2#0"
      ]
    },
    "1942": {
      "op": "bz arc1410_is_operator_after_if_else@8",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "1945": {
      "op": "frame_dig 2",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "1947": {
      "op": "box_get",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1948": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "maybe_value%3#0"
      ]
    },
    "1949": {
      "op": "btoi",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "1950": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "encoded_tuple_buffer%2#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%7#0",
        "1"
      ]
    },
    "1951": {
      "op": "==",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%8#0"
      ]
    },
    "1952": {
      "op": "bz arc1410_is_operator_after_if_else@8",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "1955": {
      "op": "bytec 6 // 0x80",
      "defined_out": [
        "0x80",
        "encoded_tuple_buffer%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "0x80"
      ]
    },
    "1957": {
      "op": "frame_bury 0"
    },
    "1959": {
      "retsub": true,
      "op": "retsub"
    },
    "1960": {
      "block": "arc1410_is_operator_after_if_else@8",
      "stack_in": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "op": "bytec 9 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%5#0",
        "0x00"
      ]
    },
    "1962": {
      "op": "frame_bury 0"
    },
    "1964": {
      "retsub": true,
      "op": "retsub"
    },
    "1965": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_authorize_operator",
      "params": {
        "holder#0": "bytes",
        "operator#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "arc1410_authorize_operator",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1968": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1970": {
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "holder#0 (copy)"
      ]
    },
    "1972": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1973": {
      "error": "Only holder can authorize",
      "op": "assert // Only holder can authorize",
      "stack_out": []
    },
    "1974": {
      "op": "frame_dig -3",
      "stack_out": [
        "holder#0 (copy)"
      ]
    },
    "1976": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ]
    },
    "1978": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1979": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "1981": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "1982": {
      "op": "bytec 13 // \"op\"",
      "defined_out": [
        "\"op\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"op\""
      ]
    },
    "1984": {
      "op": "swap",
      "stack_out": [
        "\"op\"",
        "key#0"
      ]
    },
    "1985": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1986": {
      "op": "bytec 17 // 0x01",
      "defined_out": [
        "0x01",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x01"
      ]
    },
    "1988": {
      "op": "box_put",
      "stack_out": []
    },
    "1989": {
      "retsub": true,
      "op": "retsub"
    },
    "1990": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_revoke_operator",
      "params": {
        "holder#0": "bytes",
        "operator#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "arc1410_revoke_operator",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1993": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1995": {
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "holder#0 (copy)"
      ]
    },
    "1997": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1998": {
      "error": "Only holder can revoke",
      "op": "assert // Only holder can revoke",
      "stack_out": []
    },
    "1999": {
      "op": "frame_dig -3",
      "stack_out": [
        "holder#0 (copy)"
      ]
    },
    "2001": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ]
    },
    "2003": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2004": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "2006": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "2007": {
      "op": "bytec 13 // \"op\"",
      "defined_out": [
        "\"op\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"op\""
      ]
    },
    "2009": {
      "op": "swap",
      "stack_out": [
        "\"op\"",
        "key#0"
      ]
    },
    "2010": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2011": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "2012": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2013": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "maybe_exists%0#0"
      ]
    },
    "2015": {
      "op": "bz arc1410_revoke_operator_after_if_else@2",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2018": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "2020": {
      "op": "box_del",
      "defined_out": [
        "tmp%2#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%2#0",
        "{box_del}"
      ]
    },
    "2021": {
      "op": "pop",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2022": {
      "block": "arc1410_revoke_operator_after_if_else@2",
      "stack_in": [
        "tmp%2#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "2023": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_operator_transfer_by_partition",
      "params": {
        "from#0": "bytes",
        "partition#0": "bytes",
        "to#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1410_operator_transfer_by_partition",
      "stack_in": [],
      "op": "proto 5 1"
    },
    "2026": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2027": {
      "op": "txn Sender"
    },
    "2029": {
      "op": "frame_dig -5"
    },
    "2031": {
      "op": "txn Sender"
    },
    "2033": {
      "op": "frame_dig -4",
      "defined_out": [
        "from#0 (copy)",
        "partition#0 (copy)",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "from#0 (copy)",
        "sender#0",
        "partition#0 (copy)"
      ]
    },
    "2035": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator",
      "op": "callsub arc1410_is_operator",
      "defined_out": [
        "sender#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "tmp%0#0"
      ]
    },
    "2038": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "tmp%0#0",
        "0"
      ]
    },
    "2039": {
      "op": "getbit",
      "defined_out": [
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "tmp%1#0"
      ]
    },
    "2040": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "tmp%1#0",
        "1"
      ]
    },
    "2041": {
      "op": "==",
      "defined_out": [
        "authorized#0",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0"
      ]
    },
    "2042": {
      "op": "dupn 2",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "authorized#0"
      ]
    },
    "2044": {
      "op": "bnz arc1410_operator_transfer_by_partition_after_if_else@4",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "2047": {
      "op": "frame_dig -5",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "from#0 (copy)"
      ]
    },
    "2049": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "from#0 (copy)",
        "sender#0"
      ]
    },
    "2051": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%2#0",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2052": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "2054": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "pKey#0",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "pKey#0"
      ]
    },
    "2055": {
      "op": "bytec 11 // \"opa\"",
      "defined_out": [
        "\"opa\"",
        "authorized#0",
        "authorized#9",
        "pKey#0",
        "sender#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "pKey#0",
        "\"opa\""
      ]
    },
    "2057": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "\"opa\"",
        "pKey#0"
      ]
    },
    "2058": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0"
      ]
    },
    "2059": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "2060": {
      "op": "frame_bury 0",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0"
      ]
    },
    "2062": {
      "op": "box_len",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2063": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_exists%0#0"
      ]
    },
    "2065": {
      "op": "bz arc1410_operator_transfer_by_partition_after_if_else@3",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "2068": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0"
      ]
    },
    "2070": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "2071": {
      "op": "box_get",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "maybe_exists%1#0",
        "remaining#0",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "maybe_exists%1#0"
      ]
    },
    "2072": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0"
      ]
    },
    "2073": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "remaining#0",
        "remaining#0 (copy)",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "remaining#0 (copy)"
      ]
    },
    "2074": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "authorized#0",
        "authorized#9",
        "remaining#0",
        "remaining#0 (copy)",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "remaining#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "2076": {
      "op": "b>=",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "remaining#0",
        "sender#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "tmp%4#0"
      ]
    },
    "2077": {
      "error": "Portion allowance exceeded",
      "op": "assert // Portion allowance exceeded",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0"
      ]
    },
    "2078": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "authorized#0"
      ]
    },
    "2079": {
      "op": "frame_bury 2",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0"
      ]
    },
    "2081": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "amount#0 (copy)"
      ]
    },
    "2083": {
      "op": "b-",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0"
      ]
    },
    "2084": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "2085": {
      "op": "len",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "2086": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "2087": {
      "op": "<=",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "len_ok%0#0",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "2088": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0"
      ]
    },
    "2089": {
      "op": "intc_2 // 32",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "2090": {
      "op": "bzero",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "bzero%0#0",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "2091": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "arc4_encoded%0#0"
      ]
    },
    "2092": {
      "op": "box_put",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "2093": {
      "block": "arc1410_operator_transfer_by_partition_after_if_else@3",
      "stack_in": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "authorized#9"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "authorized#9"
      ]
    },
    "2095": {
      "op": "frame_bury 3",
      "defined_out": [
        "authorized#9"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "2097": {
      "block": "arc1410_operator_transfer_by_partition_after_if_else@4",
      "stack_in": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "authorized#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "authorized#0"
      ]
    },
    "2099": {
      "error": "Not authorized operator",
      "op": "assert // Not authorized operator",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "2100": {
      "op": "frame_dig -3",
      "defined_out": [
        "authorized#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "to#0 (copy)"
      ]
    },
    "2102": {
      "op": "frame_dig -4",
      "defined_out": [
        "authorized#0",
        "partition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "to#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "2104": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._receiverPartition",
      "op": "callsub _receiverPartition",
      "defined_out": [
        "authorized#0",
        "receiverPartition#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0"
      ]
    },
    "2107": {
      "op": "frame_dig -5",
      "defined_out": [
        "authorized#0",
        "from#0 (copy)",
        "receiverPartition#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)"
      ]
    },
    "2109": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "2111": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "to#0 (copy)"
      ]
    },
    "2113": {
      "op": "dig 3",
      "defined_out": [
        "authorized#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)"
      ]
    },
    "2115": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "authorized#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "2117": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "authorized#0",
        "data#0 (copy)",
        "from#0 (copy)",
        "partition#0 (copy)",
        "receiverPartition#0",
        "receiverPartition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0",
        "from#0 (copy)",
        "partition#0 (copy)",
        "to#0 (copy)",
        "receiverPartition#0 (copy)",
        "amount#0 (copy)",
        "data#0 (copy)"
      ]
    },
    "2119": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._transfer_partition",
      "op": "callsub _transfer_partition",
      "stack_out": [
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "receiverPartition#0"
      ]
    },
    "2122": {
      "op": "frame_bury 0"
    },
    "2124": {
      "retsub": true,
      "op": "retsub"
    },
    "2125": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_can_transfer_by_partition",
      "params": {
        "from#0": "bytes",
        "partition#0": "bytes",
        "to#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1410_can_transfer_by_partition",
      "stack_in": [],
      "op": "proto 5 1"
    },
    "2128": {
      "op": "intc_0 // 0",
      "stack_out": [
        "senderAddr#0"
      ]
    },
    "2129": {
      "op": "dup",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0"
      ]
    },
    "2130": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0"
      ]
    },
    "2132": {
      "op": "dup",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10"
      ]
    },
    "2133": {
      "op": "frame_dig -5",
      "defined_out": [
        "from#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "from#0 (copy)"
      ]
    },
    "2135": {
      "op": "frame_dig -4",
      "defined_out": [
        "from#0 (copy)",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "from#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "2137": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "encoded_tuple_buffer%2#1"
      ]
    },
    "2138": {
      "op": "bytec 4 // \"p\"",
      "defined_out": [
        "\"p\"",
        "encoded_tuple_buffer%2#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "encoded_tuple_buffer%2#1",
        "\"p\""
      ]
    },
    "2140": {
      "op": "swap",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "\"p\"",
        "encoded_tuple_buffer%2#1"
      ]
    },
    "2141": {
      "op": "concat",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "2142": {
      "op": "dup",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%0#1"
      ]
    },
    "2143": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "2144": {
      "op": "bury 1",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_exists%0#0"
      ]
    },
    "2146": {
      "op": "bnz arc1410_can_transfer_by_partition_after_if_else@2",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "2149": {
      "op": "pushbytes base32(KAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKFAYLSORUXI2LPNYQG433UEBSXQ2LTORZQ)",
      "defined_out": [
        "KAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKFAYLSORUXI2LPNYQG433UEBSXQ2LTORZQ",
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "KAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKFAYLSORUXI2LPNYQG433UEBSXQ2LTORZQ"
      ]
    },
    "2208": {
      "op": "frame_bury 0"
    },
    "2210": {
      "retsub": true,
      "op": "retsub"
    },
    "2211": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@2",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%0#1"
      ]
    },
    "2213": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2214": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_value%0#0"
      ]
    },
    "2215": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_value%0#0",
        "amount#0 (copy)"
      ]
    },
    "2217": {
      "op": "b<",
      "defined_out": [
        "tmp%0#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%2#0"
      ]
    },
    "2218": {
      "op": "bz arc1410_can_transfer_by_partition_after_if_else@4",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "2221": {
      "op": "pushbytes base32(KIACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKES3TTOVTGM2LDNFSW45BAMJQWYYLOMNSQ)",
      "defined_out": [
        "KIACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKES3TTOVTGM2LDNFSW45BAMJQWYYLOMNSQ",
        "tmp%0#1"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "KIACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKES3TTOVTGM2LDNFSW45BAMJQWYYLOMNSQ"
      ]
    },
    "2280": {
      "op": "frame_bury 0"
    },
    "2282": {
      "retsub": true,
      "op": "retsub"
    },
    "2283": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@4",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "to#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "to#0 (copy)"
      ]
    },
    "2285": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "to#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "2286": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%3#0"
      ]
    },
    "2287": {
      "op": "bz arc1410_can_transfer_by_partition_after_if_else@6",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "2290": {
      "op": "pushbytes base32(K4ACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIES3TWMFWGSZBAOJSWGZLJOZSXE)",
      "defined_out": [
        "K4ACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIES3TWMFWGSZBAOJSWGZLJOZSXE"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "K4ACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIES3TWMFWGSZBAOJSWGZLJOZSXE"
      ]
    },
    "2345": {
      "op": "frame_bury 0"
    },
    "2347": {
      "retsub": true,
      "op": "retsub"
    },
    "2348": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@6",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "txn Sender"
    },
    "2350": {
      "op": "dup",
      "defined_out": [
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "senderAddr#0",
        "senderAddr#0"
      ]
    },
    "2351": {
      "op": "frame_bury 0",
      "defined_out": [
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "senderAddr#0"
      ]
    },
    "2353": {
      "op": "frame_dig -5",
      "defined_out": [
        "from#0 (copy)",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "senderAddr#0",
        "from#0 (copy)"
      ]
    },
    "2355": {
      "op": "!=",
      "defined_out": [
        "senderAddr#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%4#0"
      ]
    },
    "2356": {
      "op": "bz arc1410_can_transfer_by_partition_after_if_else@16",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "2359": {
      "op": "frame_dig -5",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "from#0 (copy)"
      ]
    },
    "2361": {
      "op": "frame_dig 0",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "from#0 (copy)",
        "senderAddr#0"
      ]
    },
    "2363": {
      "op": "frame_dig -4",
      "defined_out": [
        "from#0 (copy)",
        "partition#0 (copy)",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "from#0 (copy)",
        "senderAddr#0",
        "partition#0 (copy)"
      ]
    },
    "2365": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator",
      "op": "callsub arc1410_is_operator",
      "defined_out": [
        "senderAddr#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%5#0"
      ]
    },
    "2368": {
      "op": "intc_0 // 0",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%5#0",
        "0"
      ]
    },
    "2369": {
      "op": "getbit",
      "defined_out": [
        "senderAddr#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%6#0"
      ]
    },
    "2370": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "senderAddr#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%6#0",
        "1"
      ]
    },
    "2371": {
      "op": "==",
      "defined_out": [
        "authorized#0",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0"
      ]
    },
    "2372": {
      "op": "dup",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0",
        "authorized#0"
      ]
    },
    "2373": {
      "op": "frame_bury 2",
      "defined_out": [
        "authorized#0",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0"
      ]
    },
    "2375": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0",
        "authorized#10"
      ]
    },
    "2376": {
      "op": "frame_bury 3",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0"
      ]
    },
    "2378": {
      "op": "bnz arc1410_can_transfer_by_partition_after_if_else@13",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "2381": {
      "op": "frame_dig -5",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "from#0 (copy)"
      ]
    },
    "2383": {
      "op": "frame_dig 0",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "from#0 (copy)",
        "senderAddr#0"
      ]
    },
    "2385": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "encoded_tuple_buffer%20#0",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "encoded_tuple_buffer%20#0"
      ]
    },
    "2386": {
      "op": "frame_dig -4",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "encoded_tuple_buffer%20#0",
        "partition#0 (copy)"
      ]
    },
    "2388": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "pKey#0",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "pKey#0"
      ]
    },
    "2389": {
      "op": "bytec 11 // \"opa\"",
      "defined_out": [
        "\"opa\"",
        "authorized#0",
        "authorized#10",
        "pKey#0",
        "senderAddr#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "pKey#0",
        "\"opa\""
      ]
    },
    "2391": {
      "op": "swap",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "\"opa\"",
        "pKey#0"
      ]
    },
    "2392": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "senderAddr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%7#0"
      ]
    },
    "2393": {
      "op": "dup",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%7#0",
        "tmp%7#0"
      ]
    },
    "2394": {
      "op": "frame_bury 1",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "senderAddr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%7#0"
      ]
    },
    "2396": {
      "op": "box_len",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "senderAddr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2397": {
      "op": "bury 1",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_exists%1#0"
      ]
    },
    "2399": {
      "op": "frame_dig 2",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_exists%1#0",
        "authorized#10"
      ]
    },
    "2401": {
      "op": "frame_bury 3",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "maybe_exists%1#0"
      ]
    },
    "2403": {
      "op": "bz arc1410_can_transfer_by_partition_after_if_else@13",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "2406": {
      "op": "frame_dig 1",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%7#0"
      ]
    },
    "2408": {
      "op": "box_get",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "maybe_exists%2#0",
        "remaining#0",
        "senderAddr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "remaining#0",
        "maybe_exists%2#0"
      ]
    },
    "2409": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "remaining#0"
      ]
    },
    "2410": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "authorized#0",
        "authorized#10",
        "remaining#0",
        "senderAddr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "remaining#0",
        "amount#0 (copy)"
      ]
    },
    "2412": {
      "op": "b>=",
      "defined_out": [
        "authorized#0",
        "authorized#10",
        "senderAddr#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "tmp%9#0"
      ]
    },
    "2413": {
      "op": "bz arc1410_can_transfer_by_partition_after_if_else@11",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "2416": {
      "op": "intc_1 // 1",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0"
      ]
    },
    "2417": {
      "op": "frame_bury 2",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "2419": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@11",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "authorized#10"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#10"
      ]
    },
    "2421": {
      "op": "frame_bury 3",
      "defined_out": [
        "authorized#10"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "2423": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@13",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "authorized#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "authorized#0"
      ]
    },
    "2425": {
      "op": "bnz arc1410_can_transfer_by_partition_after_if_else@16",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ]
    },
    "2428": {
      "op": "pushbytes base32(LAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALU64DFOJQXI33SEBXG65BAMF2XI2DPOJUXUZLE)",
      "defined_out": [
        "LAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALU64DFOJQXI33SEBXG65BAMF2XI2DPOJUXUZLE",
        "authorized#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "LAACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALU64DFOJQXI33SEBXG65BAMF2XI2DPOJUXUZLE"
      ]
    },
    "2490": {
      "op": "frame_bury 0"
    },
    "2492": {
      "retsub": true,
      "op": "retsub"
    },
    "2493": {
      "block": "arc1410_can_transfer_by_partition_after_if_else@16",
      "stack_in": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "to#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "to#0 (copy)"
      ]
    },
    "2495": {
      "op": "frame_dig -4",
      "defined_out": [
        "partition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "to#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "2497": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._receiverPartition",
      "op": "callsub _receiverPartition",
      "defined_out": [
        "receiverPartition#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "receiverPartition#0"
      ]
    },
    "2500": {
      "op": "pushbytes 0x510023",
      "defined_out": [
        "0x510023",
        "receiverPartition#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "receiverPartition#0",
        "0x510023"
      ]
    },
    "2505": {
      "op": "swap",
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "0x510023",
        "receiverPartition#0"
      ]
    },
    "2506": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%30#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "encoded_tuple_buffer%30#0"
      ]
    },
    "2507": {
      "op": "pushbytes 0x000753756363657373",
      "defined_out": [
        "0x000753756363657373",
        "encoded_tuple_buffer%30#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "encoded_tuple_buffer%30#0",
        "0x000753756363657373"
      ]
    },
    "2518": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%31#0"
      ],
      "stack_out": [
        "senderAddr#0",
        "tmp%7#0",
        "authorized#0",
        "authorized#10",
        "tmp%0#1",
        "encoded_tuple_buffer%31#0"
      ]
    },
    "2519": {
      "op": "frame_bury 0"
    },
    "2521": {
      "retsub": true,
      "op": "retsub"
    },
    "2522": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._receiverPartition",
      "params": {
        "receiver#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "_receiverPartition",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2525": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ"
    },
    "2526": {
      "op": "frame_dig -2"
    },
    "2528": {
      "op": "frame_dig -1",
      "defined_out": [
        "partition#0 (copy)",
        "receiver#0 (copy)",
        "receiverPartition#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "receiver#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "2530": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "receiverPartition#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2531": {
      "op": "bytec 4 // \"p\"",
      "defined_out": [
        "\"p\"",
        "encoded_tuple_buffer%2#0",
        "receiverPartition#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "encoded_tuple_buffer%2#0",
        "\"p\""
      ]
    },
    "2533": {
      "op": "swap",
      "stack_out": [
        "receiverPartition#0",
        "\"p\"",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2534": {
      "op": "concat",
      "defined_out": [
        "receiverPartition#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "tmp%0#0"
      ]
    },
    "2535": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "receiverPartition#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2536": {
      "op": "bury 1",
      "stack_out": [
        "receiverPartition#0",
        "maybe_exists%0#0"
      ]
    },
    "2538": {
      "op": "bz _receiverPartition_after_if_else@2",
      "stack_out": [
        "receiverPartition#0"
      ]
    },
    "2541": {
      "op": "frame_dig -1",
      "stack_out": [
        "receiverPartition#0",
        "receiverPartition#0"
      ]
    },
    "2543": {
      "op": "frame_bury 0",
      "stack_out": [
        "receiverPartition#0"
      ]
    },
    "2545": {
      "block": "_receiverPartition_after_if_else@2",
      "stack_in": [
        "receiverPartition#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "receiverPartition#0"
      ],
      "stack_out": [
        "receiverPartition#0",
        "receiverPartition#0"
      ]
    },
    "2547": {
      "op": "swap"
    },
    "2548": {
      "retsub": true,
      "op": "retsub"
    },
    "2549": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._add_participation_to_holder",
      "params": {
        "holder#0": "bytes",
        "participation#0": "bytes"
      },
      "block": "_add_participation_to_holder",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2552": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a#0"
      ]
    },
    "2553": {
      "op": "dupn 4",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0"
      ]
    },
    "2555": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0"
      ]
    },
    "2557": {
      "op": "dupn 4",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "2559": {
      "op": "pushbytes \"hp_p\"",
      "defined_out": [
        "\"hp_p\""
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "\"hp_p\""
      ]
    },
    "2565": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"hp_p\"",
        "holder#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "\"hp_p\"",
        "holder#0 (copy)"
      ]
    },
    "2567": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2568": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2569": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2570": {
      "op": "bury 1",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2572": {
      "op": "bnz _add_participation_to_holder_after_if_else@2",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2575": {
      "op": "frame_dig 10",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2577": {
      "op": "bytec 16 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%0#0",
        "0x0000000000000000"
      ]
    },
    "2579": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2580": {
      "block": "_add_participation_to_holder_after_if_else@2",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 10",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2582": {
      "op": "box_get",
      "defined_out": [
        "lastPage#0",
        "maybe_exists%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "lastPage#0",
        "maybe_exists%1#0"
      ]
    },
    "2583": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_exists%1#0",
        "lastPage#0"
      ]
    },
    "2584": {
      "op": "frame_bury 2",
      "defined_out": [
        "lastPage#0",
        "maybe_exists%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_exists%1#0"
      ]
    },
    "2586": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2587": {
      "op": "intc_0 // 0",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "found#0"
      ]
    },
    "2588": {
      "op": "frame_bury 6",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2590": {
      "op": "bytec 16 // 0x0000000000000000",
      "defined_out": [
        "curPage#0",
        "found#0",
        "lastPage#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "curPage#0"
      ]
    },
    "2592": {
      "op": "frame_bury 1",
      "defined_out": [
        "curPage#0",
        "found#0",
        "lastPage#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2594": {
      "block": "_add_participation_to_holder_while_top@3",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "curPage#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "curPage#0"
      ]
    },
    "2596": {
      "op": "btoi",
      "defined_out": [
        "curPage#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "2597": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%3#0"
      ]
    },
    "2598": {
      "op": "frame_bury 8",
      "defined_out": [
        "curPage#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "2600": {
      "op": "frame_dig 2",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0",
        "lastPage#0"
      ]
    },
    "2602": {
      "op": "btoi",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "2603": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%4#0"
      ]
    },
    "2604": {
      "op": "frame_bury 9",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "2606": {
      "op": "<",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%5#0"
      ]
    },
    "2607": {
      "op": "bz _add_participation_to_holder_block@10",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2610": {
      "op": "frame_dig -2",
      "defined_out": [
        "curPage#0",
        "holder#0 (copy)",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "holder#0 (copy)"
      ]
    },
    "2612": {
      "op": "frame_dig 1",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "holder#0 (copy)",
        "curPage#0"
      ]
    },
    "2614": {
      "op": "concat",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "paginatedKey#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "paginatedKey#0"
      ]
    },
    "2615": {
      "op": "bytec 12 // \"hp_a\"",
      "defined_out": [
        "\"hp_a\"",
        "curPage#0",
        "lastPage#0",
        "paginatedKey#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "paginatedKey#0",
        "\"hp_a\""
      ]
    },
    "2617": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "\"hp_a\"",
        "paginatedKey#0"
      ]
    },
    "2618": {
      "op": "concat",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "2619": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "2620": {
      "op": "frame_bury 4",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "2622": {
      "op": "box_len",
      "defined_out": [
        "curPage#0",
        "lastPage#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2623": {
      "op": "bury 1",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_exists%2#0"
      ]
    },
    "2625": {
      "op": "bnz _add_participation_to_holder_after_if_else@6",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2628": {
      "op": "bytec 18 // 0x0001",
      "defined_out": [
        "0x0001",
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "0x0001"
      ]
    },
    "2630": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x0001",
        "curPage#0",
        "lastPage#0",
        "participation#0 (copy)",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "0x0001",
        "participation#0 (copy)"
      ]
    },
    "2632": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%0#0"
      ]
    },
    "2633": {
      "op": "frame_dig 4",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%6#0"
      ]
    },
    "2635": {
      "op": "dup",
      "defined_out": [
        "concat_result%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "2636": {
      "op": "box_del",
      "defined_out": [
        "concat_result%0#0",
        "curPage#0",
        "lastPage#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%6#0",
        "{box_del}"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%6#0",
        "{box_del}"
      ]
    },
    "2637": {
      "op": "pop",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%6#0"
      ]
    },
    "2638": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%6#0",
        "concat_result%0#0"
      ]
    },
    "2639": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2640": {
      "block": "_add_participation_to_holder_after_if_else@6",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "2642": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "a#0",
        "maybe_exists%3#0"
      ]
    },
    "2643": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_exists%3#0",
        "a#0"
      ]
    },
    "2644": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_exists%3#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "2645": {
      "op": "cover 2",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "a#0",
        "maybe_exists%3#0",
        "a#0"
      ]
    },
    "2647": {
      "op": "frame_bury 0",
      "defined_out": [
        "a#0",
        "maybe_exists%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "a#0",
        "maybe_exists%3#0"
      ]
    },
    "2649": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "a#0"
      ]
    },
    "2650": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "a#0",
        "0"
      ]
    },
    "2651": {
      "op": "extract_uint16",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "array_length%0#0"
      ]
    },
    "2652": {
      "op": "frame_bury 5",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2654": {
      "op": "intc_0 // 0",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2655": {
      "op": "frame_bury 7",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2657": {
      "block": "_add_participation_to_holder_for_header@17",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2659": {
      "op": "frame_dig 5",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "item_index_internal%0#0",
        "array_length%0#0"
      ]
    },
    "2661": {
      "op": "<",
      "defined_out": [
        "array_length%0#0",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "continue_looping%0#0"
      ]
    },
    "2662": {
      "op": "bz _add_participation_to_holder_after_for@21",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2665": {
      "op": "frame_dig 0",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "a#0"
      ]
    },
    "2667": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "2670": {
      "op": "frame_dig 7",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2672": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "a#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0",
        "32"
      ]
    },
    "2673": {
      "op": "*",
      "defined_out": [
        "a#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "2674": {
      "op": "intc_2 // 32",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "32"
      ]
    },
    "2675": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "v#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "v#0"
      ]
    },
    "2676": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "participation#0 (copy)",
        "v#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "v#0",
        "participation#0 (copy)"
      ]
    },
    "2678": {
      "op": "==",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%0#1"
      ]
    },
    "2679": {
      "op": "bz _add_participation_to_holder_after_if_else@20",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2682": {
      "op": "intc_1 // 1",
      "defined_out": [
        "a#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%9#0"
      ]
    },
    "2683": {
      "block": "_add_participation_to_holder_after_inlined_smart_contracts/security_token/arc1410.algo.ts::Arc1410.containsAddress@22",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%9#0"
      ],
      "op": "bz _add_participation_to_holder_after_if_else@8",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2686": {
      "op": "intc_1 // 1",
      "defined_out": [
        "found#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "found#0"
      ]
    },
    "2687": {
      "op": "frame_bury 6",
      "defined_out": [
        "found#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2689": {
      "block": "_add_participation_to_holder_block@10",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 6",
      "defined_out": [
        "found#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "found#0"
      ]
    },
    "2691": {
      "op": "bnz _add_participation_to_holder_after_if_else@15",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2694": {
      "op": "frame_dig -2",
      "defined_out": [
        "found#0",
        "holder#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "holder#0 (copy)"
      ]
    },
    "2696": {
      "op": "frame_dig 2",
      "defined_out": [
        "found#0",
        "holder#0 (copy)",
        "lastPage#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "holder#0 (copy)",
        "lastPage#0"
      ]
    },
    "2698": {
      "op": "concat",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "paginatedKey\u2081#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "paginatedKey\u2081#0"
      ]
    },
    "2699": {
      "op": "bytec 12 // \"hp_a\"",
      "defined_out": [
        "\"hp_a\"",
        "found#0",
        "lastPage#0",
        "paginatedKey\u2081#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "paginatedKey\u2081#0",
        "\"hp_a\""
      ]
    },
    "2701": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "\"hp_a\"",
        "paginatedKey\u2081#0"
      ]
    },
    "2702": {
      "op": "concat",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0"
      ]
    },
    "2703": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "tmp%11#0"
      ]
    },
    "2704": {
      "op": "frame_bury 3",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0"
      ]
    },
    "2706": {
      "op": "box_get",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2707": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_value%4#0"
      ]
    },
    "2708": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "maybe_value%4#0",
        "0"
      ]
    },
    "2709": {
      "op": "extract_uint16",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "to_encode%1#0"
      ]
    },
    "2710": {
      "op": "itob",
      "defined_out": [
        "found#0",
        "itemsCount#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "itemsCount#0"
      ]
    },
    "2711": {
      "op": "btoi",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%12#0"
      ]
    },
    "2712": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%12#0",
        "10"
      ]
    },
    "2714": {
      "op": "<",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%13#0"
      ]
    },
    "2715": {
      "op": "bz _add_participation_to_holder_else_body@13",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2718": {
      "op": "frame_dig 3",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0"
      ]
    },
    "2720": {
      "op": "dup",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ]
    },
    "2721": {
      "op": "box_get",
      "defined_out": [
        "found#0",
        "lastPage#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2722": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "maybe_value%5#0"
      ]
    },
    "2723": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%1#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "expr_value_trimmed%1#0"
      ]
    },
    "2726": {
      "op": "bytec 18 // 0x0001",
      "defined_out": [
        "0x0001",
        "expr_value_trimmed%1#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "expr_value_trimmed%1#0",
        "0x0001"
      ]
    },
    "2728": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x0001",
        "expr_value_trimmed%1#0",
        "found#0",
        "lastPage#0",
        "participation#0 (copy)",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "expr_value_trimmed%1#0",
        "0x0001",
        "participation#0 (copy)"
      ]
    },
    "2730": {
      "op": "concat",
      "defined_out": [
        "concat_result%1#0",
        "expr_value_trimmed%1#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "expr_value_trimmed%1#0",
        "concat_result%1#0"
      ]
    },
    "2731": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%1#0",
        "expr_value_trimmed%3#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "expr_value_trimmed%1#0",
        "expr_value_trimmed%3#0"
      ]
    },
    "2734": {
      "op": "concat",
      "defined_out": [
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concatenated%2#0"
      ]
    },
    "2735": {
      "op": "dup",
      "defined_out": [
        "concatenated%2#0",
        "concatenated%2#0 (copy)",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concatenated%2#0",
        "concatenated%2#0 (copy)"
      ]
    },
    "2736": {
      "op": "len",
      "defined_out": [
        "byte_len%2#0",
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concatenated%2#0",
        "byte_len%2#0"
      ]
    },
    "2737": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "byte_len%2#0",
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concatenated%2#0",
        "byte_len%2#0",
        "32"
      ]
    },
    "2738": {
      "op": "/",
      "defined_out": [
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "len_%2#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concatenated%2#0",
        "len_%2#0"
      ]
    },
    "2739": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concatenated%2#0",
        "as_bytes%2#0"
      ]
    },
    "2740": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%2#0",
        "found#0",
        "lastPage#0",
        "len_16_bit%2#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concatenated%2#0",
        "len_16_bit%2#0"
      ]
    },
    "2743": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "len_16_bit%2#0",
        "concatenated%2#0"
      ]
    },
    "2744": {
      "op": "concat",
      "defined_out": [
        "concat_result%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concat_result%2#0"
      ]
    },
    "2745": {
      "op": "dig 1",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concat_result%2#0",
        "tmp%11#0 (copy)"
      ]
    },
    "2747": {
      "op": "box_del",
      "defined_out": [
        "concat_result%2#0",
        "found#0",
        "lastPage#0",
        "tmp%11#0",
        "{box_del}"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concat_result%2#0",
        "{box_del}"
      ]
    },
    "2748": {
      "op": "pop",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%11#0",
        "concat_result%2#0"
      ]
    },
    "2749": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2750": {
      "block": "_add_participation_to_holder_after_if_else@15",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "2751": {
      "block": "_add_participation_to_holder_else_body@13",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 9",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%4#0"
      ]
    },
    "2753": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%4#0",
        "1"
      ]
    },
    "2754": {
      "op": "+",
      "defined_out": [
        "tmp%4#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "to_encode%2#0"
      ]
    },
    "2755": {
      "op": "itob",
      "defined_out": [
        "newLastPage#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newLastPage#0"
      ]
    },
    "2756": {
      "op": "frame_dig 10",
      "defined_out": [
        "newLastPage#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newLastPage#0",
        "tmp%0#0"
      ]
    },
    "2758": {
      "op": "dig 1",
      "defined_out": [
        "newLastPage#0",
        "newLastPage#0 (copy)",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newLastPage#0",
        "tmp%0#0",
        "newLastPage#0 (copy)"
      ]
    },
    "2760": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newLastPage#0"
      ]
    },
    "2761": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)",
        "newLastPage#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newLastPage#0",
        "holder#0 (copy)"
      ]
    },
    "2763": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "holder#0 (copy)",
        "newLastPage#0"
      ]
    },
    "2764": {
      "op": "concat",
      "defined_out": [
        "newPaginatedKey#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newPaginatedKey#0"
      ]
    },
    "2765": {
      "op": "bytec 18 // 0x0001",
      "defined_out": [
        "0x0001",
        "newPaginatedKey#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newPaginatedKey#0",
        "0x0001"
      ]
    },
    "2767": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x0001",
        "newPaginatedKey#0",
        "participation#0 (copy)",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newPaginatedKey#0",
        "0x0001",
        "participation#0 (copy)"
      ]
    },
    "2769": {
      "op": "concat",
      "defined_out": [
        "concat_result%3#0",
        "newPaginatedKey#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newPaginatedKey#0",
        "concat_result%3#0"
      ]
    },
    "2770": {
      "op": "bytec 12 // \"hp_a\"",
      "defined_out": [
        "\"hp_a\"",
        "concat_result%3#0",
        "newPaginatedKey#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "newPaginatedKey#0",
        "concat_result%3#0",
        "\"hp_a\""
      ]
    },
    "2772": {
      "op": "uncover 2",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%3#0",
        "\"hp_a\"",
        "newPaginatedKey#0"
      ]
    },
    "2774": {
      "op": "concat",
      "defined_out": [
        "concat_result%3#0",
        "tmp%0#0",
        "tmp%18#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%3#0",
        "tmp%18#0"
      ]
    },
    "2775": {
      "op": "dup",
      "defined_out": [
        "concat_result%3#0",
        "tmp%0#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%3#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "2776": {
      "op": "box_del",
      "defined_out": [
        "concat_result%3#0",
        "tmp%0#0",
        "tmp%18#0",
        "tmp%4#0",
        "{box_del}"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%3#0",
        "tmp%18#0",
        "{box_del}"
      ]
    },
    "2777": {
      "op": "pop",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "concat_result%3#0",
        "tmp%18#0"
      ]
    },
    "2778": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%18#0",
        "concat_result%3#0"
      ]
    },
    "2779": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2780": {
      "retsub": true,
      "op": "retsub"
    },
    "2781": {
      "block": "_add_participation_to_holder_after_if_else@8",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 8",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "2783": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%3#0",
        "1"
      ]
    },
    "2784": {
      "op": "+",
      "defined_out": [
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "to_encode%0#0"
      ]
    },
    "2785": {
      "op": "itob",
      "defined_out": [
        "curPage#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "curPage#0"
      ]
    },
    "2786": {
      "op": "frame_bury 1",
      "defined_out": [
        "curPage#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2788": {
      "op": "b _add_participation_to_holder_while_top@3"
    },
    "2791": {
      "block": "_add_participation_to_holder_after_if_else@20",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2793": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "2794": {
      "op": "+",
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2795": {
      "op": "frame_bury 7",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2797": {
      "op": "b _add_participation_to_holder_for_header@17"
    },
    "2800": {
      "block": "_add_participation_to_holder_after_for@21",
      "stack_in": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "a#0",
        "curPage#0",
        "lastPage#0",
        "tmp%11#0",
        "tmp%6#0",
        "array_length%0#0",
        "found#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%9#0"
      ]
    },
    "2801": {
      "op": "b _add_participation_to_holder_after_inlined_smart_contracts/security_token/arc1410.algo.ts::Arc1410.containsAddress@22"
    },
    "2804": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._transfer_partition",
      "params": {
        "from#0": "bytes",
        "fromPartition#0": "bytes",
        "to#0": "bytes",
        "toPartition#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "_transfer_partition",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "2807": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bzero%0#0"
      ]
    },
    "2808": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "2809": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "amount#0 (copy)"
      ]
    },
    "2811": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "amount#0 (copy)",
        "0x"
      ]
    },
    "2813": {
      "op": "b>",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%0#0"
      ]
    },
    "2814": {
      "error": "Invalid amount",
      "op": "assert // Invalid amount",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "2815": {
      "op": "frame_dig -6",
      "defined_out": [
        "from#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0 (copy)"
      ]
    },
    "2817": {
      "op": "frame_dig -5",
      "defined_out": [
        "from#0 (copy)",
        "fromPartition#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "from#0 (copy)",
        "fromPartition#0 (copy)"
      ]
    },
    "2819": {
      "op": "concat",
      "defined_out": [
        "fromKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "fromKey#0"
      ]
    },
    "2820": {
      "op": "bytec 4 // \"p\"",
      "defined_out": [
        "\"p\"",
        "fromKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "fromKey#0",
        "\"p\""
      ]
    },
    "2822": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "\"p\"",
        "fromKey#0"
      ]
    },
    "2823": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "2824": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "2825": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2826": {
      "op": "bury 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "2828": {
      "op": "bnz _transfer_partition_after_if_else@2",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "2831": {
      "op": "frame_dig 2",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "2833": {
      "op": "bytec_0 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "2834": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "2835": {
      "block": "_transfer_partition_after_if_else@2",
      "stack_in": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "2837": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "2838": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2839": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "2840": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "2842": {
      "op": "b-",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "2843": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "2844": {
      "op": "len",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "2845": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "2846": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "2847": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "2848": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "2849": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "2850": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0",
        "bzero%0#0"
      ]
    },
    "2851": {
      "op": "frame_bury 0",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "2853": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%1#0",
        "arc4_encoded%0#0"
      ]
    },
    "2854": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "2855": {
      "op": "frame_dig -6",
      "defined_out": [
        "bzero%0#0",
        "from#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "from#0 (copy)"
      ]
    },
    "2857": {
      "op": "frame_dig -4",
      "defined_out": [
        "bzero%0#0",
        "from#0 (copy)",
        "tmp%1#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "from#0 (copy)",
        "to#0 (copy)"
      ]
    },
    "2859": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%5#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2860": {
      "op": "frame_dig -5",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%5#0",
        "fromPartition#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%5#0",
        "fromPartition#0 (copy)"
      ]
    },
    "2862": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%6#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2863": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%6#0",
        "amount#0 (copy)"
      ]
    },
    "2865": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%7#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "2866": {
      "op": "pushbytes 0x0082",
      "defined_out": [
        "0x0082",
        "bzero%0#0",
        "encoded_tuple_buffer%7#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%7#0",
        "0x0082"
      ]
    },
    "2870": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%8#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "2871": {
      "op": "frame_dig -1",
      "defined_out": [
        "bzero%0#0",
        "data#0 (copy)",
        "encoded_tuple_buffer%8#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%8#0",
        "data#0 (copy)"
      ]
    },
    "2873": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%9#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "2874": {
      "op": "bytec 8 // 0x0002",
      "defined_out": [
        "0x0002",
        "bzero%0#0",
        "encoded_tuple_buffer%9#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%9#0",
        "0x0002"
      ]
    },
    "2876": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "0x0002",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "2877": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%12#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "2878": {
      "op": "pushbytes 0x206b7940 // method \"Transfer((address,address,address,uint256,byte[]))\"",
      "defined_out": [
        "Method(Transfer((address,address,address,uint256,byte[])))",
        "bzero%0#0",
        "encoded_tuple_buffer%12#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "encoded_tuple_buffer%12#0",
        "Method(Transfer((address,address,address,uint256,byte[])))"
      ]
    },
    "2884": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "Method(Transfer((address,address,address,uint256,byte[])))",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "2885": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "event%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "event%0#0"
      ]
    },
    "2886": {
      "op": "log",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "2887": {
      "op": "frame_dig -3",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "toPartition#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "toPartition#0 (copy)"
      ]
    },
    "2889": {
      "op": "frame_dig -5",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "toPartition#0 (copy)",
        "fromPartition#0 (copy)"
      ]
    },
    "2891": {
      "op": "!=",
      "defined_out": [
        "bzero%0#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "2892": {
      "op": "bz _transfer_partition_after_if_else@4",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "2895": {
      "op": "frame_dig -4",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "to#0 (copy)"
      ]
    },
    "2897": {
      "op": "frame_dig -3",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "to#0 (copy)",
        "toPartition#0 (copy)"
      ]
    },
    "2899": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._add_participation_to_holder",
      "op": "callsub _add_participation_to_holder",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "2902": {
      "block": "_transfer_partition_after_if_else@4",
      "stack_in": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ],
      "op": "frame_dig -4",
      "defined_out": [
        "to#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "to#0 (copy)"
      ]
    },
    "2904": {
      "op": "frame_dig -3",
      "defined_out": [
        "to#0 (copy)",
        "toPartition#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "to#0 (copy)",
        "toPartition#0 (copy)"
      ]
    },
    "2906": {
      "op": "concat",
      "defined_out": [
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "toKey#0"
      ]
    },
    "2907": {
      "op": "bytec 4 // \"p\"",
      "defined_out": [
        "\"p\"",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "toKey#0",
        "\"p\""
      ]
    },
    "2909": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "\"p\"",
        "toKey#0"
      ]
    },
    "2910": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "2911": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "2912": {
      "op": "frame_bury 1",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "2914": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2915": {
      "op": "bury 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "maybe_exists%2#0"
      ]
    },
    "2917": {
      "op": "bnz _transfer_partition_after_if_else@6",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "2920": {
      "op": "frame_dig 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "2922": {
      "op": "bytec_0 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "2923": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "2924": {
      "block": "_transfer_partition_after_if_else@6",
      "stack_in": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "2926": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "2927": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2928": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "maybe_value%3#0"
      ]
    },
    "2929": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "maybe_value%3#0",
        "amount#0 (copy)"
      ]
    },
    "2931": {
      "op": "b+",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0"
      ]
    },
    "2932": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "2933": {
      "op": "len",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "2934": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "2935": {
      "op": "<=",
      "defined_out": [
        "len_ok%1#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "2936": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0"
      ]
    },
    "2937": {
      "op": "frame_dig 0",
      "defined_out": [
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%0#0"
      ]
    },
    "2939": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0",
        "tmp%6#0",
        "arc4_encoded%1#0"
      ]
    },
    "2940": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "2941": {
      "retsub": true,
      "op": "retsub"
    },
    "2942": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_authorize_operator_by_portion",
      "params": {
        "holder#0": "bytes",
        "operator#0": "bytes",
        "partition#0": "bytes",
        "amount#0": "bytes"
      },
      "block": "arc1410_authorize_operator_by_portion",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "2945": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2947": {
      "op": "frame_dig -4",
      "defined_out": [
        "holder#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "holder#0 (copy)"
      ]
    },
    "2949": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2950": {
      "error": "Only holder can authorize portion",
      "op": "assert // Only holder can authorize portion",
      "stack_out": []
    },
    "2951": {
      "op": "frame_dig -4",
      "stack_out": [
        "holder#0 (copy)"
      ]
    },
    "2953": {
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ]
    },
    "2955": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2956": {
      "op": "frame_dig -2",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "2958": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "2959": {
      "op": "bytec 11 // \"opa\"",
      "defined_out": [
        "\"opa\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"opa\""
      ]
    },
    "2961": {
      "op": "swap",
      "stack_out": [
        "\"opa\"",
        "key#0"
      ]
    },
    "2962": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2963": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "amount#0 (copy)"
      ]
    },
    "2965": {
      "op": "box_put",
      "stack_out": []
    },
    "2966": {
      "retsub": true,
      "op": "retsub"
    },
    "2967": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator_by_portion",
      "params": {
        "holder#0": "bytes",
        "operator#0": "bytes",
        "partition#0": "bytes"
      },
      "block": "arc1410_is_operator_by_portion",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "2970": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2971": {
      "op": "frame_dig -2",
      "defined_out": [
        "operator#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "operator#0 (copy)"
      ]
    },
    "2973": {
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "operator#0 (copy)",
        "holder#0 (copy)"
      ]
    },
    "2975": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "2976": {
      "op": "bz arc1410_is_operator_by_portion_after_if_else@2",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2979": {
      "op": "bytec 6 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x80"
      ]
    },
    "2981": {
      "op": "swap"
    },
    "2982": {
      "retsub": true,
      "op": "retsub"
    },
    "2983": {
      "block": "arc1410_is_operator_by_portion_after_if_else@2",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "holder#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "holder#0 (copy)"
      ]
    },
    "2985": {
      "op": "frame_dig -2",
      "defined_out": [
        "holder#0 (copy)",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "holder#0 (copy)",
        "operator#0 (copy)"
      ]
    },
    "2987": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2988": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "2990": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "key#0"
      ]
    },
    "2991": {
      "op": "bytec 11 // \"opa\"",
      "defined_out": [
        "\"opa\"",
        "key#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "key#0",
        "\"opa\""
      ]
    },
    "2993": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "\"opa\"",
        "key#0"
      ]
    },
    "2994": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "2995": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "2996": {
      "op": "frame_bury 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "2998": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2999": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "3001": {
      "op": "bnz arc1410_is_operator_by_portion_after_if_else@4",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3004": {
      "op": "bytec 9 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x00"
      ]
    },
    "3006": {
      "op": "swap"
    },
    "3007": {
      "retsub": true,
      "op": "retsub"
    },
    "3008": {
      "block": "arc1410_is_operator_by_portion_after_if_else@4",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "3010": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3011": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "3012": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "0x"
      ]
    },
    "3014": {
      "op": "b>",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "3015": {
      "op": "bytec 9 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "to_encode%0#0",
        "0x00"
      ]
    },
    "3017": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "3018": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "3020": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_bool%0#0"
      ]
    },
    "3021": {
      "op": "swap"
    },
    "3022": {
      "retsub": true,
      "op": "retsub"
    },
    "3023": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_issue_by_partition",
      "params": {
        "to#0": "bytes",
        "partition#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1410_issue_by_partition",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "3026": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bzero%0#0"
      ]
    },
    "3027": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0"
      ]
    },
    "3028": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "tmp%0#0"
      ]
    },
    "3030": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_is_owner",
      "op": "callsub arc88_is_owner",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "tmp%1#0"
      ]
    },
    "3033": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "tmp%1#0",
        "0"
      ]
    },
    "3034": {
      "op": "getbit",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "tmp%2#0"
      ]
    },
    "3035": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "tmp%2#0",
        "1"
      ]
    },
    "3036": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "tmp%3#0"
      ]
    },
    "3037": {
      "error": "only_owner",
      "op": "assert // only_owner",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0"
      ]
    },
    "3038": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "amount#0 (copy)"
      ]
    },
    "3040": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "amount#0 (copy)",
        "0x"
      ]
    },
    "3042": {
      "op": "b>",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "tmp%4#0"
      ]
    },
    "3043": {
      "error": "Invalid amount",
      "op": "assert // Invalid amount",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0"
      ]
    },
    "3044": {
      "op": "frame_dig -4",
      "defined_out": [
        "to#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "to#0 (copy)"
      ]
    },
    "3046": {
      "op": "frame_dig -3",
      "defined_out": [
        "partition#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "to#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "3048": {
      "op": "concat",
      "defined_out": [
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0"
      ]
    },
    "3049": {
      "op": "dup",
      "defined_out": [
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "toKey#0"
      ]
    },
    "3050": {
      "op": "bytec 4 // \"p\"",
      "defined_out": [
        "\"p\"",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "toKey#0",
        "\"p\""
      ]
    },
    "3052": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "\"p\"",
        "toKey#0"
      ]
    },
    "3053": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "3054": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "3055": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%5#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3056": {
      "op": "bury 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "maybe_exists%0#0"
      ]
    },
    "3058": {
      "op": "bnz arc1410_issue_by_partition_after_if_else@2",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "3061": {
      "op": "frame_dig 3",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "3063": {
      "op": "bytec_0 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%5#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "3064": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "3065": {
      "op": "frame_dig -4",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "to#0 (copy)"
      ]
    },
    "3067": {
      "op": "frame_dig -3",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "to#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "3069": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410._add_participation_to_holder",
      "op": "callsub _add_participation_to_holder",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "3072": {
      "block": "arc1410_issue_by_partition_after_if_else@2",
      "stack_in": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "3074": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "3075": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3076": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "maybe_value%1#0"
      ]
    },
    "3077": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "3079": {
      "op": "b+",
      "defined_out": [
        "tmp%5#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0"
      ]
    },
    "3080": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "3081": {
      "op": "len",
      "defined_out": [
        "tmp%5#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "3082": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%5#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "3083": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "tmp%5#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "3084": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0"
      ]
    },
    "3085": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "3086": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "tmp%5#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "3087": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "bzero%0#0",
        "bzero%0#0"
      ]
    },
    "3088": {
      "op": "frame_bury 0",
      "defined_out": [
        "bzero%0#0",
        "tmp%5#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "3090": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%5#0",
        "arc4_encoded%0#0"
      ]
    },
    "3091": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "3092": {
      "op": "bytec 5 // \"b\"",
      "defined_out": [
        "\"b\"",
        "bzero%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "\"b\""
      ]
    },
    "3094": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"b\"",
        "bzero%0#0",
        "tmp%5#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "\"b\"",
        "to#0 (copy)"
      ]
    },
    "3096": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0"
      ]
    },
    "3097": {
      "op": "dup",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "tmp%9#0"
      ]
    },
    "3098": {
      "op": "frame_bury 1",
      "defined_out": [
        "bzero%0#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0"
      ]
    },
    "3100": {
      "op": "box_len",
      "defined_out": [
        "bzero%0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3101": {
      "op": "bury 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "maybe_exists%2#0"
      ]
    },
    "3103": {
      "op": "bnz arc1410_issue_by_partition_after_if_else@4",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "3106": {
      "op": "frame_dig 1",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0"
      ]
    },
    "3108": {
      "op": "bytec_0 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "bzero%0#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "3109": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "3110": {
      "block": "arc1410_issue_by_partition_after_if_else@4",
      "stack_in": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0"
      ]
    },
    "3112": {
      "op": "dup",
      "defined_out": [
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ]
    },
    "3113": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3114": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "maybe_value%3#0"
      ]
    },
    "3115": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "maybe_value%3#0",
        "amount#0 (copy)"
      ]
    },
    "3117": {
      "op": "b+",
      "defined_out": [
        "tmp%9#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0"
      ]
    },
    "3118": {
      "op": "dup",
      "defined_out": [
        "tmp%9#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "3119": {
      "op": "len",
      "defined_out": [
        "tmp%9#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "3120": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%9#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "3121": {
      "op": "<=",
      "defined_out": [
        "len_ok%1#0",
        "tmp%9#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "3122": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0"
      ]
    },
    "3123": {
      "op": "frame_dig 0",
      "defined_out": [
        "bzero%0#0",
        "tmp%9#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0",
        "bzero%0#0"
      ]
    },
    "3125": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "bzero%0#0 (copy)",
        "tmp%9#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "tmp%9#0",
        "to_encode%1#0",
        "bzero%0#0 (copy)",
        "bzero%0#0 (copy)"
      ]
    },
    "3126": {
      "op": "cover 3",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "tmp%9#0",
        "to_encode%1#0",
        "bzero%0#0 (copy)"
      ]
    },
    "3128": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "bzero%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "tmp%9#0",
        "arc4_encoded%1#0"
      ]
    },
    "3129": {
      "op": "box_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0"
      ]
    },
    "3130": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "bzero%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "0"
      ]
    },
    "3131": {
      "op": "bytec_3 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0",
        "bzero%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "0",
        "\"t\""
      ]
    },
    "3132": {
      "op": "app_global_get_ex",
      "defined_out": [
        "bzero%0#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3133": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "maybe_value%4#0"
      ]
    },
    "3134": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "maybe_value%4#0",
        "amount#0 (copy)"
      ]
    },
    "3136": {
      "op": "b+",
      "defined_out": [
        "bzero%0#0",
        "tmp%9#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "to_encode%2#0"
      ]
    },
    "3137": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "tmp%9#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "3138": {
      "op": "len",
      "defined_out": [
        "bzero%0#0",
        "tmp%9#0",
        "to_encode%2#0",
        "value_len%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "to_encode%2#0",
        "value_len%2#0"
      ]
    },
    "3139": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "to_encode%2#0",
        "value_len%2#0",
        "32"
      ]
    },
    "3140": {
      "op": "<=",
      "defined_out": [
        "bzero%0#0",
        "len_ok%2#0",
        "tmp%9#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "to_encode%2#0",
        "len_ok%2#0"
      ]
    },
    "3141": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "bzero%0#0",
        "to_encode%2#0"
      ]
    },
    "3142": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%2#0",
        "bzero%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "arc4_encoded%2#0"
      ]
    },
    "3143": {
      "op": "bytec_3 // \"t\"",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "arc4_encoded%2#0",
        "\"t\""
      ]
    },
    "3144": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "\"t\"",
        "arc4_encoded%2#0"
      ]
    },
    "3145": {
      "op": "app_global_put",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "3146": {
      "op": "frame_dig 2",
      "defined_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "toKey#0"
      ]
    },
    "3148": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "toKey#0",
        "amount#0 (copy)"
      ]
    },
    "3150": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%6#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "3151": {
      "op": "bytec 19 // 0x0062",
      "defined_out": [
        "0x0062",
        "bzero%0#0",
        "encoded_tuple_buffer%6#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%6#0",
        "0x0062"
      ]
    },
    "3153": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%7#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3154": {
      "op": "frame_dig -1",
      "defined_out": [
        "bzero%0#0",
        "data#0 (copy)",
        "encoded_tuple_buffer%7#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%7#0",
        "data#0 (copy)"
      ]
    },
    "3156": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%8#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "3157": {
      "op": "bytec 8 // 0x0002",
      "defined_out": [
        "0x0002",
        "bzero%0#0",
        "encoded_tuple_buffer%8#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%8#0",
        "0x0002"
      ]
    },
    "3159": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "0x0002",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "3160": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%11#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3161": {
      "op": "pushbytes 0xfa443b1b // method \"Issue((address,address,uint256,byte[]))\"",
      "defined_out": [
        "Method(Issue((address,address,uint256,byte[])))",
        "bzero%0#0",
        "encoded_tuple_buffer%11#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "encoded_tuple_buffer%11#0",
        "Method(Issue((address,address,uint256,byte[])))"
      ]
    },
    "3167": {
      "op": "swap",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "Method(Issue((address,address,uint256,byte[])))",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3168": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "event%0#0",
        "tmp%9#0",
        "toKey#0"
      ],
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0",
        "event%0#0"
      ]
    },
    "3169": {
      "op": "log",
      "stack_out": [
        "bzero%0#0",
        "tmp%9#0",
        "toKey#0",
        "tmp%5#0"
      ]
    },
    "3170": {
      "retsub": true,
      "op": "retsub"
    },
    "3171": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_redeem_by_partition",
      "params": {
        "partition#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1410_redeem_by_partition",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "3174": {
      "op": "txn Sender",
      "defined_out": [
        "from#0"
      ],
      "stack_out": [
        "from#0"
      ]
    },
    "3176": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "from#0"
      ],
      "stack_out": [
        "from#0",
        "amount#0 (copy)"
      ]
    },
    "3178": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "amount#0 (copy)",
        "from#0"
      ],
      "stack_out": [
        "from#0",
        "amount#0 (copy)",
        "0x"
      ]
    },
    "3180": {
      "op": "b>",
      "defined_out": [
        "from#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "from#0",
        "tmp%0#0"
      ]
    },
    "3181": {
      "error": "Invalid amount",
      "op": "assert // Invalid amount",
      "stack_out": [
        "from#0"
      ]
    },
    "3182": {
      "op": "dup",
      "defined_out": [
        "from#0",
        "from#0 (copy)"
      ],
      "stack_out": [
        "from#0",
        "from#0 (copy)"
      ]
    },
    "3183": {
      "op": "frame_dig -3",
      "defined_out": [
        "from#0",
        "from#0 (copy)",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "from#0",
        "from#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "3185": {
      "op": "concat",
      "defined_out": [
        "from#0",
        "fromKey#0"
      ],
      "stack_out": [
        "from#0",
        "fromKey#0"
      ]
    },
    "3186": {
      "op": "dup",
      "stack_out": [
        "from#0",
        "fromKey#0",
        "fromKey#0"
      ]
    },
    "3187": {
      "op": "cover 2",
      "defined_out": [
        "from#0",
        "fromKey#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "fromKey#0"
      ]
    },
    "3189": {
      "op": "bytec 4 // \"p\"",
      "defined_out": [
        "\"p\"",
        "from#0",
        "fromKey#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "fromKey#0",
        "\"p\""
      ]
    },
    "3191": {
      "op": "swap",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "\"p\"",
        "fromKey#0"
      ]
    },
    "3192": {
      "op": "concat",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0"
      ]
    },
    "3193": {
      "op": "dup",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "3194": {
      "op": "box_len",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3195": {
      "op": "bury 1",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "3197": {
      "error": "Partition balance missing",
      "op": "assert // Partition balance missing",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0"
      ]
    },
    "3198": {
      "op": "dup",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "3199": {
      "op": "box_get",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3200": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "3201": {
      "op": "frame_dig -2",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "3203": {
      "op": "b>=",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "3204": {
      "error": "Insufficient partition balance",
      "op": "assert // Insufficient partition balance",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0"
      ]
    },
    "3205": {
      "op": "dup",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "3206": {
      "op": "box_get",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3207": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%2#0"
      ]
    },
    "3208": {
      "op": "frame_dig -2",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "maybe_value%2#0",
        "amount#0 (copy)"
      ]
    },
    "3210": {
      "op": "b-",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "3211": {
      "op": "dup",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "3212": {
      "op": "len",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "3213": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "3214": {
      "op": "<=",
      "defined_out": [
        "from#0",
        "fromKey#0",
        "len_ok%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "3215": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "3216": {
      "op": "intc_2 // 32",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "3217": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "3218": {
      "op": "dup",
      "stack_out": [
        "fromKey#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0",
        "bzero%0#0"
      ]
    },
    "3219": {
      "op": "cover 4",
      "defined_out": [
        "bzero%0#0",
        "from#0",
        "fromKey#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "from#0",
        "tmp%1#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "3221": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "from#0",
        "fromKey#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "from#0",
        "tmp%1#0",
        "arc4_encoded%0#0"
      ]
    },
    "3222": {
      "op": "box_put",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "from#0"
      ]
    },
    "3223": {
      "op": "bytec 5 // \"b\"",
      "defined_out": [
        "\"b\"",
        "bzero%0#0",
        "from#0",
        "fromKey#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "from#0",
        "\"b\""
      ]
    },
    "3225": {
      "op": "swap",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "\"b\"",
        "from#0"
      ]
    },
    "3226": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "3227": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "3228": {
      "op": "box_len",
      "defined_out": [
        "bzero%0#0",
        "fromKey#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3229": {
      "op": "bury 1",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "maybe_exists%3#0"
      ]
    },
    "3231": {
      "op": "bz arc1410_redeem_by_partition_bool_false@3",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "3234": {
      "op": "frame_dig 2",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "3236": {
      "op": "box_get",
      "defined_out": [
        "bzero%0#0",
        "fromKey#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3237": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "maybe_value%4#0"
      ]
    },
    "3238": {
      "op": "frame_dig -2",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "maybe_value%4#0",
        "amount#0 (copy)"
      ]
    },
    "3240": {
      "op": "b>=",
      "defined_out": [
        "bzero%0#0",
        "fromKey#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "3241": {
      "op": "bz arc1410_redeem_by_partition_bool_false@3",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "3244": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "bzero%0#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "and_result%0#0"
      ]
    },
    "3245": {
      "block": "arc1410_redeem_by_partition_bool_merge@4",
      "stack_in": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "and_result%0#0"
      ],
      "error": "Insufficient balance",
      "op": "assert // Insufficient balance",
      "defined_out": [],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "3246": {
      "op": "frame_dig 2",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "3248": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "3249": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "3250": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "maybe_value%5#0"
      ]
    },
    "3251": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "maybe_value%5#0",
        "amount#0 (copy)"
      ]
    },
    "3253": {
      "op": "b-",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0"
      ]
    },
    "3254": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "3255": {
      "op": "len",
      "defined_out": [
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "3256": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "3257": {
      "op": "<=",
      "defined_out": [
        "len_ok%1#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "3258": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0"
      ]
    },
    "3259": {
      "op": "frame_dig 1",
      "defined_out": [
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%0#0"
      ]
    },
    "3261": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "bzero%0#0 (copy)",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%0#0 (copy)",
        "bzero%0#0 (copy)"
      ]
    },
    "3262": {
      "op": "cover 3",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%0#0 (copy)"
      ]
    },
    "3264": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "tmp%6#0",
        "arc4_encoded%1#0"
      ]
    },
    "3265": {
      "op": "box_put",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0"
      ]
    },
    "3266": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "0"
      ]
    },
    "3267": {
      "op": "bytec_3 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "0",
        "\"t\""
      ]
    },
    "3268": {
      "op": "app_global_get_ex",
      "defined_out": [
        "bzero%0#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "3269": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "maybe_value%6#0"
      ]
    },
    "3270": {
      "op": "frame_dig -2",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "maybe_value%6#0",
        "amount#0 (copy)"
      ]
    },
    "3272": {
      "op": "b-",
      "defined_out": [
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "to_encode%2#0"
      ]
    },
    "3273": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "3274": {
      "op": "len",
      "defined_out": [
        "bzero%0#0",
        "tmp%6#0",
        "to_encode%2#0",
        "value_len%2#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "to_encode%2#0",
        "value_len%2#0"
      ]
    },
    "3275": {
      "op": "intc_2 // 32",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "to_encode%2#0",
        "value_len%2#0",
        "32"
      ]
    },
    "3276": {
      "op": "<=",
      "defined_out": [
        "bzero%0#0",
        "len_ok%2#0",
        "tmp%6#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "to_encode%2#0",
        "len_ok%2#0"
      ]
    },
    "3277": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "bzero%0#0",
        "to_encode%2#0"
      ]
    },
    "3278": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%2#0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "arc4_encoded%2#0"
      ]
    },
    "3279": {
      "op": "bytec_3 // \"t\"",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "arc4_encoded%2#0",
        "\"t\""
      ]
    },
    "3280": {
      "op": "swap",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "\"t\"",
        "arc4_encoded%2#0"
      ]
    },
    "3281": {
      "op": "app_global_put",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "3282": {
      "op": "frame_dig 0",
      "defined_out": [
        "bzero%0#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "fromKey#0"
      ]
    },
    "3284": {
      "op": "frame_dig -2",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "fromKey#0",
        "amount#0 (copy)"
      ]
    },
    "3286": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%6#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "3287": {
      "op": "bytec 19 // 0x0062",
      "defined_out": [
        "0x0062",
        "bzero%0#0",
        "encoded_tuple_buffer%6#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%6#0",
        "0x0062"
      ]
    },
    "3289": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%7#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3290": {
      "op": "frame_dig -1",
      "defined_out": [
        "bzero%0#0",
        "data#0 (copy)",
        "encoded_tuple_buffer%7#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%7#0",
        "data#0 (copy)"
      ]
    },
    "3292": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%8#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "3293": {
      "op": "bytec 8 // 0x0002",
      "defined_out": [
        "0x0002",
        "bzero%0#0",
        "encoded_tuple_buffer%8#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%8#0",
        "0x0002"
      ]
    },
    "3295": {
      "op": "swap",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "0x0002",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "3296": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "encoded_tuple_buffer%11#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3297": {
      "op": "bytec 23 // method \"Redeem((address,address,uint256,byte[]))\"",
      "defined_out": [
        "Method(Redeem((address,address,uint256,byte[])))",
        "bzero%0#0",
        "encoded_tuple_buffer%11#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%11#0",
        "Method(Redeem((address,address,uint256,byte[])))"
      ]
    },
    "3299": {
      "op": "swap",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "Method(Redeem((address,address,uint256,byte[])))",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3300": {
      "op": "concat",
      "defined_out": [
        "bzero%0#0",
        "event%0#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "event%0#0"
      ]
    },
    "3301": {
      "op": "log",
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0"
      ]
    },
    "3302": {
      "retsub": true,
      "op": "retsub"
    },
    "3303": {
      "block": "arc1410_redeem_by_partition_bool_false@3",
      "stack_in": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "fromKey#0",
        "bzero%0#0",
        "tmp%6#0",
        "and_result%0#0"
      ]
    },
    "3304": {
      "op": "b arc1410_redeem_by_partition_bool_merge@4"
    },
    "3307": {
      "subroutine": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_operator_redeem_by_partition",
      "params": {
        "from#0": "bytes",
        "partition#0": "bytes",
        "amount#0": "bytes",
        "data#0": "bytes"
      },
      "block": "arc1410_operator_redeem_by_partition",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "3310": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bzero%1#0"
      ]
    },
    "3311": {
      "op": "dupn 3",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0"
      ]
    },
    "3313": {
      "op": "txn Sender"
    },
    "3315": {
      "op": "frame_dig -4"
    },
    "3317": {
      "op": "txn Sender"
    },
    "3319": {
      "op": "frame_dig -3",
      "defined_out": [
        "from#0 (copy)",
        "partition#0 (copy)",
        "sender#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "from#0 (copy)",
        "sender#0",
        "partition#0 (copy)"
      ]
    },
    "3321": {
      "callsub": "smart_contracts/security_token/arc1410.algo.ts::Arc1410.arc1410_is_operator",
      "op": "callsub arc1410_is_operator",
      "defined_out": [
        "sender#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "tmp%0#0"
      ]
    },
    "3324": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "tmp%0#0",
        "0"
      ]
    },
    "3325": {
      "op": "getbit",
      "defined_out": [
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "tmp%1#0"
      ]
    },
    "3326": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "tmp%1#0",
        "1"
      ]
    },
    "3327": {
      "op": "==",
      "defined_out": [
        "authorized#0",
        "sender#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0"
      ]
    },
    "3328": {
      "op": "dupn 2",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "authorized#0"
      ]
    },
    "3330": {
      "op": "bnz arc1410_operator_redeem_by_partition_after_if_else@4",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "3333": {
      "op": "frame_dig -4",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "from#0 (copy)"
      ]
    },
    "3335": {
      "op": "frame_dig 4",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "from#0 (copy)",
        "sender#0"
      ]
    },
    "3337": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%2#0",
        "sender#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3338": {
      "op": "frame_dig -3",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%2#0",
        "partition#0 (copy)"
      ]
    },
    "3340": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "pKey#0",
        "sender#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "pKey#0"
      ]
    },
    "3341": {
      "op": "bytec 11 // \"opa\"",
      "defined_out": [
        "\"opa\"",
        "authorized#0",
        "authorized#9",
        "pKey#0",
        "sender#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "pKey#0",
        "\"opa\""
      ]
    },
    "3343": {
      "op": "swap",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "\"opa\"",
        "pKey#0"
      ]
    },
    "3344": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0"
      ]
    },
    "3345": {
      "op": "dup",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "3346": {
      "op": "frame_bury 3",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0"
      ]
    },
    "3348": {
      "op": "box_len",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3349": {
      "op": "bury 1",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_exists%0#0"
      ]
    },
    "3351": {
      "op": "bz arc1410_operator_redeem_by_partition_after_if_else@3",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "3354": {
      "op": "frame_dig 3",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0"
      ]
    },
    "3356": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "3357": {
      "op": "box_get",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "maybe_exists%1#0",
        "remaining#0",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "maybe_exists%1#0"
      ]
    },
    "3358": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0"
      ]
    },
    "3359": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "remaining#0",
        "remaining#0 (copy)",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "remaining#0 (copy)"
      ]
    },
    "3360": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "authorized#0",
        "authorized#9",
        "remaining#0",
        "remaining#0 (copy)",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "remaining#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "3362": {
      "op": "b>=",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "remaining#0",
        "sender#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "tmp%4#0"
      ]
    },
    "3363": {
      "error": "Portion allowance exceeded",
      "op": "assert // Portion allowance exceeded",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0"
      ]
    },
    "3364": {
      "op": "intc_1 // 1",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "authorized#0"
      ]
    },
    "3365": {
      "op": "frame_bury 5",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0"
      ]
    },
    "3367": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "remaining#0",
        "amount#0 (copy)"
      ]
    },
    "3369": {
      "op": "b-",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0"
      ]
    },
    "3370": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "3371": {
      "op": "len",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "3372": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "3373": {
      "op": "<=",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "len_ok%0#0",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "3374": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0"
      ]
    },
    "3375": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "3376": {
      "op": "bzero",
      "defined_out": [
        "authorized#0",
        "authorized#9",
        "bzero%0#0",
        "sender#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "3377": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "authorized#0",
        "authorized#9",
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%2#0",
        "arc4_encoded%0#0"
      ]
    },
    "3378": {
      "op": "box_put",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "3379": {
      "block": "arc1410_operator_redeem_by_partition_after_if_else@3",
      "stack_in": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "authorized#9"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "authorized#9"
      ]
    },
    "3381": {
      "op": "frame_bury 6",
      "defined_out": [
        "authorized#9"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "3383": {
      "block": "arc1410_operator_redeem_by_partition_after_if_else@4",
      "stack_in": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ],
      "op": "frame_dig 6",
      "defined_out": [
        "authorized#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "authorized#0"
      ]
    },
    "3385": {
      "error": "Not authorized operator",
      "op": "assert // Not authorized operator",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "3386": {
      "op": "frame_dig -4",
      "defined_out": [
        "authorized#0",
        "from#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "from#0 (copy)"
      ]
    },
    "3388": {
      "op": "frame_dig -3",
      "defined_out": [
        "authorized#0",
        "from#0 (copy)",
        "partition#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "from#0 (copy)",
        "partition#0 (copy)"
      ]
    },
    "3390": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "fromKey#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "fromKey#0"
      ]
    },
    "3391": {
      "op": "dup",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "fromKey#0",
        "fromKey#0"
      ]
    },
    "3392": {
      "op": "frame_bury 1",
      "defined_out": [
        "authorized#0",
        "fromKey#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "fromKey#0"
      ]
    },
    "3394": {
      "op": "bytec 4 // \"p\"",
      "defined_out": [
        "\"p\"",
        "authorized#0",
        "fromKey#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "fromKey#0",
        "\"p\""
      ]
    },
    "3396": {
      "op": "swap",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "\"p\"",
        "fromKey#0"
      ]
    },
    "3397": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0"
      ]
    },
    "3398": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "3399": {
      "op": "box_len",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3400": {
      "op": "bury 1",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_exists%2#0"
      ]
    },
    "3402": {
      "error": "Partition balance missing",
      "op": "assert // Partition balance missing",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0"
      ]
    },
    "3403": {
      "op": "dup",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "3404": {
      "op": "box_get",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3405": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_value%3#0"
      ]
    },
    "3406": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "authorized#0",
        "fromKey#0",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_value%3#0",
        "amount#0 (copy)"
      ]
    },
    "3408": {
      "op": "b>=",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "3409": {
      "error": "Insufficient partition balance",
      "op": "assert // Insufficient partition balance",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0"
      ]
    },
    "3410": {
      "op": "dup",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "3411": {
      "op": "box_get",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3412": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_value%4#0"
      ]
    },
    "3413": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "maybe_value%4#0",
        "amount#0 (copy)"
      ]
    },
    "3415": {
      "op": "b-",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0"
      ]
    },
    "3416": {
      "op": "dup",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "tmp%6#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "3417": {
      "op": "len",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "3418": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "authorized#0",
        "fromKey#0",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "3419": {
      "op": "<=",
      "defined_out": [
        "authorized#0",
        "fromKey#0",
        "len_ok%1#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "3420": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0"
      ]
    },
    "3421": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "32"
      ]
    },
    "3422": {
      "op": "bzero",
      "defined_out": [
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%1#0"
      ]
    },
    "3423": {
      "op": "dup",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%1#0",
        "bzero%1#0"
      ]
    },
    "3424": {
      "op": "frame_bury 0",
      "defined_out": [
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "tmp%6#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "to_encode%1#0",
        "bzero%1#0"
      ]
    },
    "3426": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%6#0",
        "arc4_encoded%1#0"
      ]
    },
    "3427": {
      "op": "box_put",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "3428": {
      "op": "bytec 5 // \"b\"",
      "defined_out": [
        "\"b\"",
        "authorized#0",
        "bzero%1#0",
        "fromKey#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "\"b\""
      ]
    },
    "3430": {
      "op": "frame_dig -4",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "\"b\"",
        "from#0 (copy)"
      ]
    },
    "3432": {
      "op": "concat",
      "defined_out": [
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0"
      ]
    },
    "3433": {
      "op": "dup",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "tmp%11#0"
      ]
    },
    "3434": {
      "op": "frame_bury 2",
      "defined_out": [
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0"
      ]
    },
    "3436": {
      "op": "box_len",
      "defined_out": [
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "3437": {
      "op": "bury 1",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_exists%5#0"
      ]
    },
    "3439": {
      "op": "bz arc1410_operator_redeem_by_partition_bool_false@7",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "3442": {
      "op": "frame_dig 2",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0"
      ]
    },
    "3444": {
      "op": "box_get",
      "defined_out": [
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "3445": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_value%6#0"
      ]
    },
    "3446": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "maybe_value%6#0",
        "amount#0 (copy)"
      ]
    },
    "3448": {
      "op": "b>=",
      "defined_out": [
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%13#0"
      ]
    },
    "3449": {
      "op": "bz arc1410_operator_redeem_by_partition_bool_false@7",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "3452": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "authorized#0",
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "and_result%0#0"
      ]
    },
    "3453": {
      "block": "arc1410_operator_redeem_by_partition_bool_merge@8",
      "stack_in": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "and_result%0#0"
      ],
      "error": "Insufficient balance",
      "op": "assert // Insufficient balance",
      "defined_out": [],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "3454": {
      "op": "frame_dig 2",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0"
      ]
    },
    "3456": {
      "op": "dup",
      "defined_out": [
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ]
    },
    "3457": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "3458": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "maybe_value%7#0"
      ]
    },
    "3459": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%7#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "maybe_value%7#0",
        "amount#0 (copy)"
      ]
    },
    "3461": {
      "op": "b-",
      "defined_out": [
        "tmp%11#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0"
      ]
    },
    "3462": {
      "op": "dup",
      "defined_out": [
        "tmp%11#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "3463": {
      "op": "len",
      "defined_out": [
        "tmp%11#0",
        "to_encode%2#0",
        "value_len%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0",
        "value_len%2#0"
      ]
    },
    "3464": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%11#0",
        "to_encode%2#0",
        "value_len%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0",
        "value_len%2#0",
        "32"
      ]
    },
    "3465": {
      "op": "<=",
      "defined_out": [
        "len_ok%2#0",
        "tmp%11#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0",
        "len_ok%2#0"
      ]
    },
    "3466": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0"
      ]
    },
    "3467": {
      "op": "frame_dig 0",
      "defined_out": [
        "bzero%1#0",
        "tmp%11#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0",
        "bzero%1#0"
      ]
    },
    "3469": {
      "op": "dup",
      "defined_out": [
        "bzero%1#0",
        "bzero%1#0 (copy)",
        "tmp%11#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "tmp%11#0",
        "to_encode%2#0",
        "bzero%1#0 (copy)",
        "bzero%1#0 (copy)"
      ]
    },
    "3470": {
      "op": "cover 3",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "tmp%11#0",
        "to_encode%2#0",
        "bzero%1#0 (copy)"
      ]
    },
    "3472": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%2#0",
        "bzero%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "tmp%11#0",
        "arc4_encoded%2#0"
      ]
    },
    "3473": {
      "op": "box_put",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0"
      ]
    },
    "3474": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "bzero%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "0"
      ]
    },
    "3475": {
      "op": "bytec_3 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0",
        "bzero%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "0",
        "\"t\""
      ]
    },
    "3476": {
      "op": "app_global_get_ex",
      "defined_out": [
        "bzero%1#0",
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "3477": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "maybe_value%8#0"
      ]
    },
    "3478": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "maybe_value%8#0",
        "amount#0 (copy)"
      ]
    },
    "3480": {
      "op": "b-",
      "defined_out": [
        "bzero%1#0",
        "tmp%11#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "to_encode%3#0"
      ]
    },
    "3481": {
      "op": "dup",
      "defined_out": [
        "bzero%1#0",
        "tmp%11#0",
        "to_encode%3#0",
        "to_encode%3#0 (copy)"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "to_encode%3#0",
        "to_encode%3#0 (copy)"
      ]
    },
    "3482": {
      "op": "len",
      "defined_out": [
        "bzero%1#0",
        "tmp%11#0",
        "to_encode%3#0",
        "value_len%3#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "to_encode%3#0",
        "value_len%3#0"
      ]
    },
    "3483": {
      "op": "intc_2 // 32",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "to_encode%3#0",
        "value_len%3#0",
        "32"
      ]
    },
    "3484": {
      "op": "<=",
      "defined_out": [
        "bzero%1#0",
        "len_ok%3#0",
        "tmp%11#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "to_encode%3#0",
        "len_ok%3#0"
      ]
    },
    "3485": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "bzero%1#0",
        "to_encode%3#0"
      ]
    },
    "3486": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%3#0",
        "bzero%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "arc4_encoded%3#0"
      ]
    },
    "3487": {
      "op": "bytec_3 // \"t\"",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "arc4_encoded%3#0",
        "\"t\""
      ]
    },
    "3488": {
      "op": "swap",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "\"t\"",
        "arc4_encoded%3#0"
      ]
    },
    "3489": {
      "op": "app_global_put",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "3490": {
      "op": "frame_dig 1",
      "defined_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "fromKey#0"
      ]
    },
    "3492": {
      "op": "frame_dig -2",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "fromKey#0",
        "amount#0 (copy)"
      ]
    },
    "3494": {
      "op": "concat",
      "defined_out": [
        "bzero%1#0",
        "encoded_tuple_buffer%10#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "3495": {
      "op": "bytec 19 // 0x0062",
      "defined_out": [
        "0x0062",
        "bzero%1#0",
        "encoded_tuple_buffer%10#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%10#0",
        "0x0062"
      ]
    },
    "3497": {
      "op": "concat",
      "defined_out": [
        "bzero%1#0",
        "encoded_tuple_buffer%11#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3498": {
      "op": "frame_dig -1",
      "defined_out": [
        "bzero%1#0",
        "data#0 (copy)",
        "encoded_tuple_buffer%11#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%11#0",
        "data#0 (copy)"
      ]
    },
    "3500": {
      "op": "concat",
      "defined_out": [
        "bzero%1#0",
        "encoded_tuple_buffer%12#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "3501": {
      "op": "bytec 8 // 0x0002",
      "defined_out": [
        "0x0002",
        "bzero%1#0",
        "encoded_tuple_buffer%12#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%12#0",
        "0x0002"
      ]
    },
    "3503": {
      "op": "swap",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "0x0002",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "3504": {
      "op": "concat",
      "defined_out": [
        "bzero%1#0",
        "encoded_tuple_buffer%15#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "3505": {
      "op": "bytec 23 // method \"Redeem((address,address,uint256,byte[]))\"",
      "defined_out": [
        "Method(Redeem((address,address,uint256,byte[])))",
        "bzero%1#0",
        "encoded_tuple_buffer%15#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "encoded_tuple_buffer%15#0",
        "Method(Redeem((address,address,uint256,byte[])))"
      ]
    },
    "3507": {
      "op": "swap",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "Method(Redeem((address,address,uint256,byte[])))",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "3508": {
      "op": "concat",
      "defined_out": [
        "bzero%1#0",
        "event%0#0",
        "fromKey#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "event%0#0"
      ]
    },
    "3509": {
      "op": "log",
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ]
    },
    "3510": {
      "retsub": true,
      "op": "retsub"
    },
    "3511": {
      "block": "arc1410_operator_redeem_by_partition_bool_false@7",
      "stack_in": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "bzero%1#0",
        "fromKey#0",
        "tmp%11#0",
        "tmp%2#0",
        "sender#0",
        "authorized#0",
        "authorized#9",
        "and_result%0#0"
      ]
    },
    "3512": {
      "op": "b arc1410_operator_redeem_by_partition_bool_merge@8"
    },
    "3515": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.bootstrap",
      "params": {
        "name#0": "bytes",
        "symbol#0": "bytes",
        "decimals#0": "bytes",
        "totalSupply#0": "bytes"
      },
      "block": "bootstrap",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "3518": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3520": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3522": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3523": {
      "error": "Only deployer of this smart contract can call bootstrap method",
      "op": "assert // Only deployer of this smart contract can call bootstrap method",
      "stack_out": []
    },
    "3524": {
      "op": "frame_dig -4",
      "defined_out": [
        "name#0 (copy)"
      ],
      "stack_out": [
        "name#0 (copy)"
      ]
    },
    "3526": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "3529": {
      "op": "len",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "3530": {
      "op": "dup",
      "defined_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "3531": {
      "error": "Name of the asset must be longer or equal to 1 character",
      "op": "assert // Name of the asset must be longer or equal to 1 character",
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "3532": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "32"
      ]
    },
    "3533": {
      "op": "<=",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "3534": {
      "error": "Name of the asset must be shorter or equal to 32 characters",
      "op": "assert // Name of the asset must be shorter or equal to 32 characters",
      "stack_out": []
    },
    "3535": {
      "op": "frame_dig -3",
      "defined_out": [
        "symbol#0 (copy)"
      ],
      "stack_out": [
        "symbol#0 (copy)"
      ]
    },
    "3537": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "3540": {
      "op": "len",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "3541": {
      "op": "dup",
      "defined_out": [
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "3542": {
      "error": "Symbol of the asset must be longer or equal to 1 character",
      "op": "assert // Symbol of the asset must be longer or equal to 1 character",
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "3543": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "8"
      ]
    },
    "3544": {
      "op": "<=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "3545": {
      "error": "Symbol of the asset must be shorter or equal to 8 characters",
      "op": "assert // Symbol of the asset must be shorter or equal to 8 characters",
      "stack_out": []
    },
    "3546": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3547": {
      "op": "bytec_3 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"t\""
      ]
    },
    "3548": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3549": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "3551": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "3552": {
      "error": "This method can be called only once",
      "op": "assert // This method can be called only once",
      "stack_out": []
    },
    "3553": {
      "op": "pushbytes \"n\"",
      "defined_out": [
        "\"n\""
      ],
      "stack_out": [
        "\"n\""
      ]
    },
    "3556": {
      "op": "frame_dig -4",
      "stack_out": [
        "\"n\"",
        "name#0 (copy)"
      ]
    },
    "3558": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3559": {
      "op": "pushbytes \"s\"",
      "defined_out": [
        "\"s\""
      ],
      "stack_out": [
        "\"s\""
      ]
    },
    "3562": {
      "op": "frame_dig -3",
      "stack_out": [
        "\"s\"",
        "symbol#0 (copy)"
      ]
    },
    "3564": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3565": {
      "op": "bytec_3 // \"t\"",
      "stack_out": [
        "\"t\""
      ]
    },
    "3566": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"t\"",
        "totalSupply#0 (copy)"
      ],
      "stack_out": [
        "\"t\"",
        "totalSupply#0 (copy)"
      ]
    },
    "3568": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3569": {
      "op": "pushbytes \"d\"",
      "defined_out": [
        "\"d\""
      ],
      "stack_out": [
        "\"d\""
      ]
    },
    "3572": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"d\"",
        "decimals#0 (copy)"
      ],
      "stack_out": [
        "\"d\"",
        "decimals#0 (copy)"
      ]
    },
    "3574": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3575": {
      "op": "txn Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "3577": {
      "op": "bytec 5 // \"b\"",
      "defined_out": [
        "\"b\"",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "\"b\""
      ]
    },
    "3579": {
      "op": "dig 1",
      "defined_out": [
        "\"b\"",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "\"b\"",
        "sender#0 (copy)"
      ]
    },
    "3581": {
      "op": "concat",
      "defined_out": [
        "sender#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%16#0"
      ]
    },
    "3582": {
      "op": "frame_dig -1",
      "stack_out": [
        "sender#0",
        "tmp%16#0",
        "totalSupply#0 (copy)"
      ]
    },
    "3584": {
      "op": "box_put",
      "stack_out": [
        "sender#0"
      ]
    },
    "3585": {
      "op": "global ZeroAddress",
      "defined_out": [
        "sender#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%17#0"
      ]
    },
    "3587": {
      "op": "swap",
      "stack_out": [
        "tmp%17#0",
        "sender#0"
      ]
    },
    "3588": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3589": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "totalSupply#0 (copy)"
      ]
    },
    "3591": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3592": {
      "op": "bytec 24 // method \"arc200_Transfer(address,address,uint256)\"",
      "defined_out": [
        "Method(arc200_Transfer(address,address,uint256))",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "Method(arc200_Transfer(address,address,uint256))"
      ]
    },
    "3594": {
      "op": "swap",
      "stack_out": [
        "Method(arc200_Transfer(address,address,uint256))",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3595": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "3596": {
      "op": "log",
      "stack_out": []
    },
    "3597": {
      "op": "bytec 6 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "0x80"
      ]
    },
    "3599": {
      "retsub": true,
      "op": "retsub"
    },
    "3600": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_name",
      "params": {},
      "block": "arc200_name",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3601": {
      "op": "pushbytes \"n\"",
      "defined_out": [
        "\"n\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"n\""
      ]
    },
    "3604": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3605": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3606": {
      "op": "extract 2 0",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "3609": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "3610": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "3611": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0",
        "32"
      ]
    },
    "3612": {
      "op": "==",
      "defined_out": [
        "lengths_equal%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "lengths_equal%0#0"
      ]
    },
    "3613": {
      "error": "invalid size",
      "op": "assert // invalid size",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "3614": {
      "retsub": true,
      "op": "retsub"
    },
    "3615": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_symbol",
      "params": {},
      "block": "arc200_symbol",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3616": {
      "op": "pushbytes \"s\"",
      "defined_out": [
        "\"s\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"s\""
      ]
    },
    "3619": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3620": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3621": {
      "op": "extract 2 0",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "3624": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "3625": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "3626": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0",
        "8"
      ]
    },
    "3627": {
      "op": "==",
      "defined_out": [
        "lengths_equal%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "lengths_equal%0#0"
      ]
    },
    "3628": {
      "error": "invalid size",
      "op": "assert // invalid size",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "3629": {
      "retsub": true,
      "op": "retsub"
    },
    "3630": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_decimals",
      "params": {},
      "block": "arc200_decimals",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3631": {
      "op": "pushbytes \"d\"",
      "defined_out": [
        "\"d\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"d\""
      ]
    },
    "3634": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3635": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3636": {
      "retsub": true,
      "op": "retsub"
    },
    "3637": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_totalSupply",
      "params": {},
      "block": "arc200_totalSupply",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3638": {
      "op": "bytec_3 // \"t\"",
      "defined_out": [
        "\"t\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"t\""
      ]
    },
    "3639": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3640": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3641": {
      "retsub": true,
      "op": "retsub"
    },
    "3642": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_balanceOf",
      "params": {
        "owner#0": "bytes"
      },
      "block": "arc200_balanceOf",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "3645": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "3647": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "op": "callsub _balanceOf",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3650": {
      "retsub": true,
      "op": "retsub"
    },
    "3651": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_transferFrom",
      "params": {
        "from#0": "bytes",
        "to#0": "bytes",
        "value#0": "bytes"
      },
      "block": "arc200_transferFrom",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "3654": {
      "op": "txn Sender",
      "defined_out": [
        "spender#0"
      ],
      "stack_out": [
        "spender#0"
      ]
    },
    "3656": {
      "op": "frame_dig -3",
      "defined_out": [
        "from#0 (copy)",
        "spender#0"
      ],
      "stack_out": [
        "spender#0",
        "from#0 (copy)"
      ]
    },
    "3658": {
      "op": "dig 1",
      "defined_out": [
        "from#0 (copy)",
        "spender#0",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "spender#0",
        "from#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "3660": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._allowance",
      "op": "callsub _allowance",
      "defined_out": [
        "spender#0",
        "spender_allowance#0"
      ],
      "stack_out": [
        "spender#0",
        "spender_allowance#0"
      ]
    },
    "3663": {
      "op": "dup",
      "defined_out": [
        "spender#0",
        "spender_allowance#0",
        "spender_allowance#0 (copy)"
      ],
      "stack_out": [
        "spender#0",
        "spender_allowance#0",
        "spender_allowance#0 (copy)"
      ]
    },
    "3664": {
      "op": "frame_dig -1",
      "defined_out": [
        "spender#0",
        "spender_allowance#0",
        "spender_allowance#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "spender#0",
        "spender_allowance#0",
        "spender_allowance#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "3666": {
      "op": "b>=",
      "defined_out": [
        "spender#0",
        "spender_allowance#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "spender#0",
        "spender_allowance#0",
        "tmp%0#0"
      ]
    },
    "3667": {
      "error": "insufficient approval",
      "op": "assert // insufficient approval",
      "stack_out": [
        "spender#0",
        "spender_allowance#0"
      ]
    },
    "3668": {
      "op": "frame_dig -1",
      "stack_out": [
        "spender#0",
        "spender_allowance#0",
        "value#0 (copy)"
      ]
    },
    "3670": {
      "op": "b-",
      "defined_out": [
        "spender#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0"
      ]
    },
    "3671": {
      "op": "dup",
      "defined_out": [
        "spender#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "3672": {
      "op": "len",
      "defined_out": [
        "spender#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "3673": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "spender#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "3674": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "spender#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "3675": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "spender#0",
        "to_encode%0#0"
      ]
    },
    "3676": {
      "op": "intc_2 // 32",
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "3677": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "spender#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "spender#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "3678": {
      "op": "b|",
      "defined_out": [
        "new_spender_allowance#0",
        "spender#0"
      ],
      "stack_out": [
        "spender#0",
        "new_spender_allowance#0"
      ]
    },
    "3679": {
      "op": "frame_dig -3",
      "stack_out": [
        "spender#0",
        "new_spender_allowance#0",
        "from#0 (copy)"
      ]
    },
    "3681": {
      "op": "cover 2",
      "stack_out": [
        "from#0 (copy)",
        "spender#0",
        "new_spender_allowance#0"
      ]
    },
    "3683": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._approve",
      "op": "callsub _approve",
      "defined_out": [
        "{_approve}"
      ],
      "stack_out": [
        "{_approve}"
      ]
    },
    "3686": {
      "op": "pop",
      "stack_out": []
    },
    "3687": {
      "op": "frame_dig -3",
      "stack_out": [
        "from#0 (copy)"
      ]
    },
    "3689": {
      "op": "frame_dig -2",
      "defined_out": [
        "from#0 (copy)",
        "to#0 (copy)"
      ],
      "stack_out": [
        "from#0 (copy)",
        "to#0 (copy)"
      ]
    },
    "3691": {
      "op": "frame_dig -1",
      "stack_out": [
        "from#0 (copy)",
        "to#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "3693": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._transfer",
      "op": "callsub _transfer",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3696": {
      "retsub": true,
      "op": "retsub"
    },
    "3697": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_approve",
      "params": {
        "spender#0": "bytes",
        "value#0": "bytes"
      },
      "block": "arc200_approve",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "3700": {
      "op": "txn Sender",
      "defined_out": [
        "owner#0"
      ],
      "stack_out": [
        "owner#0"
      ]
    },
    "3702": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0",
        "spender#0 (copy)"
      ]
    },
    "3704": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0",
        "spender#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "owner#0",
        "spender#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "3706": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._approve",
      "op": "callsub _approve",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3709": {
      "retsub": true,
      "op": "retsub"
    },
    "3710": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200.arc200_allowance",
      "params": {
        "owner#0": "bytes",
        "spender#0": "bytes"
      },
      "block": "arc200_allowance",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "3713": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "3715": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "3717": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._allowance",
      "op": "callsub _allowance",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3720": {
      "retsub": true,
      "op": "retsub"
    },
    "3721": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "params": {
        "owner#0": "bytes"
      },
      "block": "_balanceOf",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "3724": {
      "op": "bytec 5 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "\"b\""
      ]
    },
    "3726": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"b\"",
        "owner#0 (copy)"
      ],
      "stack_out": [
        "\"b\"",
        "owner#0 (copy)"
      ]
    },
    "3728": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3729": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3730": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3731": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3733": {
      "op": "bnz _balanceOf_after_if_else@2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3736": {
      "op": "bytec_0 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "3737": {
      "op": "swap"
    },
    "3738": {
      "retsub": true,
      "op": "retsub"
    },
    "3739": {
      "block": "_balanceOf_after_if_else@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3741": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3742": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "3743": {
      "op": "swap"
    },
    "3744": {
      "retsub": true,
      "op": "retsub"
    },
    "3745": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._transfer",
      "params": {
        "sender#0": "bytes",
        "recipient#0": "bytes",
        "amount#0": "bytes"
      },
      "block": "_transfer",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "3748": {
      "op": "frame_dig -3",
      "defined_out": [
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0 (copy)"
      ]
    },
    "3750": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "op": "callsub _balanceOf",
      "defined_out": [
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0"
      ]
    },
    "3753": {
      "op": "dup",
      "defined_out": [
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "sender_balance#0"
      ]
    },
    "3754": {
      "op": "frame_dig -2",
      "defined_out": [
        "recipient#0 (copy)",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "sender_balance#0",
        "recipient#0 (copy)"
      ]
    },
    "3756": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._balanceOf",
      "op": "callsub _balanceOf",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "3759": {
      "op": "swap",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender_balance#0"
      ]
    },
    "3760": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender_balance#0",
        "amount#0 (copy)"
      ]
    },
    "3762": {
      "op": "b>=",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "tmp%0#0"
      ]
    },
    "3763": {
      "error": "Insufficient balance at the sender account",
      "op": "assert // Insufficient balance at the sender account",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "3764": {
      "op": "frame_dig -3",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender#0 (copy)"
      ]
    },
    "3766": {
      "op": "frame_dig -2",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender#0 (copy)",
        "recipient#0 (copy)"
      ]
    },
    "3768": {
      "op": "!=",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "tmp%1#0"
      ]
    },
    "3769": {
      "op": "bz _transfer_after_if_else@2",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "3772": {
      "op": "frame_dig 0",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender_balance#0"
      ]
    },
    "3774": {
      "op": "frame_dig -1",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender_balance#0",
        "amount#0 (copy)"
      ]
    },
    "3776": {
      "op": "b-",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0"
      ]
    },
    "3777": {
      "op": "dup",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "3778": {
      "op": "len",
      "defined_out": [
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "value_len%0#0"
      ]
    },
    "3779": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "value_len%0#0",
        "32"
      ]
    },
    "3780": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "len_ok%0#0"
      ]
    },
    "3781": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0"
      ]
    },
    "3782": {
      "op": "intc_2 // 32",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "32"
      ]
    },
    "3783": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "to_encode%0#0",
        "bzero%0#0"
      ]
    },
    "3784": {
      "op": "swap",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%0#0"
      ]
    },
    "3785": {
      "op": "dig 1",
      "defined_out": [
        "bzero%0#0",
        "bzero%0#0 (copy)",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%0#0",
        "bzero%0#0 (copy)"
      ]
    },
    "3787": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "arc4_encoded%0#0"
      ]
    },
    "3788": {
      "op": "bytec 5 // \"b\"",
      "defined_out": [
        "\"b\"",
        "arc4_encoded%0#0",
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "arc4_encoded%0#0",
        "\"b\""
      ]
    },
    "3790": {
      "op": "frame_dig -3",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "arc4_encoded%0#0",
        "\"b\"",
        "sender#0 (copy)"
      ]
    },
    "3792": {
      "op": "concat",
      "defined_out": [
        "arc4_encoded%0#0",
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "arc4_encoded%0#0",
        "tmp%2#0"
      ]
    },
    "3793": {
      "op": "swap",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "tmp%2#0",
        "arc4_encoded%0#0"
      ]
    },
    "3794": {
      "op": "box_put",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0"
      ]
    },
    "3795": {
      "op": "frame_dig 1",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "recipient_balance#0"
      ]
    },
    "3797": {
      "op": "frame_dig -1",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "recipient_balance#0",
        "amount#0 (copy)"
      ]
    },
    "3799": {
      "op": "b+",
      "defined_out": [
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0"
      ]
    },
    "3800": {
      "op": "dup",
      "defined_out": [
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "3801": {
      "op": "len",
      "defined_out": [
        "bzero%0#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%1#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0",
        "value_len%1#0"
      ]
    },
    "3802": {
      "op": "intc_2 // 32",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0",
        "value_len%1#0",
        "32"
      ]
    },
    "3803": {
      "op": "<=",
      "defined_out": [
        "bzero%0#0",
        "len_ok%1#0",
        "recipient_balance#0",
        "sender_balance#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0",
        "len_ok%1#0"
      ]
    },
    "3804": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "bzero%0#0",
        "to_encode%1#0"
      ]
    },
    "3805": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "recipient_balance#0",
        "sender_balance#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "arc4_encoded%1#0"
      ]
    },
    "3806": {
      "op": "bytec 5 // \"b\"",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "arc4_encoded%1#0",
        "\"b\""
      ]
    },
    "3808": {
      "op": "frame_dig -2",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "arc4_encoded%1#0",
        "\"b\"",
        "recipient#0 (copy)"
      ]
    },
    "3810": {
      "op": "concat",
      "defined_out": [
        "arc4_encoded%1#0",
        "recipient_balance#0",
        "sender_balance#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "arc4_encoded%1#0",
        "tmp%3#0"
      ]
    },
    "3811": {
      "op": "swap",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "tmp%3#0",
        "arc4_encoded%1#0"
      ]
    },
    "3812": {
      "op": "box_put",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "3813": {
      "block": "_transfer_after_if_else@2",
      "stack_in": [
        "sender_balance#0",
        "recipient_balance#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender#0 (copy)"
      ]
    },
    "3815": {
      "op": "frame_dig -2",
      "defined_out": [
        "recipient#0 (copy)",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "sender#0 (copy)",
        "recipient#0 (copy)"
      ]
    },
    "3817": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3818": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "encoded_tuple_buffer%2#0",
        "amount#0 (copy)"
      ]
    },
    "3820": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3821": {
      "op": "bytec 24 // method \"arc200_Transfer(address,address,uint256)\"",
      "defined_out": [
        "Method(arc200_Transfer(address,address,uint256))",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "encoded_tuple_buffer%3#0",
        "Method(arc200_Transfer(address,address,uint256))"
      ]
    },
    "3823": {
      "op": "swap",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "Method(arc200_Transfer(address,address,uint256))",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3824": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "event%0#0"
      ]
    },
    "3825": {
      "op": "log",
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0"
      ]
    },
    "3826": {
      "op": "bytec 6 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "sender_balance#0",
        "recipient_balance#0",
        "0x80"
      ]
    },
    "3828": {
      "op": "frame_bury 0"
    },
    "3830": {
      "retsub": true,
      "op": "retsub"
    },
    "3831": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._approvalKey",
      "params": {
        "owner#0": "bytes",
        "spender#0": "bytes"
      },
      "block": "_approvalKey",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "3834": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "3836": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "3838": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3839": {
      "op": "sha256",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "3840": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "3841": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "3842": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0",
        "32"
      ]
    },
    "3843": {
      "op": "==",
      "defined_out": [
        "lengths_equal%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "lengths_equal%0#0"
      ]
    },
    "3844": {
      "error": "invalid size",
      "op": "assert // invalid size",
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "3845": {
      "retsub": true,
      "op": "retsub"
    },
    "3846": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._allowance",
      "params": {
        "owner#0": "bytes",
        "spender#0": "bytes"
      },
      "block": "_allowance",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "3849": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "3851": {
      "op": "frame_dig -1",
      "defined_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "3853": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._approvalKey",
      "op": "callsub _approvalKey",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "3856": {
      "op": "pushbytes \"a\"",
      "defined_out": [
        "\"a\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"a\""
      ]
    },
    "3859": {
      "op": "swap",
      "stack_out": [
        "\"a\"",
        "key#0"
      ]
    },
    "3860": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3861": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3862": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3863": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3865": {
      "op": "bnz _allowance_after_if_else@2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3868": {
      "op": "bytec_0 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "3869": {
      "op": "swap"
    },
    "3870": {
      "retsub": true,
      "op": "retsub"
    },
    "3871": {
      "block": "_allowance_after_if_else@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3873": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3874": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "3875": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "3878": {
      "op": "swap"
    },
    "3879": {
      "retsub": true,
      "op": "retsub"
    },
    "3880": {
      "subroutine": "smart_contracts/security_token/arc200.algo.ts::Arc200._approve",
      "params": {
        "owner#0": "bytes",
        "spender#0": "bytes",
        "amount#0": "bytes"
      },
      "block": "_approve",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "3883": {
      "op": "frame_dig -3",
      "defined_out": [
        "owner#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "3885": {
      "op": "frame_dig -2",
      "defined_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ],
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "3887": {
      "callsub": "smart_contracts/security_token/arc200.algo.ts::Arc200._approvalKey",
      "op": "callsub _approvalKey",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "3890": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "amount#0 (copy)"
      ]
    },
    "3892": {
      "op": "frame_dig -3",
      "stack_out": [
        "key#0",
        "amount#0 (copy)",
        "owner#0 (copy)"
      ]
    },
    "3894": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3895": {
      "op": "frame_dig -2",
      "stack_out": [
        "key#0",
        "encoded_tuple_buffer%2#0",
        "spender#0 (copy)"
      ]
    },
    "3897": {
      "op": "concat",
      "defined_out": [
        "approvalBox#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "approvalBox#0"
      ]
    },
    "3898": {
      "op": "pushbytes \"a\"",
      "defined_out": [
        "\"a\"",
        "approvalBox#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "approvalBox#0",
        "\"a\""
      ]
    },
    "3901": {
      "op": "uncover 2",
      "stack_out": [
        "approvalBox#0",
        "\"a\"",
        "key#0"
      ]
    },
    "3903": {
      "op": "concat",
      "defined_out": [
        "approvalBox#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "approvalBox#0",
        "tmp%0#0"
      ]
    },
    "3904": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "approvalBox#0"
      ]
    },
    "3905": {
      "op": "box_put",
      "stack_out": []
    },
    "3906": {
      "op": "frame_dig -3",
      "stack_out": [
        "owner#0 (copy)"
      ]
    },
    "3908": {
      "op": "frame_dig -2",
      "stack_out": [
        "owner#0 (copy)",
        "spender#0 (copy)"
      ]
    },
    "3910": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "3911": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "amount#0 (copy)"
      ]
    },
    "3913": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3914": {
      "op": "pushbytes 0x1969f865 // method \"arc200_Approval(address,address,uint256)\"",
      "defined_out": [
        "Method(arc200_Approval(address,address,uint256))",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "Method(arc200_Approval(address,address,uint256))"
      ]
    },
    "3920": {
      "op": "swap",
      "stack_out": [
        "Method(arc200_Approval(address,address,uint256))",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3921": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "3922": {
      "op": "log",
      "stack_out": []
    },
    "3923": {
      "op": "bytec 6 // 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "0x80"
      ]
    },
    "3925": {
      "retsub": true,
      "op": "retsub"
    },
    "3926": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "params": {},
      "block": "_ensureDefaultOwner",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3927": {
      "op": "bytec 10 // \"arc88_oi\"",
      "defined_out": [
        "\"arc88_oi\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_oi\""
      ]
    },
    "3929": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3930": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "3932": {
      "op": "bz _ensureDefaultOwner_if_body@2",
      "stack_out": []
    },
    "3935": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3936": {
      "op": "bytec 10 // \"arc88_oi\"",
      "stack_out": [
        "0",
        "\"arc88_oi\""
      ]
    },
    "3938": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3939": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "3940": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3941": {
      "op": "bnz _ensureDefaultOwner_after_if_else@5",
      "stack_out": []
    },
    "3944": {
      "block": "_ensureDefaultOwner_if_body@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3945": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "3946": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3947": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%2#0"
      ]
    },
    "3949": {
      "op": "bnz _ensureDefaultOwner_after_if_else@4",
      "stack_out": []
    },
    "3952": {
      "op": "bytec_2 // \"arc88_o\"",
      "stack_out": [
        "\"arc88_o\""
      ]
    },
    "3953": {
      "op": "global CreatorAddress",
      "defined_out": [
        "\"arc88_o\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"arc88_o\"",
        "new_state_value%0#0"
      ]
    },
    "3955": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3956": {
      "block": "_ensureDefaultOwner_after_if_else@4",
      "stack_in": [],
      "op": "bytec 10 // \"arc88_oi\"",
      "defined_out": [
        "\"arc88_oi\""
      ],
      "stack_out": [
        "\"arc88_oi\""
      ]
    },
    "3958": {
      "op": "bytec 17 // 0x01",
      "defined_out": [
        "\"arc88_oi\"",
        "0x01"
      ],
      "stack_out": [
        "\"arc88_oi\"",
        "0x01"
      ]
    },
    "3960": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3961": {
      "block": "_ensureDefaultOwner_after_if_else@5",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "3962": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_owner",
      "params": {},
      "block": "arc88_owner",
      "stack_in": [],
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "3965": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3966": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "3967": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3968": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3969": {
      "retsub": true,
      "op": "retsub"
    },
    "3970": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_is_owner",
      "params": {
        "query#0": "bytes"
      },
      "block": "arc88_is_owner",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "3973": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "3976": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3977": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "3978": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3979": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "3981": {
      "op": "bnz arc88_is_owner_after_if_else@2",
      "stack_out": []
    },
    "3984": {
      "op": "bytec 9 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "3986": {
      "retsub": true,
      "op": "retsub"
    },
    "3987": {
      "block": "arc88_is_owner_after_if_else@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3988": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "3989": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3990": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "3991": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "3992": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3993": {
      "op": "bz arc88_is_owner_after_if_else@4",
      "stack_out": []
    },
    "3996": {
      "op": "bytec 9 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "3998": {
      "retsub": true,
      "op": "retsub"
    },
    "3999": {
      "block": "arc88_is_owner_after_if_else@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4000": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "4001": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4002": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "4003": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%2#0",
        "query#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "query#0 (copy)"
      ]
    },
    "4005": {
      "op": "==",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "4006": {
      "op": "bytec 9 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "4008": {
      "op": "intc_0 // 0",
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "4009": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "4011": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "4012": {
      "retsub": true,
      "op": "retsub"
    },
    "4013": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_initialize_owner",
      "params": {
        "new_owner#0": "bytes"
      },
      "block": "arc88_initialize_owner",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "4016": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4017": {
      "op": "bytec 10 // \"arc88_oi\"",
      "defined_out": [
        "\"arc88_oi\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_oi\""
      ]
    },
    "4019": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4020": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "4022": {
      "op": "bz arc88_initialize_owner_bool_false@3",
      "stack_out": []
    },
    "4025": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "4026": {
      "op": "bytec 10 // \"arc88_oi\"",
      "stack_out": [
        "0",
        "\"arc88_oi\""
      ]
    },
    "4028": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4029": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "4030": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4031": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "4032": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "4033": {
      "op": "bz arc88_initialize_owner_bool_false@3",
      "stack_out": []
    },
    "4036": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "4037": {
      "block": "arc88_initialize_owner_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "4038": {
      "error": "already_initialized",
      "op": "assert // already_initialized",
      "stack_out": []
    },
    "4039": {
      "op": "frame_dig -1",
      "defined_out": [
        "new_owner#0 (copy)"
      ],
      "stack_out": [
        "new_owner#0 (copy)"
      ]
    },
    "4041": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "new_owner#0 (copy)"
      ],
      "stack_out": [
        "new_owner#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "4042": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "4043": {
      "error": "zero_address_not_allowed",
      "op": "assert // zero_address_not_allowed",
      "stack_out": []
    },
    "4044": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\""
      ],
      "stack_out": [
        "\"arc88_o\""
      ]
    },
    "4045": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"arc88_o\"",
        "new_owner#0 (copy)"
      ]
    },
    "4047": {
      "op": "app_global_put",
      "stack_out": []
    },
    "4048": {
      "op": "bytec 10 // \"arc88_oi\"",
      "defined_out": [
        "\"arc88_oi\""
      ],
      "stack_out": [
        "\"arc88_oi\""
      ]
    },
    "4050": {
      "op": "bytec 17 // 0x01",
      "defined_out": [
        "\"arc88_oi\"",
        "0x01"
      ],
      "stack_out": [
        "\"arc88_oi\"",
        "0x01"
      ]
    },
    "4052": {
      "op": "app_global_put",
      "stack_out": []
    },
    "4053": {
      "retsub": true,
      "op": "retsub"
    },
    "4054": {
      "block": "arc88_initialize_owner_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "4055": {
      "op": "b arc88_initialize_owner_bool_merge@4"
    },
    "4058": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_transfer_ownership",
      "params": {
        "new_owner#0": "bytes"
      },
      "block": "arc88_transfer_ownership",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "4061": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "4064": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4066": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "4067": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "4068": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4069": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "4070": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "4071": {
      "error": "not_owner",
      "op": "assert // not_owner",
      "stack_out": []
    },
    "4072": {
      "op": "frame_dig -1",
      "defined_out": [
        "new_owner#0 (copy)"
      ],
      "stack_out": [
        "new_owner#0 (copy)"
      ]
    },
    "4074": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "new_owner#0 (copy)"
      ],
      "stack_out": [
        "new_owner#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "4075": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "4076": {
      "error": "zero_address_not_allowed",
      "op": "assert // zero_address_not_allowed",
      "stack_out": []
    },
    "4077": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "4078": {
      "op": "bytec_2 // \"arc88_o\"",
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "4079": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "previous#0"
      ],
      "stack_out": [
        "previous#0",
        "maybe_exists%1#0"
      ]
    },
    "4080": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "previous#0"
      ]
    },
    "4081": {
      "op": "bytec_2 // \"arc88_o\"",
      "stack_out": [
        "previous#0",
        "\"arc88_o\""
      ]
    },
    "4082": {
      "op": "frame_dig -1",
      "stack_out": [
        "previous#0",
        "\"arc88_o\"",
        "new_owner#0 (copy)"
      ]
    },
    "4084": {
      "op": "app_global_put",
      "stack_out": [
        "previous#0"
      ]
    },
    "4085": {
      "op": "frame_dig -1",
      "stack_out": [
        "previous#0",
        "new_owner#0 (copy)"
      ]
    },
    "4087": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4088": {
      "op": "bytec 25 // method \"arc88_OwnershipTransferred(address,address)\"",
      "defined_out": [
        "Method(arc88_OwnershipTransferred(address,address))",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferred(address,address))"
      ]
    },
    "4090": {
      "op": "swap",
      "stack_out": [
        "Method(arc88_OwnershipTransferred(address,address))",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4091": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "4092": {
      "op": "log",
      "stack_out": []
    },
    "4093": {
      "retsub": true,
      "op": "retsub"
    },
    "4094": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_renounce_ownership",
      "params": {},
      "block": "arc88_renounce_ownership",
      "stack_in": [],
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "4097": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4099": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "4100": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "4101": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4102": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "4103": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "4104": {
      "error": "not_owner",
      "op": "assert // not_owner",
      "stack_out": []
    },
    "4105": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "4106": {
      "op": "bytec_2 // \"arc88_o\"",
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "4107": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "previous#0"
      ],
      "stack_out": [
        "previous#0",
        "maybe_exists%1#0"
      ]
    },
    "4108": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "previous#0"
      ]
    },
    "4109": {
      "op": "bytec_2 // \"arc88_o\"",
      "stack_out": [
        "previous#0",
        "\"arc88_o\""
      ]
    },
    "4110": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "\"arc88_o\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "previous#0"
      ],
      "stack_out": [
        "previous#0",
        "\"arc88_o\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "4111": {
      "op": "app_global_put",
      "stack_out": [
        "previous#0"
      ]
    },
    "4112": {
      "op": "pushbytes 0x346aa166 // method \"arc88_OwnershipRenounced(address)\"",
      "defined_out": [
        "Method(arc88_OwnershipRenounced(address))",
        "previous#0"
      ],
      "stack_out": [
        "previous#0",
        "Method(arc88_OwnershipRenounced(address))"
      ]
    },
    "4118": {
      "op": "swap",
      "stack_out": [
        "Method(arc88_OwnershipRenounced(address))",
        "previous#0"
      ]
    },
    "4119": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "4120": {
      "op": "log",
      "stack_out": []
    },
    "4121": {
      "retsub": true,
      "op": "retsub"
    },
    "4122": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_transfer_ownership_request",
      "params": {
        "pending#0": "bytes"
      },
      "block": "arc88_transfer_ownership_request",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "4125": {
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "4128": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4130": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "4131": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "4132": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4133": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "4134": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "4135": {
      "error": "not_owner",
      "op": "assert // not_owner",
      "stack_out": []
    },
    "4136": {
      "op": "frame_dig -1",
      "defined_out": [
        "pending#0 (copy)"
      ],
      "stack_out": [
        "pending#0 (copy)"
      ]
    },
    "4138": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "pending#0 (copy)"
      ],
      "stack_out": [
        "pending#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "4139": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "4140": {
      "error": "zero_address_not_allowed",
      "op": "assert // zero_address_not_allowed",
      "stack_out": []
    },
    "4141": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "4142": {
      "op": "bytec 7 // \"arc88_po\"",
      "defined_out": [
        "\"arc88_po\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_po\""
      ]
    },
    "4144": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4145": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "4147": {
      "op": "bz arc88_transfer_ownership_request_after_if_else@3",
      "stack_out": []
    },
    "4150": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "4151": {
      "op": "bytec 7 // \"arc88_po\"",
      "stack_out": [
        "0",
        "\"arc88_po\""
      ]
    },
    "4153": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4154": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "4155": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "stack_out": [
        "maybe_value%2#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "4156": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "4157": {
      "op": "!",
      "defined_out": [
        "not%tmp%3#0"
      ],
      "stack_out": [
        "not%tmp%3#0"
      ]
    },
    "4158": {
      "error": "pending_transfer_exists",
      "op": "assert // pending_transfer_exists",
      "stack_out": []
    },
    "4159": {
      "block": "arc88_transfer_ownership_request_after_if_else@3",
      "stack_in": [],
      "op": "bytec 7 // \"arc88_po\"",
      "defined_out": [
        "\"arc88_po\""
      ],
      "stack_out": [
        "\"arc88_po\""
      ]
    },
    "4161": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"arc88_po\"",
        "pending#0 (copy)"
      ],
      "stack_out": [
        "\"arc88_po\"",
        "pending#0 (copy)"
      ]
    },
    "4163": {
      "op": "app_global_put",
      "stack_out": []
    },
    "4164": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4165": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_o\""
      ]
    },
    "4166": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4167": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "4168": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%3#0",
        "pending#0 (copy)"
      ]
    },
    "4170": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4171": {
      "op": "pushbytes 0x16bf1f91 // method \"arc88_OwnershipTransferRequested(address,address)\"",
      "defined_out": [
        "Method(arc88_OwnershipTransferRequested(address,address))",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferRequested(address,address))"
      ]
    },
    "4177": {
      "op": "swap",
      "stack_out": [
        "Method(arc88_OwnershipTransferRequested(address,address))",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4178": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "4179": {
      "op": "log",
      "stack_out": []
    },
    "4180": {
      "retsub": true,
      "op": "retsub"
    },
    "4181": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_accept_ownership",
      "params": {},
      "block": "arc88_accept_ownership",
      "stack_in": [],
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "4184": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4185": {
      "op": "bytec 7 // \"arc88_po\"",
      "defined_out": [
        "\"arc88_po\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"arc88_po\""
      ]
    },
    "4187": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4188": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "4190": {
      "error": "not_pending_owner",
      "op": "assert // not_pending_owner",
      "stack_out": []
    },
    "4191": {
      "op": "txn Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "4193": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sender#0",
        "0"
      ]
    },
    "4194": {
      "op": "bytec 7 // \"arc88_po\"",
      "stack_out": [
        "sender#0",
        "0",
        "\"arc88_po\""
      ]
    },
    "4196": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4197": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "sender#0",
        "maybe_value%1#0"
      ]
    },
    "4198": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%1#0",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "maybe_value%1#0",
        "sender#0 (copy)"
      ]
    },
    "4200": {
      "op": "==",
      "defined_out": [
        "sender#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%0#0"
      ]
    },
    "4201": {
      "error": "not_pending_owner",
      "op": "assert // not_pending_owner",
      "stack_out": [
        "sender#0"
      ]
    },
    "4202": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sender#0",
        "0"
      ]
    },
    "4203": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "4204": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "previous#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "previous#0",
        "maybe_exists%2#0"
      ]
    },
    "4205": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "sender#0",
        "previous#0"
      ]
    },
    "4206": {
      "op": "bytec_2 // \"arc88_o\"",
      "stack_out": [
        "sender#0",
        "previous#0",
        "\"arc88_o\""
      ]
    },
    "4207": {
      "op": "dig 2",
      "stack_out": [
        "sender#0",
        "previous#0",
        "\"arc88_o\"",
        "sender#0 (copy)"
      ]
    },
    "4209": {
      "op": "app_global_put",
      "stack_out": [
        "sender#0",
        "previous#0"
      ]
    },
    "4210": {
      "op": "bytec 7 // \"arc88_po\"",
      "stack_out": [
        "sender#0",
        "previous#0",
        "\"arc88_po\""
      ]
    },
    "4212": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "\"arc88_po\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "previous#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "previous#0",
        "\"arc88_po\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "4213": {
      "op": "app_global_put",
      "stack_out": [
        "sender#0",
        "previous#0"
      ]
    },
    "4214": {
      "op": "swap",
      "stack_out": [
        "previous#0",
        "sender#0"
      ]
    },
    "4215": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4216": {
      "op": "pushbytes 0xf7e36b37 // method \"arc88_OwnershipTransferAccepted(address,address)\"",
      "defined_out": [
        "Method(arc88_OwnershipTransferAccepted(address,address))",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferAccepted(address,address))"
      ]
    },
    "4222": {
      "op": "dig 1",
      "defined_out": [
        "Method(arc88_OwnershipTransferAccepted(address,address))",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%2#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferAccepted(address,address))",
        "encoded_tuple_buffer%2#0 (copy)"
      ]
    },
    "4224": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "event%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "event%0#0"
      ]
    },
    "4225": {
      "op": "log",
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4226": {
      "op": "bytec 25 // method \"arc88_OwnershipTransferred(address,address)\"",
      "defined_out": [
        "Method(arc88_OwnershipTransferred(address,address))",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(arc88_OwnershipTransferred(address,address))"
      ]
    },
    "4228": {
      "op": "swap",
      "stack_out": [
        "Method(arc88_OwnershipTransferred(address,address))",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4229": {
      "op": "concat",
      "defined_out": [
        "event%1#0"
      ],
      "stack_out": [
        "event%1#0"
      ]
    },
    "4230": {
      "op": "log",
      "stack_out": []
    },
    "4231": {
      "retsub": true,
      "op": "retsub"
    },
    "4232": {
      "subroutine": "smart_contracts/security_token/arc88.algo.ts::Arc88.arc88_cancel_ownership_request",
      "params": {},
      "block": "arc88_cancel_ownership_request",
      "stack_in": [],
      "callsub": "smart_contracts/security_token/arc88.algo.ts::Arc88._ensureDefaultOwner",
      "op": "callsub _ensureDefaultOwner"
    },
    "4235": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4237": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "4238": {
      "op": "bytec_2 // \"arc88_o\"",
      "defined_out": [
        "\"arc88_o\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arc88_o\""
      ]
    },
    "4239": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4240": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "4241": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "4242": {
      "error": "not_owner",
      "op": "assert // not_owner",
      "stack_out": []
    },
    "4243": {
      "op": "bytec 7 // \"arc88_po\"",
      "defined_out": [
        "\"arc88_po\""
      ],
      "stack_out": [
        "\"arc88_po\""
      ]
    },
    "4245": {
      "op": "bytec_0 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "\"arc88_po\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ],
      "stack_out": [
        "\"arc88_po\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "4246": {
      "op": "app_global_put",
      "stack_out": []
    },
    "4247": {
      "retsub": true,
      "op": "retsub"
    }
  }
}